package media

import (
	"crypto/rand"
	"fmt"
	"io"
	"net/url"
	"os"
	"strings"
)

// NewID returns an ID that conforms to the media id specifications
func NewID() (string, error) {
	buff := make([]byte, 16)

	_, err := io.ReadFull(rand.Reader, buff)
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%x-%x-%x-%x-%x-%x", buff[0:4], buff[4:6], buff[6:8], buff[8:10], buff[10:12], buff[12:]), nil
}

// IDRegexPattern represents the pattern that all ID's generated by NewID must match
const IDRegexPattern = `(\d+|[0-9a-f]{8}(-[0-9a-f]{4}){4}-[0-9a-f]{8})`

// SeekerSize returns the size of the provided seeker
func SeekerSize(sk io.Seeker) (int64, error) {
	size, err := sk.Seek(0, os.SEEK_END)
	if err != nil {
		return 0, err
	}
	_, err = sk.Seek(0, os.SEEK_SET)
	return size, err
}

// ParseMediaID parses the media ID from a well formed uri
func ParseMediaID(uri string) (string, error) {
	u, err := url.Parse(uri)
	if err != nil {
		return "", err
	}

	parts := strings.Split(u.Path, "/")
	if len(parts) == 1 {
		return parts[0], nil
	} else if len(parts) != 4 {
		return "", fmt.Errorf("Expected uri of form s3://region/bucket/prefix/name but got %s", uri)
	} else if parts[2] != "media" {
		return "", fmt.Errorf("Expected uri of form s3://<region>/<bucket>/media/<id> but got %s", uri)
	}

	return parts[3], nil
}
