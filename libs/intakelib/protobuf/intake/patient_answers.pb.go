// Code generated by protoc-gen-gogo.
// source: patient_answers.proto
// DO NOT EDIT!

package intake

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PatientAnswerData_Type int32

const (
	PatientAnswerData_MULTIPLE_CHOICE PatientAnswerData_Type = 0
	PatientAnswerData_FREE_TEXT       PatientAnswerData_Type = 1
	PatientAnswerData_AUTOCOMPLETE    PatientAnswerData_Type = 2
	PatientAnswerData_PHOTO_SECTION   PatientAnswerData_Type = 3
)

var PatientAnswerData_Type_name = map[int32]string{
	0: "MULTIPLE_CHOICE",
	1: "FREE_TEXT",
	2: "AUTOCOMPLETE",
	3: "PHOTO_SECTION",
}
var PatientAnswerData_Type_value = map[string]int32{
	"MULTIPLE_CHOICE": 0,
	"FREE_TEXT":       1,
	"AUTOCOMPLETE":    2,
	"PHOTO_SECTION":   3,
}

func (x PatientAnswerData_Type) Enum() *PatientAnswerData_Type {
	p := new(PatientAnswerData_Type)
	*p = x
	return p
}
func (x PatientAnswerData_Type) String() string {
	return proto.EnumName(PatientAnswerData_Type_name, int32(x))
}
func (x *PatientAnswerData_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PatientAnswerData_Type_value, data, "PatientAnswerData_Type")
	if err != nil {
		return err
	}
	*x = PatientAnswerData_Type(value)
	return nil
}

// PatientAnswerData represents a typed, serialized version of a patient answer.
// This type is used by the client to set an answer to a question.
type PatientAnswerData struct {
	Type             *PatientAnswerData_Type `protobuf:"varint,1,req,name=type,enum=intake.PatientAnswerData_Type" json:"type,omitempty"`
	Data             []byte                  `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PatientAnswerData) Reset()         { *m = PatientAnswerData{} }
func (m *PatientAnswerData) String() string { return proto.CompactTextString(m) }
func (*PatientAnswerData) ProtoMessage()    {}

func (m *PatientAnswerData) GetType() PatientAnswerData_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PatientAnswerData_MULTIPLE_CHOICE
}

func (m *PatientAnswerData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// MultipleChoicePatientAnswer represents a patient's answer for a
// multiple choice question, a segmented control question, a single select
// question and a sectioned multiple choice question.
type MultipleChoicePatientAnswer struct {
	AnswerSelections []*MultipleChoicePatientAnswer_Selection `protobuf:"bytes,1,rep,name=answer_selections" json:"answer_selections,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *MultipleChoicePatientAnswer) Reset()         { *m = MultipleChoicePatientAnswer{} }
func (m *MultipleChoicePatientAnswer) String() string { return proto.CompactTextString(m) }
func (*MultipleChoicePatientAnswer) ProtoMessage()    {}

func (m *MultipleChoicePatientAnswer) GetAnswerSelections() []*MultipleChoicePatientAnswer_Selection {
	if m != nil {
		return m.AnswerSelections
	}
	return nil
}

type MultipleChoicePatientAnswer_Selection struct {
	PotentialAnswerId *string `protobuf:"bytes,1,req,name=potential_answer_id" json:"potential_answer_id,omitempty"`
	Text              *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *MultipleChoicePatientAnswer_Selection) Reset()         { *m = MultipleChoicePatientAnswer_Selection{} }
func (m *MultipleChoicePatientAnswer_Selection) String() string { return proto.CompactTextString(m) }
func (*MultipleChoicePatientAnswer_Selection) ProtoMessage()    {}

func (m *MultipleChoicePatientAnswer_Selection) GetPotentialAnswerId() string {
	if m != nil && m.PotentialAnswerId != nil {
		return *m.PotentialAnswerId
	}
	return ""
}

func (m *MultipleChoicePatientAnswer_Selection) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// FreeTextPatientAnswer represents a patient answer for a free text question.
type FreeTextPatientAnswer struct {
	Text             *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FreeTextPatientAnswer) Reset()         { *m = FreeTextPatientAnswer{} }
func (m *FreeTextPatientAnswer) String() string { return proto.CompactTextString(m) }
func (*FreeTextPatientAnswer) ProtoMessage()    {}

func (m *FreeTextPatientAnswer) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

// AutocompletePatientAnswer represents a patient answer for an autocomplete question.
type AutocompletePatientAnswer struct {
	Answers          []string `protobuf:"bytes,1,rep,name=answers" json:"answers,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AutocompletePatientAnswer) Reset()         { *m = AutocompletePatientAnswer{} }
func (m *AutocompletePatientAnswer) String() string { return proto.CompactTextString(m) }
func (*AutocompletePatientAnswer) ProtoMessage()    {}

func (m *AutocompletePatientAnswer) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

// PhotoSectionPatientAnswer represents a patient answer to a photo section. There can be a variable
// number of photo sections entered for a question.
type PhotoSectionPatientAnswer struct {
	Entries          []*PhotoSectionPatientAnswer_PhotoSectionEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *PhotoSectionPatientAnswer) Reset()         { *m = PhotoSectionPatientAnswer{} }
func (m *PhotoSectionPatientAnswer) String() string { return proto.CompactTextString(m) }
func (*PhotoSectionPatientAnswer) ProtoMessage()    {}

func (m *PhotoSectionPatientAnswer) GetEntries() []*PhotoSectionPatientAnswer_PhotoSectionEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// PhotoSectionEntry represents a single fully-populated photo section
// answer by the patient.
type PhotoSectionPatientAnswer_PhotoSectionEntry struct {
	Name             *string                                                        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Photos           []*PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer `protobuf:"bytes,2,rep,name=photos" json:"photos,omitempty"`
	XXX_unrecognized []byte                                                         `json:"-"`
}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry) Reset() {
	*m = PhotoSectionPatientAnswer_PhotoSectionEntry{}
}
func (m *PhotoSectionPatientAnswer_PhotoSectionEntry) String() string {
	return proto.CompactTextString(m)
}
func (*PhotoSectionPatientAnswer_PhotoSectionEntry) ProtoMessage() {}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry) GetPhotos() []*PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer {
	if m != nil {
		return m.Photos
	}
	return nil
}

type PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer struct {
	Link             *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	SlotId           *string `protobuf:"bytes,2,req,name=slot_id" json:"slot_id,omitempty"`
	Name             *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Id               *ID     `protobuf:"bytes,4,req,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) Reset() {
	*m = PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer{}
}
func (m *PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) String() string {
	return proto.CompactTextString(m)
}
func (*PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) ProtoMessage() {}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) GetLink() string {
	if m != nil && m.Link != nil {
		return *m.Link
	}
	return ""
}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) GetSlotId() string {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return ""
}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer) GetId() *ID {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*PatientAnswerData)(nil), "intake.PatientAnswerData")
	proto.RegisterType((*MultipleChoicePatientAnswer)(nil), "intake.MultipleChoicePatientAnswer")
	proto.RegisterType((*MultipleChoicePatientAnswer_Selection)(nil), "intake.MultipleChoicePatientAnswer.Selection")
	proto.RegisterType((*FreeTextPatientAnswer)(nil), "intake.FreeTextPatientAnswer")
	proto.RegisterType((*AutocompletePatientAnswer)(nil), "intake.AutocompletePatientAnswer")
	proto.RegisterType((*PhotoSectionPatientAnswer)(nil), "intake.PhotoSectionPatientAnswer")
	proto.RegisterType((*PhotoSectionPatientAnswer_PhotoSectionEntry)(nil), "intake.PhotoSectionPatientAnswer.PhotoSectionEntry")
	proto.RegisterType((*PhotoSectionPatientAnswer_PhotoSectionEntry_PhotoSlotAnswer)(nil), "intake.PhotoSectionPatientAnswer.PhotoSectionEntry.PhotoSlotAnswer")
	proto.RegisterEnum("intake.PatientAnswerData_Type", PatientAnswerData_Type_name, PatientAnswerData_Type_value)
}
