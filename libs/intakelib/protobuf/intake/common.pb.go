// Code generated by protoc-gen-gogo.
// source: common.proto
// DO NOT EDIT!

package intake

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ID_Type int32

const (
	ID_LOCAL  ID_Type = 0
	ID_SERVER ID_Type = 1
)

var ID_Type_name = map[int32]string{
	0: "LOCAL",
	1: "SERVER",
}
var ID_Type_value = map[string]int32{
	"LOCAL":  0,
	"SERVER": 1,
}

func (x ID_Type) Enum() *ID_Type {
	p := new(ID_Type)
	*p = x
	return p
}
func (x ID_Type) String() string {
	return proto.EnumName(ID_Type_name, int32(x))
}
func (x *ID_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ID_Type_value, data, "ID_Type")
	if err != nil {
		return err
	}
	*x = ID_Type(value)
	return nil
}

// Body represents content to be used in the body of a layout unit.
type Body struct {
	Text             *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Button           *Button `protobuf:"bytes,2,opt,name=button" json:"button,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Body) Reset()         { *m = Body{} }
func (m *Body) String() string { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()    {}

func (m *Body) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Body) GetButton() *Button {
	if m != nil {
		return m.Button
	}
	return nil
}

// Button represents content to be used within a button of the layout unit.
type Button struct {
	Text             *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	TapLink          *string `protobuf:"bytes,2,opt,name=tap_link" json:"tap_link,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Button) Reset()         { *m = Button{} }
func (m *Button) String() string { return proto.CompactTextString(m) }
func (*Button) ProtoMessage()    {}

func (m *Button) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *Button) GetTapLink() string {
	if m != nil && m.TapLink != nil {
		return *m.TapLink
	}
	return ""
}

// ID represents a unique identifier with an indicator of whether it is a local id
// as specified by the client or a server provided id.
type ID struct {
	Id               *string  `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type             *ID_Type `protobuf:"varint,2,opt,name=type,enum=intake.ID_Type,def=1" json:"type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}

const Default_ID_Type ID_Type = ID_SERVER

func (m *ID) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ID) GetType() ID_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_ID_Type
}

func init() {
	proto.RegisterType((*Body)(nil), "intake.Body")
	proto.RegisterType((*Button)(nil), "intake.Button")
	proto.RegisterType((*ID)(nil), "intake.ID")
	proto.RegisterEnum("intake.ID_Type", ID_Type_name, ID_Type_value)
}
