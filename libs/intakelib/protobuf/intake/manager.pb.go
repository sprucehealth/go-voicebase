// Code generated by protoc-gen-gogo.
// source: manager.proto
// DO NOT EDIT!

/*
Package intake is a generated protocol buffer package.

It is generated from these files:
	manager.proto
	status.proto
	common.proto
	popup.proto
	questions.proto
	patient_answers.proto
	screens.proto
	id_replacement.proto

It has these top-level messages:
	VisitData
	KeyValuePair
	ValidateRequirementsResult
	VisitStatus
	Body
	Button
	ID
	InfoPopup
	QuestionData
	ClientAnswerData
	CommonQuestionInfo
	MultipleChoiceQuestion
	FreeTextQuestion
	AutocompleteQuestion
	PhotoSectionQuestion
	PatientAnswerData
	MultipleChoicePatientAnswer
	FreeTextPatientAnswer
	AutocompletePatientAnswer
	PhotoSectionPatientAnswer
	ScreenIDData
	ScreenData
	CommonScreenInfo
	QuestionScreen
	PhotoScreen
	PharmacyScreen
	TriageScreen
	ImagePopupScreen
	GenericPopupScreen
	VisitOverviewScreen
	IDReplacementData
	PhotoIDReplacement
*/
package intake

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VisitData_Platform int32

const (
	VisitData_ANDROID VisitData_Platform = 1
	VisitData_IOS     VisitData_Platform = 2
)

var VisitData_Platform_name = map[int32]string{
	1: "ANDROID",
	2: "IOS",
}
var VisitData_Platform_value = map[string]int32{
	"ANDROID": 1,
	"IOS":     2,
}

func (x VisitData_Platform) Enum() *VisitData_Platform {
	p := new(VisitData_Platform)
	*p = x
	return p
}
func (x VisitData_Platform) String() string {
	return proto.EnumName(VisitData_Platform_name, int32(x))
}
func (x *VisitData_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VisitData_Platform_value, data, "VisitData_Platform")
	if err != nil {
		return err
	}
	*x = VisitData_Platform(value)
	return nil
}

type ValidateRequirementsResult_Status int32

const (
	ValidateRequirementsResult_OK    ValidateRequirementsResult_Status = 0
	ValidateRequirementsResult_ERROR ValidateRequirementsResult_Status = 1
)

var ValidateRequirementsResult_Status_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var ValidateRequirementsResult_Status_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x ValidateRequirementsResult_Status) Enum() *ValidateRequirementsResult_Status {
	p := new(ValidateRequirementsResult_Status)
	*p = x
	return p
}
func (x ValidateRequirementsResult_Status) String() string {
	return proto.EnumName(ValidateRequirementsResult_Status_name, int32(x))
}
func (x *ValidateRequirementsResult_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ValidateRequirementsResult_Status_value, data, "ValidateRequirementsResult_Status")
	if err != nil {
		return err
	}
	*x = ValidateRequirementsResult_Status(value)
	return nil
}

// VisitData represents the data with which to initialize the
// visit manager to provide it with all that it needs to initialize
// itself.
type VisitData struct {
	PatientVisitId *int64 `protobuf:"varint,1,req,name=patient_visit_id" json:"patient_visit_id,omitempty"`
	Layout         []byte `protobuf:"bytes,2,req,name=layout" json:"layout,omitempty"`
	// status represents the server provided status of the visit.
	IsSubmitted      *bool               `protobuf:"varint,3,req,name=is_submitted" json:"is_submitted,omitempty"`
	Pairs            []*KeyValuePair     `protobuf:"bytes,4,rep,name=pairs" json:"pairs,omitempty"`
	Platform         *VisitData_Platform `protobuf:"varint,5,req,name=platform,enum=intake.VisitData_Platform" json:"platform,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *VisitData) Reset()         { *m = VisitData{} }
func (m *VisitData) String() string { return proto.CompactTextString(m) }
func (*VisitData) ProtoMessage()    {}

func (m *VisitData) GetPatientVisitId() int64 {
	if m != nil && m.PatientVisitId != nil {
		return *m.PatientVisitId
	}
	return 0
}

func (m *VisitData) GetLayout() []byte {
	if m != nil {
		return m.Layout
	}
	return nil
}

func (m *VisitData) GetIsSubmitted() bool {
	if m != nil && m.IsSubmitted != nil {
		return *m.IsSubmitted
	}
	return false
}

func (m *VisitData) GetPairs() []*KeyValuePair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func (m *VisitData) GetPlatform() VisitData_Platform {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return VisitData_ANDROID
}

// KeyValuePair is used for the client to communicate
// specific type of information in key/value to the intakelib that is
// used to inform the business logic. This pertains to information
// outside of the question/answer flow (such as user's gender, whether or not
// patient has pharmacy set, etc.)
type KeyValuePair struct {
	Key              *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value            []byte  `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}

func (m *KeyValuePair) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// ValidateRequirementsResult is used to convey the result
// of a requirements validation call.
type ValidateRequirementsResult struct {
	Status           *ValidateRequirementsResult_Status `protobuf:"varint,1,req,name=status,enum=intake.ValidateRequirementsResult_Status" json:"status,omitempty"`
	Message          *string                            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *ValidateRequirementsResult) Reset()         { *m = ValidateRequirementsResult{} }
func (m *ValidateRequirementsResult) String() string { return proto.CompactTextString(m) }
func (*ValidateRequirementsResult) ProtoMessage()    {}

func (m *ValidateRequirementsResult) GetStatus() ValidateRequirementsResult_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ValidateRequirementsResult_OK
}

func (m *ValidateRequirementsResult) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*VisitData)(nil), "intake.VisitData")
	proto.RegisterType((*KeyValuePair)(nil), "intake.KeyValuePair")
	proto.RegisterType((*ValidateRequirementsResult)(nil), "intake.ValidateRequirementsResult")
	proto.RegisterEnum("intake.VisitData_Platform", VisitData_Platform_name, VisitData_Platform_value)
	proto.RegisterEnum("intake.ValidateRequirementsResult_Status", ValidateRequirementsResult_Status_name, ValidateRequirementsResult_Status_value)
}
