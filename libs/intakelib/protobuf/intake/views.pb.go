// Code generated by protoc-gen-gogo.
// source: views.proto
// DO NOT EDIT!

/*
Package intake is a generated protocol buffer package.

It is generated from these files:
	views.proto
	status.proto
	common.proto
	popup.proto
	questions.proto
	patient_answers.proto
	screens.proto

It has these top-level messages:
	ViewData
	CommonViewInfo
	NumberedView
*/
package intake

import proto "github.com/gogo/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ViewData_Type int32

const (
	ViewData_NUMBERED ViewData_Type = 0
)

var ViewData_Type_name = map[int32]string{
	0: "NUMBERED",
}
var ViewData_Type_value = map[string]int32{
	"NUMBERED": 0,
}

func (x ViewData_Type) Enum() *ViewData_Type {
	p := new(ViewData_Type)
	*p = x
	return p
}
func (x ViewData_Type) String() string {
	return proto.EnumName(ViewData_Type_name, int32(x))
}
func (x *ViewData_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ViewData_Type_value, data, "ViewData_Type")
	if err != nil {
		return err
	}
	*x = ViewData_Type(value)
	return nil
}

// ViewData represents a typed, serialized version of a server-side view.
// The type is used to infer the serialized data in the byte array. This makes it
// possible to lookup the right model to use to deserialize the data into.
type ViewData struct {
	Type             *ViewData_Type `protobuf:"varint,1,req,name=type,enum=intake.ViewData_Type" json:"type,omitempty"`
	Data             []byte         `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ViewData) Reset()         { *m = ViewData{} }
func (m *ViewData) String() string { return proto.CompactTextString(m) }
func (*ViewData) ProtoMessage()    {}

func (m *ViewData) GetType() ViewData_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ViewData_NUMBERED
}

func (m *ViewData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// CommonViewInfo comprises the fields common to all views defined.
type CommonViewInfo struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommonViewInfo) Reset()         { *m = CommonViewInfo{} }
func (m *CommonViewInfo) String() string { return proto.CompactTextString(m) }
func (*CommonViewInfo) ProtoMessage()    {}

func (m *CommonViewInfo) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

// NumberedView represents a view to display numbered information.
type NumberedView struct {
	CommonViewInfo   *CommonViewInfo `protobuf:"bytes,1,req,name=common_view_info" json:"common_view_info,omitempty"`
	ElementStyle     *string         `protobuf:"bytes,2,req,name=element_style" json:"element_style,omitempty"`
	Number           *int32          `protobuf:"varint,3,req,name=number" json:"number,omitempty"`
	Text             *string         `protobuf:"bytes,4,req,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *NumberedView) Reset()         { *m = NumberedView{} }
func (m *NumberedView) String() string { return proto.CompactTextString(m) }
func (*NumberedView) ProtoMessage()    {}

func (m *NumberedView) GetCommonViewInfo() *CommonViewInfo {
	if m != nil {
		return m.CommonViewInfo
	}
	return nil
}

func (m *NumberedView) GetElementStyle() string {
	if m != nil && m.ElementStyle != nil {
		return *m.ElementStyle
	}
	return ""
}

func (m *NumberedView) GetNumber() int32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *NumberedView) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func init() {
	proto.RegisterEnum("intake.ViewData_Type", ViewData_Type_name, ViewData_Type_value)
}
