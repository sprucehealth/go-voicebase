// Code generated by protoc-gen-gogo.
// source: sync.proto
// DO NOT EDIT!

/*
	Package sync is a generated protocol buffer package.

	It is generated from these files:
		sync.proto

	It has these top-level messages:
		Config
		TagMappingItem
		HintToken
		Initiate
		Event
		PatientAddEvent
		Patient
		PatientUpdatedEvent
		Phone
*/
package sync

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Source represents where the patient is coming from
type Source int32

const (
	SOURCE_UNKNOWN  Source = 0
	SOURCE_DRCHRONO Source = 1
	SOURCE_HINT     Source = 2
	SOURCE_ELATION  Source = 3
	SOURCE_CSV      Source = 4
)

var Source_name = map[int32]string{
	0: "SOURCE_UNKNOWN",
	1: "SOURCE_DRCHRONO",
	2: "SOURCE_HINT",
	3: "SOURCE_ELATION",
	4: "SOURCE_CSV",
}
var Source_value = map[string]int32{
	"SOURCE_UNKNOWN":  0,
	"SOURCE_DRCHRONO": 1,
	"SOURCE_HINT":     2,
	"SOURCE_ELATION":  3,
	"SOURCE_CSV":      4,
}

func (Source) EnumDescriptor() ([]byte, []int) { return fileDescriptorSync, []int{0} }

type Config_ThreadCreationType int32

const (
	THREAD_CREATION_TYPE_UKNOWN   Config_ThreadCreationType = 0
	THREAD_CREATION_TYPE_STANDARD Config_ThreadCreationType = 1
	THREAD_CREATION_TYPE_SECURE   Config_ThreadCreationType = 2
)

var Config_ThreadCreationType_name = map[int32]string{
	0: "THREAD_CREATION_TYPE_UKNOWN",
	1: "THREAD_CREATION_TYPE_STANDARD",
	2: "THREAD_CREATION_TYPE_SECURE",
}
var Config_ThreadCreationType_value = map[string]int32{
	"THREAD_CREATION_TYPE_UKNOWN":   0,
	"THREAD_CREATION_TYPE_STANDARD": 1,
	"THREAD_CREATION_TYPE_SECURE":   2,
}

func (Config_ThreadCreationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSync, []int{0, 0}
}

type Event_DeprecatedEventType int32

const (
	EVENT_TYPE_UNKNOWN     Event_DeprecatedEventType = 0
	EVENT_TYPE_PATIENT_ADD Event_DeprecatedEventType = 1
)

var Event_DeprecatedEventType_name = map[int32]string{
	0: "EVENT_TYPE_UNKNOWN",
	1: "EVENT_TYPE_PATIENT_ADD",
}
var Event_DeprecatedEventType_value = map[string]int32{
	"EVENT_TYPE_UNKNOWN":     0,
	"EVENT_TYPE_PATIENT_ADD": 1,
}

func (Event_DeprecatedEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSync, []int{4, 0}
}

type Patient_Gender int32

const (
	GENDER_UNKNOWN Patient_Gender = 0
	GENDER_MALE    Patient_Gender = 1
	GENDER_FEMALE  Patient_Gender = 2
	GENDER_OTHER   Patient_Gender = 3
)

var Patient_Gender_name = map[int32]string{
	0: "GENDER_UNKNOWN",
	1: "GENDER_MALE",
	2: "GENDER_FEMALE",
	3: "GENDER_OTHER",
}
var Patient_Gender_value = map[string]int32{
	"GENDER_UNKNOWN": 0,
	"GENDER_MALE":    1,
	"GENDER_FEMALE":  2,
	"GENDER_OTHER":   3,
}

func (Patient_Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptorSync, []int{6, 0} }

type Phone_PhoneType int32

const (
	PHONE_TYPE_UNKNOWN Phone_PhoneType = 0
	PHONE_TYPE_HOME    Phone_PhoneType = 1
	PHONE_TYPE_MOBILE  Phone_PhoneType = 2
	PHONE_TYPE_OFFICE  Phone_PhoneType = 3
)

var Phone_PhoneType_name = map[int32]string{
	0: "PHONE_TYPE_UNKNOWN",
	1: "PHONE_TYPE_HOME",
	2: "PHONE_TYPE_MOBILE",
	3: "PHONE_TYPE_OFFICE",
}
var Phone_PhoneType_value = map[string]int32{
	"PHONE_TYPE_UNKNOWN": 0,
	"PHONE_TYPE_HOME":    1,
	"PHONE_TYPE_MOBILE":  2,
	"PHONE_TYPE_OFFICE":  3,
}

func (Phone_PhoneType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSync, []int{8, 0} }

// Config represents the sync config for a particular organization
type Config struct {
	Source               Source                    `protobuf:"varint,1,opt,name=source,proto3,enum=sync.Source" json:"source,omitempty"`
	OrganizationEntityID string                    `protobuf:"bytes,2,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	ThreadCreationType   Config_ThreadCreationType `protobuf:"varint,3,opt,name=thread_creation_type,proto3,enum=sync.Config_ThreadCreationType" json:"thread_creation_type,omitempty"`
	// Types that are valid to be assigned to Token:
	//	*Config_Hint
	Token       isConfig_Token    `protobuf_oneof:"token"`
	TagMappings []*TagMappingItem `protobuf:"bytes,6,rep,name=tag_mappings" json:"tag_mappings,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{0} }

type isConfig_Token interface {
	isConfig_Token()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Config_Hint struct {
	Hint *HintToken `protobuf:"bytes,5,opt,name=hint,oneof"`
}

func (*Config_Hint) isConfig_Token() {}

func (m *Config) GetToken() isConfig_Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Config) GetHint() *HintToken {
	if x, ok := m.GetToken().(*Config_Hint); ok {
		return x.Hint
	}
	return nil
}

func (m *Config) GetTagMappings() []*TagMappingItem {
	if m != nil {
		return m.TagMappings
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Config) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Config_OneofMarshaler, _Config_OneofUnmarshaler, _Config_OneofSizer, []interface{}{
		(*Config_Hint)(nil),
	}
}

func _Config_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Config)
	// token
	switch x := m.Token.(type) {
	case *Config_Hint:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hint); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Config.Token has unexpected type %T", x)
	}
	return nil
}

func _Config_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Config)
	switch tag {
	case 5: // token.hint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HintToken)
		err := b.DecodeMessage(msg)
		m.Token = &Config_Hint{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Config_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Config)
	// token
	switch x := m.Token.(type) {
	case *Config_Hint:
		s := proto.Size(x.Hint)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TagMappingItem describes how to map a attributes from the external system to tags
// associated with the conversation created for the patient in our system.
type TagMappingItem struct {
	// Types that are valid to be assigned to Key:
	//	*TagMappingItem_ProviderID
	Key isTagMappingItem_Key `protobuf_oneof:"key"`
	Tag string               `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *TagMappingItem) Reset()                    { *m = TagMappingItem{} }
func (*TagMappingItem) ProtoMessage()               {}
func (*TagMappingItem) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{1} }

type isTagMappingItem_Key interface {
	isTagMappingItem_Key()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TagMappingItem_ProviderID struct {
	ProviderID string `protobuf:"bytes,1,opt,name=provider_id,proto3,oneof"`
}

func (*TagMappingItem_ProviderID) isTagMappingItem_Key() {}

func (m *TagMappingItem) GetKey() isTagMappingItem_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TagMappingItem) GetProviderID() string {
	if x, ok := m.GetKey().(*TagMappingItem_ProviderID); ok {
		return x.ProviderID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TagMappingItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TagMappingItem_OneofMarshaler, _TagMappingItem_OneofUnmarshaler, _TagMappingItem_OneofSizer, []interface{}{
		(*TagMappingItem_ProviderID)(nil),
	}
}

func _TagMappingItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TagMappingItem)
	// key
	switch x := m.Key.(type) {
	case *TagMappingItem_ProviderID:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ProviderID)
	case nil:
	default:
		return fmt.Errorf("TagMappingItem.Key has unexpected type %T", x)
	}
	return nil
}

func _TagMappingItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TagMappingItem)
	switch tag {
	case 1: // key.provider_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &TagMappingItem_ProviderID{x}
		return true, err
	default:
		return false, nil
	}
}

func _TagMappingItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TagMappingItem)
	// key
	switch x := m.Key.(type) {
	case *TagMappingItem_ProviderID:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProviderID)))
		n += len(x.ProviderID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// HintToken represents the token information pertaining to a particular practice
type HintToken struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,proto3" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,proto3" json:"refresh_token,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,proto3" json:"expires_in,omitempty"`
	PracticeID   string `protobuf:"bytes,4,opt,name=practice_id,proto3" json:"practice_id,omitempty"`
}

func (m *HintToken) Reset()                    { *m = HintToken{} }
func (*HintToken) ProtoMessage()               {}
func (*HintToken) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{2} }

// Initiate represents the initial sync between the external component and Spruce.
type Initiate struct {
	Source               Source `protobuf:"varint,1,opt,name=source,proto3,enum=sync.Source" json:"source,omitempty"`
	OrganizationEntityID string `protobuf:"bytes,2,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
}

func (m *Initiate) Reset()                    { *m = Initiate{} }
func (*Initiate) ProtoMessage()               {}
func (*Initiate) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{3} }

// Event represents the sync event that our system should process.
type Event struct {
	Type                 Event_DeprecatedEventType `protobuf:"varint,1,opt,name=type,proto3,enum=sync.Event_DeprecatedEventType" json:"type,omitempty"`
	Source               Source                    `protobuf:"varint,2,opt,name=source,proto3,enum=sync.Source" json:"source,omitempty"`
	OrganizationEntityID string                    `protobuf:"bytes,3,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_PatientAddEvent
	//	*Event_PatientUpdateEvent
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{4} }

type isEvent_Event interface {
	isEvent_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_PatientAddEvent struct {
	PatientAddEvent *PatientAddEvent `protobuf:"bytes,4,opt,name=patient_add_event,oneof"`
}
type Event_PatientUpdateEvent struct {
	PatientUpdateEvent *PatientUpdatedEvent `protobuf:"bytes,5,opt,name=patient_update_event,oneof"`
}

func (*Event_PatientAddEvent) isEvent_Event()    {}
func (*Event_PatientUpdateEvent) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetPatientAddEvent() *PatientAddEvent {
	if x, ok := m.GetEvent().(*Event_PatientAddEvent); ok {
		return x.PatientAddEvent
	}
	return nil
}

func (m *Event) GetPatientUpdateEvent() *PatientUpdatedEvent {
	if x, ok := m.GetEvent().(*Event_PatientUpdateEvent); ok {
		return x.PatientUpdateEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_PatientAddEvent)(nil),
		(*Event_PatientUpdateEvent)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_PatientAddEvent:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PatientAddEvent); err != nil {
			return err
		}
	case *Event_PatientUpdateEvent:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PatientUpdateEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 4: // event.patient_add_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatientAddEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_PatientAddEvent{msg}
		return true, err
	case 5: // event.patient_update_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatientUpdatedEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_PatientUpdateEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// event
	switch x := m.Event.(type) {
	case *Event_PatientAddEvent:
		s := proto.Size(x.PatientAddEvent)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_PatientUpdateEvent:
		s := proto.Size(x.PatientUpdateEvent)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// PatientAddEvent represents an event to add a list of patients to our system
type PatientAddEvent struct {
	Patients           []*Patient `protobuf:"bytes,1,rep,name=patients" json:"patients,omitempty"`
	AutoInvitePatients bool       `protobuf:"varint,2,opt,name=auto_invite_patients,proto3" json:"auto_invite_patients,omitempty"`
}

func (m *PatientAddEvent) Reset()                    { *m = PatientAddEvent{} }
func (*PatientAddEvent) ProtoMessage()               {}
func (*PatientAddEvent) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{5} }

func (m *PatientAddEvent) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

// Patient represents a standard form for a patient from different sources.
type Patient struct {
	ID               string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName        string         `protobuf:"bytes,2,opt,name=first_name,proto3" json:"first_name,omitempty"`
	LastName         string         `protobuf:"bytes,3,opt,name=last_name,proto3" json:"last_name,omitempty"`
	MiddleName       string         `protobuf:"bytes,4,opt,name=middle_name,proto3" json:"middle_name,omitempty"`
	EmailAddresses   []string       `protobuf:"bytes,5,rep,name=email_addresses" json:"email_addresses,omitempty"`
	PhoneNumbers     []*Phone       `protobuf:"bytes,6,rep,name=phone_numbers" json:"phone_numbers,omitempty"`
	ExternalURL      string         `protobuf:"bytes,7,opt,name=external_url,proto3" json:"external_url,omitempty"`
	LastModifiedTime uint64         `protobuf:"varint,8,opt,name=last_modified_time,proto3" json:"last_modified_time,omitempty"`
	CreatedTime      uint64         `protobuf:"varint,9,opt,name=created_time,proto3" json:"created_time,omitempty"`
	DOB              *Patient_Date  `protobuf:"bytes,10,opt,name=dob" json:"dob,omitempty"`
	Gender           Patient_Gender `protobuf:"varint,11,opt,name=gender,proto3,enum=sync.Patient_Gender" json:"gender,omitempty"`
	Tags             []string       `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty"`
}

func (m *Patient) Reset()                    { *m = Patient{} }
func (*Patient) ProtoMessage()               {}
func (*Patient) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{6} }

func (m *Patient) GetPhoneNumbers() []*Phone {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

func (m *Patient) GetDOB() *Patient_Date {
	if m != nil {
		return m.DOB
	}
	return nil
}

type Patient_Date struct {
	Day   uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Year  uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (m *Patient_Date) Reset()                    { *m = Patient_Date{} }
func (*Patient_Date) ProtoMessage()               {}
func (*Patient_Date) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{6, 0} }

// PatientUpdatedEvent represents an event to update a list of existing patients in our system.
type PatientUpdatedEvent struct {
	Patients           []*Patient `protobuf:"bytes,1,rep,name=patients" json:"patients,omitempty"`
	AutoInvitePatients bool       `protobuf:"varint,2,opt,name=auto_invite_patients,proto3" json:"auto_invite_patients,omitempty"`
}

func (m *PatientUpdatedEvent) Reset()                    { *m = PatientUpdatedEvent{} }
func (*PatientUpdatedEvent) ProtoMessage()               {}
func (*PatientUpdatedEvent) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{7} }

func (m *PatientUpdatedEvent) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

type Phone struct {
	Type   Phone_PhoneType `protobuf:"varint,4,opt,name=type,proto3,enum=sync.Phone_PhoneType" json:"type,omitempty"`
	Number string          `protobuf:"bytes,5,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Phone) Reset()                    { *m = Phone{} }
func (*Phone) ProtoMessage()               {}
func (*Phone) Descriptor() ([]byte, []int) { return fileDescriptorSync, []int{8} }

func init() {
	proto.RegisterType((*Config)(nil), "sync.Config")
	proto.RegisterType((*TagMappingItem)(nil), "sync.TagMappingItem")
	proto.RegisterType((*HintToken)(nil), "sync.HintToken")
	proto.RegisterType((*Initiate)(nil), "sync.Initiate")
	proto.RegisterType((*Event)(nil), "sync.Event")
	proto.RegisterType((*PatientAddEvent)(nil), "sync.PatientAddEvent")
	proto.RegisterType((*Patient)(nil), "sync.Patient")
	proto.RegisterType((*Patient_Date)(nil), "sync.Patient.Date")
	proto.RegisterType((*PatientUpdatedEvent)(nil), "sync.PatientUpdatedEvent")
	proto.RegisterType((*Phone)(nil), "sync.Phone")
	proto.RegisterEnum("sync.Source", Source_name, Source_value)
	proto.RegisterEnum("sync.Config_ThreadCreationType", Config_ThreadCreationType_name, Config_ThreadCreationType_value)
	proto.RegisterEnum("sync.Event_DeprecatedEventType", Event_DeprecatedEventType_name, Event_DeprecatedEventType_value)
	proto.RegisterEnum("sync.Patient_Gender", Patient_Gender_name, Patient_Gender_value)
	proto.RegisterEnum("sync.Phone_PhoneType", Phone_PhoneType_name, Phone_PhoneType_value)
}
func (x Source) String() string {
	s, ok := Source_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Config_ThreadCreationType) String() string {
	s, ok := Config_ThreadCreationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Event_DeprecatedEventType) String() string {
	s, ok := Event_DeprecatedEventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Patient_Gender) String() string {
	s, ok := Patient_Gender_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Phone_PhoneType) String() string {
	s, ok := Phone_PhoneType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.ThreadCreationType != that1.ThreadCreationType {
		return false
	}
	if that1.Token == nil {
		if this.Token != nil {
			return false
		}
	} else if this.Token == nil {
		return false
	} else if !this.Token.Equal(that1.Token) {
		return false
	}
	if len(this.TagMappings) != len(that1.TagMappings) {
		return false
	}
	for i := range this.TagMappings {
		if !this.TagMappings[i].Equal(that1.TagMappings[i]) {
			return false
		}
	}
	return true
}
func (this *Config_Hint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config_Hint)
	if !ok {
		that2, ok := that.(Config_Hint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Hint.Equal(that1.Hint) {
		return false
	}
	return true
}
func (this *TagMappingItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TagMappingItem)
	if !ok {
		that2, ok := that.(TagMappingItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Key == nil {
		if this.Key != nil {
			return false
		}
	} else if this.Key == nil {
		return false
	} else if !this.Key.Equal(that1.Key) {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	return true
}
func (this *TagMappingItem_ProviderID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TagMappingItem_ProviderID)
	if !ok {
		that2, ok := that.(TagMappingItem_ProviderID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProviderID != that1.ProviderID {
		return false
	}
	return true
}
func (this *HintToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HintToken)
	if !ok {
		that2, ok := that.(HintToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	if this.RefreshToken != that1.RefreshToken {
		return false
	}
	if this.ExpiresIn != that1.ExpiresIn {
		return false
	}
	if this.PracticeID != that1.PracticeID {
		return false
	}
	return true
}
func (this *Initiate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Initiate)
	if !ok {
		that2, ok := that.(Initiate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	return true
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *Event_PatientAddEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_PatientAddEvent)
	if !ok {
		that2, ok := that.(Event_PatientAddEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PatientAddEvent.Equal(that1.PatientAddEvent) {
		return false
	}
	return true
}
func (this *Event_PatientUpdateEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_PatientUpdateEvent)
	if !ok {
		that2, ok := that.(Event_PatientUpdateEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PatientUpdateEvent.Equal(that1.PatientUpdateEvent) {
		return false
	}
	return true
}
func (this *PatientAddEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PatientAddEvent)
	if !ok {
		that2, ok := that.(PatientAddEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Patients) != len(that1.Patients) {
		return false
	}
	for i := range this.Patients {
		if !this.Patients[i].Equal(that1.Patients[i]) {
			return false
		}
	}
	if this.AutoInvitePatients != that1.AutoInvitePatients {
		return false
	}
	return true
}
func (this *Patient) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Patient)
	if !ok {
		that2, ok := that.(Patient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.MiddleName != that1.MiddleName {
		return false
	}
	if len(this.EmailAddresses) != len(that1.EmailAddresses) {
		return false
	}
	for i := range this.EmailAddresses {
		if this.EmailAddresses[i] != that1.EmailAddresses[i] {
			return false
		}
	}
	if len(this.PhoneNumbers) != len(that1.PhoneNumbers) {
		return false
	}
	for i := range this.PhoneNumbers {
		if !this.PhoneNumbers[i].Equal(that1.PhoneNumbers[i]) {
			return false
		}
	}
	if this.ExternalURL != that1.ExternalURL {
		return false
	}
	if this.LastModifiedTime != that1.LastModifiedTime {
		return false
	}
	if this.CreatedTime != that1.CreatedTime {
		return false
	}
	if !this.DOB.Equal(that1.DOB) {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *Patient_Date) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Patient_Date)
	if !ok {
		that2, ok := that.(Patient_Date)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	return true
}
func (this *PatientUpdatedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PatientUpdatedEvent)
	if !ok {
		that2, ok := that.(PatientUpdatedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Patients) != len(that1.Patients) {
		return false
	}
	for i := range this.Patients {
		if !this.Patients[i].Equal(that1.Patients[i]) {
			return false
		}
	}
	if this.AutoInvitePatients != that1.AutoInvitePatients {
		return false
	}
	return true
}
func (this *Phone) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Phone)
	if !ok {
		that2, ok := that.(Phone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	return true
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&sync.Config{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "ThreadCreationType: "+fmt.Sprintf("%#v", this.ThreadCreationType)+",\n")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	if this.TagMappings != nil {
		s = append(s, "TagMappings: "+fmt.Sprintf("%#v", this.TagMappings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Config_Hint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sync.Config_Hint{` +
		`Hint:` + fmt.Sprintf("%#v", this.Hint) + `}`}, ", ")
	return s
}
func (this *TagMappingItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sync.TagMappingItem{")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagMappingItem_ProviderID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sync.TagMappingItem_ProviderID{` +
		`ProviderID:` + fmt.Sprintf("%#v", this.ProviderID) + `}`}, ", ")
	return s
}
func (this *HintToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sync.HintToken{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "RefreshToken: "+fmt.Sprintf("%#v", this.RefreshToken)+",\n")
	s = append(s, "ExpiresIn: "+fmt.Sprintf("%#v", this.ExpiresIn)+",\n")
	s = append(s, "PracticeID: "+fmt.Sprintf("%#v", this.PracticeID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Initiate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sync.Initiate{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&sync.Event{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_PatientAddEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sync.Event_PatientAddEvent{` +
		`PatientAddEvent:` + fmt.Sprintf("%#v", this.PatientAddEvent) + `}`}, ", ")
	return s
}
func (this *Event_PatientUpdateEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&sync.Event_PatientUpdateEvent{` +
		`PatientUpdateEvent:` + fmt.Sprintf("%#v", this.PatientUpdateEvent) + `}`}, ", ")
	return s
}
func (this *PatientAddEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sync.PatientAddEvent{")
	if this.Patients != nil {
		s = append(s, "Patients: "+fmt.Sprintf("%#v", this.Patients)+",\n")
	}
	s = append(s, "AutoInvitePatients: "+fmt.Sprintf("%#v", this.AutoInvitePatients)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Patient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&sync.Patient{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "MiddleName: "+fmt.Sprintf("%#v", this.MiddleName)+",\n")
	s = append(s, "EmailAddresses: "+fmt.Sprintf("%#v", this.EmailAddresses)+",\n")
	if this.PhoneNumbers != nil {
		s = append(s, "PhoneNumbers: "+fmt.Sprintf("%#v", this.PhoneNumbers)+",\n")
	}
	s = append(s, "ExternalURL: "+fmt.Sprintf("%#v", this.ExternalURL)+",\n")
	s = append(s, "LastModifiedTime: "+fmt.Sprintf("%#v", this.LastModifiedTime)+",\n")
	s = append(s, "CreatedTime: "+fmt.Sprintf("%#v", this.CreatedTime)+",\n")
	if this.DOB != nil {
		s = append(s, "DOB: "+fmt.Sprintf("%#v", this.DOB)+",\n")
	}
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Patient_Date) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&sync.Patient_Date{")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PatientUpdatedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sync.PatientUpdatedEvent{")
	if this.Patients != nil {
		s = append(s, "Patients: "+fmt.Sprintf("%#v", this.Patients)+",\n")
	}
	s = append(s, "AutoInvitePatients: "+fmt.Sprintf("%#v", this.AutoInvitePatients)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Phone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sync.Phone{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSync(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSync(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Source))
	}
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.ThreadCreationType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.ThreadCreationType))
	}
	if m.Token != nil {
		nn1, err := m.Token.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.TagMappings) > 0 {
		for _, msg := range m.TagMappings {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Config_Hint) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Hint != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Hint.Size()))
		n2, err := m.Hint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *TagMappingItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagMappingItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		nn3, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	return i, nil
}

func (m *TagMappingItem_ProviderID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintSync(dAtA, i, uint64(len(m.ProviderID)))
	i += copy(dAtA[i:], m.ProviderID)
	return i, nil
}
func (m *HintToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HintToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.ExpiresIn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.ExpiresIn))
	}
	if len(m.PracticeID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.PracticeID)))
		i += copy(dAtA[i:], m.PracticeID)
	}
	return i, nil
}

func (m *Initiate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Initiate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Source))
	}
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
	}
	if m.Source != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Source))
	}
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.Event != nil {
		nn4, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *Event_PatientAddEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PatientAddEvent != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.PatientAddEvent.Size()))
		n5, err := m.PatientAddEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Event_PatientUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PatientUpdateEvent != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.PatientUpdateEvent.Size()))
		n6, err := m.PatientUpdateEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *PatientAddEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientAddEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Patients) > 0 {
		for _, msg := range m.Patients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AutoInvitePatients {
		dAtA[i] = 0x10
		i++
		if m.AutoInvitePatients {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Patient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patient) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.MiddleName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.MiddleName)))
		i += copy(dAtA[i:], m.MiddleName)
	}
	if len(m.EmailAddresses) > 0 {
		for _, s := range m.EmailAddresses {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.PhoneNumbers) > 0 {
		for _, msg := range m.PhoneNumbers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ExternalURL) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.ExternalURL)))
		i += copy(dAtA[i:], m.ExternalURL)
	}
	if m.LastModifiedTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.LastModifiedTime))
	}
	if m.CreatedTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.CreatedTime))
	}
	if m.DOB != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.DOB.Size()))
		n7, err := m.DOB.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Gender != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Gender))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Patient_Date) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patient_Date) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Day))
	}
	if m.Month != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Month))
	}
	if m.Year != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Year))
	}
	return i, nil
}

func (m *PatientUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Patients) > 0 {
		for _, msg := range m.Patients {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSync(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AutoInvitePatients {
		dAtA[i] = 0x10
		i++
		if m.AutoInvitePatients {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Phone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Phone) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSync(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	return i, nil
}

func encodeFixed64Sync(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Sync(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Config) Size() (n int) {
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovSync(uint64(m.Source))
	}
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.ThreadCreationType != 0 {
		n += 1 + sovSync(uint64(m.ThreadCreationType))
	}
	if m.Token != nil {
		n += m.Token.Size()
	}
	if len(m.TagMappings) > 0 {
		for _, e := range m.TagMappings {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	return n
}

func (m *Config_Hint) Size() (n int) {
	var l int
	_ = l
	if m.Hint != nil {
		l = m.Hint.Size()
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}
func (m *TagMappingItem) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		n += m.Key.Size()
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}

func (m *TagMappingItem_ProviderID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProviderID)
	n += 1 + l + sovSync(uint64(l))
	return n
}
func (m *HintToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovSync(uint64(m.ExpiresIn))
	}
	l = len(m.PracticeID)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}

func (m *Initiate) Size() (n int) {
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovSync(uint64(m.Source))
	}
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	if m.Source != 0 {
		n += 1 + sovSync(uint64(m.Source))
	}
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_PatientAddEvent) Size() (n int) {
	var l int
	_ = l
	if m.PatientAddEvent != nil {
		l = m.PatientAddEvent.Size()
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}
func (m *Event_PatientUpdateEvent) Size() (n int) {
	var l int
	_ = l
	if m.PatientUpdateEvent != nil {
		l = m.PatientUpdateEvent.Size()
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}
func (m *PatientAddEvent) Size() (n int) {
	var l int
	_ = l
	if len(m.Patients) > 0 {
		for _, e := range m.Patients {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if m.AutoInvitePatients {
		n += 2
	}
	return n
}

func (m *Patient) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.MiddleName)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if len(m.EmailAddresses) > 0 {
		for _, s := range m.EmailAddresses {
			l = len(s)
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if len(m.PhoneNumbers) > 0 {
		for _, e := range m.PhoneNumbers {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	l = len(m.ExternalURL)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.LastModifiedTime != 0 {
		n += 1 + sovSync(uint64(m.LastModifiedTime))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovSync(uint64(m.CreatedTime))
	}
	if m.DOB != nil {
		l = m.DOB.Size()
		n += 1 + l + sovSync(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovSync(uint64(m.Gender))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSync(uint64(l))
		}
	}
	return n
}

func (m *Patient_Date) Size() (n int) {
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovSync(uint64(m.Day))
	}
	if m.Month != 0 {
		n += 1 + sovSync(uint64(m.Month))
	}
	if m.Year != 0 {
		n += 1 + sovSync(uint64(m.Year))
	}
	return n
}

func (m *PatientUpdatedEvent) Size() (n int) {
	var l int
	_ = l
	if len(m.Patients) > 0 {
		for _, e := range m.Patients {
			l = e.Size()
			n += 1 + l + sovSync(uint64(l))
		}
	}
	if m.AutoInvitePatients {
		n += 2
	}
	return n
}

func (m *Phone) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	return n
}

func sovSync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSync(x uint64) (n int) {
	return sovSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`ThreadCreationType:` + fmt.Sprintf("%v", this.ThreadCreationType) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TagMappings:` + strings.Replace(fmt.Sprintf("%v", this.TagMappings), "TagMappingItem", "TagMappingItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config_Hint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config_Hint{`,
		`Hint:` + strings.Replace(fmt.Sprintf("%v", this.Hint), "HintToken", "HintToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagMappingItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagMappingItem{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagMappingItem_ProviderID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagMappingItem_ProviderID{`,
		`ProviderID:` + fmt.Sprintf("%v", this.ProviderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HintToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HintToken{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`RefreshToken:` + fmt.Sprintf("%v", this.RefreshToken) + `,`,
		`ExpiresIn:` + fmt.Sprintf("%v", this.ExpiresIn) + `,`,
		`PracticeID:` + fmt.Sprintf("%v", this.PracticeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Initiate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Initiate{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_PatientAddEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_PatientAddEvent{`,
		`PatientAddEvent:` + strings.Replace(fmt.Sprintf("%v", this.PatientAddEvent), "PatientAddEvent", "PatientAddEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_PatientUpdateEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_PatientUpdateEvent{`,
		`PatientUpdateEvent:` + strings.Replace(fmt.Sprintf("%v", this.PatientUpdateEvent), "PatientUpdatedEvent", "PatientUpdatedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PatientAddEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PatientAddEvent{`,
		`Patients:` + strings.Replace(fmt.Sprintf("%v", this.Patients), "Patient", "Patient", 1) + `,`,
		`AutoInvitePatients:` + fmt.Sprintf("%v", this.AutoInvitePatients) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Patient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Patient{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`MiddleName:` + fmt.Sprintf("%v", this.MiddleName) + `,`,
		`EmailAddresses:` + fmt.Sprintf("%v", this.EmailAddresses) + `,`,
		`PhoneNumbers:` + strings.Replace(fmt.Sprintf("%v", this.PhoneNumbers), "Phone", "Phone", 1) + `,`,
		`ExternalURL:` + fmt.Sprintf("%v", this.ExternalURL) + `,`,
		`LastModifiedTime:` + fmt.Sprintf("%v", this.LastModifiedTime) + `,`,
		`CreatedTime:` + fmt.Sprintf("%v", this.CreatedTime) + `,`,
		`DOB:` + strings.Replace(fmt.Sprintf("%v", this.DOB), "Patient_Date", "Patient_Date", 1) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Patient_Date) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Patient_Date{`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PatientUpdatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PatientUpdatedEvent{`,
		`Patients:` + strings.Replace(fmt.Sprintf("%v", this.Patients), "Patient", "Patient", 1) + `,`,
		`AutoInvitePatients:` + fmt.Sprintf("%v", this.AutoInvitePatients) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Phone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Phone{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSync(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadCreationType", wireType)
			}
			m.ThreadCreationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadCreationType |= (Config_ThreadCreationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HintToken{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Token = &Config_Hint{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagMappings = append(m.TagMappings, &TagMappingItem{})
			if err := m.TagMappings[len(m.TagMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagMappingItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagMappingItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagMappingItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = &TagMappingItem_ProviderID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HintToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HintToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HintToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PracticeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PracticeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Initiate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Initiate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Initiate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Event_DeprecatedEventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientAddEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PatientAddEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_PatientAddEvent{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientUpdateEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PatientUpdatedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_PatientUpdateEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientAddEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientAddEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientAddEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patients = append(m.Patients, &Patient{})
			if err := m.Patients[len(m.Patients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoInvitePatients", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoInvitePatients = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddresses = append(m.EmailAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, &Phone{})
			if err := m.PhoneNumbers[len(m.PhoneNumbers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedTime", wireType)
			}
			m.LastModifiedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastModifiedTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DOB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DOB == nil {
				m.DOB = &Patient_Date{}
			}
			if err := m.DOB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (Patient_Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patient_Date) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Date: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Date: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patients = append(m.Patients, &Patient{})
			if err := m.Patients[len(m.Patients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoInvitePatients", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoInvitePatients = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Phone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Phone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Phone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Phone_PhoneType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSync   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sync.proto", fileDescriptorSync) }

var fileDescriptorSync = []byte{
	// 1053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0xe3, 0xc4,
	0x1b, 0x8e, 0xe3, 0x24, 0x6d, 0xde, 0xfc, 0x73, 0xa7, 0x69, 0x7f, 0xfe, 0x95, 0x25, 0x29, 0x5e,
	0x56, 0x8a, 0x56, 0x6c, 0x16, 0x95, 0x0b, 0x1c, 0x38, 0x24, 0xb1, 0x77, 0x63, 0x6d, 0x1b, 0x47,
	0xae, 0xbb, 0x88, 0x93, 0x35, 0x89, 0x27, 0xce, 0x68, 0x1b, 0xdb, 0xd8, 0x93, 0x6a, 0xc3, 0x89,
	0x8f, 0xc0, 0x87, 0xe0, 0xc0, 0x47, 0xe1, 0xb8, 0x88, 0x0b, 0xa7, 0x8a, 0x9a, 0x0b, 0xc7, 0x7e,
	0x04, 0xe4, 0xb1, 0xd3, 0x4d, 0xaa, 0x22, 0x84, 0x10, 0x17, 0xcb, 0xf3, 0xbc, 0xef, 0x3b, 0xef,
	0x33, 0xcf, 0x3c, 0xaf, 0x0d, 0x10, 0xad, 0xbc, 0x69, 0x37, 0x08, 0x7d, 0xe6, 0xa3, 0x42, 0xf2,
	0x7e, 0xf4, 0xcc, 0xa5, 0x6c, 0xbe, 0x9c, 0x74, 0xa7, 0xfe, 0xe2, 0xb9, 0xeb, 0xbb, 0xfe, 0x73,
	0x1e, 0x9c, 0x2c, 0x67, 0x7c, 0xc5, 0x17, 0xfc, 0x2d, 0x2d, 0x52, 0x6e, 0xf3, 0x50, 0x1a, 0xf8,
	0xde, 0x8c, 0xba, 0xe8, 0x11, 0x94, 0x22, 0x7f, 0x19, 0x4e, 0x89, 0x2c, 0x1c, 0x0b, 0x9d, 0xfa,
	0x49, 0xb5, 0xcb, 0x37, 0x3f, 0xe7, 0x18, 0xfa, 0x1c, 0x0e, 0xfd, 0xd0, 0xc5, 0x1e, 0xfd, 0x16,
	0x33, 0xea, 0x7b, 0x36, 0xf1, 0x18, 0x65, 0x2b, 0x9b, 0x3a, 0x72, 0xfe, 0x58, 0xe8, 0x94, 0xfb,
	0x72, 0x7c, 0xdd, 0x6e, 0x1a, 0x1b, 0x19, 0x1a, 0x4f, 0xd0, 0x55, 0xf4, 0x25, 0x34, 0xd9, 0x3c,
	0x24, 0xd8, 0xb1, 0xa7, 0x21, 0x49, 0x8b, 0xd9, 0x2a, 0x20, 0xb2, 0xc8, 0xbb, 0xb4, 0xd3, 0x2e,
	0x29, 0x87, 0xae, 0xc5, 0x13, 0x07, 0x59, 0x9e, 0xb5, 0x0a, 0x08, 0x6a, 0x43, 0x61, 0x4e, 0x3d,
	0x26, 0x17, 0x8f, 0x85, 0x4e, 0xe5, 0xa4, 0x91, 0xa6, 0x0f, 0xa9, 0xc7, 0x2c, 0xff, 0x0d, 0xf1,
	0x86, 0x39, 0xf4, 0x14, 0xaa, 0x0c, 0xbb, 0xf6, 0x02, 0x07, 0x01, 0xf5, 0xdc, 0x48, 0x2e, 0x1d,
	0x8b, 0x9d, 0xca, 0x49, 0x33, 0x4d, 0xb4, 0xb0, 0x7b, 0x96, 0x06, 0x74, 0x46, 0x16, 0xca, 0x0a,
	0xd0, 0x83, 0x2d, 0x3e, 0xb0, 0x86, 0xa6, 0xd6, 0x53, 0xed, 0x81, 0xa9, 0xf5, 0x2c, 0xdd, 0x18,
	0xd9, 0xd6, 0xd7, 0x63, 0xcd, 0xbe, 0x78, 0x35, 0x32, 0xbe, 0x1a, 0x49, 0x39, 0xf4, 0x11, 0x7c,
	0xf8, 0x60, 0xc2, 0xb9, 0xd5, 0x1b, 0xa9, 0x3d, 0x53, 0x95, 0x84, 0xbf, 0xdc, 0xe3, 0x5c, 0x1b,
	0x5c, 0x98, 0x9a, 0x94, 0xef, 0xef, 0x40, 0x91, 0x25, 0x8c, 0x95, 0x57, 0x50, 0xdf, 0x66, 0x85,
	0x9e, 0x40, 0x25, 0x08, 0xfd, 0x2b, 0xea, 0x90, 0x30, 0x11, 0x54, 0xe0, 0x82, 0xd6, 0xe3, 0xeb,
	0x36, 0x8c, 0x33, 0x58, 0x57, 0x87, 0x39, 0x54, 0x01, 0x91, 0x61, 0x37, 0xd3, 0xbb, 0x08, 0xe2,
	0x1b, 0xb2, 0x52, 0xbe, 0x81, 0xf2, 0x9d, 0x16, 0xa8, 0x09, 0x55, 0x3c, 0x9d, 0x92, 0x28, 0xb2,
	0x79, 0xa7, 0x74, 0x23, 0x74, 0x00, 0xb5, 0x90, 0xcc, 0x42, 0x12, 0xcd, 0x33, 0x98, 0x6f, 0x80,
	0x10, 0x00, 0x79, 0x1b, 0xd0, 0x90, 0x44, 0x36, 0xf5, 0xf8, 0x65, 0x14, 0xd0, 0xe3, 0x84, 0x08,
	0x9e, 0x32, 0x3a, 0x25, 0x09, 0x91, 0xc2, 0x26, 0x91, 0x14, 0xd6, 0x55, 0x65, 0x02, 0xbb, 0xba,
	0x47, 0x19, 0xc5, 0x8c, 0xfc, 0x57, 0x9e, 0x51, 0x7e, 0xce, 0x43, 0x51, 0xbb, 0x22, 0x1e, 0x43,
	0xcf, 0xa0, 0xc0, 0xdd, 0x22, 0x6c, 0xba, 0x85, 0x87, 0xba, 0x2a, 0x09, 0x42, 0x32, 0xc5, 0x8c,
	0x38, 0x7c, 0xcd, 0xaf, 0xf2, 0x3d, 0xa1, 0xfc, 0x3f, 0x22, 0x24, 0xfe, 0x8d, 0x89, 0x4f, 0x60,
	0x2f, 0xc0, 0x8c, 0x12, 0x8f, 0xd9, 0xd8, 0x71, 0x6c, 0x92, 0x34, 0xe4, 0xfa, 0x54, 0x4e, 0x0e,
	0xd2, 0x16, 0xe3, 0x34, 0xdc, 0x73, 0x52, 0x36, 0xc3, 0x1c, 0xfa, 0x02, 0x9a, 0xeb, 0x9a, 0x65,
	0xe0, 0x60, 0x46, 0xb2, 0xb2, 0xd4, 0xc9, 0xff, 0xdf, 0x2a, 0xbb, 0xe0, 0x09, 0xeb, 0x52, 0x45,
	0x87, 0xfd, 0x87, 0x4e, 0x77, 0x08, 0x48, 0x7b, 0xad, 0x8d, 0xac, 0xcc, 0x9e, 0xa3, 0xb5, 0x3f,
	0x8f, 0xe0, 0x70, 0x03, 0x1f, 0xf7, 0x2c, 0x3d, 0x59, 0xf4, 0x54, 0x55, 0x12, 0x12, 0xdf, 0xf1,
	0xb6, 0xca, 0x18, 0x1a, 0xf7, 0x38, 0xa2, 0x36, 0xec, 0x66, 0x0c, 0x23, 0x59, 0xe0, 0x63, 0x53,
	0xdb, 0x62, 0x85, 0x1e, 0x41, 0x13, 0x2f, 0x99, 0x6f, 0x53, 0xef, 0x8a, 0x32, 0x62, 0xdf, 0x25,
	0x27, 0xe2, 0xee, 0x2a, 0xbf, 0x88, 0xb0, 0xb3, 0xce, 0x44, 0x90, 0xbf, 0xb3, 0x6e, 0x29, 0xbe,
	0x6e, 0xe7, 0x75, 0x35, 0xb1, 0xd8, 0x8c, 0x86, 0x11, 0xb3, 0x3d, 0xbc, 0x20, 0x99, 0xed, 0xf6,
	0xa0, 0x7c, 0x89, 0xd7, 0x10, 0x57, 0x1d, 0xed, 0x43, 0x65, 0x41, 0x1d, 0xe7, 0x92, 0xa4, 0x20,
	0x77, 0x1d, 0xfa, 0x1f, 0x34, 0xc8, 0x02, 0xd3, 0xcb, 0x44, 0xee, 0x90, 0x44, 0x11, 0x89, 0xe4,
	0xe2, 0xb1, 0xd8, 0x29, 0x23, 0x05, 0x6a, 0xc1, 0xdc, 0xf7, 0x88, 0xed, 0x2d, 0x17, 0x13, 0x12,
	0xae, 0xe7, 0xbd, 0x92, 0x11, 0x4f, 0x42, 0xe8, 0x09, 0x54, 0xc9, 0x5b, 0x46, 0x42, 0x0f, 0x5f,
	0xda, 0xcb, 0xf0, 0x52, 0xde, 0xe1, 0xb4, 0x1a, 0xf1, 0x75, 0xbb, 0xa2, 0x65, 0xf8, 0x85, 0x79,
	0x8a, 0x8e, 0x00, 0x71, 0x2e, 0x0b, 0xdf, 0xa1, 0x33, 0x4a, 0x1c, 0x9b, 0xd1, 0x05, 0x91, 0x77,
	0xf9, 0x28, 0x34, 0xa1, 0xca, 0x3f, 0x57, 0x6b, 0xb4, 0xcc, 0xd1, 0x0e, 0x88, 0x8e, 0x3f, 0x91,
	0x81, 0xdf, 0x20, 0xda, 0xd2, 0xaa, 0xab, 0x62, 0x46, 0xfa, 0x3b, 0xf1, 0x75, 0x5b, 0x54, 0x8d,
	0x3e, 0xfa, 0x18, 0x4a, 0x2e, 0xf1, 0x1c, 0x12, 0xca, 0x15, 0x6e, 0xc4, 0xe6, 0x76, 0xf2, 0x4b,
	0x1e, 0x43, 0x55, 0x28, 0x30, 0xec, 0x46, 0x72, 0x35, 0x39, 0xda, 0xd1, 0xa7, 0x50, 0x48, 0x36,
	0x49, 0x06, 0xdd, 0xc1, 0x2b, 0x2e, 0x66, 0x0d, 0xd5, 0xa0, 0xb8, 0xf0, 0x3d, 0x36, 0xe7, 0xfa,
	0xd5, 0x92, 0x8a, 0x15, 0xc1, 0x21, 0x97, 0xae, 0xa6, 0x98, 0x50, 0xca, 0x76, 0x42, 0x50, 0x7f,
	0xa9, 0x8d, 0x54, 0xcd, 0xdc, 0xb0, 0x45, 0x03, 0x2a, 0x19, 0x76, 0xd6, 0x3b, 0xd5, 0x24, 0x01,
	0xed, 0x41, 0x2d, 0x03, 0x5e, 0x68, 0x1c, 0xca, 0x23, 0x09, 0xaa, 0x19, 0x64, 0x58, 0x43, 0xcd,
	0x94, 0x44, 0xc5, 0x82, 0xfd, 0x07, 0x4c, 0xf9, 0x6f, 0xbd, 0xf2, 0x83, 0x00, 0xc5, 0xf4, 0x72,
	0x1e, 0x67, 0x13, 0x5d, 0xe0, 0xba, 0x1c, 0x6c, 0xdc, 0x5b, 0xfa, 0xe4, 0x4e, 0xaf, 0x43, 0x29,
	0xbd, 0x5f, 0x3e, 0x2d, 0x65, 0x65, 0x06, 0xe5, 0xf7, 0xc1, 0x43, 0x40, 0xe3, 0xa1, 0x31, 0xd2,
	0xee, 0x8f, 0xc1, 0x3e, 0x34, 0x36, 0xf0, 0xa1, 0x71, 0x96, 0x9c, 0xf9, 0x00, 0xf6, 0x36, 0xc0,
	0x33, 0xa3, 0xaf, 0xf3, 0x73, 0x6f, 0xc3, 0xc6, 0x8b, 0x17, 0xfa, 0x40, 0x93, 0xc4, 0xa7, 0x33,
	0x28, 0x65, 0xdf, 0x0a, 0x04, 0xf5, 0x73, 0xe3, 0xc2, 0x1c, 0xdc, 0x6b, 0x90, 0x61, 0xaa, 0x39,
	0x18, 0x9a, 0xc6, 0xc8, 0x90, 0x84, 0x44, 0xe5, 0x0c, 0x1c, 0xea, 0x23, 0x4b, 0xca, 0x6f, 0x54,
	0x6a, 0xa7, 0xfc, 0x4f, 0x20, 0x89, 0xa8, 0x0e, 0x90, 0x61, 0x83, 0xf3, 0xd7, 0x52, 0xa1, 0xff,
	0xc9, 0xbb, 0x9b, 0x56, 0xee, 0xd7, 0x9b, 0x56, 0xee, 0xf6, 0xa6, 0x25, 0x7c, 0x17, 0xb7, 0x84,
	0x1f, 0xe3, 0x96, 0xf0, 0x53, 0xdc, 0x12, 0xde, 0xc5, 0x2d, 0xe1, 0xb7, 0xb8, 0x25, 0xfc, 0x11,
	0xb7, 0x72, 0xb7, 0x71, 0x4b, 0xf8, 0xfe, 0xf7, 0x56, 0x6e, 0x52, 0xe2, 0x3f, 0xeb, 0xcf, 0xfe,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xee, 0xf2, 0xb6, 0xef, 0x07, 0x00, 0x00,
}
