// Code generated by protoc-gen-gogo.
// source: gen.proto
// DO NOT EDIT!

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		gen.proto

	It has these top-level messages:
		Reference
		Message
		EndpointList
		Endpoint
		MessageUpdated
		FollowerUpdated
		Attachment
		ImageAttachment
		VideoAttachment
		AudioAttachment
		GenericAttachment
		VisitAttachment
		CarePlanAttachment
*/
package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Reference_Type int32

const (
	Reference_ENTITY Reference_Type = 0
)

var Reference_Type_name = map[int32]string{
	0: "ENTITY",
}
var Reference_Type_value = map[string]int32{
	"ENTITY": 0,
}

func (Reference_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorGen, []int{0, 0} }

type Message_Status int32

const (
	Message_NORMAL  Message_Status = 0
	Message_DELETED Message_Status = 1
)

var Message_Status_name = map[int32]string{
	0: "NORMAL",
	1: "DELETED",
}
var Message_Status_value = map[string]int32{
	"NORMAL":  0,
	"DELETED": 1,
}

func (Message_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorGen, []int{1, 0} }

type Endpoint_Channel int32

const (
	Endpoint_APP   Endpoint_Channel = 0
	Endpoint_SMS   Endpoint_Channel = 1
	Endpoint_VOICE Endpoint_Channel = 2
	Endpoint_EMAIL Endpoint_Channel = 3
)

var Endpoint_Channel_name = map[int32]string{
	0: "APP",
	1: "SMS",
	2: "VOICE",
	3: "EMAIL",
}
var Endpoint_Channel_value = map[string]int32{
	"APP":   0,
	"SMS":   1,
	"VOICE": 2,
	"EMAIL": 3,
}

func (Endpoint_Channel) EnumDescriptor() ([]byte, []int) { return fileDescriptorGen, []int{3, 0} }

type Attachment_Type int32

const (
	Attachment_IMAGE     Attachment_Type = 0
	Attachment_AUDIO     Attachment_Type = 1
	Attachment_GENERIC   Attachment_Type = 2
	Attachment_CARE_PLAN Attachment_Type = 3
	Attachment_VISIT     Attachment_Type = 4
	Attachment_VIDEO     Attachment_Type = 5
)

var Attachment_Type_name = map[int32]string{
	0: "IMAGE",
	1: "AUDIO",
	2: "GENERIC",
	3: "CARE_PLAN",
	4: "VISIT",
	5: "VIDEO",
}
var Attachment_Type_value = map[string]int32{
	"IMAGE":     0,
	"AUDIO":     1,
	"GENERIC":   2,
	"CARE_PLAN": 3,
	"VISIT":     4,
	"VIDEO":     5,
}

func (Attachment_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorGen, []int{6, 0} }

type Reference struct {
	Type Reference_Type `protobuf:"varint,1,opt,name=type,proto3,enum=models.Reference_Type" json:"type,omitempty"`
	ID   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{0} }

type Message struct {
	Text            string         `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Attachments     []*Attachment  `protobuf:"bytes,2,rep,name=attachments" json:"attachments,omitempty"`
	Status          Message_Status `protobuf:"varint,3,opt,name=status,proto3,enum=models.Message_Status" json:"status,omitempty"`
	Source          *Endpoint      `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Destinations    []*Endpoint    `protobuf:"bytes,5,rep,name=destinations" json:"destinations,omitempty"`
	EditedTimestamp uint64         `protobuf:"varint,6,opt,name=edited_timestamp,json=editedTimestamp,proto3" json:"edited_timestamp,omitempty"`
	EditorEntityID  string         `protobuf:"bytes,7,opt,name=editor_entity_id,json=editorEntityId,proto3" json:"editor_entity_id,omitempty"`
	Title           string         `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	TextRefs        []*Reference   `protobuf:"bytes,9,rep,name=text_refs,json=textRefs" json:"text_refs,omitempty"`
	Summary         string         `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{1} }

func (m *Message) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Message) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Message) GetDestinations() []*Endpoint {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Message) GetTextRefs() []*Reference {
	if m != nil {
		return m.TextRefs
	}
	return nil
}

type EndpointList struct {
	Endpoints []*Endpoint `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty"`
}

func (m *EndpointList) Reset()                    { *m = EndpointList{} }
func (*EndpointList) ProtoMessage()               {}
func (*EndpointList) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{2} }

func (m *EndpointList) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type Endpoint struct {
	Channel Endpoint_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=models.Endpoint_Channel" json:"channel,omitempty"`
	ID      string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{3} }

type MessageUpdated struct {
	ThreadItemID  string   `protobuf:"bytes,1,opt,name=thread_item_id,json=threadItemId,proto3" json:"thread_item_id,omitempty"`
	ActorEntityID string   `protobuf:"bytes,2,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	Message       *Message `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *MessageUpdated) Reset()                    { *m = MessageUpdated{} }
func (*MessageUpdated) ProtoMessage()               {}
func (*MessageUpdated) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{4} }

func (m *MessageUpdated) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type FollowerUpdated struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (m *FollowerUpdated) Reset()                    { *m = FollowerUpdated{} }
func (*FollowerUpdated) ProtoMessage()               {}
func (*FollowerUpdated) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{5} }

type Attachment struct {
	Type  Attachment_Type `protobuf:"varint,1,opt,name=type,proto3,enum=models.Attachment_Type" json:"type,omitempty"`
	Title string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	URL   string          `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Attachment_Image
	//	*Attachment_Audio
	//	*Attachment_Generic
	//	*Attachment_Visit
	//	*Attachment_CarePlan
	//	*Attachment_Video
	Data isAttachment_Data `protobuf_oneof:"data"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{6} }

type isAttachment_Data interface {
	isAttachment_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Attachment_Image struct {
	Image *ImageAttachment `protobuf:"bytes,10,opt,name=image,oneof"`
}
type Attachment_Audio struct {
	Audio *AudioAttachment `protobuf:"bytes,11,opt,name=audio,oneof"`
}
type Attachment_Generic struct {
	Generic *GenericAttachment `protobuf:"bytes,12,opt,name=generic,oneof"`
}
type Attachment_Visit struct {
	Visit *VisitAttachment `protobuf:"bytes,13,opt,name=visit,oneof"`
}
type Attachment_CarePlan struct {
	CarePlan *CarePlanAttachment `protobuf:"bytes,14,opt,name=care_plan,json=carePlan,oneof"`
}
type Attachment_Video struct {
	Video *VideoAttachment `protobuf:"bytes,15,opt,name=video,oneof"`
}

func (*Attachment_Image) isAttachment_Data()    {}
func (*Attachment_Audio) isAttachment_Data()    {}
func (*Attachment_Generic) isAttachment_Data()  {}
func (*Attachment_Visit) isAttachment_Data()    {}
func (*Attachment_CarePlan) isAttachment_Data() {}
func (*Attachment_Video) isAttachment_Data()    {}

func (m *Attachment) GetData() isAttachment_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attachment) GetImage() *ImageAttachment {
	if x, ok := m.GetData().(*Attachment_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Attachment) GetAudio() *AudioAttachment {
	if x, ok := m.GetData().(*Attachment_Audio); ok {
		return x.Audio
	}
	return nil
}

func (m *Attachment) GetGeneric() *GenericAttachment {
	if x, ok := m.GetData().(*Attachment_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *Attachment) GetVisit() *VisitAttachment {
	if x, ok := m.GetData().(*Attachment_Visit); ok {
		return x.Visit
	}
	return nil
}

func (m *Attachment) GetCarePlan() *CarePlanAttachment {
	if x, ok := m.GetData().(*Attachment_CarePlan); ok {
		return x.CarePlan
	}
	return nil
}

func (m *Attachment) GetVideo() *VideoAttachment {
	if x, ok := m.GetData().(*Attachment_Video); ok {
		return x.Video
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Attachment) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Attachment_OneofMarshaler, _Attachment_OneofUnmarshaler, _Attachment_OneofSizer, []interface{}{
		(*Attachment_Image)(nil),
		(*Attachment_Audio)(nil),
		(*Attachment_Generic)(nil),
		(*Attachment_Visit)(nil),
		(*Attachment_CarePlan)(nil),
		(*Attachment_Video)(nil),
	}
}

func _Attachment_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Attachment)
	// data
	switch x := m.Data.(type) {
	case *Attachment_Image:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Attachment_Audio:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case *Attachment_Generic:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Generic); err != nil {
			return err
		}
	case *Attachment_Visit:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Visit); err != nil {
			return err
		}
	case *Attachment_CarePlan:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CarePlan); err != nil {
			return err
		}
	case *Attachment_Video:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Attachment.Data has unexpected type %T", x)
	}
	return nil
}

func _Attachment_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Attachment)
	switch tag {
	case 10: // data.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImageAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Image{msg}
		return true, err
	case 11: // data.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AudioAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Audio{msg}
		return true, err
	case 12: // data.generic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Generic{msg}
		return true, err
	case 13: // data.visit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VisitAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Visit{msg}
		return true, err
	case 14: // data.care_plan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CarePlanAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_CarePlan{msg}
		return true, err
	case 15: // data.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VideoAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Video{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Attachment_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Attachment)
	// data
	switch x := m.Data.(type) {
	case *Attachment_Image:
		s := proto.Size(x.Image)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Audio:
		s := proto.Size(x.Audio)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Generic:
		s := proto.Size(x.Generic)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Visit:
		s := proto.Size(x.Visit)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_CarePlan:
		s := proto.Size(x.CarePlan)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Video:
		s := proto.Size(x.Video)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImageAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID  string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Width    uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ImageAttachment) Reset()                    { *m = ImageAttachment{} }
func (*ImageAttachment) ProtoMessage()               {}
func (*ImageAttachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{7} }

type VideoAttachment struct {
	Mimetype   string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID    string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	DurationNS uint64 `protobuf:"varint,4,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
}

func (m *VideoAttachment) Reset()                    { *m = VideoAttachment{} }
func (*VideoAttachment) ProtoMessage()               {}
func (*VideoAttachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{8} }

type AudioAttachment struct {
	Mimetype                    string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID                     string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	DeprecatedDurationInSeconds uint32 `protobuf:"varint,3,opt,name=deprecated_duration_in_seconds,json=deprecatedDurationInSeconds,proto3" json:"deprecated_duration_in_seconds,omitempty"`
	DurationNS                  uint64 `protobuf:"varint,4,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
}

func (m *AudioAttachment) Reset()                    { *m = AudioAttachment{} }
func (*AudioAttachment) ProtoMessage()               {}
func (*AudioAttachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{9} }

type GenericAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	URL      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GenericAttachment) Reset()                    { *m = GenericAttachment{} }
func (*GenericAttachment) ProtoMessage()               {}
func (*GenericAttachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{10} }

type VisitAttachment struct {
	VisitID   string `protobuf:"bytes,1,opt,name=visit_id,json=visitId,proto3" json:"visit_id,omitempty"`
	VisitName string `protobuf:"bytes,2,opt,name=visit_name,json=visitName,proto3" json:"visit_name,omitempty"`
}

func (m *VisitAttachment) Reset()                    { *m = VisitAttachment{} }
func (*VisitAttachment) ProtoMessage()               {}
func (*VisitAttachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{11} }

type CarePlanAttachment struct {
	CarePlanID   string `protobuf:"bytes,1,opt,name=care_plan_id,json=carePlanId,proto3" json:"care_plan_id,omitempty"`
	CarePlanName string `protobuf:"bytes,2,opt,name=care_plan_name,json=carePlanName,proto3" json:"care_plan_name,omitempty"`
}

func (m *CarePlanAttachment) Reset()                    { *m = CarePlanAttachment{} }
func (*CarePlanAttachment) ProtoMessage()               {}
func (*CarePlanAttachment) Descriptor() ([]byte, []int) { return fileDescriptorGen, []int{12} }

func init() {
	proto.RegisterType((*Reference)(nil), "models.Reference")
	proto.RegisterType((*Message)(nil), "models.Message")
	proto.RegisterType((*EndpointList)(nil), "models.EndpointList")
	proto.RegisterType((*Endpoint)(nil), "models.Endpoint")
	proto.RegisterType((*MessageUpdated)(nil), "models.MessageUpdated")
	proto.RegisterType((*FollowerUpdated)(nil), "models.FollowerUpdated")
	proto.RegisterType((*Attachment)(nil), "models.Attachment")
	proto.RegisterType((*ImageAttachment)(nil), "models.ImageAttachment")
	proto.RegisterType((*VideoAttachment)(nil), "models.VideoAttachment")
	proto.RegisterType((*AudioAttachment)(nil), "models.AudioAttachment")
	proto.RegisterType((*GenericAttachment)(nil), "models.GenericAttachment")
	proto.RegisterType((*VisitAttachment)(nil), "models.VisitAttachment")
	proto.RegisterType((*CarePlanAttachment)(nil), "models.CarePlanAttachment")
	proto.RegisterEnum("models.Reference_Type", Reference_Type_name, Reference_Type_value)
	proto.RegisterEnum("models.Message_Status", Message_Status_name, Message_Status_value)
	proto.RegisterEnum("models.Endpoint_Channel", Endpoint_Channel_name, Endpoint_Channel_value)
	proto.RegisterEnum("models.Attachment_Type", Attachment_Type_name, Attachment_Type_value)
}
func (x Reference_Type) String() string {
	s, ok := Reference_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Message_Status) String() string {
	s, ok := Message_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Endpoint_Channel) String() string {
	s, ok := Endpoint_Channel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Attachment_Type) String() string {
	s, ok := Attachment_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Reference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Reference)
	if !ok {
		that2, ok := that.(Reference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if this.EditedTimestamp != that1.EditedTimestamp {
		return false
	}
	if this.EditorEntityID != that1.EditorEntityID {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.TextRefs) != len(that1.TextRefs) {
		return false
	}
	for i := range this.TextRefs {
		if !this.TextRefs[i].Equal(that1.TextRefs[i]) {
			return false
		}
	}
	if this.Summary != that1.Summary {
		return false
	}
	return true
}
func (this *EndpointList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EndpointList)
	if !ok {
		that2, ok := that.(EndpointList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	return true
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *MessageUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageUpdated)
	if !ok {
		that2, ok := that.(MessageUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *FollowerUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FollowerUpdated)
	if !ok {
		that2, ok := that.(FollowerUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Attachment_Image) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Image)
	if !ok {
		that2, ok := that.(Attachment_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *Attachment_Audio) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Audio)
	if !ok {
		that2, ok := that.(Attachment_Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *Attachment_Generic) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Generic)
	if !ok {
		that2, ok := that.(Attachment_Generic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Generic.Equal(that1.Generic) {
		return false
	}
	return true
}
func (this *Attachment_Visit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Visit)
	if !ok {
		that2, ok := that.(Attachment_Visit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *Attachment_CarePlan) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_CarePlan)
	if !ok {
		that2, ok := that.(Attachment_CarePlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *Attachment_Video) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Video)
	if !ok {
		that2, ok := that.(Attachment_Video)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Video.Equal(that1.Video) {
		return false
	}
	return true
}
func (this *ImageAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageAttachment)
	if !ok {
		that2, ok := that.(ImageAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *VideoAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VideoAttachment)
	if !ok {
		that2, ok := that.(VideoAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	return true
}
func (this *AudioAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AudioAttachment)
	if !ok {
		that2, ok := that.(AudioAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.DeprecatedDurationInSeconds != that1.DeprecatedDurationInSeconds {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	return true
}
func (this *GenericAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericAttachment)
	if !ok {
		that2, ok := that.(GenericAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *VisitAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VisitAttachment)
	if !ok {
		that2, ok := that.(VisitAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.VisitName != that1.VisitName {
		return false
	}
	return true
}
func (this *CarePlanAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanAttachment)
	if !ok {
		that2, ok := that.(CarePlanAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CarePlanID != that1.CarePlanID {
		return false
	}
	if this.CarePlanName != that1.CarePlanName {
		return false
	}
	return true
}
func (this *Reference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.Reference{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&models.Message{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destinations != nil {
		s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	}
	s = append(s, "EditedTimestamp: "+fmt.Sprintf("%#v", this.EditedTimestamp)+",\n")
	s = append(s, "EditorEntityID: "+fmt.Sprintf("%#v", this.EditorEntityID)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.TextRefs != nil {
		s = append(s, "TextRefs: "+fmt.Sprintf("%#v", this.TextRefs)+",\n")
	}
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.EndpointList{")
	if this.Endpoints != nil {
		s = append(s, "Endpoints: "+fmt.Sprintf("%#v", this.Endpoints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Endpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.Endpoint{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.MessageUpdated{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FollowerUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.FollowerUpdated{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&models.Attachment{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment_Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Attachment_Image{` +
		`Image:` + fmt.Sprintf("%#v", this.Image) + `}`}, ", ")
	return s
}
func (this *Attachment_Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Attachment_Audio{` +
		`Audio:` + fmt.Sprintf("%#v", this.Audio) + `}`}, ", ")
	return s
}
func (this *Attachment_Generic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Attachment_Generic{` +
		`Generic:` + fmt.Sprintf("%#v", this.Generic) + `}`}, ", ")
	return s
}
func (this *Attachment_Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Attachment_Visit{` +
		`Visit:` + fmt.Sprintf("%#v", this.Visit) + `}`}, ", ")
	return s
}
func (this *Attachment_CarePlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Attachment_CarePlan{` +
		`CarePlan:` + fmt.Sprintf("%#v", this.CarePlan) + `}`}, ", ")
	return s
}
func (this *Attachment_Video) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Attachment_Video{` +
		`Video:` + fmt.Sprintf("%#v", this.Video) + `}`}, ", ")
	return s
}
func (this *ImageAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.ImageAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VideoAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.VideoAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AudioAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.AudioAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "DeprecatedDurationInSeconds: "+fmt.Sprintf("%#v", this.DeprecatedDurationInSeconds)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.GenericAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisitAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.VisitAttachment{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "VisitName: "+fmt.Sprintf("%#v", this.VisitName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.CarePlanAttachment{")
	s = append(s, "CarePlanID: "+fmt.Sprintf("%#v", this.CarePlanID)+",\n")
	s = append(s, "CarePlanName: "+fmt.Sprintf("%#v", this.CarePlanName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGen(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringGen(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *Reference) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Reference) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGen(data, i, uint64(m.Type))
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *Message) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Message) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x12
			i++
			i = encodeVarintGen(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGen(data, i, uint64(m.Status))
	}
	if m.Source != nil {
		data[i] = 0x22
		i++
		i = encodeVarintGen(data, i, uint64(m.Source.Size()))
		n1, err := m.Source.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			data[i] = 0x2a
			i++
			i = encodeVarintGen(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EditedTimestamp != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintGen(data, i, uint64(m.EditedTimestamp))
	}
	if len(m.EditorEntityID) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintGen(data, i, uint64(len(m.EditorEntityID)))
		i += copy(data[i:], m.EditorEntityID)
	}
	if len(m.Title) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.TextRefs) > 0 {
		for _, msg := range m.TextRefs {
			data[i] = 0x4a
			i++
			i = encodeVarintGen(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Summary) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	return i, nil
}

func (m *EndpointList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EndpointList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			data[i] = 0xa
			i++
			i = encodeVarintGen(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Endpoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Endpoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGen(data, i, uint64(m.Channel))
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *MessageUpdated) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MessageUpdated) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.ThreadItemID)))
		i += copy(data[i:], m.ThreadItemID)
	}
	if len(m.ActorEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	if m.Message != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintGen(data, i, uint64(m.Message.Size()))
		n2, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *FollowerUpdated) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FollowerUpdated) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	return i, nil
}

func (m *Attachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Attachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGen(data, i, uint64(m.Type))
	}
	if len(m.Title) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.URL) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintGen(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	if m.Data != nil {
		nn3, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Attachment_Image) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Image != nil {
		data[i] = 0x52
		i++
		i = encodeVarintGen(data, i, uint64(m.Image.Size()))
		n4, err := m.Image.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Attachment_Audio) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Audio != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintGen(data, i, uint64(m.Audio.Size()))
		n5, err := m.Audio.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Attachment_Generic) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Generic != nil {
		data[i] = 0x62
		i++
		i = encodeVarintGen(data, i, uint64(m.Generic.Size()))
		n6, err := m.Generic.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Attachment_Visit) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Visit != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintGen(data, i, uint64(m.Visit.Size()))
		n7, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Attachment_CarePlan) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CarePlan != nil {
		data[i] = 0x72
		i++
		i = encodeVarintGen(data, i, uint64(m.CarePlan.Size()))
		n8, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Attachment_Video) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Video != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintGen(data, i, uint64(m.Video.Size()))
		n9, err := m.Video.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *ImageAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ImageAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.Width != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGen(data, i, uint64(m.Width))
	}
	if m.Height != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGen(data, i, uint64(m.Height))
	}
	return i, nil
}

func (m *VideoAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VideoAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.DurationNS != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGen(data, i, uint64(m.DurationNS))
	}
	return i, nil
}

func (m *AudioAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AudioAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.DeprecatedDurationInSeconds != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGen(data, i, uint64(m.DeprecatedDurationInSeconds))
	}
	if m.DurationNS != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGen(data, i, uint64(m.DurationNS))
	}
	return i, nil
}

func (m *GenericAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GenericAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.URL) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	return i, nil
}

func (m *VisitAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VisitAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	if len(m.VisitName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.VisitName)))
		i += copy(data[i:], m.VisitName)
	}
	return i, nil
}

func (m *CarePlanAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CarePlanID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintGen(data, i, uint64(len(m.CarePlanID)))
		i += copy(data[i:], m.CarePlanID)
	}
	if len(m.CarePlanName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGen(data, i, uint64(len(m.CarePlanName)))
		i += copy(data[i:], m.CarePlanName)
	}
	return i, nil
}

func encodeFixed64Gen(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gen(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGen(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Reference) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGen(uint64(m.Type))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovGen(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovGen(uint64(m.Status))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovGen(uint64(l))
		}
	}
	if m.EditedTimestamp != 0 {
		n += 1 + sovGen(uint64(m.EditedTimestamp))
	}
	l = len(m.EditorEntityID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if len(m.TextRefs) > 0 {
		for _, e := range m.TextRefs {
			l = e.Size()
			n += 1 + l + sovGen(uint64(l))
		}
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *EndpointList) Size() (n int) {
	var l int
	_ = l
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovGen(uint64(l))
		}
	}
	return n
}

func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovGen(uint64(m.Channel))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *MessageUpdated) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *FollowerUpdated) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *Attachment) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGen(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Attachment_Image) Size() (n int) {
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}
func (m *Attachment_Audio) Size() (n int) {
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}
func (m *Attachment_Generic) Size() (n int) {
	var l int
	_ = l
	if m.Generic != nil {
		l = m.Generic.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}
func (m *Attachment_Visit) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}
func (m *Attachment_CarePlan) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}
func (m *Attachment_Video) Size() (n int) {
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}
func (m *ImageAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovGen(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovGen(uint64(m.Height))
	}
	return n
}

func (m *VideoAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if m.DurationNS != 0 {
		n += 1 + sovGen(uint64(m.DurationNS))
	}
	return n
}

func (m *AudioAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	if m.DeprecatedDurationInSeconds != 0 {
		n += 1 + sovGen(uint64(m.DeprecatedDurationInSeconds))
	}
	if m.DurationNS != 0 {
		n += 1 + sovGen(uint64(m.DurationNS))
	}
	return n
}

func (m *GenericAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *VisitAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.VisitName)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func (m *CarePlanAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.CarePlanID)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	l = len(m.CarePlanName)
	if l > 0 {
		n += 1 + l + sovGen(uint64(l))
	}
	return n
}

func sovGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGen(x uint64) (n int) {
	return sovGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Reference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reference{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "Endpoint", "Endpoint", 1) + `,`,
		`Destinations:` + strings.Replace(fmt.Sprintf("%v", this.Destinations), "Endpoint", "Endpoint", 1) + `,`,
		`EditedTimestamp:` + fmt.Sprintf("%v", this.EditedTimestamp) + `,`,
		`EditorEntityID:` + fmt.Sprintf("%v", this.EditorEntityID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`TextRefs:` + strings.Replace(fmt.Sprintf("%v", this.TextRefs), "Reference", "Reference", 1) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointList{`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "Endpoint", "Endpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Endpoint{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageUpdated{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FollowerUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FollowerUpdated{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Image{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageAttachment", "ImageAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Audio{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "AudioAttachment", "AudioAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Generic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Generic{`,
		`Generic:` + strings.Replace(fmt.Sprintf("%v", this.Generic), "GenericAttachment", "GenericAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Visit{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "VisitAttachment", "VisitAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_CarePlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_CarePlan{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlanAttachment", "CarePlanAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Video) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Video{`,
		`Video:` + strings.Replace(fmt.Sprintf("%v", this.Video), "VideoAttachment", "VideoAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AudioAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`DeprecatedDurationInSeconds:` + fmt.Sprintf("%v", this.DeprecatedDurationInSeconds) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisitAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisitAttachment{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`VisitName:` + fmt.Sprintf("%v", this.VisitName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanAttachment{`,
		`CarePlanID:` + fmt.Sprintf("%v", this.CarePlanID) + `,`,
		`CarePlanName:` + fmt.Sprintf("%v", this.CarePlanName) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGen(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Reference) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Reference_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (Message_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Endpoint{}
			}
			if err := m.Source.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Endpoint{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedTimestamp", wireType)
			}
			m.EditedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EditedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextRefs = append(m.TextRefs, &Reference{})
			if err := m.TextRefs[len(m.TextRefs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (Endpoint_Channel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageUpdated) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowerUpdated) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowerUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowerUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Attachment_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Image{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AudioAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Audio{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Generic{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VisitAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Visit{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CarePlanAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_CarePlan{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VideoAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Video{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedDurationInSeconds", wireType)
			}
			m.DeprecatedDurationInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DeprecatedDurationInSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisitAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarePlanID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarePlanName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGen(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGen(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGen(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGen   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorGen = []byte{
	// 1123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x8f, 0xe3, 0x44,
	0x10, 0x8e, 0xf3, 0x76, 0xe5, 0xe5, 0x6d, 0xa1, 0xc5, 0xbb, 0x08, 0x67, 0xb0, 0x10, 0xca, 0xf2,
	0xc8, 0xc0, 0xb0, 0x20, 0xad, 0xb4, 0x42, 0xca, 0xc3, 0x2c, 0x46, 0x49, 0x66, 0xd4, 0xc9, 0xac,
	0xe0, 0x14, 0x79, 0xdc, 0x3d, 0x89, 0xa5, 0xd8, 0x8e, 0xec, 0x0e, 0xcb, 0xdc, 0x90, 0x90, 0x90,
	0xb8, 0xf1, 0x33, 0x38, 0xf1, 0x3b, 0x90, 0x38, 0xb0, 0x47, 0x4e, 0x11, 0x63, 0x2e, 0x1c, 0xf7,
	0xc8, 0x11, 0x75, 0xdb, 0xce, 0x53, 0x8b, 0x84, 0xb4, 0xb7, 0xae, 0xaa, 0xaf, 0xfc, 0x55, 0x55,
	0x7f, 0xd5, 0x32, 0xc8, 0x33, 0xea, 0xb5, 0x97, 0x81, 0xcf, 0x7c, 0x54, 0x74, 0x7d, 0x42, 0x17,
	0xe1, 0xfd, 0x0f, 0x66, 0x0e, 0x9b, 0xaf, 0xae, 0xda, 0xb6, 0xef, 0x9e, 0xce, 0xfc, 0x99, 0x7f,
	0x2a, 0xc2, 0x57, 0xab, 0x6b, 0x61, 0x09, 0x43, 0x9c, 0xe2, 0x34, 0xdd, 0x06, 0x19, 0xd3, 0x6b,
	0x1a, 0x50, 0xcf, 0xa6, 0xe8, 0x5d, 0xc8, 0xb3, 0x9b, 0x25, 0x55, 0xa5, 0x13, 0xa9, 0x55, 0x3f,
	0xbb, 0xdb, 0x8e, 0x3f, 0xd9, 0xde, 0x00, 0xda, 0x93, 0x9b, 0x25, 0xc5, 0x02, 0x83, 0xee, 0x42,
	0xd6, 0x21, 0x6a, 0xf6, 0x44, 0x6a, 0xc9, 0xdd, 0x62, 0xb4, 0x6e, 0x66, 0xcd, 0x3e, 0xce, 0x3a,
	0x44, 0x47, 0x90, 0xe7, 0x28, 0x04, 0x50, 0x34, 0x46, 0x13, 0x73, 0xf2, 0xb5, 0x92, 0xd1, 0x7f,
	0xcf, 0x41, 0x69, 0x48, 0xc3, 0xd0, 0x9a, 0x51, 0x84, 0x20, 0xcf, 0xe8, 0xb7, 0x4c, 0x70, 0xc8,
	0x58, 0x9c, 0xd1, 0x43, 0xa8, 0x58, 0x8c, 0x59, 0xf6, 0xdc, 0xa5, 0x1e, 0x0b, 0xd5, 0xec, 0x49,
	0xae, 0x55, 0x39, 0x43, 0x29, 0x7d, 0x67, 0x13, 0xc2, 0xbb, 0x30, 0xd4, 0x86, 0x62, 0xc8, 0x2c,
	0xb6, 0x0a, 0xd5, 0xdc, 0x7e, 0xbd, 0x09, 0x55, 0x7b, 0x2c, 0xa2, 0x38, 0x41, 0xa1, 0x16, 0x14,
	0x43, 0x7f, 0x15, 0xd8, 0x54, 0xcd, 0x9f, 0x48, 0xad, 0xca, 0x99, 0x92, 0xe2, 0x0d, 0x8f, 0x2c,
	0x7d, 0xc7, 0x63, 0x38, 0x89, 0xa3, 0x87, 0x50, 0x25, 0x34, 0x64, 0x8e, 0x67, 0x31, 0xc7, 0xf7,
	0x42, 0xb5, 0x20, 0x0a, 0x3a, 0xc6, 0xef, 0xa1, 0xd0, 0x03, 0x50, 0x28, 0x71, 0x18, 0x25, 0x53,
	0xe6, 0xb8, 0x34, 0x64, 0x96, 0xbb, 0x54, 0x8b, 0x27, 0x52, 0x2b, 0x8f, 0x1b, 0xb1, 0x7f, 0x92,
	0xba, 0xd1, 0xe3, 0x18, 0xea, 0x07, 0x53, 0xea, 0x31, 0x87, 0xdd, 0x4c, 0x1d, 0xa2, 0x96, 0xc4,
	0x28, 0x51, 0xb4, 0x6e, 0xd6, 0x0d, 0x11, 0x33, 0x44, 0xc8, 0xec, 0xe3, 0x3a, 0xdd, 0xb5, 0x09,
	0x7a, 0x0d, 0x0a, 0xcc, 0x61, 0x0b, 0xaa, 0x96, 0xc5, 0x0c, 0x63, 0x03, 0xb5, 0x41, 0xe6, 0xc3,
	0x9c, 0x06, 0xf4, 0x3a, 0x54, 0x65, 0x51, 0xf1, 0x9d, 0xa3, 0x1b, 0xc4, 0x65, 0x8e, 0xc1, 0xf4,
	0x3a, 0x44, 0x2a, 0x94, 0xc2, 0x95, 0xeb, 0x5a, 0xc1, 0x8d, 0x0a, 0xe2, 0x3b, 0xa9, 0xa9, 0xbf,
	0x05, 0xc5, 0x78, 0x74, 0xfc, 0x12, 0x47, 0xe7, 0x78, 0xd8, 0x19, 0x28, 0x19, 0x54, 0x81, 0x52,
	0xdf, 0x18, 0x18, 0x13, 0xa3, 0xaf, 0x48, 0xfa, 0x67, 0x50, 0x4d, 0xa7, 0x30, 0x70, 0x42, 0xc6,
	0xc9, 0x69, 0x62, 0x87, 0xaa, 0xf4, 0x92, 0x71, 0x6d, 0x21, 0xfa, 0x8f, 0x12, 0x94, 0x53, 0x3f,
	0x3a, 0x83, 0x92, 0x3d, 0xb7, 0x3c, 0x8f, 0x2e, 0x12, 0xe5, 0xa9, 0x87, 0xa9, 0xed, 0x5e, 0x1c,
	0xc7, 0x29, 0xf0, 0xa5, 0xf2, 0xfb, 0x08, 0x4a, 0x09, 0x16, 0x95, 0x20, 0xd7, 0xb9, 0xb8, 0x50,
	0x32, 0xfc, 0x30, 0x1e, 0x8e, 0x15, 0x09, 0xc9, 0x50, 0x78, 0x7a, 0x6e, 0xf6, 0x0c, 0x25, 0xcb,
	0x8f, 0xc6, 0xb0, 0x63, 0x0e, 0x94, 0x9c, 0xfe, 0x8b, 0x04, 0xf5, 0x44, 0x32, 0x97, 0x4b, 0x62,
	0x31, 0x4a, 0xd0, 0xa7, 0x50, 0x67, 0xf3, 0x80, 0x5a, 0x64, 0xea, 0x30, 0xea, 0xf2, 0xdb, 0x11,
	0x72, 0xed, 0x2a, 0xd1, 0xba, 0x59, 0x9d, 0x88, 0x88, 0xc9, 0xa8, 0x6b, 0xf6, 0x71, 0x95, 0x6d,
	0x2d, 0x82, 0x1e, 0x41, 0xc3, 0xb2, 0xf7, 0xaf, 0x35, 0x2e, 0xf1, 0x4e, 0xb4, 0x6e, 0xd6, 0x3a,
	0xf6, 0xee, 0xad, 0xd6, 0x2c, 0x7b, 0xf7, 0x52, 0x1f, 0x40, 0xc9, 0x8d, 0x8b, 0x10, 0x72, 0xae,
	0x9c, 0x35, 0x0e, 0xe4, 0x8c, 0xd3, 0xb8, 0xfe, 0x18, 0x1a, 0x9f, 0xfb, 0x8b, 0x85, 0xff, 0x8c,
	0x06, 0x69, 0xc1, 0x0f, 0xf8, 0xfc, 0x53, 0xca, 0xb8, 0xd6, 0x6a, 0xb4, 0x6e, 0x96, 0x37, 0x6c,
	0x65, 0x9a, 0x10, 0xe9, 0xff, 0xe4, 0x00, 0xb6, 0x2b, 0x85, 0xde, 0xdb, 0xdb, 0xf9, 0xd7, 0x8f,
	0x97, 0x6e, 0x77, 0xe9, 0x37, 0xca, 0xcb, 0xee, 0x2a, 0xef, 0x1e, 0xe4, 0x56, 0xc1, 0x42, 0x94,
	0x2d, 0x77, 0x4b, 0xd1, 0xba, 0x99, 0xbb, 0xc4, 0x03, 0xcc, 0x7d, 0xe8, 0x14, 0x0a, 0x8e, 0xcb,
	0x7b, 0x02, 0xd1, 0xd3, 0xe6, 0xf3, 0x26, 0x77, 0x6e, 0x39, 0xbe, 0xc8, 0xe0, 0x18, 0xc7, 0x13,
	0xac, 0x15, 0x71, 0x7c, 0xb5, 0xb2, 0x9f, 0xd0, 0xe1, 0xce, 0xfd, 0x04, 0x81, 0x43, 0x9f, 0x40,
	0x69, 0x46, 0x3d, 0x1a, 0x38, 0xb6, 0x5a, 0x15, 0x29, 0xf7, 0xd2, 0x94, 0x27, 0xb1, 0x7b, 0x2f,
	0x29, 0xc5, 0x72, 0x9e, 0x6f, 0x9c, 0xd0, 0x61, 0x6a, 0x6d, 0x9f, 0xe7, 0x29, 0x77, 0xee, 0xf3,
	0x08, 0x1c, 0x7a, 0x04, 0xb2, 0x6d, 0x05, 0x74, 0xba, 0x5c, 0x58, 0x9e, 0x5a, 0x17, 0x49, 0xf7,
	0xd3, 0xa4, 0x9e, 0x15, 0xd0, 0x8b, 0x85, 0xe5, 0xed, 0xe5, 0x95, 0xed, 0xc4, 0x1b, 0x73, 0x11,
	0xea, 0xab, 0x8d, 0x43, 0x2e, 0x42, 0xfd, 0x43, 0x2e, 0x42, 0x7d, 0x7d, 0x94, 0xbc, 0xa1, 0x32,
	0x14, 0xcc, 0x61, 0xe7, 0x89, 0xa1, 0x64, 0xf8, 0xb1, 0x73, 0xd9, 0x37, 0xcf, 0x15, 0x89, 0x2f,
	0xe2, 0x13, 0x63, 0x64, 0x60, 0xb3, 0xa7, 0x64, 0x51, 0x0d, 0xe4, 0x5e, 0x07, 0x1b, 0xd3, 0x8b,
	0x41, 0x67, 0xa4, 0xe4, 0x84, 0xc2, 0xcd, 0xb1, 0x39, 0x51, 0xf2, 0xf1, 0xb1, 0x6f, 0x9c, 0x2b,
	0x85, 0x6e, 0x11, 0xf2, 0xc4, 0x62, 0x96, 0xfe, 0xbd, 0x04, 0x8d, 0x83, 0xc9, 0xa3, 0xfb, 0x50,
	0x76, 0x1d, 0x97, 0x6e, 0x34, 0x20, 0xe3, 0x8d, 0x8d, 0xde, 0x81, 0xb2, 0x4b, 0x89, 0x63, 0x6d,
	0x75, 0x5c, 0x89, 0xd6, 0xcd, 0xd2, 0x90, 0xfb, 0xcc, 0x3e, 0x17, 0x24, 0x3f, 0x88, 0x07, 0xe9,
	0x99, 0x43, 0xd8, 0x5c, 0x48, 0xa0, 0x86, 0x63, 0x03, 0xdd, 0x85, 0xe2, 0x9c, 0x3a, 0xb3, 0x39,
	0x13, 0xef, 0x6d, 0x0d, 0x27, 0x96, 0xfe, 0x83, 0x04, 0x8d, 0x83, 0xd6, 0x5f, 0x49, 0x15, 0xa7,
	0x50, 0x21, 0xab, 0x40, 0x3c, 0xc6, 0x53, 0x2f, 0x14, 0xa4, 0xf9, 0x6e, 0x3d, 0x5a, 0x37, 0xa1,
	0x9f, 0xb8, 0x47, 0x63, 0x0c, 0x29, 0x64, 0x14, 0xea, 0xbf, 0x49, 0xd0, 0x38, 0xd0, 0xd5, 0x2b,
	0x29, 0xa4, 0x07, 0x1a, 0xa1, 0xcb, 0x80, 0xda, 0x7c, 0x35, 0xa7, 0x9b, 0x9a, 0x1c, 0x6f, 0x1a,
	0x52, 0xdb, 0xf7, 0x48, 0x98, 0xcc, 0xe9, 0x8d, 0x2d, 0x2a, 0xad, 0xd0, 0xf4, 0xc6, 0x31, 0xe4,
	0xff, 0x77, 0xf3, 0x25, 0xdc, 0x39, 0x52, 0xfc, 0x7f, 0xb6, 0x93, 0xac, 0x6d, 0xf6, 0x78, 0x6d,
	0xf5, 0xaf, 0xf8, 0x0d, 0xed, 0x2d, 0x02, 0x6f, 0x5e, 0x2c, 0xc2, 0xf6, 0x81, 0x11, 0xcd, 0x0b,
	0x18, 0x6f, 0x5e, 0x04, 0x4d, 0x82, 0xde, 0x04, 0x88, 0x71, 0x9e, 0xe5, 0xa6, 0xef, 0x84, 0x2c,
	0x3c, 0x23, 0xcb, 0xa5, 0xfa, 0x02, 0xd0, 0xf1, 0xb6, 0xa0, 0x0f, 0xa1, 0xba, 0x59, 0xae, 0x2d,
	0x81, 0xe8, 0x36, 0x45, 0x9b, 0x7d, 0x0c, 0xe9, 0x46, 0x99, 0x04, 0xbd, 0x0d, 0xf5, 0x6d, 0xc6,
	0x0e, 0x55, 0x35, 0xc5, 0x70, 0xb6, 0xee, 0xfb, 0xcf, 0x6f, 0x35, 0xe9, 0x8f, 0x5b, 0x2d, 0xf3,
	0xe2, 0x56, 0x93, 0xbe, 0x8b, 0x34, 0xe9, 0xe7, 0x48, 0x93, 0x7e, 0x8d, 0x34, 0xe9, 0x79, 0xa4,
	0x49, 0x7f, 0x46, 0x9a, 0xf4, 0x77, 0xa4, 0x65, 0x5e, 0x44, 0x9a, 0xf4, 0xd3, 0x5f, 0x5a, 0xe6,
	0xaa, 0x28, 0x7e, 0x89, 0x3e, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x99, 0x7f, 0xdf, 0x6e, 0x56,
	0x09, 0x00, 0x00,
}
