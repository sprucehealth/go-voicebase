// Code generated by protoc-gen-gogo.
// source: models.proto
// DO NOT EDIT!

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		models.proto

	It has these top-level messages:
		SentMessage
		EmailMessage
		SMSMessage
		DeleteResourceRequest
*/
package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SentMessage_Type int32

const (
	SentMessage_SMS   SentMessage_Type = 0
	SentMessage_EMAIL SentMessage_Type = 1
)

var SentMessage_Type_name = map[int32]string{
	0: "SMS",
	1: "EMAIL",
}
var SentMessage_Type_value = map[string]int32{
	"SMS":   0,
	"EMAIL": 1,
}

type DeleteResourceRequest_Type int32

const (
	DeleteResourceRequest_INVALID              DeleteResourceRequest_Type = 0
	DeleteResourceRequest_TWILIO_CALL          DeleteResourceRequest_Type = 1
	DeleteResourceRequest_TWILIO_SMS           DeleteResourceRequest_Type = 2
	DeleteResourceRequest_TWILIO_MEDIA         DeleteResourceRequest_Type = 3
	DeleteResourceRequest_TWILIO_RECORDING     DeleteResourceRequest_Type = 4
	DeleteResourceRequest_TWILIO_TRANSCRIPTION DeleteResourceRequest_Type = 5
)

var DeleteResourceRequest_Type_name = map[int32]string{
	0: "INVALID",
	1: "TWILIO_CALL",
	2: "TWILIO_SMS",
	3: "TWILIO_MEDIA",
	4: "TWILIO_RECORDING",
	5: "TWILIO_TRANSCRIPTION",
}
var DeleteResourceRequest_Type_value = map[string]int32{
	"INVALID":              0,
	"TWILIO_CALL":          1,
	"TWILIO_SMS":           2,
	"TWILIO_MEDIA":         3,
	"TWILIO_RECORDING":     4,
	"TWILIO_TRANSCRIPTION": 5,
}

type SentMessage struct {
	ID          uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UUID        string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Destination string           `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Type        SentMessage_Type `protobuf:"varint,4,opt,name=type,proto3,enum=models.SentMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*SentMessage_EmailMsg
	//	*SentMessage_SMSMsg
	Message isSentMessage_Message `protobuf_oneof:"message"`
}

func (m *SentMessage) Reset()      { *m = SentMessage{} }
func (*SentMessage) ProtoMessage() {}

type isSentMessage_Message interface {
	isSentMessage_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SentMessage_EmailMsg struct {
	EmailMsg *EmailMessage `protobuf:"bytes,5,opt,name=email_msg,oneof"`
}
type SentMessage_SMSMsg struct {
	SMSMsg *SMSMessage `protobuf:"bytes,6,opt,name=sms_msg,oneof"`
}

func (*SentMessage_EmailMsg) isSentMessage_Message() {}
func (*SentMessage_SMSMsg) isSentMessage_Message()   {}

func (m *SentMessage) GetMessage() isSentMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SentMessage) GetEmailMsg() *EmailMessage {
	if x, ok := m.GetMessage().(*SentMessage_EmailMsg); ok {
		return x.EmailMsg
	}
	return nil
}

func (m *SentMessage) GetSMSMsg() *SMSMessage {
	if x, ok := m.GetMessage().(*SentMessage_SMSMsg); ok {
		return x.SMSMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SentMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _SentMessage_OneofMarshaler, _SentMessage_OneofUnmarshaler, []interface{}{
		(*SentMessage_EmailMsg)(nil),
		(*SentMessage_SMSMsg)(nil),
	}
}

func _SentMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SentMessage)
	// message
	switch x := m.Message.(type) {
	case *SentMessage_EmailMsg:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmailMsg); err != nil {
			return err
		}
	case *SentMessage_SMSMsg:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMSMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SentMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _SentMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SentMessage)
	switch tag {
	case 5: // message.email_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SentMessage_EmailMsg{msg}
		return true, err
	case 6: // message.sms_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SentMessage_SMSMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

type EmailMessage struct {
	ID        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject   string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Body      string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	FromName  string `protobuf:"bytes,4,opt,name=from_name,proto3" json:"from_name,omitempty"`
	FromEmail string `protobuf:"bytes,5,opt,name=from_email,proto3" json:"from_email,omitempty"`
	ToName    string `protobuf:"bytes,6,opt,name=to_name,proto3" json:"to_name,omitempty"`
	ToEmail   string `protobuf:"bytes,7,opt,name=to_email,proto3" json:"to_email,omitempty"`
}

func (m *EmailMessage) Reset()      { *m = EmailMessage{} }
func (*EmailMessage) ProtoMessage() {}

type SMSMessage struct {
	ID              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FromPhoneNumber string `protobuf:"bytes,2,opt,name=from_phone_number,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber   string `protobuf:"bytes,3,opt,name=to_phone_number,proto3" json:"to_phone_number,omitempty"`
	Text            string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	DateCreated     uint64 `protobuf:"varint,5,opt,name=date_created,proto3" json:"date_created,omitempty"`
	DateSent        uint64 `protobuf:"varint,6,opt,name=date_sent,proto3" json:"date_sent,omitempty"`
}

func (m *SMSMessage) Reset()      { *m = SMSMessage{} }
func (*SMSMessage) ProtoMessage() {}

type DeleteResourceRequest struct {
	Type       DeleteResourceRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=models.DeleteResourceRequest_Type" json:"type,omitempty"`
	ResourceID string                     `protobuf:"bytes,2,opt,name=resource_id,proto3" json:"resource_id,omitempty"`
}

func (m *DeleteResourceRequest) Reset()      { *m = DeleteResourceRequest{} }
func (*DeleteResourceRequest) ProtoMessage() {}

func init() {
	proto.RegisterType((*SentMessage)(nil), "models.SentMessage")
	proto.RegisterType((*EmailMessage)(nil), "models.EmailMessage")
	proto.RegisterType((*SMSMessage)(nil), "models.SMSMessage")
	proto.RegisterType((*DeleteResourceRequest)(nil), "models.DeleteResourceRequest")
	proto.RegisterEnum("models.SentMessage_Type", SentMessage_Type_name, SentMessage_Type_value)
	proto.RegisterEnum("models.DeleteResourceRequest_Type", DeleteResourceRequest_Type_name, DeleteResourceRequest_Type_value)
}
func (x SentMessage_Type) String() string {
	s, ok := SentMessage_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeleteResourceRequest_Type) String() string {
	s, ok := DeleteResourceRequest_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SentMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SentMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SentMessage_EmailMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SentMessage_EmailMsg)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EmailMsg.Equal(that1.EmailMsg) {
		return false
	}
	return true
}
func (this *SentMessage_SMSMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SentMessage_SMSMsg)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMSMsg.Equal(that1.SMSMsg) {
		return false
	}
	return true
}
func (this *EmailMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.FromName != that1.FromName {
		return false
	}
	if this.FromEmail != that1.FromEmail {
		return false
	}
	if this.ToName != that1.ToName {
		return false
	}
	if this.ToEmail != that1.ToEmail {
		return false
	}
	return true
}
func (this *SMSMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.DateCreated != that1.DateCreated {
		return false
	}
	if this.DateSent != that1.DateSent {
		return false
	}
	return true
}
func (this *DeleteResourceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteResourceRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ResourceID != that1.ResourceID {
		return false
	}
	return true
}
func (this *SentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&models.SentMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SentMessage_EmailMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.SentMessage_EmailMsg{` +
		`EmailMsg:` + fmt.Sprintf("%#v", this.EmailMsg) + `}`}, ", ")
	return s
}
func (this *SentMessage_SMSMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.SentMessage_SMSMsg{` +
		`SMSMsg:` + fmt.Sprintf("%#v", this.SMSMsg) + `}`}, ", ")
	return s
}
func (this *EmailMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.EmailMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "FromName: "+fmt.Sprintf("%#v", this.FromName)+",\n")
	s = append(s, "FromEmail: "+fmt.Sprintf("%#v", this.FromEmail)+",\n")
	s = append(s, "ToName: "+fmt.Sprintf("%#v", this.ToName)+",\n")
	s = append(s, "ToEmail: "+fmt.Sprintf("%#v", this.ToEmail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&models.SMSMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "DateCreated: "+fmt.Sprintf("%#v", this.DateCreated)+",\n")
	s = append(s, "DateSent: "+fmt.Sprintf("%#v", this.DateSent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteResourceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DeleteResourceRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ResourceID: "+fmt.Sprintf("%#v", this.ResourceID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModels(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringModels(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *SentMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SentMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintModels(data, i, uint64(m.ID))
	}
	if len(m.UUID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	if len(m.Destination) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Destination)))
		i += copy(data[i:], m.Destination)
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintModels(data, i, uint64(m.Type))
	}
	if m.Message != nil {
		nn1, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SentMessage_EmailMsg) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.EmailMsg != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(m.EmailMsg.Size()))
		n2, err := m.EmailMsg.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *SentMessage_SMSMsg) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMSMsg != nil {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(m.SMSMsg.Size()))
		n3, err := m.SMSMsg.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *EmailMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Subject) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Subject)))
		i += copy(data[i:], m.Subject)
	}
	if len(m.Body) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.FromName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FromName)))
		i += copy(data[i:], m.FromName)
	}
	if len(m.FromEmail) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FromEmail)))
		i += copy(data[i:], m.FromEmail)
	}
	if len(m.ToName) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ToName)))
		i += copy(data[i:], m.ToName)
	}
	if len(m.ToEmail) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ToEmail)))
		i += copy(data[i:], m.ToEmail)
	}
	return i, nil
}

func (m *SMSMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	if len(m.Text) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if m.DateCreated != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintModels(data, i, uint64(m.DateCreated))
	}
	if m.DateSent != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintModels(data, i, uint64(m.DateSent))
	}
	return i, nil
}

func (m *DeleteResourceRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteResourceRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintModels(data, i, uint64(m.Type))
	}
	if len(m.ResourceID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ResourceID)))
		i += copy(data[i:], m.ResourceID)
	}
	return i, nil
}

func encodeFixed64Models(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Models(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModels(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SentMessage) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *SentMessage_EmailMsg) Size() (n int) {
	var l int
	_ = l
	if m.EmailMsg != nil {
		l = m.EmailMsg.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *SentMessage_SMSMsg) Size() (n int) {
	var l int
	_ = l
	if m.SMSMsg != nil {
		l = m.SMSMsg.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *EmailMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FromEmail)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ToName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ToEmail)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *SMSMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.DateCreated != 0 {
		n += 1 + sovModels(uint64(m.DateCreated))
	}
	if m.DateSent != 0 {
		n += 1 + sovModels(uint64(m.DateSent))
	}
	return n
}

func (m *DeleteResourceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	l = len(m.ResourceID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentMessage_EmailMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentMessage_EmailMsg{`,
		`EmailMsg:` + strings.Replace(fmt.Sprintf("%v", this.EmailMsg), "EmailMessage", "EmailMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentMessage_SMSMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentMessage_SMSMsg{`,
		`SMSMsg:` + strings.Replace(fmt.Sprintf("%v", this.SMSMsg), "SMSMessage", "SMSMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`FromName:` + fmt.Sprintf("%v", this.FromName) + `,`,
		`FromEmail:` + fmt.Sprintf("%v", this.FromEmail) + `,`,
		`ToName:` + fmt.Sprintf("%v", this.ToName) + `,`,
		`ToEmail:` + fmt.Sprintf("%v", this.ToEmail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`DateCreated:` + fmt.Sprintf("%v", this.DateCreated) + `,`,
		`DateSent:` + fmt.Sprintf("%v", this.DateSent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteResourceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteResourceRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ResourceID:` + fmt.Sprintf("%v", this.ResourceID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModels(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SentMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (SentMessage_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SentMessage_EmailMsg{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMSMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SentMessage_SMSMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEmail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToEmail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			m.DateCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DateCreated |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateSent", wireType)
			}
			m.DateSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DateSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResourceRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (DeleteResourceRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)
