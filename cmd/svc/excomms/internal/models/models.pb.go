// Code generated by protoc-gen-gogo.
// source: models.proto
// DO NOT EDIT!

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		models.proto

	It has these top-level messages:
		SentMessage
		EmailMessage
		SMSMessage
		DeleteResourceRequest
*/
package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SentMessage_Type int32

const (
	SentMessage_SMS   SentMessage_Type = 0
	SentMessage_EMAIL SentMessage_Type = 1
)

var SentMessage_Type_name = map[int32]string{
	0: "SMS",
	1: "EMAIL",
}
var SentMessage_Type_value = map[string]int32{
	"SMS":   0,
	"EMAIL": 1,
}

func (SentMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{0, 0} }

type DeleteResourceRequest_Type int32

const (
	DeleteResourceRequest_INVALID              DeleteResourceRequest_Type = 0
	DeleteResourceRequest_TWILIO_CALL          DeleteResourceRequest_Type = 1
	DeleteResourceRequest_TWILIO_SMS           DeleteResourceRequest_Type = 2
	DeleteResourceRequest_TWILIO_MEDIA         DeleteResourceRequest_Type = 3
	DeleteResourceRequest_TWILIO_RECORDING     DeleteResourceRequest_Type = 4
	DeleteResourceRequest_TWILIO_TRANSCRIPTION DeleteResourceRequest_Type = 5
)

var DeleteResourceRequest_Type_name = map[int32]string{
	0: "INVALID",
	1: "TWILIO_CALL",
	2: "TWILIO_SMS",
	3: "TWILIO_MEDIA",
	4: "TWILIO_RECORDING",
	5: "TWILIO_TRANSCRIPTION",
}
var DeleteResourceRequest_Type_value = map[string]int32{
	"INVALID":              0,
	"TWILIO_CALL":          1,
	"TWILIO_SMS":           2,
	"TWILIO_MEDIA":         3,
	"TWILIO_RECORDING":     4,
	"TWILIO_TRANSCRIPTION": 5,
}

func (DeleteResourceRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorModels, []int{3, 0}
}

type SentMessage struct {
	ID          uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UUID        string           `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Destination string           `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Type        SentMessage_Type `protobuf:"varint,4,opt,name=type,proto3,enum=models.SentMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*SentMessage_EmailMsg
	//	*SentMessage_SMSMsg
	Message isSentMessage_Message `protobuf_oneof:"message"`
}

func (m *SentMessage) Reset()                    { *m = SentMessage{} }
func (*SentMessage) ProtoMessage()               {}
func (*SentMessage) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

type isSentMessage_Message interface {
	isSentMessage_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SentMessage_EmailMsg struct {
	EmailMsg *EmailMessage `protobuf:"bytes,5,opt,name=email_msg,json=emailMsg,oneof"`
}
type SentMessage_SMSMsg struct {
	SMSMsg *SMSMessage `protobuf:"bytes,6,opt,name=sms_msg,json=smsMsg,oneof"`
}

func (*SentMessage_EmailMsg) isSentMessage_Message() {}
func (*SentMessage_SMSMsg) isSentMessage_Message()   {}

func (m *SentMessage) GetMessage() isSentMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SentMessage) GetEmailMsg() *EmailMessage {
	if x, ok := m.GetMessage().(*SentMessage_EmailMsg); ok {
		return x.EmailMsg
	}
	return nil
}

func (m *SentMessage) GetSMSMsg() *SMSMessage {
	if x, ok := m.GetMessage().(*SentMessage_SMSMsg); ok {
		return x.SMSMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SentMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SentMessage_OneofMarshaler, _SentMessage_OneofUnmarshaler, _SentMessage_OneofSizer, []interface{}{
		(*SentMessage_EmailMsg)(nil),
		(*SentMessage_SMSMsg)(nil),
	}
}

func _SentMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SentMessage)
	// message
	switch x := m.Message.(type) {
	case *SentMessage_EmailMsg:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmailMsg); err != nil {
			return err
		}
	case *SentMessage_SMSMsg:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMSMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SentMessage.Message has unexpected type %T", x)
	}
	return nil
}

func _SentMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SentMessage)
	switch tag {
	case 5: // message.email_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SentMessage_EmailMsg{msg}
		return true, err
	case 6: // message.sms_msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SentMessage_SMSMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SentMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SentMessage)
	// message
	switch x := m.Message.(type) {
	case *SentMessage_EmailMsg:
		s := proto.Size(x.EmailMsg)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SentMessage_SMSMsg:
		s := proto.Size(x.SMSMsg)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmailMessage struct {
	ID                    string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Subject               string                       `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Body                  string                       `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	FromName              string                       `protobuf:"bytes,4,opt,name=from_name,json=fromName,proto3" json:"from_name,omitempty"`
	FromEmail             string                       `protobuf:"bytes,5,opt,name=from_email,json=fromEmail,proto3" json:"from_email,omitempty"`
	ToName                string                       `protobuf:"bytes,6,opt,name=to_name,json=toName,proto3" json:"to_name,omitempty"`
	ToEmail               string                       `protobuf:"bytes,7,opt,name=to_email,json=toEmail,proto3" json:"to_email,omitempty"`
	MediaURLs             []string                     `protobuf:"bytes,8,rep,name=media_urls,json=mediaUrls" json:"media_urls,omitempty"`
	TemplateID            string                       `protobuf:"bytes,9,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateSubstitutions []*EmailMessage_Substitution `protobuf:"bytes,10,rep,name=template_substitutions,json=templateSubstitutions" json:"template_substitutions,omitempty"`
}

func (m *EmailMessage) Reset()                    { *m = EmailMessage{} }
func (*EmailMessage) ProtoMessage()               {}
func (*EmailMessage) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

func (m *EmailMessage) GetTemplateSubstitutions() []*EmailMessage_Substitution {
	if m != nil {
		return m.TemplateSubstitutions
	}
	return nil
}

type EmailMessage_Substitution struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EmailMessage_Substitution) Reset()      { *m = EmailMessage_Substitution{} }
func (*EmailMessage_Substitution) ProtoMessage() {}
func (*EmailMessage_Substitution) Descriptor() ([]byte, []int) {
	return fileDescriptorModels, []int{1, 0}
}

type SMSMessage struct {
	ID              string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FromPhoneNumber string   `protobuf:"bytes,2,opt,name=from_phone_number,json=fromPhoneNumber,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber   string   `protobuf:"bytes,3,opt,name=to_phone_number,json=toPhoneNumber,proto3" json:"to_phone_number,omitempty"`
	Text            string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	DateCreated     uint64   `protobuf:"varint,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	DateSent        uint64   `protobuf:"varint,6,opt,name=date_sent,json=dateSent,proto3" json:"date_sent,omitempty"`
	MediaURLs       []string `protobuf:"bytes,7,rep,name=media_urls,json=mediaUrls" json:"media_urls,omitempty"`
}

func (m *SMSMessage) Reset()                    { *m = SMSMessage{} }
func (*SMSMessage) ProtoMessage()               {}
func (*SMSMessage) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{2} }

type DeleteResourceRequest struct {
	Type       DeleteResourceRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=models.DeleteResourceRequest_Type" json:"type,omitempty"`
	ResourceID string                     `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (m *DeleteResourceRequest) Reset()                    { *m = DeleteResourceRequest{} }
func (*DeleteResourceRequest) ProtoMessage()               {}
func (*DeleteResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{3} }

func init() {
	proto.RegisterType((*SentMessage)(nil), "models.SentMessage")
	proto.RegisterType((*EmailMessage)(nil), "models.EmailMessage")
	proto.RegisterType((*EmailMessage_Substitution)(nil), "models.EmailMessage.Substitution")
	proto.RegisterType((*SMSMessage)(nil), "models.SMSMessage")
	proto.RegisterType((*DeleteResourceRequest)(nil), "models.DeleteResourceRequest")
	proto.RegisterEnum("models.SentMessage_Type", SentMessage_Type_name, SentMessage_Type_value)
	proto.RegisterEnum("models.DeleteResourceRequest_Type", DeleteResourceRequest_Type_name, DeleteResourceRequest_Type_value)
}
func (x SentMessage_Type) String() string {
	s, ok := SentMessage_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeleteResourceRequest_Type) String() string {
	s, ok := DeleteResourceRequest_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SentMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SentMessage)
	if !ok {
		that2, ok := that.(SentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SentMessage_EmailMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SentMessage_EmailMsg)
	if !ok {
		that2, ok := that.(SentMessage_EmailMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EmailMsg.Equal(that1.EmailMsg) {
		return false
	}
	return true
}
func (this *SentMessage_SMSMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SentMessage_SMSMsg)
	if !ok {
		that2, ok := that.(SentMessage_SMSMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMSMsg.Equal(that1.SMSMsg) {
		return false
	}
	return true
}
func (this *EmailMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailMessage)
	if !ok {
		that2, ok := that.(EmailMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.FromName != that1.FromName {
		return false
	}
	if this.FromEmail != that1.FromEmail {
		return false
	}
	if this.ToName != that1.ToName {
		return false
	}
	if this.ToEmail != that1.ToEmail {
		return false
	}
	if len(this.MediaURLs) != len(that1.MediaURLs) {
		return false
	}
	for i := range this.MediaURLs {
		if this.MediaURLs[i] != that1.MediaURLs[i] {
			return false
		}
	}
	if this.TemplateID != that1.TemplateID {
		return false
	}
	if len(this.TemplateSubstitutions) != len(that1.TemplateSubstitutions) {
		return false
	}
	for i := range this.TemplateSubstitutions {
		if !this.TemplateSubstitutions[i].Equal(that1.TemplateSubstitutions[i]) {
			return false
		}
	}
	return true
}
func (this *EmailMessage_Substitution) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailMessage_Substitution)
	if !ok {
		that2, ok := that.(EmailMessage_Substitution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SMSMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSMessage)
	if !ok {
		that2, ok := that.(SMSMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.DateCreated != that1.DateCreated {
		return false
	}
	if this.DateSent != that1.DateSent {
		return false
	}
	if len(this.MediaURLs) != len(that1.MediaURLs) {
		return false
	}
	for i := range this.MediaURLs {
		if this.MediaURLs[i] != that1.MediaURLs[i] {
			return false
		}
	}
	return true
}
func (this *DeleteResourceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteResourceRequest)
	if !ok {
		that2, ok := that.(DeleteResourceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ResourceID != that1.ResourceID {
		return false
	}
	return true
}
func (this *SentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&models.SentMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SentMessage_EmailMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.SentMessage_EmailMsg{` +
		`EmailMsg:` + fmt.Sprintf("%#v", this.EmailMsg) + `}`}, ", ")
	return s
}
func (this *SentMessage_SMSMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.SentMessage_SMSMsg{` +
		`SMSMsg:` + fmt.Sprintf("%#v", this.SMSMsg) + `}`}, ", ")
	return s
}
func (this *EmailMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&models.EmailMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "FromName: "+fmt.Sprintf("%#v", this.FromName)+",\n")
	s = append(s, "FromEmail: "+fmt.Sprintf("%#v", this.FromEmail)+",\n")
	s = append(s, "ToName: "+fmt.Sprintf("%#v", this.ToName)+",\n")
	s = append(s, "ToEmail: "+fmt.Sprintf("%#v", this.ToEmail)+",\n")
	s = append(s, "MediaURLs: "+fmt.Sprintf("%#v", this.MediaURLs)+",\n")
	s = append(s, "TemplateID: "+fmt.Sprintf("%#v", this.TemplateID)+",\n")
	if this.TemplateSubstitutions != nil {
		s = append(s, "TemplateSubstitutions: "+fmt.Sprintf("%#v", this.TemplateSubstitutions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailMessage_Substitution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.EmailMessage_Substitution{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.SMSMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "DateCreated: "+fmt.Sprintf("%#v", this.DateCreated)+",\n")
	s = append(s, "DateSent: "+fmt.Sprintf("%#v", this.DateSent)+",\n")
	s = append(s, "MediaURLs: "+fmt.Sprintf("%#v", this.MediaURLs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteResourceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.DeleteResourceRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ResourceID: "+fmt.Sprintf("%#v", this.ResourceID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModels(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringModels(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *SentMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SentMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintModels(data, i, uint64(m.ID))
	}
	if len(m.UUID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	if len(m.Destination) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Destination)))
		i += copy(data[i:], m.Destination)
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintModels(data, i, uint64(m.Type))
	}
	if m.Message != nil {
		nn1, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SentMessage_EmailMsg) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.EmailMsg != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(m.EmailMsg.Size()))
		n2, err := m.EmailMsg.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *SentMessage_SMSMsg) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMSMsg != nil {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(m.SMSMsg.Size()))
		n3, err := m.SMSMsg.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *EmailMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Subject) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Subject)))
		i += copy(data[i:], m.Subject)
	}
	if len(m.Body) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.FromName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FromName)))
		i += copy(data[i:], m.FromName)
	}
	if len(m.FromEmail) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FromEmail)))
		i += copy(data[i:], m.FromEmail)
	}
	if len(m.ToName) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ToName)))
		i += copy(data[i:], m.ToName)
	}
	if len(m.ToEmail) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ToEmail)))
		i += copy(data[i:], m.ToEmail)
	}
	if len(m.MediaURLs) > 0 {
		for _, s := range m.MediaURLs {
			data[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.TemplateID) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.TemplateID)))
		i += copy(data[i:], m.TemplateID)
	}
	if len(m.TemplateSubstitutions) > 0 {
		for _, msg := range m.TemplateSubstitutions {
			data[i] = 0x52
			i++
			i = encodeVarintModels(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EmailMessage_Substitution) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailMessage_Substitution) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *SMSMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	if len(m.Text) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if m.DateCreated != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintModels(data, i, uint64(m.DateCreated))
	}
	if m.DateSent != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintModels(data, i, uint64(m.DateSent))
	}
	if len(m.MediaURLs) > 0 {
		for _, s := range m.MediaURLs {
			data[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *DeleteResourceRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteResourceRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintModels(data, i, uint64(m.Type))
	}
	if len(m.ResourceID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ResourceID)))
		i += copy(data[i:], m.ResourceID)
	}
	return i, nil
}

func encodeFixed64Models(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Models(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModels(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SentMessage) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *SentMessage_EmailMsg) Size() (n int) {
	var l int
	_ = l
	if m.EmailMsg != nil {
		l = m.EmailMsg.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *SentMessage_SMSMsg) Size() (n int) {
	var l int
	_ = l
	if m.SMSMsg != nil {
		l = m.SMSMsg.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *EmailMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FromEmail)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ToName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ToEmail)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.MediaURLs) > 0 {
		for _, s := range m.MediaURLs {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = len(m.TemplateID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.TemplateSubstitutions) > 0 {
		for _, e := range m.TemplateSubstitutions {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *EmailMessage_Substitution) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *SMSMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.DateCreated != 0 {
		n += 1 + sovModels(uint64(m.DateCreated))
	}
	if m.DateSent != 0 {
		n += 1 + sovModels(uint64(m.DateSent))
	}
	if len(m.MediaURLs) > 0 {
		for _, s := range m.MediaURLs {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DeleteResourceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	l = len(m.ResourceID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentMessage_EmailMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentMessage_EmailMsg{`,
		`EmailMsg:` + strings.Replace(fmt.Sprintf("%v", this.EmailMsg), "EmailMessage", "EmailMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SentMessage_SMSMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SentMessage_SMSMsg{`,
		`SMSMsg:` + strings.Replace(fmt.Sprintf("%v", this.SMSMsg), "SMSMessage", "SMSMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`FromName:` + fmt.Sprintf("%v", this.FromName) + `,`,
		`FromEmail:` + fmt.Sprintf("%v", this.FromEmail) + `,`,
		`ToName:` + fmt.Sprintf("%v", this.ToName) + `,`,
		`ToEmail:` + fmt.Sprintf("%v", this.ToEmail) + `,`,
		`MediaURLs:` + fmt.Sprintf("%v", this.MediaURLs) + `,`,
		`TemplateID:` + fmt.Sprintf("%v", this.TemplateID) + `,`,
		`TemplateSubstitutions:` + strings.Replace(fmt.Sprintf("%v", this.TemplateSubstitutions), "EmailMessage_Substitution", "EmailMessage_Substitution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage_Substitution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage_Substitution{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`DateCreated:` + fmt.Sprintf("%v", this.DateCreated) + `,`,
		`DateSent:` + fmt.Sprintf("%v", this.DateSent) + `,`,
		`MediaURLs:` + fmt.Sprintf("%v", this.MediaURLs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteResourceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteResourceRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ResourceID:` + fmt.Sprintf("%v", this.ResourceID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModels(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SentMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (SentMessage_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SentMessage_EmailMsg{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMSMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SentMessage_SMSMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEmail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToEmail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaURLs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaURLs = append(m.MediaURLs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateSubstitutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateSubstitutions = append(m.TemplateSubstitutions, &EmailMessage_Substitution{})
			if err := m.TemplateSubstitutions[len(m.TemplateSubstitutions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage_Substitution) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Substitution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Substitution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			m.DateCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DateCreated |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateSent", wireType)
			}
			m.DateSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DateSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaURLs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaURLs = append(m.MediaURLs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResourceRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (DeleteResourceRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("models.proto", fileDescriptorModels) }

var fileDescriptorModels = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x6e, 0x1c, 0x3f, 0x67, 0x5b, 0x33, 0xea, 0x2e, 0xa6, 0x80, 0x93, 0xcd, 0x01,
	0x45, 0xa8, 0xa4, 0x52, 0x57, 0x5a, 0x89, 0x63, 0xd2, 0x54, 0xac, 0xa5, 0x38, 0x5d, 0x4d, 0x52,
	0xe0, 0x16, 0x39, 0xf5, 0xac, 0xd7, 0x10, 0x67, 0x82, 0x67, 0xbc, 0x22, 0x37, 0x7e, 0x02, 0x3f,
	0x03, 0x71, 0xe7, 0x3f, 0x70, 0xdc, 0x23, 0xa7, 0x88, 0x9a, 0x0b, 0xc7, 0x3d, 0x22, 0x4e, 0x68,
	0xc6, 0x93, 0xe2, 0x45, 0x65, 0x6f, 0xf3, 0xbe, 0xf7, 0x7d, 0x1e, 0xfb, 0xfb, 0xde, 0x33, 0xb4,
	0x53, 0x16, 0xd1, 0x15, 0x1f, 0x6c, 0x32, 0x26, 0x18, 0x6e, 0x96, 0xd5, 0xc9, 0x67, 0x71, 0x22,
	0x5e, 0xe6, 0xcb, 0xc1, 0x0d, 0x4b, 0xcf, 0x62, 0x16, 0xb3, 0x33, 0xd5, 0x5e, 0xe6, 0x2f, 0x54,
	0xa5, 0x0a, 0x75, 0x2a, 0x65, 0xbd, 0x9f, 0xeb, 0x60, 0xcf, 0xe8, 0x5a, 0x04, 0x94, 0xf3, 0x30,
	0xa6, 0xf8, 0x11, 0xd4, 0x93, 0xc8, 0x45, 0x5d, 0xd4, 0x37, 0x46, 0xcd, 0x62, 0xd7, 0xa9, 0xfb,
	0x63, 0x52, 0x4f, 0x22, 0xfc, 0x11, 0x18, 0x79, 0x9e, 0x44, 0x6e, 0xbd, 0x8b, 0xfa, 0xd6, 0xa8,
	0x55, 0xec, 0x3a, 0xc6, 0xf5, 0xb5, 0x3f, 0x26, 0x0a, 0xc5, 0x5d, 0xb0, 0x23, 0xca, 0x45, 0xb2,
	0x0e, 0x45, 0xc2, 0xd6, 0x6e, 0x43, 0x92, 0x48, 0x15, 0xc2, 0xa7, 0x60, 0x88, 0xed, 0x86, 0xba,
	0x46, 0x17, 0xf5, 0x0f, 0xcf, 0xdd, 0x81, 0x7e, 0xf7, 0xca, 0xd5, 0x83, 0xf9, 0x76, 0x43, 0x89,
	0x62, 0xe1, 0x27, 0x60, 0xd1, 0x34, 0x4c, 0x56, 0x8b, 0x94, 0xc7, 0xee, 0x41, 0x17, 0xf5, 0xed,
	0xf3, 0xe3, 0xbd, 0xe4, 0x52, 0x36, 0xb4, 0xe6, 0x59, 0x8d, 0xb4, 0x14, 0x31, 0xe0, 0x31, 0xfe,
	0x1c, 0x4c, 0x9e, 0x72, 0x25, 0x69, 0x2a, 0x09, 0xbe, 0xbb, 0x25, 0x98, 0x69, 0xc1, 0x08, 0x8a,
	0x5d, 0xa7, 0x29, 0x6b, 0x1e, 0x3f, 0xab, 0x91, 0x26, 0x4f, 0x79, 0xc0, 0xe3, 0xde, 0x09, 0x18,
	0xf2, 0x76, 0x6c, 0x42, 0x63, 0x16, 0xcc, 0x9c, 0x1a, 0xb6, 0xe0, 0xe0, 0x32, 0x18, 0xfa, 0x13,
	0x07, 0x8d, 0x2c, 0x30, 0xd3, 0x52, 0xdc, 0xfb, 0xa5, 0x01, 0xed, 0xea, 0xf5, 0x15, 0xb7, 0xac,
	0xb7, 0xdc, 0x72, 0xc1, 0xe4, 0xf9, 0xf2, 0x1b, 0x7a, 0x23, 0x4a, 0xc3, 0xc8, 0xbe, 0xc4, 0x18,
	0x8c, 0x25, 0x8b, 0xb6, 0xda, 0x22, 0x75, 0xc6, 0x1f, 0x82, 0xf5, 0x22, 0x63, 0xe9, 0x62, 0x1d,
	0xa6, 0xa5, 0x41, 0x16, 0x69, 0x49, 0x60, 0x1a, 0xa6, 0x14, 0x7f, 0x0c, 0xa0, 0x9a, 0xea, 0x33,
	0x95, 0x17, 0x16, 0x51, 0x74, 0xf5, 0x22, 0xf8, 0x7d, 0x30, 0x05, 0x2b, 0x95, 0x4d, 0xd5, 0x6b,
	0x0a, 0xa6, 0x74, 0x1f, 0x40, 0x4b, 0x30, 0xad, 0x32, 0xcb, 0x77, 0x10, 0xac, 0xd4, 0x9c, 0x02,
	0xa4, 0x34, 0x4a, 0xc2, 0x45, 0x9e, 0xad, 0xb8, 0xdb, 0xea, 0x36, 0xfa, 0xd6, 0xe8, 0x41, 0xb1,
	0xeb, 0x58, 0x81, 0x44, 0xaf, 0xc9, 0x84, 0x13, 0x4b, 0x11, 0xae, 0xb3, 0x15, 0xc7, 0x67, 0x60,
	0x0b, 0x9a, 0x6e, 0x56, 0xa1, 0xa0, 0x8b, 0x24, 0x72, 0x2d, 0xf5, 0xb1, 0x87, 0xc5, 0xae, 0x03,
	0x73, 0x0d, 0xfb, 0x63, 0x02, 0x7b, 0x8a, 0x1f, 0xe1, 0xaf, 0xe1, 0xd1, 0x9d, 0x80, 0xe7, 0x4b,
	0x2e, 0x12, 0x91, 0xcb, 0x19, 0xe0, 0x2e, 0x74, 0x1b, 0x7d, 0xfb, 0xfc, 0xf1, 0x7d, 0x49, 0x0e,
	0x66, 0x15, 0x26, 0x79, 0xb8, 0x7f, 0x40, 0x15, 0xe5, 0x27, 0x4f, 0xa1, 0x5d, 0x05, 0xb0, 0x03,
	0x8d, 0x6f, 0xe9, 0xb6, 0xf4, 0x9f, 0xc8, 0x23, 0x3e, 0x86, 0x83, 0x57, 0xe1, 0x2a, 0xa7, 0xda,
	0xf6, 0xb2, 0xe8, 0xfd, 0x8d, 0x00, 0xfe, 0x9d, 0x81, 0xff, 0x4d, 0xed, 0x53, 0x78, 0x4f, 0x59,
	0xbd, 0x79, 0xc9, 0xd6, 0x74, 0xb1, 0xce, 0xd3, 0x25, 0xcd, 0xf4, 0x83, 0x8e, 0x64, 0xe3, 0xb9,
	0xc4, 0xa7, 0x0a, 0xc6, 0x9f, 0xc0, 0x91, 0x60, 0x6f, 0x33, 0xcb, 0x48, 0x1f, 0x08, 0x56, 0xe5,
	0x61, 0x30, 0x04, 0xfd, 0x5e, 0xe8, 0x58, 0xd5, 0x19, 0x3f, 0x86, 0x76, 0x24, 0xcd, 0xb9, 0xc9,
	0x68, 0x28, 0x68, 0xa4, 0x42, 0x35, 0x88, 0x2d, 0xb1, 0x8b, 0x12, 0x92, 0x23, 0xa1, 0x28, 0x9c,
	0xae, 0x85, 0x0a, 0xd6, 0x20, 0x2d, 0x09, 0xc8, 0x7d, 0xf9, 0x4f, 0x7e, 0xe6, 0xbb, 0xf3, 0xeb,
	0xfd, 0x85, 0xe0, 0xe1, 0x98, 0xae, 0xa8, 0xa0, 0x84, 0x72, 0x96, 0x67, 0x37, 0x94, 0xd0, 0xef,
	0x72, 0xca, 0x05, 0x7e, 0xaa, 0x77, 0x12, 0xa9, 0x9d, 0xec, 0xed, 0x63, 0xb9, 0x97, 0x5c, 0xdd,
	0xce, 0x33, 0xb0, 0x33, 0xdd, 0x5d, 0xdc, 0xfd, 0x12, 0xd4, 0x44, 0xec, 0x45, 0x72, 0x22, 0xf6,
	0x14, 0x3f, 0xea, 0xbd, 0xd2, 0xeb, 0x65, 0x83, 0xe9, 0x4f, 0xbf, 0x1c, 0x4e, 0xfc, 0xb1, 0x53,
	0xc3, 0x47, 0x60, 0xcf, 0xbf, 0xf2, 0x27, 0xfe, 0xd5, 0xe2, 0x62, 0x38, 0x99, 0x38, 0x08, 0x1f,
	0x02, 0x68, 0x40, 0xee, 0x60, 0x1d, 0x3b, 0xd0, 0xd6, 0x75, 0x70, 0x39, 0xf6, 0x87, 0x4e, 0x03,
	0x1f, 0x83, 0xa3, 0x11, 0x72, 0x79, 0x71, 0x45, 0xc6, 0xfe, 0xf4, 0x0b, 0xc7, 0xc0, 0x2e, 0x1c,
	0x6b, 0x74, 0x4e, 0x86, 0xd3, 0xd9, 0x05, 0xf1, 0x9f, 0xcf, 0xfd, 0xab, 0xa9, 0x73, 0x30, 0x3a,
	0x7d, 0x7d, 0xeb, 0xa1, 0xdf, 0x6e, 0xbd, 0xda, 0x9b, 0x5b, 0x0f, 0xfd, 0x50, 0x78, 0xe8, 0xa7,
	0xc2, 0x43, 0xbf, 0x16, 0x1e, 0x7a, 0x5d, 0x78, 0xe8, 0xf7, 0xc2, 0x43, 0x7f, 0x16, 0x5e, 0xed,
	0x4d, 0xe1, 0xa1, 0x1f, 0xff, 0xf0, 0x6a, 0xcb, 0xa6, 0xfa, 0x23, 0x3e, 0xf9, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x9f, 0xb8, 0xe9, 0xf9, 0x58, 0x05, 0x00, 0x00,
}
