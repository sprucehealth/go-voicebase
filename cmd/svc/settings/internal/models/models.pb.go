// Code generated by protoc-gen-gogo.
// source: models.proto
// DO NOT EDIT!

/*
	Package models is a generated protocol buffer package.

	It is generated from these files:
		models.proto

	It has these top-level messages:
		Config
		ConfigKey
		Value
		BooleanConfig
		BooleanValue
		IntegerConfig
		IntegerValue
		StringListConfig
		StringListValue
		Item
		MultiSelectConfig
		SingleSelectConfig
		ItemValue
		SingleSelectValue
		MultiSelectValue
*/
package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ConfigType enumerates the possible setting configs for a given key.
type ConfigType int32

const (
	ConfigType_SINGLE_SELECT ConfigType = 0
	ConfigType_MULTI_SELECT  ConfigType = 1
	ConfigType_STRING_LIST   ConfigType = 2
	ConfigType_BOOLEAN       ConfigType = 3
	ConfigType_INTEGER       ConfigType = 4
)

var ConfigType_name = map[int32]string{
	0: "SINGLE_SELECT",
	1: "MULTI_SELECT",
	2: "STRING_LIST",
	3: "BOOLEAN",
	4: "INTEGER",
}
var ConfigType_value = map[string]int32{
	"SINGLE_SELECT": 0,
	"MULTI_SELECT":  1,
	"STRING_LIST":   2,
	"BOOLEAN":       3,
	"INTEGER":       4,
}

func (ConfigType) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

// OwnerType enumerates the possible owners for a particular config
type OwnerType int32

const (
	OwnerType_INTERNAL_ENTITY OwnerType = 0
	OwnerType_ORGANIZATION    OwnerType = 1
	OwnerType_ACCOUNT         OwnerType = 2
)

var OwnerType_name = map[int32]string{
	0: "INTERNAL_ENTITY",
	1: "ORGANIZATION",
	2: "ACCOUNT",
}
var OwnerType_value = map[string]int32{
	"INTERNAL_ENTITY": 0,
	"ORGANIZATION":    1,
	"ACCOUNT":         2,
}

func (OwnerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

// Config represents a single setting configuration used for validation of
// a setting value, defaults and description.
type Config struct {
	Title          string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Key            string      `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	AllowSubkeys   bool        `protobuf:"varint,4,opt,name=allow_subkeys,proto3" json:"allow_subkeys,omitempty"`
	Type           ConfigType  `protobuf:"varint,5,opt,name=type,proto3,enum=models.ConfigType" json:"type,omitempty"`
	PossibleOwners []OwnerType `protobuf:"varint,6,rep,packed,name=possible_owners,enum=models.OwnerType" json:"possible_owners,omitempty"`
	OptionalValue  bool        `protobuf:"varint,7,opt,name=optional_value,proto3" json:"optional_value,omitempty"`
	// Types that are valid to be assigned to Config:
	//	*Config_Boolean
	//	*Config_StringList
	//	*Config_SingleSelect
	//	*Config_MultiSelect
	//	*Config_Integer
	Config isConfig_Config `protobuf_oneof:"config"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

type isConfig_Config interface {
	isConfig_Config()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Config_Boolean struct {
	Boolean *BooleanConfig `protobuf:"bytes,10,opt,name=boolean,oneof"`
}
type Config_StringList struct {
	StringList *StringListConfig `protobuf:"bytes,11,opt,name=string_list,oneof"`
}
type Config_SingleSelect struct {
	SingleSelect *SingleSelectConfig `protobuf:"bytes,12,opt,name=single_select,oneof"`
}
type Config_MultiSelect struct {
	MultiSelect *MultiSelectConfig `protobuf:"bytes,13,opt,name=multi_select,oneof"`
}
type Config_Integer struct {
	Integer *IntegerConfig `protobuf:"bytes,14,opt,name=integer,oneof"`
}

func (*Config_Boolean) isConfig_Config()      {}
func (*Config_StringList) isConfig_Config()   {}
func (*Config_SingleSelect) isConfig_Config() {}
func (*Config_MultiSelect) isConfig_Config()  {}
func (*Config_Integer) isConfig_Config()      {}

func (m *Config) GetConfig() isConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Config) GetBoolean() *BooleanConfig {
	if x, ok := m.GetConfig().(*Config_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *Config) GetStringList() *StringListConfig {
	if x, ok := m.GetConfig().(*Config_StringList); ok {
		return x.StringList
	}
	return nil
}

func (m *Config) GetSingleSelect() *SingleSelectConfig {
	if x, ok := m.GetConfig().(*Config_SingleSelect); ok {
		return x.SingleSelect
	}
	return nil
}

func (m *Config) GetMultiSelect() *MultiSelectConfig {
	if x, ok := m.GetConfig().(*Config_MultiSelect); ok {
		return x.MultiSelect
	}
	return nil
}

func (m *Config) GetInteger() *IntegerConfig {
	if x, ok := m.GetConfig().(*Config_Integer); ok {
		return x.Integer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Config) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Config_OneofMarshaler, _Config_OneofUnmarshaler, _Config_OneofSizer, []interface{}{
		(*Config_Boolean)(nil),
		(*Config_StringList)(nil),
		(*Config_SingleSelect)(nil),
		(*Config_MultiSelect)(nil),
		(*Config_Integer)(nil),
	}
}

func _Config_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Config)
	// config
	switch x := m.Config.(type) {
	case *Config_Boolean:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *Config_StringList:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringList); err != nil {
			return err
		}
	case *Config_SingleSelect:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleSelect); err != nil {
			return err
		}
	case *Config_MultiSelect:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiSelect); err != nil {
			return err
		}
	case *Config_Integer:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Config.Config has unexpected type %T", x)
	}
	return nil
}

func _Config_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Config)
	switch tag {
	case 10: // config.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BooleanConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Config_Boolean{msg}
		return true, err
	case 11: // config.string_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringListConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Config_StringList{msg}
		return true, err
	case 12: // config.single_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleSelectConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Config_SingleSelect{msg}
		return true, err
	case 13: // config.multi_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiSelectConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Config_MultiSelect{msg}
		return true, err
	case 14: // config.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntegerConfig)
		err := b.DecodeMessage(msg)
		m.Config = &Config_Integer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Config_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Config)
	// config
	switch x := m.Config.(type) {
	case *Config_Boolean:
		s := proto.Size(x.Boolean)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Config_StringList:
		s := proto.Size(x.StringList)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Config_SingleSelect:
		s := proto.Size(x.SingleSelect)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Config_MultiSelect:
		s := proto.Size(x.MultiSelect)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Config_Integer:
		s := proto.Size(x.Integer)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ConfigKey is a structure used to uniquely identify a setting config/value for a given
// entity. It is expected that the key,subkey combination is unique if both are specified,
// and that the key by itself is unique if there is no subkey specified.
type ConfigKey struct {
	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Subkey string `protobuf:"bytes,2,opt,name=subkey,proto3" json:"subkey,omitempty"`
}

func (m *ConfigKey) Reset()                    { *m = ConfigKey{} }
func (*ConfigKey) ProtoMessage()               {}
func (*ConfigKey) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

// Value represents a valid value for a particular setting config.
type Value struct {
	Config *Config    `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	Key    *ConfigKey `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Value_Boolean
	//	*Value_StringList
	//	*Value_SingleSelect
	//	*Value_MultiSelect
	//	*Value_Integer
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{2} }

type isValue_Value interface {
	isValue_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_Boolean struct {
	Boolean *BooleanValue `protobuf:"bytes,10,opt,name=boolean,oneof"`
}
type Value_StringList struct {
	StringList *StringListValue `protobuf:"bytes,11,opt,name=string_list,oneof"`
}
type Value_SingleSelect struct {
	SingleSelect *SingleSelectValue `protobuf:"bytes,12,opt,name=single_select,oneof"`
}
type Value_MultiSelect struct {
	MultiSelect *MultiSelectValue `protobuf:"bytes,13,opt,name=multi_select,oneof"`
}
type Value_Integer struct {
	Integer *IntegerValue `protobuf:"bytes,14,opt,name=integer,oneof"`
}

func (*Value_Boolean) isValue_Value()      {}
func (*Value_StringList) isValue_Value()   {}
func (*Value_SingleSelect) isValue_Value() {}
func (*Value_MultiSelect) isValue_Value()  {}
func (*Value_Integer) isValue_Value()      {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Value) GetKey() *ConfigKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Value) GetBoolean() *BooleanValue {
	if x, ok := m.GetValue().(*Value_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (m *Value) GetStringList() *StringListValue {
	if x, ok := m.GetValue().(*Value_StringList); ok {
		return x.StringList
	}
	return nil
}

func (m *Value) GetSingleSelect() *SingleSelectValue {
	if x, ok := m.GetValue().(*Value_SingleSelect); ok {
		return x.SingleSelect
	}
	return nil
}

func (m *Value) GetMultiSelect() *MultiSelectValue {
	if x, ok := m.GetValue().(*Value_MultiSelect); ok {
		return x.MultiSelect
	}
	return nil
}

func (m *Value) GetInteger() *IntegerValue {
	if x, ok := m.GetValue().(*Value_Integer); ok {
		return x.Integer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_Boolean)(nil),
		(*Value_StringList)(nil),
		(*Value_SingleSelect)(nil),
		(*Value_MultiSelect)(nil),
		(*Value_Integer)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Boolean:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Boolean); err != nil {
			return err
		}
	case *Value_StringList:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringList); err != nil {
			return err
		}
	case *Value_SingleSelect:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleSelect); err != nil {
			return err
		}
	case *Value_MultiSelect:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiSelect); err != nil {
			return err
		}
	case *Value_Integer:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Integer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 10: // value.boolean
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BooleanValue)
		err := b.DecodeMessage(msg)
		m.Value = &Value_Boolean{msg}
		return true, err
	case 11: // value.string_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringListValue)
		err := b.DecodeMessage(msg)
		m.Value = &Value_StringList{msg}
		return true, err
	case 12: // value.single_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleSelectValue)
		err := b.DecodeMessage(msg)
		m.Value = &Value_SingleSelect{msg}
		return true, err
	case 13: // value.multi_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiSelectValue)
		err := b.DecodeMessage(msg)
		m.Value = &Value_MultiSelect{msg}
		return true, err
	case 14: // value.integer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntegerValue)
		err := b.DecodeMessage(msg)
		m.Value = &Value_Integer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_Boolean:
		s := proto.Size(x.Boolean)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_StringList:
		s := proto.Size(x.StringList)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_SingleSelect:
		s := proto.Size(x.SingleSelect)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_MultiSelect:
		s := proto.Size(x.MultiSelect)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_Integer:
		s := proto.Size(x.Integer)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BooleanConfig struct {
	Default *BooleanValue `protobuf:"bytes,1,opt,name=default" json:"default,omitempty"`
}

func (m *BooleanConfig) Reset()                    { *m = BooleanConfig{} }
func (*BooleanConfig) ProtoMessage()               {}
func (*BooleanConfig) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{3} }

func (m *BooleanConfig) GetDefault() *BooleanValue {
	if m != nil {
		return m.Default
	}
	return nil
}

type BooleanValue struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *BooleanValue) Reset()                    { *m = BooleanValue{} }
func (*BooleanValue) ProtoMessage()               {}
func (*BooleanValue) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{4} }

type IntegerConfig struct {
	Default *IntegerValue `protobuf:"bytes,1,opt,name=default" json:"default,omitempty"`
}

func (m *IntegerConfig) Reset()                    { *m = IntegerConfig{} }
func (*IntegerConfig) ProtoMessage()               {}
func (*IntegerConfig) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{5} }

func (m *IntegerConfig) GetDefault() *IntegerValue {
	if m != nil {
		return m.Default
	}
	return nil
}

type IntegerValue struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *IntegerValue) Reset()                    { *m = IntegerValue{} }
func (*IntegerValue) ProtoMessage()               {}
func (*IntegerValue) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{6} }

type StringListConfig struct {
	Default *StringListValue `protobuf:"bytes,1,opt,name=default" json:"default,omitempty"`
}

func (m *StringListConfig) Reset()                    { *m = StringListConfig{} }
func (*StringListConfig) ProtoMessage()               {}
func (*StringListConfig) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{7} }

func (m *StringListConfig) GetDefault() *StringListValue {
	if m != nil {
		return m.Default
	}
	return nil
}

type StringListValue struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *StringListValue) Reset()                    { *m = StringListValue{} }
func (*StringListValue) ProtoMessage()               {}
func (*StringListValue) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{8} }

type Item struct {
	ID               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label            string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	AllowFreeText    bool   `protobuf:"varint,3,opt,name=allow_free_text,proto3" json:"allow_free_text,omitempty"`
	FreeTextRequired bool   `protobuf:"varint,4,opt,name=free_text_required,proto3" json:"free_text_required,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{9} }

type MultiSelectConfig struct {
	Items   []*Item           `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Default *MultiSelectValue `protobuf:"bytes,2,opt,name=default" json:"default,omitempty"`
}

func (m *MultiSelectConfig) Reset()                    { *m = MultiSelectConfig{} }
func (*MultiSelectConfig) ProtoMessage()               {}
func (*MultiSelectConfig) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{10} }

func (m *MultiSelectConfig) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *MultiSelectConfig) GetDefault() *MultiSelectValue {
	if m != nil {
		return m.Default
	}
	return nil
}

type SingleSelectConfig struct {
	Items   []*Item            `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Default *SingleSelectValue `protobuf:"bytes,2,opt,name=default" json:"default,omitempty"`
}

func (m *SingleSelectConfig) Reset()                    { *m = SingleSelectConfig{} }
func (*SingleSelectConfig) ProtoMessage()               {}
func (*SingleSelectConfig) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{11} }

func (m *SingleSelectConfig) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SingleSelectConfig) GetDefault() *SingleSelectValue {
	if m != nil {
		return m.Default
	}
	return nil
}

type ItemValue struct {
	ID               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FreeTextResponse string `protobuf:"bytes,2,opt,name=free_text_response,proto3" json:"free_text_response,omitempty"`
}

func (m *ItemValue) Reset()                    { *m = ItemValue{} }
func (*ItemValue) ProtoMessage()               {}
func (*ItemValue) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{12} }

type SingleSelectValue struct {
	Item *ItemValue `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *SingleSelectValue) Reset()                    { *m = SingleSelectValue{} }
func (*SingleSelectValue) ProtoMessage()               {}
func (*SingleSelectValue) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{13} }

func (m *SingleSelectValue) GetItem() *ItemValue {
	if m != nil {
		return m.Item
	}
	return nil
}

type MultiSelectValue struct {
	Items []*ItemValue `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *MultiSelectValue) Reset()                    { *m = MultiSelectValue{} }
func (*MultiSelectValue) ProtoMessage()               {}
func (*MultiSelectValue) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{14} }

func (m *MultiSelectValue) GetItems() []*ItemValue {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "models.Config")
	proto.RegisterType((*ConfigKey)(nil), "models.ConfigKey")
	proto.RegisterType((*Value)(nil), "models.Value")
	proto.RegisterType((*BooleanConfig)(nil), "models.BooleanConfig")
	proto.RegisterType((*BooleanValue)(nil), "models.BooleanValue")
	proto.RegisterType((*IntegerConfig)(nil), "models.IntegerConfig")
	proto.RegisterType((*IntegerValue)(nil), "models.IntegerValue")
	proto.RegisterType((*StringListConfig)(nil), "models.StringListConfig")
	proto.RegisterType((*StringListValue)(nil), "models.StringListValue")
	proto.RegisterType((*Item)(nil), "models.Item")
	proto.RegisterType((*MultiSelectConfig)(nil), "models.MultiSelectConfig")
	proto.RegisterType((*SingleSelectConfig)(nil), "models.SingleSelectConfig")
	proto.RegisterType((*ItemValue)(nil), "models.ItemValue")
	proto.RegisterType((*SingleSelectValue)(nil), "models.SingleSelectValue")
	proto.RegisterType((*MultiSelectValue)(nil), "models.MultiSelectValue")
	proto.RegisterEnum("models.ConfigType", ConfigType_name, ConfigType_value)
	proto.RegisterEnum("models.OwnerType", OwnerType_name, OwnerType_value)
}
func (x ConfigType) String() string {
	s, ok := ConfigType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OwnerType) String() string {
	s, ok := OwnerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.AllowSubkeys != that1.AllowSubkeys {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.PossibleOwners) != len(that1.PossibleOwners) {
		return false
	}
	for i := range this.PossibleOwners {
		if this.PossibleOwners[i] != that1.PossibleOwners[i] {
			return false
		}
	}
	if this.OptionalValue != that1.OptionalValue {
		return false
	}
	if that1.Config == nil {
		if this.Config != nil {
			return false
		}
	} else if this.Config == nil {
		return false
	} else if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *Config_Boolean) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config_Boolean)
	if !ok {
		that2, ok := that.(Config_Boolean)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Boolean.Equal(that1.Boolean) {
		return false
	}
	return true
}
func (this *Config_StringList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config_StringList)
	if !ok {
		that2, ok := that.(Config_StringList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.StringList.Equal(that1.StringList) {
		return false
	}
	return true
}
func (this *Config_SingleSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config_SingleSelect)
	if !ok {
		that2, ok := that.(Config_SingleSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SingleSelect.Equal(that1.SingleSelect) {
		return false
	}
	return true
}
func (this *Config_MultiSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config_MultiSelect)
	if !ok {
		that2, ok := that.(Config_MultiSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MultiSelect.Equal(that1.MultiSelect) {
		return false
	}
	return true
}
func (this *Config_Integer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config_Integer)
	if !ok {
		that2, ok := that.(Config_Integer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Integer.Equal(that1.Integer) {
		return false
	}
	return true
}
func (this *ConfigKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConfigKey)
	if !ok {
		that2, ok := that.(ConfigKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Subkey != that1.Subkey {
		return false
	}
	return true
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Value_Boolean) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_Boolean)
	if !ok {
		that2, ok := that.(Value_Boolean)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Boolean.Equal(that1.Boolean) {
		return false
	}
	return true
}
func (this *Value_StringList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_StringList)
	if !ok {
		that2, ok := that.(Value_StringList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.StringList.Equal(that1.StringList) {
		return false
	}
	return true
}
func (this *Value_SingleSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_SingleSelect)
	if !ok {
		that2, ok := that.(Value_SingleSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SingleSelect.Equal(that1.SingleSelect) {
		return false
	}
	return true
}
func (this *Value_MultiSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_MultiSelect)
	if !ok {
		that2, ok := that.(Value_MultiSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MultiSelect.Equal(that1.MultiSelect) {
		return false
	}
	return true
}
func (this *Value_Integer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_Integer)
	if !ok {
		that2, ok := that.(Value_Integer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Integer.Equal(that1.Integer) {
		return false
	}
	return true
}
func (this *BooleanConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BooleanConfig)
	if !ok {
		that2, ok := that.(BooleanConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *BooleanValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BooleanValue)
	if !ok {
		that2, ok := that.(BooleanValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *IntegerConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IntegerConfig)
	if !ok {
		that2, ok := that.(IntegerConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *IntegerValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IntegerValue)
	if !ok {
		that2, ok := that.(IntegerValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *StringListConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StringListConfig)
	if !ok {
		that2, ok := that.(StringListConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *StringListValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StringListValue)
	if !ok {
		that2, ok := that.(StringListValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *Item) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Item)
	if !ok {
		that2, ok := that.(Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	if this.AllowFreeText != that1.AllowFreeText {
		return false
	}
	if this.FreeTextRequired != that1.FreeTextRequired {
		return false
	}
	return true
}
func (this *MultiSelectConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MultiSelectConfig)
	if !ok {
		that2, ok := that.(MultiSelectConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *SingleSelectConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SingleSelectConfig)
	if !ok {
		that2, ok := that.(SingleSelectConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.Default.Equal(that1.Default) {
		return false
	}
	return true
}
func (this *ItemValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ItemValue)
	if !ok {
		that2, ok := that.(ItemValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.FreeTextResponse != that1.FreeTextResponse {
		return false
	}
	return true
}
func (this *SingleSelectValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SingleSelectValue)
	if !ok {
		that2, ok := that.(SingleSelectValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *MultiSelectValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MultiSelectValue)
	if !ok {
		that2, ok := that.(MultiSelectValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&models.Config{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "AllowSubkeys: "+fmt.Sprintf("%#v", this.AllowSubkeys)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "PossibleOwners: "+fmt.Sprintf("%#v", this.PossibleOwners)+",\n")
	s = append(s, "OptionalValue: "+fmt.Sprintf("%#v", this.OptionalValue)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Config_Boolean) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Config_Boolean{` +
		`Boolean:` + fmt.Sprintf("%#v", this.Boolean) + `}`}, ", ")
	return s
}
func (this *Config_StringList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Config_StringList{` +
		`StringList:` + fmt.Sprintf("%#v", this.StringList) + `}`}, ", ")
	return s
}
func (this *Config_SingleSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Config_SingleSelect{` +
		`SingleSelect:` + fmt.Sprintf("%#v", this.SingleSelect) + `}`}, ", ")
	return s
}
func (this *Config_MultiSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Config_MultiSelect{` +
		`MultiSelect:` + fmt.Sprintf("%#v", this.MultiSelect) + `}`}, ", ")
	return s
}
func (this *Config_Integer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Config_Integer{` +
		`Integer:` + fmt.Sprintf("%#v", this.Integer) + `}`}, ", ")
	return s
}
func (this *ConfigKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ConfigKey{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Subkey: "+fmt.Sprintf("%#v", this.Subkey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.Value{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value_Boolean) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Value_Boolean{` +
		`Boolean:` + fmt.Sprintf("%#v", this.Boolean) + `}`}, ", ")
	return s
}
func (this *Value_StringList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Value_StringList{` +
		`StringList:` + fmt.Sprintf("%#v", this.StringList) + `}`}, ", ")
	return s
}
func (this *Value_SingleSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Value_SingleSelect{` +
		`SingleSelect:` + fmt.Sprintf("%#v", this.SingleSelect) + `}`}, ", ")
	return s
}
func (this *Value_MultiSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Value_MultiSelect{` +
		`MultiSelect:` + fmt.Sprintf("%#v", this.MultiSelect) + `}`}, ", ")
	return s
}
func (this *Value_Integer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&models.Value_Integer{` +
		`Integer:` + fmt.Sprintf("%#v", this.Integer) + `}`}, ", ")
	return s
}
func (this *BooleanConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.BooleanConfig{")
	if this.Default != nil {
		s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BooleanValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.BooleanValue{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IntegerConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.IntegerConfig{")
	if this.Default != nil {
		s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IntegerValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.IntegerValue{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringListConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.StringListConfig{")
	if this.Default != nil {
		s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringListValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.StringListValue{")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&models.Item{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "AllowFreeText: "+fmt.Sprintf("%#v", this.AllowFreeText)+",\n")
	s = append(s, "FreeTextRequired: "+fmt.Sprintf("%#v", this.FreeTextRequired)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiSelectConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.MultiSelectConfig{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Default != nil {
		s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SingleSelectConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.SingleSelectConfig{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Default != nil {
		s = append(s, "Default: "+fmt.Sprintf("%#v", this.Default)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ItemValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.ItemValue{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "FreeTextResponse: "+fmt.Sprintf("%#v", this.FreeTextResponse)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SingleSelectValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.SingleSelectValue{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultiSelectValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&models.MultiSelectValue{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringModels(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringModels(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.AllowSubkeys {
		dAtA[i] = 0x20
		i++
		if m.AllowSubkeys {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Type))
	}
	if len(m.PossibleOwners) > 0 {
		dAtA2 := make([]byte, len(m.PossibleOwners)*10)
		var j1 int
		for _, num := range m.PossibleOwners {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintModels(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.OptionalValue {
		dAtA[i] = 0x38
		i++
		if m.OptionalValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Config != nil {
		nn3, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Config_Boolean) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Boolean != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Boolean.Size()))
		n4, err := m.Boolean.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Config_StringList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringList != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.StringList.Size()))
		n5, err := m.StringList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Config_SingleSelect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SingleSelect != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.SingleSelect.Size()))
		n6, err := m.SingleSelect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Config_MultiSelect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultiSelect != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MultiSelect.Size()))
		n7, err := m.MultiSelect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Config_Integer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Integer != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Integer.Size()))
		n8, err := m.Integer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *ConfigKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Subkey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Subkey)))
		i += copy(dAtA[i:], m.Subkey)
	}
	return i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Config.Size()))
		n9, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Key.Size()))
		n10, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Value != nil {
		nn11, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *Value_Boolean) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Boolean != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Boolean.Size()))
		n12, err := m.Boolean.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Value_StringList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StringList != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.StringList.Size()))
		n13, err := m.StringList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Value_SingleSelect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SingleSelect != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.SingleSelect.Size()))
		n14, err := m.SingleSelect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Value_MultiSelect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultiSelect != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.MultiSelect.Size()))
		n15, err := m.MultiSelect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Value_Integer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Integer != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Integer.Size()))
		n16, err := m.Integer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *BooleanConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Default != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Default.Size()))
		n17, err := m.Default.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *BooleanValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BooleanValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value {
		dAtA[i] = 0x8
		i++
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *IntegerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Default != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Default.Size()))
		n18, err := m.Default.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *IntegerValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegerValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *StringListConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringListConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Default != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Default.Size()))
		n19, err := m.Default.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *StringListValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringListValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.AllowFreeText {
		dAtA[i] = 0x18
		i++
		if m.AllowFreeText {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FreeTextRequired {
		dAtA[i] = 0x20
		i++
		if m.FreeTextRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MultiSelectConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSelectConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Default != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Default.Size()))
		n20, err := m.Default.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *SingleSelectConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleSelectConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Default != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Default.Size()))
		n21, err := m.Default.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *ItemValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.FreeTextResponse) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModels(dAtA, i, uint64(len(m.FreeTextResponse)))
		i += copy(dAtA[i:], m.FreeTextResponse)
	}
	return i, nil
}

func (m *SingleSelectValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleSelectValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModels(dAtA, i, uint64(m.Item.Size()))
		n22, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *MultiSelectValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiSelectValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintModels(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Models(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Models(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Config) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.AllowSubkeys {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	if len(m.PossibleOwners) > 0 {
		l = 0
		for _, e := range m.PossibleOwners {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	if m.OptionalValue {
		n += 2
	}
	if m.Config != nil {
		n += m.Config.Size()
	}
	return n
}

func (m *Config_Boolean) Size() (n int) {
	var l int
	_ = l
	if m.Boolean != nil {
		l = m.Boolean.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Config_StringList) Size() (n int) {
	var l int
	_ = l
	if m.StringList != nil {
		l = m.StringList.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Config_SingleSelect) Size() (n int) {
	var l int
	_ = l
	if m.SingleSelect != nil {
		l = m.SingleSelect.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Config_MultiSelect) Size() (n int) {
	var l int
	_ = l
	if m.MultiSelect != nil {
		l = m.MultiSelect.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Config_Integer) Size() (n int) {
	var l int
	_ = l
	if m.Integer != nil {
		l = m.Integer.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *ConfigKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Subkey)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Value_Boolean) Size() (n int) {
	var l int
	_ = l
	if m.Boolean != nil {
		l = m.Boolean.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Value_StringList) Size() (n int) {
	var l int
	_ = l
	if m.StringList != nil {
		l = m.StringList.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Value_SingleSelect) Size() (n int) {
	var l int
	_ = l
	if m.SingleSelect != nil {
		l = m.SingleSelect.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Value_MultiSelect) Size() (n int) {
	var l int
	_ = l
	if m.MultiSelect != nil {
		l = m.MultiSelect.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *Value_Integer) Size() (n int) {
	var l int
	_ = l
	if m.Integer != nil {
		l = m.Integer.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}
func (m *BooleanConfig) Size() (n int) {
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *BooleanValue) Size() (n int) {
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	return n
}

func (m *IntegerConfig) Size() (n int) {
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *IntegerValue) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovModels(uint64(m.Value))
	}
	return n
}

func (m *StringListConfig) Size() (n int) {
	var l int
	_ = l
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *StringListValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *Item) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.AllowFreeText {
		n += 2
	}
	if m.FreeTextRequired {
		n += 2
	}
	return n
}

func (m *MultiSelectConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *SingleSelectConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Default != nil {
		l = m.Default.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *ItemValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FreeTextResponse)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *SingleSelectValue) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *MultiSelectValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`AllowSubkeys:` + fmt.Sprintf("%v", this.AllowSubkeys) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PossibleOwners:` + fmt.Sprintf("%v", this.PossibleOwners) + `,`,
		`OptionalValue:` + fmt.Sprintf("%v", this.OptionalValue) + `,`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config_Boolean) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config_Boolean{`,
		`Boolean:` + strings.Replace(fmt.Sprintf("%v", this.Boolean), "BooleanConfig", "BooleanConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config_StringList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config_StringList{`,
		`StringList:` + strings.Replace(fmt.Sprintf("%v", this.StringList), "StringListConfig", "StringListConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config_SingleSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config_SingleSelect{`,
		`SingleSelect:` + strings.Replace(fmt.Sprintf("%v", this.SingleSelect), "SingleSelectConfig", "SingleSelectConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config_MultiSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config_MultiSelect{`,
		`MultiSelect:` + strings.Replace(fmt.Sprintf("%v", this.MultiSelect), "MultiSelectConfig", "MultiSelectConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config_Integer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config_Integer{`,
		`Integer:` + strings.Replace(fmt.Sprintf("%v", this.Integer), "IntegerConfig", "IntegerConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigKey{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Subkey:` + fmt.Sprintf("%v", this.Subkey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value{`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "Config", "Config", 1) + `,`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "ConfigKey", "ConfigKey", 1) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Boolean) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Boolean{`,
		`Boolean:` + strings.Replace(fmt.Sprintf("%v", this.Boolean), "BooleanValue", "BooleanValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_StringList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_StringList{`,
		`StringList:` + strings.Replace(fmt.Sprintf("%v", this.StringList), "StringListValue", "StringListValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_SingleSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_SingleSelect{`,
		`SingleSelect:` + strings.Replace(fmt.Sprintf("%v", this.SingleSelect), "SingleSelectValue", "SingleSelectValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_MultiSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_MultiSelect{`,
		`MultiSelect:` + strings.Replace(fmt.Sprintf("%v", this.MultiSelect), "MultiSelectValue", "MultiSelectValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Integer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Integer{`,
		`Integer:` + strings.Replace(fmt.Sprintf("%v", this.Integer), "IntegerValue", "IntegerValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BooleanConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BooleanConfig{`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "BooleanValue", "BooleanValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BooleanValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BooleanValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IntegerConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IntegerConfig{`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "IntegerValue", "IntegerValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IntegerValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IntegerValue{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringListConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringListConfig{`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "StringListValue", "StringListValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringListValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringListValue{`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Item{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`AllowFreeText:` + fmt.Sprintf("%v", this.AllowFreeText) + `,`,
		`FreeTextRequired:` + fmt.Sprintf("%v", this.FreeTextRequired) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiSelectConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiSelectConfig{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Item", "Item", 1) + `,`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "MultiSelectValue", "MultiSelectValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleSelectConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleSelectConfig{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "Item", "Item", 1) + `,`,
		`Default:` + strings.Replace(fmt.Sprintf("%v", this.Default), "SingleSelectValue", "SingleSelectValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ItemValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ItemValue{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FreeTextResponse:` + fmt.Sprintf("%v", this.FreeTextResponse) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleSelectValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleSelectValue{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ItemValue", "ItemValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultiSelectValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultiSelectValue{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "ItemValue", "ItemValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringModels(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowSubkeys", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowSubkeys = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ConfigType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v OwnerType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (OwnerType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PossibleOwners = append(m.PossibleOwners, v)
				}
			} else if wireType == 0 {
				var v OwnerType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (OwnerType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PossibleOwners = append(m.PossibleOwners, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PossibleOwners", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionalValue = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boolean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &Config_Boolean{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringListConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &Config_StringList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleSelectConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &Config_SingleSelect{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiSelectConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &Config_MultiSelect{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IntegerConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Config = &Config_Integer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &ConfigKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boolean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_Boolean{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringListValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_StringList{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleSelectValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_SingleSelect{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiSelectValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_MultiSelect{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IntegerValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_Integer{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &BooleanValue{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BooleanValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BooleanValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BooleanValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &IntegerValue{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegerValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegerValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegerValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringListConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringListConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringListConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &StringListValue{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringListValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringListValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringListValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFreeText", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFreeText = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTextRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeTextRequired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiSelectConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSelectConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSelectConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &MultiSelectValue{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleSelectConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSelectConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSelectConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Default == nil {
				m.Default = &SingleSelectValue{}
			}
			if err := m.Default.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTextResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeTextResponse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleSelectValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSelectValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSelectValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ItemValue{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiSelectValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiSelectValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiSelectValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemValue{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("models.proto", fileDescriptorModels) }

var fileDescriptorModels = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0xce, 0x38, 0x5f, 0x9b, 0xd7, 0xf9, 0x70, 0xa6, 0x2d, 0x75, 0x17, 0xe1, 0x1a, 0x4b, 0xa8,
	0x66, 0x05, 0xbb, 0x90, 0x56, 0x5c, 0x40, 0x42, 0xc9, 0x12, 0x6d, 0x2d, 0x52, 0x47, 0xda, 0xb8,
	0x48, 0x7c, 0x5a, 0xc9, 0x66, 0x12, 0xac, 0x3a, 0x76, 0xb0, 0x27, 0x94, 0xdc, 0xf8, 0x09, 0xfc,
	0x0c, 0x2e, 0xdc, 0xf9, 0x09, 0x1c, 0x7b, 0xe4, 0x84, 0x58, 0x73, 0xe1, 0xd8, 0x9f, 0x50, 0xcd,
	0x4c, 0x9c, 0xc6, 0x4e, 0xba, 0x37, 0xbf, 0x1f, 0xcf, 0x33, 0xef, 0x3c, 0xef, 0x3b, 0xaf, 0xa1,
	0xbe, 0x08, 0xa7, 0xc4, 0x8f, 0x4f, 0x97, 0x51, 0x48, 0x43, 0x5c, 0x11, 0xd6, 0xf1, 0x87, 0x73,
	0x8f, 0xfe, 0xb8, 0x9a, 0x9c, 0x5e, 0x85, 0x8b, 0xb3, 0x79, 0x38, 0x0f, 0xcf, 0x78, 0x78, 0xb2,
	0x9a, 0x71, 0x8b, 0x1b, 0xfc, 0x4b, 0xc0, 0x8c, 0x3f, 0x8a, 0x50, 0x39, 0x0f, 0x83, 0x99, 0x37,
	0xc7, 0x0d, 0x28, 0x53, 0x8f, 0xfa, 0x44, 0x45, 0x3a, 0x32, 0x6b, 0xf8, 0x16, 0xc8, 0x53, 0x12,
	0x5f, 0x45, 0xde, 0x92, 0x7a, 0x61, 0xa0, 0x4a, 0xdc, 0x29, 0x43, 0xf1, 0x19, 0x59, 0xab, 0x45,
	0x6e, 0xdc, 0x81, 0xc6, 0xd8, 0xf7, 0xc3, 0xe7, 0x6e, 0xbc, 0x9a, 0x3c, 0x23, 0xeb, 0x58, 0x2d,
	0xe9, 0xc8, 0x3c, 0xc2, 0x3a, 0x94, 0xe8, 0x7a, 0x49, 0xd4, 0xb2, 0x8e, 0xcc, 0x66, 0x07, 0x9f,
	0x6e, 0xca, 0x14, 0xa7, 0x38, 0xeb, 0x25, 0xc1, 0x27, 0xd0, 0x5a, 0x86, 0x71, 0xec, 0x4d, 0x7c,
	0xe2, 0x86, 0xcf, 0x03, 0x12, 0xc5, 0x6a, 0x45, 0x2f, 0x9a, 0xcd, 0x4e, 0x3b, 0x4d, 0x1e, 0x32,
	0x2f, 0xcf, 0x7d, 0x0b, 0x9a, 0x21, 0xaf, 0x60, 0xec, 0xbb, 0x3f, 0x8f, 0xfd, 0x15, 0x51, 0xab,
	0xfc, 0x14, 0x13, 0xaa, 0x93, 0x30, 0xf4, 0xc9, 0x38, 0x50, 0x41, 0x47, 0xa6, 0xdc, 0xb9, 0x93,
	0x62, 0x7b, 0xc2, 0x2d, 0xce, 0x7b, 0x5c, 0xc0, 0x67, 0x20, 0xc7, 0x34, 0xf2, 0x82, 0xb9, 0xeb,
	0x7b, 0x31, 0x55, 0x65, 0x9e, 0xad, 0xa6, 0xd9, 0x23, 0x1e, 0x1a, 0x78, 0x31, 0xdd, 0x02, 0x1e,
	0x42, 0x23, 0xf6, 0x82, 0xb9, 0x4f, 0xdc, 0x98, 0xf8, 0xe4, 0x8a, 0xaa, 0x75, 0x0e, 0x39, 0xde,
	0x42, 0x78, 0x70, 0xc4, 0x63, 0x5b, 0xd0, 0xc7, 0x50, 0x5f, 0xac, 0x7c, 0xea, 0xa5, 0x98, 0x06,
	0xc7, 0xdc, 0x4b, 0x31, 0x4f, 0x58, 0x2c, 0x07, 0x31, 0xa1, 0xea, 0x05, 0x94, 0xcc, 0x49, 0xa4,
	0x36, 0xb3, 0x57, 0xb0, 0x84, 0x3b, 0xcd, 0xec, 0x1d, 0x41, 0xe5, 0x8a, 0x7f, 0x1b, 0x26, 0xd4,
	0x84, 0xf7, 0x4b, 0xb2, 0x4e, 0xbb, 0x21, 0xfa, 0xd5, 0x84, 0x8a, 0xe8, 0x83, 0x68, 0x95, 0xf1,
	0xa7, 0x04, 0xe5, 0xaf, 0x98, 0x60, 0x58, 0x4b, 0xd1, 0x3c, 0x53, 0xee, 0x34, 0xb3, 0x2d, 0xc1,
	0x9a, 0xa0, 0x91, 0x78, 0xb0, 0x9d, 0x0d, 0xb2, 0x63, 0x1e, 0xe4, 0xa5, 0xbe, 0x9d, 0x93, 0x9a,
	0x1f, 0xf3, 0xb8, 0x80, 0x4f, 0x0f, 0x29, 0x7d, 0x77, 0x5f, 0xe9, 0x34, 0xbf, 0x73, 0x58, 0xe8,
	0x7b, 0x87, 0x84, 0x4e, 0x31, 0x1f, 0x1d, 0xd4, 0x59, 0x3d, 0xa0, 0x73, 0x8a, 0x78, 0x90, 0x97,
	0xf9, 0x76, 0x4e, 0xe6, 0x4d, 0x62, 0xaf, 0x0a, 0x65, 0x3e, 0x61, 0xc6, 0x27, 0xd0, 0xc8, 0x0c,
	0x11, 0x7e, 0x0f, 0xaa, 0x53, 0x32, 0x1b, 0xaf, 0x7c, 0xba, 0x91, 0xf0, 0xa0, 0x02, 0xc6, 0x3b,
	0x50, 0xdf, 0xb5, 0xd9, 0x8b, 0x12, 0x23, 0xcb, 0x40, 0x47, 0x8c, 0x36, 0xd3, 0xd8, 0x1b, 0x68,
	0x77, 0x2b, 0x63, 0xb4, 0xbb, 0x76, 0x96, 0xb6, 0x68, 0x7c, 0x06, 0x4a, 0x7e, 0x88, 0xd9, 0x68,
	0x65, 0x99, 0xdf, 0xd4, 0x05, 0xe3, 0x5d, 0x68, 0xe5, 0x5c, 0x6c, 0x92, 0x38, 0x7f, 0xac, 0x22,
	0xbd, 0x68, 0xd6, 0x8c, 0x1f, 0xa0, 0x64, 0x51, 0xb2, 0xc0, 0x18, 0x24, 0x6f, 0x2a, 0xa6, 0xad,
	0x57, 0x49, 0xfe, 0xb9, 0x2f, 0x59, 0x5f, 0xb0, 0x5a, 0xfc, 0xf1, 0x84, 0xf8, 0x9b, 0xfd, 0x70,
	0x17, 0x5a, 0x62, 0x25, 0xcc, 0x22, 0x42, 0x5c, 0x4a, 0x7e, 0xa1, 0x7c, 0x57, 0x1c, 0xe1, 0x63,
	0xc0, 0x5b, 0x97, 0x1b, 0x91, 0x9f, 0x56, 0x5e, 0x44, 0xa6, 0x62, 0x61, 0x18, 0xdf, 0x42, 0x7b,
	0xef, 0x79, 0xe0, 0xb7, 0xa1, 0xec, 0x51, 0xb2, 0x10, 0x35, 0xc8, 0x9d, 0xfa, 0x56, 0x19, 0x56,
	0xc9, 0xfb, 0xaf, 0xaf, 0x27, 0xdd, 0xdc, 0x7f, 0xe3, 0x7b, 0xc0, 0xfb, 0xef, 0xf5, 0x66, 0xf6,
	0x93, 0x3c, 0xfb, 0x9b, 0x07, 0xd2, 0xf8, 0x14, 0x6a, 0x0c, 0x23, 0x84, 0x3b, 0x24, 0x50, 0xee,
	0xe2, 0xf1, 0x32, 0x0c, 0x62, 0xb2, 0x79, 0xa2, 0x8f, 0xa0, 0xbd, 0xc7, 0x88, 0xef, 0x43, 0x89,
	0x95, 0xb6, 0xe9, 0x5b, 0x7b, 0xb7, 0x32, 0x71, 0xe4, 0x23, 0x50, 0xf2, 0xb7, 0xc4, 0x7a, 0xf6,
	0x3e, 0xfb, 0xa8, 0x93, 0xef, 0x00, 0x76, 0x36, 0x70, 0x1b, 0x1a, 0x23, 0xcb, 0xbe, 0x18, 0xf4,
	0xdd, 0x51, 0x7f, 0xd0, 0x3f, 0x77, 0x94, 0x02, 0x56, 0xa0, 0xfe, 0xe4, 0xe9, 0xc0, 0xb1, 0x52,
	0x0f, 0xc2, 0x2d, 0x90, 0x47, 0xce, 0xa5, 0x65, 0x5f, 0xb8, 0x03, 0x6b, 0xe4, 0x28, 0x12, 0x96,
	0xa1, 0xda, 0x1b, 0x0e, 0x07, 0xfd, 0xae, 0xad, 0x14, 0x99, 0x61, 0xd9, 0x4e, 0xff, 0xa2, 0x7f,
	0xa9, 0x94, 0x4e, 0x3e, 0x87, 0xda, 0xeb, 0x95, 0x7d, 0x0b, 0x5a, 0x2c, 0x72, 0x69, 0x77, 0x07,
	0x6e, 0xdf, 0x76, 0x2c, 0xe7, 0x6b, 0x41, 0x3f, 0xbc, 0xbc, 0xe8, 0xda, 0xd6, 0x37, 0x5d, 0xc7,
	0x1a, 0xda, 0x0a, 0x62, 0x04, 0xdd, 0xf3, 0xf3, 0xe1, 0x53, 0xdb, 0x51, 0xa4, 0xde, 0x07, 0x2f,
	0xae, 0x35, 0xf4, 0xf7, 0xb5, 0x56, 0x78, 0x79, 0xad, 0xa1, 0x5f, 0x13, 0x0d, 0xfd, 0x9e, 0x68,
	0xe8, 0xaf, 0x44, 0x43, 0x2f, 0x12, 0x0d, 0xfd, 0x9b, 0x68, 0xe8, 0xff, 0x44, 0x2b, 0xbc, 0x4c,
	0x34, 0xf4, 0xdb, 0x7f, 0x5a, 0x61, 0x52, 0xe1, 0x3f, 0xaf, 0x87, 0xaf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xcd, 0xef, 0x5b, 0xe6, 0x03, 0x07, 0x00, 0x00,
}
