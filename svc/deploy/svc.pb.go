// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package deploy is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		DeployableGroup
		Environment
		EnvironmentConfig
		Deployable
		DeployableConfig
		Deployment
		ECSDeployment
		DeployableVector
		CreateDeployableGroupRequest
		CreateDeployableGroupResponse
		CreateEnvironmentRequest
		CreateEnvironmentResponse
		CreateDeployableRequest
		CreateDeployableResponse
		CreateEnvironmentConfigRequest
		CreateEnvironmentConfigResponse
		CreateDeployableConfigRequest
		CreateDeployableConfigResponse
		CreateDeployableVectorRequest
		CreateDeployableVectorResponse
		DeployableGroupsRequest
		DeployableGroupsResponse
		EnvironmentsRequest
		EnvironmentsResponse
		EnvironmentConfigsRequest
		EnvironmentConfigsResponse
		DeployablesRequest
		DeployablesResponse
		DeployableConfigsRequest
		DeployableConfigsResponse
		DeployableVectorsRequest
		DeployableVectorsResponse
		ReportBuildCompleteRequest
		ReportBuildCompleteResponse
		DeploymentsRequest
		DeploymentsResponse
		PromotionRequest
		PromotionResponse
		PromoteGroupRequest
		PromoteGroupResponse
*/
package deploy

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type EnvironmentConfig_DeployableConfigStatus int32

const (
	EnvironmentConfig_UNKNOWN    EnvironmentConfig_DeployableConfigStatus = 0
	EnvironmentConfig_ACTIVE     EnvironmentConfig_DeployableConfigStatus = 1
	EnvironmentConfig_DEPRECATED EnvironmentConfig_DeployableConfigStatus = 2
)

var EnvironmentConfig_DeployableConfigStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "DEPRECATED",
}
var EnvironmentConfig_DeployableConfigStatus_value = map[string]int32{
	"UNKNOWN":    0,
	"ACTIVE":     1,
	"DEPRECATED": 2,
}

func (EnvironmentConfig_DeployableConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{2, 0}
}

type DeployableConfig_DeployableConfigStatus int32

const (
	DeployableConfig_UNKNOWN    DeployableConfig_DeployableConfigStatus = 0
	DeployableConfig_ACTIVE     DeployableConfig_DeployableConfigStatus = 1
	DeployableConfig_DEPRECATED DeployableConfig_DeployableConfigStatus = 2
)

var DeployableConfig_DeployableConfigStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "DEPRECATED",
}
var DeployableConfig_DeployableConfigStatus_value = map[string]int32{
	"UNKNOWN":    0,
	"ACTIVE":     1,
	"DEPRECATED": 2,
}

func (DeployableConfig_DeployableConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{4, 0}
}

type Deployment_DeploymentType int32

const (
	Deployment_UNKNOWN Deployment_DeploymentType = 0
	Deployment_ECS     Deployment_DeploymentType = 1
)

var Deployment_DeploymentType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ECS",
}
var Deployment_DeploymentType_value = map[string]int32{
	"UNKNOWN": 0,
	"ECS":     1,
}

func (Deployment_DeploymentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{5, 0}
}

type Deployment_DeploymentStatus int32

const (
	Deployment_UNKNOWN_STATUS Deployment_DeploymentStatus = 0
	Deployment_PENDING        Deployment_DeploymentStatus = 1
	Deployment_IN_PROGRESS    Deployment_DeploymentStatus = 2
	Deployment_COMPLETE       Deployment_DeploymentStatus = 3
	Deployment_FAILED         Deployment_DeploymentStatus = 4
)

var Deployment_DeploymentStatus_name = map[int32]string{
	0: "UNKNOWN_STATUS",
	1: "PENDING",
	2: "IN_PROGRESS",
	3: "COMPLETE",
	4: "FAILED",
}
var Deployment_DeploymentStatus_value = map[string]int32{
	"UNKNOWN_STATUS": 0,
	"PENDING":        1,
	"IN_PROGRESS":    2,
	"COMPLETE":       3,
	"FAILED":         4,
}

func (Deployment_DeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{5, 1}
}

type DeployableVector_DeployableVectorSourceType int32

const (
	DeployableVector_UNKNOWN        DeployableVector_DeployableVectorSourceType = 0
	DeployableVector_BUILD          DeployableVector_DeployableVectorSourceType = 1
	DeployableVector_ENVIRONMENT_ID DeployableVector_DeployableVectorSourceType = 2
)

var DeployableVector_DeployableVectorSourceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "BUILD",
	2: "ENVIRONMENT_ID",
}
var DeployableVector_DeployableVectorSourceType_value = map[string]int32{
	"UNKNOWN":        0,
	"BUILD":          1,
	"ENVIRONMENT_ID": 2,
}

func (DeployableVector_DeployableVectorSourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{7, 0}
}

type CreateDeployableVectorRequest_DeployableVectorSourceType int32

const (
	CreateDeployableVectorRequest_UNKNOWN        CreateDeployableVectorRequest_DeployableVectorSourceType = 0
	CreateDeployableVectorRequest_BUILD          CreateDeployableVectorRequest_DeployableVectorSourceType = 1
	CreateDeployableVectorRequest_ENVIRONMENT_ID CreateDeployableVectorRequest_DeployableVectorSourceType = 2
)

var CreateDeployableVectorRequest_DeployableVectorSourceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "BUILD",
	2: "ENVIRONMENT_ID",
}
var CreateDeployableVectorRequest_DeployableVectorSourceType_value = map[string]int32{
	"UNKNOWN":        0,
	"BUILD":          1,
	"ENVIRONMENT_ID": 2,
}

func (CreateDeployableVectorRequest_DeployableVectorSourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{18, 0}
}

type ReportBuildCompleteRequest_BuildArtifactType int32

const (
	ReportBuildCompleteRequest_UNKNOWN      ReportBuildCompleteRequest_BuildArtifactType = 0
	ReportBuildCompleteRequest_DOCKER_IMAGE ReportBuildCompleteRequest_BuildArtifactType = 1
)

var ReportBuildCompleteRequest_BuildArtifactType_name = map[int32]string{
	0: "UNKNOWN",
	1: "DOCKER_IMAGE",
}
var ReportBuildCompleteRequest_BuildArtifactType_value = map[string]int32{
	"UNKNOWN":      0,
	"DOCKER_IMAGE": 1,
}

func (ReportBuildCompleteRequest_BuildArtifactType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{32, 0}
}

type DeploymentsRequest_Status int32

const (
	DeploymentsRequest_ANY         DeploymentsRequest_Status = 0
	DeploymentsRequest_PENDING     DeploymentsRequest_Status = 1
	DeploymentsRequest_IN_PROGRESS DeploymentsRequest_Status = 2
	DeploymentsRequest_COMPLETE    DeploymentsRequest_Status = 3
	DeploymentsRequest_FAILED      DeploymentsRequest_Status = 4
)

var DeploymentsRequest_Status_name = map[int32]string{
	0: "ANY",
	1: "PENDING",
	2: "IN_PROGRESS",
	3: "COMPLETE",
	4: "FAILED",
}
var DeploymentsRequest_Status_value = map[string]int32{
	"ANY":         0,
	"PENDING":     1,
	"IN_PROGRESS": 2,
	"COMPLETE":    3,
	"FAILED":      4,
}

func (DeploymentsRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{34, 0}
}

type DeployableGroup struct {
	ID                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CreatedTimestamp  uint64 `protobuf:"varint,4,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	ModifiedTimestamp uint64 `protobuf:"varint,5,opt,name=modified_timestamp,json=modifiedTimestamp,proto3" json:"modified_timestamp,omitempty"`
}

func (m *DeployableGroup) Reset()                    { *m = DeployableGroup{} }
func (*DeployableGroup) ProtoMessage()               {}
func (*DeployableGroup) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type Environment struct {
	ID                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeployableGroupID string `protobuf:"bytes,2,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	IsProd            bool   `protobuf:"varint,5,opt,name=is_prod,json=isProd,proto3" json:"is_prod,omitempty"`
	CreatedTimestamp  uint64 `protobuf:"varint,6,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	ModifiedTimestamp uint64 `protobuf:"varint,7,opt,name=modified_timestamp,json=modifiedTimestamp,proto3" json:"modified_timestamp,omitempty"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type EnvironmentConfig struct {
	ID            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentID string            `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Status        string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Values        map[string]string `protobuf:"bytes,4,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *EnvironmentConfig) Reset()                    { *m = EnvironmentConfig{} }
func (*EnvironmentConfig) ProtoMessage()               {}
func (*EnvironmentConfig) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

func (m *EnvironmentConfig) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Deployable struct {
	ID                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeployableGroupID string `protobuf:"bytes,2,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	CreatedTimestamp  uint64 `protobuf:"varint,7,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	ModifiedTimestamp uint64 `protobuf:"varint,8,opt,name=modified_timestamp,json=modifiedTimestamp,proto3" json:"modified_timestamp,omitempty"`
	GitURL            string `protobuf:"bytes,9,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
}

func (m *Deployable) Reset()                    { *m = Deployable{} }
func (*Deployable) ProtoMessage()               {}
func (*Deployable) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type DeployableConfig struct {
	ID            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvironmentID string            `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeployableID  string            `protobuf:"bytes,3,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	Status        string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Values        map[string]string `protobuf:"bytes,5,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DeployableConfig) Reset()                    { *m = DeployableConfig{} }
func (*DeployableConfig) ProtoMessage()               {}
func (*DeployableConfig) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

func (m *DeployableConfig) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

// TODO: Should we use an RVN and optomistic locking here?
type Deployment struct {
	ID                 string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeploymentNumber   uint64                    `protobuf:"varint,2,opt,name=deployment_number,json=deploymentNumber,proto3" json:"deployment_number,omitempty"`
	EnvironmentID      string                    `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DeployableID       string                    `protobuf:"bytes,4,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	DeployableConfigID string                    `protobuf:"bytes,5,opt,name=deployable_config_id,json=deployableConfigId,proto3" json:"deployable_config_id,omitempty"`
	DeployableVectorID string                    `protobuf:"bytes,6,opt,name=deployable_vector_id,json=deployableVectorId,proto3" json:"deployable_vector_id,omitempty"`
	Type               Deployment_DeploymentType `protobuf:"varint,7,opt,name=type,proto3,enum=deploy.Deployment_DeploymentType" json:"type,omitempty"`
	// Types that are valid to be assigned to DeploymentOneof:
	//	*Deployment_EcsDeployment
	DeploymentOneof    isDeployment_DeploymentOneof `protobuf_oneof:"deployment_oneof"`
	Status             Deployment_DeploymentStatus  `protobuf:"varint,9,opt,name=status,proto3,enum=deploy.Deployment_DeploymentStatus" json:"status,omitempty"`
	BuildNumber        string                       `protobuf:"bytes,10,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	StartedTimestamp   uint64                       `protobuf:"varint,11,opt,name=started_timestamp,json=startedTimestamp,proto3" json:"started_timestamp,omitempty"`
	CompletedTimestamp uint64                       `protobuf:"varint,12,opt,name=completed_timestamp,json=completedTimestamp,proto3" json:"completed_timestamp,omitempty"`
	GitHash            string                       `protobuf:"bytes,13,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type isDeployment_DeploymentOneof interface {
	isDeployment_DeploymentOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Deployment_EcsDeployment struct {
	EcsDeployment *ECSDeployment `protobuf:"bytes,8,opt,name=ecs_deployment,json=ecsDeployment,oneof"`
}

func (*Deployment_EcsDeployment) isDeployment_DeploymentOneof() {}

func (m *Deployment) GetDeploymentOneof() isDeployment_DeploymentOneof {
	if m != nil {
		return m.DeploymentOneof
	}
	return nil
}

func (m *Deployment) GetEcsDeployment() *ECSDeployment {
	if x, ok := m.GetDeploymentOneof().(*Deployment_EcsDeployment); ok {
		return x.EcsDeployment
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Deployment) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Deployment_OneofMarshaler, _Deployment_OneofUnmarshaler, _Deployment_OneofSizer, []interface{}{
		(*Deployment_EcsDeployment)(nil),
	}
}

func _Deployment_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Deployment)
	// deployment_oneof
	switch x := m.DeploymentOneof.(type) {
	case *Deployment_EcsDeployment:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcsDeployment); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Deployment.DeploymentOneof has unexpected type %T", x)
	}
	return nil
}

func _Deployment_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Deployment)
	switch tag {
	case 8: // deployment_oneof.ecs_deployment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ECSDeployment)
		err := b.DecodeMessage(msg)
		m.DeploymentOneof = &Deployment_EcsDeployment{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Deployment_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Deployment)
	// deployment_oneof
	switch x := m.DeploymentOneof.(type) {
	case *Deployment_EcsDeployment:
		s := proto.Size(x.EcsDeployment)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ECSDeployment struct {
	Image                       string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	ClusterDeployableConfigName string `protobuf:"bytes,2,opt,name=cluster_deployable_config_name,json=clusterDeployableConfigName,proto3" json:"cluster_deployable_config_name,omitempty"`
}

func (m *ECSDeployment) Reset()                    { *m = ECSDeployment{} }
func (*ECSDeployment) ProtoMessage()               {}
func (*ECSDeployment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

// Vector: Directed line. Source to target connection.
type DeployableVector struct {
	ID           string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeployableID string                                      `protobuf:"bytes,2,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	SourceType   DeployableVector_DeployableVectorSourceType `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=deploy.DeployableVector_DeployableVectorSourceType" json:"source_type,omitempty"`
	// Types that are valid to be assigned to DeploymentSourceOneof:
	//	*DeployableVector_EnvironmentID
	DeploymentSourceOneof isDeployableVector_DeploymentSourceOneof `protobuf_oneof:"deployment_source_oneof"`
	TargetEnvironmentID   string                                   `protobuf:"bytes,5,opt,name=target_environment_id,json=targetEnvironmentId,proto3" json:"target_environment_id,omitempty"`
}

func (m *DeployableVector) Reset()                    { *m = DeployableVector{} }
func (*DeployableVector) ProtoMessage()               {}
func (*DeployableVector) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

type isDeployableVector_DeploymentSourceOneof interface {
	isDeployableVector_DeploymentSourceOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DeployableVector_EnvironmentID struct {
	EnvironmentID string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId,proto3,oneof"`
}

func (*DeployableVector_EnvironmentID) isDeployableVector_DeploymentSourceOneof() {}

func (m *DeployableVector) GetDeploymentSourceOneof() isDeployableVector_DeploymentSourceOneof {
	if m != nil {
		return m.DeploymentSourceOneof
	}
	return nil
}

func (m *DeployableVector) GetEnvironmentID() string {
	if x, ok := m.GetDeploymentSourceOneof().(*DeployableVector_EnvironmentID); ok {
		return x.EnvironmentID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeployableVector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeployableVector_OneofMarshaler, _DeployableVector_OneofUnmarshaler, _DeployableVector_OneofSizer, []interface{}{
		(*DeployableVector_EnvironmentID)(nil),
	}
}

func _DeployableVector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeployableVector)
	// deployment_source_oneof
	switch x := m.DeploymentSourceOneof.(type) {
	case *DeployableVector_EnvironmentID:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EnvironmentID)
	case nil:
	default:
		return fmt.Errorf("DeployableVector.DeploymentSourceOneof has unexpected type %T", x)
	}
	return nil
}

func _DeployableVector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeployableVector)
	switch tag {
	case 4: // deployment_source_oneof.environment_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DeploymentSourceOneof = &DeployableVector_EnvironmentID{x}
		return true, err
	default:
		return false, nil
	}
}

func _DeployableVector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeployableVector)
	// deployment_source_oneof
	switch x := m.DeploymentSourceOneof.(type) {
	case *DeployableVector_EnvironmentID:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EnvironmentID)))
		n += len(x.EnvironmentID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateDeployableGroupRequest struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateDeployableGroupRequest) Reset()                    { *m = CreateDeployableGroupRequest{} }
func (*CreateDeployableGroupRequest) ProtoMessage()               {}
func (*CreateDeployableGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

type CreateDeployableGroupResponse struct {
	DeployableGroup *DeployableGroup `protobuf:"bytes,1,opt,name=deployable_group,json=deployableGroup" json:"deployable_group,omitempty"`
}

func (m *CreateDeployableGroupResponse) Reset()                    { *m = CreateDeployableGroupResponse{} }
func (*CreateDeployableGroupResponse) ProtoMessage()               {}
func (*CreateDeployableGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

func (m *CreateDeployableGroupResponse) GetDeployableGroup() *DeployableGroup {
	if m != nil {
		return m.DeployableGroup
	}
	return nil
}

type CreateEnvironmentRequest struct {
	DeployableGroupID string `protobuf:"bytes,1,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsProd            bool   `protobuf:"varint,4,opt,name=is_prod,json=isProd,proto3" json:"is_prod,omitempty"`
}

func (m *CreateEnvironmentRequest) Reset()                    { *m = CreateEnvironmentRequest{} }
func (*CreateEnvironmentRequest) ProtoMessage()               {}
func (*CreateEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

type CreateEnvironmentResponse struct {
	Environment *Environment `protobuf:"bytes,1,opt,name=environment" json:"environment,omitempty"`
}

func (m *CreateEnvironmentResponse) Reset()                    { *m = CreateEnvironmentResponse{} }
func (*CreateEnvironmentResponse) ProtoMessage()               {}
func (*CreateEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

func (m *CreateEnvironmentResponse) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

type CreateDeployableRequest struct {
	DeployableGroupID string `protobuf:"bytes,1,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	GitURL            string `protobuf:"bytes,4,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
}

func (m *CreateDeployableRequest) Reset()                    { *m = CreateDeployableRequest{} }
func (*CreateDeployableRequest) ProtoMessage()               {}
func (*CreateDeployableRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

type CreateDeployableResponse struct {
	Deployable *Deployable `protobuf:"bytes,1,opt,name=deployable" json:"deployable,omitempty"`
}

func (m *CreateDeployableResponse) Reset()                    { *m = CreateDeployableResponse{} }
func (*CreateDeployableResponse) ProtoMessage()               {}
func (*CreateDeployableResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

func (m *CreateDeployableResponse) GetDeployable() *Deployable {
	if m != nil {
		return m.Deployable
	}
	return nil
}

type CreateEnvironmentConfigRequest struct {
	EnvironmentID  string            `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	SourceConfigID string            `protobuf:"bytes,2,opt,name=source_config_id,json=sourceConfigId,proto3" json:"source_config_id,omitempty"`
	OmitFromSource []string          `protobuf:"bytes,4,rep,name=omit_from_source,json=omitFromSource" json:"omit_from_source,omitempty"`
	Values         map[string]string `protobuf:"bytes,3,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CreateEnvironmentConfigRequest) Reset()      { *m = CreateEnvironmentConfigRequest{} }
func (*CreateEnvironmentConfigRequest) ProtoMessage() {}
func (*CreateEnvironmentConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{14}
}

func (m *CreateEnvironmentConfigRequest) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type CreateEnvironmentConfigResponse struct {
	Config *EnvironmentConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *CreateEnvironmentConfigResponse) Reset()      { *m = CreateEnvironmentConfigResponse{} }
func (*CreateEnvironmentConfigResponse) ProtoMessage() {}
func (*CreateEnvironmentConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{15}
}

func (m *CreateEnvironmentConfigResponse) GetConfig() *EnvironmentConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type CreateDeployableConfigRequest struct {
	DeployableID   string            `protobuf:"bytes,1,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	EnvironmentID  string            `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	SourceConfigID string            `protobuf:"bytes,3,opt,name=source_config_id,json=sourceConfigId,proto3" json:"source_config_id,omitempty"`
	OmitFromSource []string          `protobuf:"bytes,4,rep,name=omit_from_source,json=omitFromSource" json:"omit_from_source,omitempty"`
	Values         map[string]string `protobuf:"bytes,5,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CreateDeployableConfigRequest) Reset()      { *m = CreateDeployableConfigRequest{} }
func (*CreateDeployableConfigRequest) ProtoMessage() {}
func (*CreateDeployableConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{16}
}

func (m *CreateDeployableConfigRequest) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type CreateDeployableConfigResponse struct {
	Config *DeployableConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *CreateDeployableConfigResponse) Reset()      { *m = CreateDeployableConfigResponse{} }
func (*CreateDeployableConfigResponse) ProtoMessage() {}
func (*CreateDeployableConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{17}
}

func (m *CreateDeployableConfigResponse) GetConfig() *DeployableConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type CreateDeployableVectorRequest struct {
	DeployableID string                                                   `protobuf:"bytes,1,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	SourceType   CreateDeployableVectorRequest_DeployableVectorSourceType `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=deploy.CreateDeployableVectorRequest_DeployableVectorSourceType" json:"source_type,omitempty"`
	// Types that are valid to be assigned to DeploymentSourceOneof:
	//	*CreateDeployableVectorRequest_SourceEnvironmentID
	DeploymentSourceOneof isCreateDeployableVectorRequest_DeploymentSourceOneof `protobuf_oneof:"deployment_source_oneof"`
	TargetEnvironmentID   string                                                `protobuf:"bytes,5,opt,name=target_environment_id,json=targetEnvironmentId,proto3" json:"target_environment_id,omitempty"`
}

func (m *CreateDeployableVectorRequest) Reset()      { *m = CreateDeployableVectorRequest{} }
func (*CreateDeployableVectorRequest) ProtoMessage() {}
func (*CreateDeployableVectorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{18}
}

type isCreateDeployableVectorRequest_DeploymentSourceOneof interface {
	isCreateDeployableVectorRequest_DeploymentSourceOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateDeployableVectorRequest_SourceEnvironmentID struct {
	SourceEnvironmentID string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId,proto3,oneof"`
}

func (*CreateDeployableVectorRequest_SourceEnvironmentID) isCreateDeployableVectorRequest_DeploymentSourceOneof() {
}

func (m *CreateDeployableVectorRequest) GetDeploymentSourceOneof() isCreateDeployableVectorRequest_DeploymentSourceOneof {
	if m != nil {
		return m.DeploymentSourceOneof
	}
	return nil
}

func (m *CreateDeployableVectorRequest) GetSourceEnvironmentID() string {
	if x, ok := m.GetDeploymentSourceOneof().(*CreateDeployableVectorRequest_SourceEnvironmentID); ok {
		return x.SourceEnvironmentID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateDeployableVectorRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateDeployableVectorRequest_OneofMarshaler, _CreateDeployableVectorRequest_OneofUnmarshaler, _CreateDeployableVectorRequest_OneofSizer, []interface{}{
		(*CreateDeployableVectorRequest_SourceEnvironmentID)(nil),
	}
}

func _CreateDeployableVectorRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateDeployableVectorRequest)
	// deployment_source_oneof
	switch x := m.DeploymentSourceOneof.(type) {
	case *CreateDeployableVectorRequest_SourceEnvironmentID:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SourceEnvironmentID)
	case nil:
	default:
		return fmt.Errorf("CreateDeployableVectorRequest.DeploymentSourceOneof has unexpected type %T", x)
	}
	return nil
}

func _CreateDeployableVectorRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateDeployableVectorRequest)
	switch tag {
	case 4: // deployment_source_oneof.environment_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.DeploymentSourceOneof = &CreateDeployableVectorRequest_SourceEnvironmentID{x}
		return true, err
	default:
		return false, nil
	}
}

func _CreateDeployableVectorRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateDeployableVectorRequest)
	// deployment_source_oneof
	switch x := m.DeploymentSourceOneof.(type) {
	case *CreateDeployableVectorRequest_SourceEnvironmentID:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SourceEnvironmentID)))
		n += len(x.SourceEnvironmentID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateDeployableVectorResponse struct {
	Vector *DeployableVector `protobuf:"bytes,1,opt,name=vector" json:"vector,omitempty"`
}

func (m *CreateDeployableVectorResponse) Reset()      { *m = CreateDeployableVectorResponse{} }
func (*CreateDeployableVectorResponse) ProtoMessage() {}
func (*CreateDeployableVectorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{19}
}

func (m *CreateDeployableVectorResponse) GetVector() *DeployableVector {
	if m != nil {
		return m.Vector
	}
	return nil
}

type DeployableGroupsRequest struct {
}

func (m *DeployableGroupsRequest) Reset()                    { *m = DeployableGroupsRequest{} }
func (*DeployableGroupsRequest) ProtoMessage()               {}
func (*DeployableGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

type DeployableGroupsResponse struct {
	DeployableGroups []*DeployableGroup `protobuf:"bytes,1,rep,name=deployable_groups,json=deployableGroups" json:"deployable_groups,omitempty"`
}

func (m *DeployableGroupsResponse) Reset()                    { *m = DeployableGroupsResponse{} }
func (*DeployableGroupsResponse) ProtoMessage()               {}
func (*DeployableGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

func (m *DeployableGroupsResponse) GetDeployableGroups() []*DeployableGroup {
	if m != nil {
		return m.DeployableGroups
	}
	return nil
}

type EnvironmentsRequest struct {
	DeployableGroupID string `protobuf:"bytes,1,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
}

func (m *EnvironmentsRequest) Reset()                    { *m = EnvironmentsRequest{} }
func (*EnvironmentsRequest) ProtoMessage()               {}
func (*EnvironmentsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{22} }

type EnvironmentsResponse struct {
	Environments []*Environment `protobuf:"bytes,1,rep,name=environments" json:"environments,omitempty"`
}

func (m *EnvironmentsResponse) Reset()                    { *m = EnvironmentsResponse{} }
func (*EnvironmentsResponse) ProtoMessage()               {}
func (*EnvironmentsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

func (m *EnvironmentsResponse) GetEnvironments() []*Environment {
	if m != nil {
		return m.Environments
	}
	return nil
}

type EnvironmentConfigsRequest struct {
	EnvironmentID string `protobuf:"bytes,1,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Status        string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *EnvironmentConfigsRequest) Reset()                    { *m = EnvironmentConfigsRequest{} }
func (*EnvironmentConfigsRequest) ProtoMessage()               {}
func (*EnvironmentConfigsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{24} }

type EnvironmentConfigsResponse struct {
	Configs []*EnvironmentConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *EnvironmentConfigsResponse) Reset()                    { *m = EnvironmentConfigsResponse{} }
func (*EnvironmentConfigsResponse) ProtoMessage()               {}
func (*EnvironmentConfigsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

func (m *EnvironmentConfigsResponse) GetConfigs() []*EnvironmentConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type DeployablesRequest struct {
	DeployableGroupID string `protobuf:"bytes,1,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
}

func (m *DeployablesRequest) Reset()                    { *m = DeployablesRequest{} }
func (*DeployablesRequest) ProtoMessage()               {}
func (*DeployablesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

type DeployablesResponse struct {
	Deployables []*Deployable `protobuf:"bytes,1,rep,name=deployables" json:"deployables,omitempty"`
}

func (m *DeployablesResponse) Reset()                    { *m = DeployablesResponse{} }
func (*DeployablesResponse) ProtoMessage()               {}
func (*DeployablesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

func (m *DeployablesResponse) GetDeployables() []*Deployable {
	if m != nil {
		return m.Deployables
	}
	return nil
}

type DeployableConfigsRequest struct {
	DeployableID  string `protobuf:"bytes,1,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	EnvironmentID string `protobuf:"bytes,2,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	Status        string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *DeployableConfigsRequest) Reset()                    { *m = DeployableConfigsRequest{} }
func (*DeployableConfigsRequest) ProtoMessage()               {}
func (*DeployableConfigsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

type DeployableConfigsResponse struct {
	Configs []*DeployableConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *DeployableConfigsResponse) Reset()                    { *m = DeployableConfigsResponse{} }
func (*DeployableConfigsResponse) ProtoMessage()               {}
func (*DeployableConfigsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

func (m *DeployableConfigsResponse) GetConfigs() []*DeployableConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type DeployableVectorsRequest struct {
	DeployableID string `protobuf:"bytes,1,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
}

func (m *DeployableVectorsRequest) Reset()                    { *m = DeployableVectorsRequest{} }
func (*DeployableVectorsRequest) ProtoMessage()               {}
func (*DeployableVectorsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

type DeployableVectorsResponse struct {
	Vectors []*DeployableVector `protobuf:"bytes,1,rep,name=vectors" json:"vectors,omitempty"`
}

func (m *DeployableVectorsResponse) Reset()                    { *m = DeployableVectorsResponse{} }
func (*DeployableVectorsResponse) ProtoMessage()               {}
func (*DeployableVectorsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

func (m *DeployableVectorsResponse) GetVectors() []*DeployableVector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

type ReportBuildCompleteRequest struct {
	DeployableID string                                       `protobuf:"bytes,1,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	BuildNumber  string                                       `protobuf:"bytes,2,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	ArtifactType ReportBuildCompleteRequest_BuildArtifactType `protobuf:"varint,3,opt,name=artifact_type,json=artifactType,proto3,enum=deploy.ReportBuildCompleteRequest_BuildArtifactType" json:"artifact_type,omitempty"`
	// Types that are valid to be assigned to BuildArtifactOneof:
	//	*ReportBuildCompleteRequest_DockerImage
	BuildArtifactOneof isReportBuildCompleteRequest_BuildArtifactOneof `protobuf_oneof:"build_artifact_oneof"`
	GitHash            string                                          `protobuf:"bytes,5,opt,name=git_hash,json=gitHash,proto3" json:"git_hash,omitempty"`
}

func (m *ReportBuildCompleteRequest) Reset()                    { *m = ReportBuildCompleteRequest{} }
func (*ReportBuildCompleteRequest) ProtoMessage()               {}
func (*ReportBuildCompleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

type isReportBuildCompleteRequest_BuildArtifactOneof interface {
	isReportBuildCompleteRequest_BuildArtifactOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReportBuildCompleteRequest_DockerImage struct {
	DockerImage string `protobuf:"bytes,4,opt,name=docker_image,json=dockerImage,proto3,oneof"`
}

func (*ReportBuildCompleteRequest_DockerImage) isReportBuildCompleteRequest_BuildArtifactOneof() {}

func (m *ReportBuildCompleteRequest) GetBuildArtifactOneof() isReportBuildCompleteRequest_BuildArtifactOneof {
	if m != nil {
		return m.BuildArtifactOneof
	}
	return nil
}

func (m *ReportBuildCompleteRequest) GetDockerImage() string {
	if x, ok := m.GetBuildArtifactOneof().(*ReportBuildCompleteRequest_DockerImage); ok {
		return x.DockerImage
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReportBuildCompleteRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReportBuildCompleteRequest_OneofMarshaler, _ReportBuildCompleteRequest_OneofUnmarshaler, _ReportBuildCompleteRequest_OneofSizer, []interface{}{
		(*ReportBuildCompleteRequest_DockerImage)(nil),
	}
}

func _ReportBuildCompleteRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReportBuildCompleteRequest)
	// build_artifact_oneof
	switch x := m.BuildArtifactOneof.(type) {
	case *ReportBuildCompleteRequest_DockerImage:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.DockerImage)
	case nil:
	default:
		return fmt.Errorf("ReportBuildCompleteRequest.BuildArtifactOneof has unexpected type %T", x)
	}
	return nil
}

func _ReportBuildCompleteRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReportBuildCompleteRequest)
	switch tag {
	case 4: // build_artifact_oneof.docker_image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.BuildArtifactOneof = &ReportBuildCompleteRequest_DockerImage{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReportBuildCompleteRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReportBuildCompleteRequest)
	// build_artifact_oneof
	switch x := m.BuildArtifactOneof.(type) {
	case *ReportBuildCompleteRequest_DockerImage:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.DockerImage)))
		n += len(x.DockerImage)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReportBuildCompleteResponse struct {
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=deployments" json:"deployments,omitempty"`
}

func (m *ReportBuildCompleteResponse) Reset()                    { *m = ReportBuildCompleteResponse{} }
func (*ReportBuildCompleteResponse) ProtoMessage()               {}
func (*ReportBuildCompleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{33} }

func (m *ReportBuildCompleteResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type DeploymentsRequest struct {
	DeployableID string                    `protobuf:"bytes,1,opt,name=deployable_id,json=deployableId,proto3" json:"deployable_id,omitempty"`
	Status       DeploymentsRequest_Status `protobuf:"varint,2,opt,name=status,proto3,enum=deploy.DeploymentsRequest_Status" json:"status,omitempty"`
}

func (m *DeploymentsRequest) Reset()                    { *m = DeploymentsRequest{} }
func (*DeploymentsRequest) ProtoMessage()               {}
func (*DeploymentsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{34} }

type DeploymentsResponse struct {
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=deployments" json:"deployments,omitempty"`
}

func (m *DeploymentsResponse) Reset()                    { *m = DeploymentsResponse{} }
func (*DeploymentsResponse) ProtoMessage()               {}
func (*DeploymentsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{35} }

func (m *DeploymentsResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type PromotionRequest struct {
	DeploymentID string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
}

func (m *PromotionRequest) Reset()                    { *m = PromotionRequest{} }
func (*PromotionRequest) ProtoMessage()               {}
func (*PromotionRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{36} }

type PromotionResponse struct {
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=deployments" json:"deployments,omitempty"`
}

func (m *PromotionResponse) Reset()                    { *m = PromotionResponse{} }
func (*PromotionResponse) ProtoMessage()               {}
func (*PromotionResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{37} }

func (m *PromotionResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type PromoteGroupRequest struct {
	DeployableGroupID string `protobuf:"bytes,1,opt,name=deployable_group_id,json=deployableGroupId,proto3" json:"deployable_group_id,omitempty"`
	BuildNumber       string `protobuf:"bytes,2,opt,name=build_number,json=buildNumber,proto3" json:"build_number,omitempty"`
	EnvironmentID     string `protobuf:"bytes,3,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
}

func (m *PromoteGroupRequest) Reset()                    { *m = PromoteGroupRequest{} }
func (*PromoteGroupRequest) ProtoMessage()               {}
func (*PromoteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{38} }

type PromoteGroupResponse struct {
	Deployments []*Deployment `protobuf:"bytes,1,rep,name=deployments" json:"deployments,omitempty"`
}

func (m *PromoteGroupResponse) Reset()                    { *m = PromoteGroupResponse{} }
func (*PromoteGroupResponse) ProtoMessage()               {}
func (*PromoteGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{39} }

func (m *PromoteGroupResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func init() {
	proto.RegisterType((*DeployableGroup)(nil), "deploy.DeployableGroup")
	proto.RegisterType((*Environment)(nil), "deploy.Environment")
	proto.RegisterType((*EnvironmentConfig)(nil), "deploy.EnvironmentConfig")
	proto.RegisterType((*Deployable)(nil), "deploy.Deployable")
	proto.RegisterType((*DeployableConfig)(nil), "deploy.DeployableConfig")
	proto.RegisterType((*Deployment)(nil), "deploy.Deployment")
	proto.RegisterType((*ECSDeployment)(nil), "deploy.ECSDeployment")
	proto.RegisterType((*DeployableVector)(nil), "deploy.DeployableVector")
	proto.RegisterType((*CreateDeployableGroupRequest)(nil), "deploy.CreateDeployableGroupRequest")
	proto.RegisterType((*CreateDeployableGroupResponse)(nil), "deploy.CreateDeployableGroupResponse")
	proto.RegisterType((*CreateEnvironmentRequest)(nil), "deploy.CreateEnvironmentRequest")
	proto.RegisterType((*CreateEnvironmentResponse)(nil), "deploy.CreateEnvironmentResponse")
	proto.RegisterType((*CreateDeployableRequest)(nil), "deploy.CreateDeployableRequest")
	proto.RegisterType((*CreateDeployableResponse)(nil), "deploy.CreateDeployableResponse")
	proto.RegisterType((*CreateEnvironmentConfigRequest)(nil), "deploy.CreateEnvironmentConfigRequest")
	proto.RegisterType((*CreateEnvironmentConfigResponse)(nil), "deploy.CreateEnvironmentConfigResponse")
	proto.RegisterType((*CreateDeployableConfigRequest)(nil), "deploy.CreateDeployableConfigRequest")
	proto.RegisterType((*CreateDeployableConfigResponse)(nil), "deploy.CreateDeployableConfigResponse")
	proto.RegisterType((*CreateDeployableVectorRequest)(nil), "deploy.CreateDeployableVectorRequest")
	proto.RegisterType((*CreateDeployableVectorResponse)(nil), "deploy.CreateDeployableVectorResponse")
	proto.RegisterType((*DeployableGroupsRequest)(nil), "deploy.DeployableGroupsRequest")
	proto.RegisterType((*DeployableGroupsResponse)(nil), "deploy.DeployableGroupsResponse")
	proto.RegisterType((*EnvironmentsRequest)(nil), "deploy.EnvironmentsRequest")
	proto.RegisterType((*EnvironmentsResponse)(nil), "deploy.EnvironmentsResponse")
	proto.RegisterType((*EnvironmentConfigsRequest)(nil), "deploy.EnvironmentConfigsRequest")
	proto.RegisterType((*EnvironmentConfigsResponse)(nil), "deploy.EnvironmentConfigsResponse")
	proto.RegisterType((*DeployablesRequest)(nil), "deploy.DeployablesRequest")
	proto.RegisterType((*DeployablesResponse)(nil), "deploy.DeployablesResponse")
	proto.RegisterType((*DeployableConfigsRequest)(nil), "deploy.DeployableConfigsRequest")
	proto.RegisterType((*DeployableConfigsResponse)(nil), "deploy.DeployableConfigsResponse")
	proto.RegisterType((*DeployableVectorsRequest)(nil), "deploy.DeployableVectorsRequest")
	proto.RegisterType((*DeployableVectorsResponse)(nil), "deploy.DeployableVectorsResponse")
	proto.RegisterType((*ReportBuildCompleteRequest)(nil), "deploy.ReportBuildCompleteRequest")
	proto.RegisterType((*ReportBuildCompleteResponse)(nil), "deploy.ReportBuildCompleteResponse")
	proto.RegisterType((*DeploymentsRequest)(nil), "deploy.DeploymentsRequest")
	proto.RegisterType((*DeploymentsResponse)(nil), "deploy.DeploymentsResponse")
	proto.RegisterType((*PromotionRequest)(nil), "deploy.PromotionRequest")
	proto.RegisterType((*PromotionResponse)(nil), "deploy.PromotionResponse")
	proto.RegisterType((*PromoteGroupRequest)(nil), "deploy.PromoteGroupRequest")
	proto.RegisterType((*PromoteGroupResponse)(nil), "deploy.PromoteGroupResponse")
	proto.RegisterEnum("deploy.EnvironmentConfig_DeployableConfigStatus", EnvironmentConfig_DeployableConfigStatus_name, EnvironmentConfig_DeployableConfigStatus_value)
	proto.RegisterEnum("deploy.DeployableConfig_DeployableConfigStatus", DeployableConfig_DeployableConfigStatus_name, DeployableConfig_DeployableConfigStatus_value)
	proto.RegisterEnum("deploy.Deployment_DeploymentType", Deployment_DeploymentType_name, Deployment_DeploymentType_value)
	proto.RegisterEnum("deploy.Deployment_DeploymentStatus", Deployment_DeploymentStatus_name, Deployment_DeploymentStatus_value)
	proto.RegisterEnum("deploy.DeployableVector_DeployableVectorSourceType", DeployableVector_DeployableVectorSourceType_name, DeployableVector_DeployableVectorSourceType_value)
	proto.RegisterEnum("deploy.CreateDeployableVectorRequest_DeployableVectorSourceType", CreateDeployableVectorRequest_DeployableVectorSourceType_name, CreateDeployableVectorRequest_DeployableVectorSourceType_value)
	proto.RegisterEnum("deploy.ReportBuildCompleteRequest_BuildArtifactType", ReportBuildCompleteRequest_BuildArtifactType_name, ReportBuildCompleteRequest_BuildArtifactType_value)
	proto.RegisterEnum("deploy.DeploymentsRequest_Status", DeploymentsRequest_Status_name, DeploymentsRequest_Status_value)
}
func (x EnvironmentConfig_DeployableConfigStatus) String() string {
	s, ok := EnvironmentConfig_DeployableConfigStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeployableConfig_DeployableConfigStatus) String() string {
	s, ok := DeployableConfig_DeployableConfigStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Deployment_DeploymentType) String() string {
	s, ok := Deployment_DeploymentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Deployment_DeploymentStatus) String() string {
	s, ok := Deployment_DeploymentStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeployableVector_DeployableVectorSourceType) String() string {
	s, ok := DeployableVector_DeployableVectorSourceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CreateDeployableVectorRequest_DeployableVectorSourceType) String() string {
	s, ok := CreateDeployableVectorRequest_DeployableVectorSourceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReportBuildCompleteRequest_BuildArtifactType) String() string {
	s, ok := ReportBuildCompleteRequest_BuildArtifactType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeploymentsRequest_Status) String() string {
	s, ok := DeploymentsRequest_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *DeployableGroup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableGroup)
	if !ok {
		that2, ok := that.(DeployableGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.ModifiedTimestamp != that1.ModifiedTimestamp {
		return false
	}
	return true
}
func (this *Environment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Environment)
	if !ok {
		that2, ok := that.(Environment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.IsProd != that1.IsProd {
		return false
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.ModifiedTimestamp != that1.ModifiedTimestamp {
		return false
	}
	return true
}
func (this *EnvironmentConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnvironmentConfig)
	if !ok {
		that2, ok := that.(EnvironmentConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *Deployable) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Deployable)
	if !ok {
		that2, ok := that.(Deployable)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.ModifiedTimestamp != that1.ModifiedTimestamp {
		return false
	}
	if this.GitURL != that1.GitURL {
		return false
	}
	return true
}
func (this *DeployableConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableConfig)
	if !ok {
		that2, ok := that.(DeployableConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *Deployment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Deployment)
	if !ok {
		that2, ok := that.(Deployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DeploymentNumber != that1.DeploymentNumber {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.DeployableConfigID != that1.DeployableConfigID {
		return false
	}
	if this.DeployableVectorID != that1.DeployableVectorID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.DeploymentOneof == nil {
		if this.DeploymentOneof != nil {
			return false
		}
	} else if this.DeploymentOneof == nil {
		return false
	} else if !this.DeploymentOneof.Equal(that1.DeploymentOneof) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.BuildNumber != that1.BuildNumber {
		return false
	}
	if this.StartedTimestamp != that1.StartedTimestamp {
		return false
	}
	if this.CompletedTimestamp != that1.CompletedTimestamp {
		return false
	}
	if this.GitHash != that1.GitHash {
		return false
	}
	return true
}
func (this *Deployment_EcsDeployment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Deployment_EcsDeployment)
	if !ok {
		that2, ok := that.(Deployment_EcsDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EcsDeployment.Equal(that1.EcsDeployment) {
		return false
	}
	return true
}
func (this *ECSDeployment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ECSDeployment)
	if !ok {
		that2, ok := that.(ECSDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.ClusterDeployableConfigName != that1.ClusterDeployableConfigName {
		return false
	}
	return true
}
func (this *DeployableVector) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableVector)
	if !ok {
		that2, ok := that.(DeployableVector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.SourceType != that1.SourceType {
		return false
	}
	if that1.DeploymentSourceOneof == nil {
		if this.DeploymentSourceOneof != nil {
			return false
		}
	} else if this.DeploymentSourceOneof == nil {
		return false
	} else if !this.DeploymentSourceOneof.Equal(that1.DeploymentSourceOneof) {
		return false
	}
	if this.TargetEnvironmentID != that1.TargetEnvironmentID {
		return false
	}
	return true
}
func (this *DeployableVector_EnvironmentID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableVector_EnvironmentID)
	if !ok {
		that2, ok := that.(DeployableVector_EnvironmentID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	return true
}
func (this *CreateDeployableGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableGroupRequest)
	if !ok {
		that2, ok := that.(CreateDeployableGroupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *CreateDeployableGroupResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableGroupResponse)
	if !ok {
		that2, ok := that.(CreateDeployableGroupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DeployableGroup.Equal(that1.DeployableGroup) {
		return false
	}
	return true
}
func (this *CreateEnvironmentRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEnvironmentRequest)
	if !ok {
		that2, ok := that.(CreateEnvironmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.IsProd != that1.IsProd {
		return false
	}
	return true
}
func (this *CreateEnvironmentResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEnvironmentResponse)
	if !ok {
		that2, ok := that.(CreateEnvironmentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Environment.Equal(that1.Environment) {
		return false
	}
	return true
}
func (this *CreateDeployableRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableRequest)
	if !ok {
		that2, ok := that.(CreateDeployableRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.GitURL != that1.GitURL {
		return false
	}
	return true
}
func (this *CreateDeployableResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableResponse)
	if !ok {
		that2, ok := that.(CreateDeployableResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Deployable.Equal(that1.Deployable) {
		return false
	}
	return true
}
func (this *CreateEnvironmentConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEnvironmentConfigRequest)
	if !ok {
		that2, ok := that.(CreateEnvironmentConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.SourceConfigID != that1.SourceConfigID {
		return false
	}
	if len(this.OmitFromSource) != len(that1.OmitFromSource) {
		return false
	}
	for i := range this.OmitFromSource {
		if this.OmitFromSource[i] != that1.OmitFromSource[i] {
			return false
		}
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *CreateEnvironmentConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEnvironmentConfigResponse)
	if !ok {
		that2, ok := that.(CreateEnvironmentConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *CreateDeployableConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableConfigRequest)
	if !ok {
		that2, ok := that.(CreateDeployableConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.SourceConfigID != that1.SourceConfigID {
		return false
	}
	if len(this.OmitFromSource) != len(that1.OmitFromSource) {
		return false
	}
	for i := range this.OmitFromSource {
		if this.OmitFromSource[i] != that1.OmitFromSource[i] {
			return false
		}
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *CreateDeployableConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableConfigResponse)
	if !ok {
		that2, ok := that.(CreateDeployableConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *CreateDeployableVectorRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableVectorRequest)
	if !ok {
		that2, ok := that.(CreateDeployableVectorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.SourceType != that1.SourceType {
		return false
	}
	if that1.DeploymentSourceOneof == nil {
		if this.DeploymentSourceOneof != nil {
			return false
		}
	} else if this.DeploymentSourceOneof == nil {
		return false
	} else if !this.DeploymentSourceOneof.Equal(that1.DeploymentSourceOneof) {
		return false
	}
	if this.TargetEnvironmentID != that1.TargetEnvironmentID {
		return false
	}
	return true
}
func (this *CreateDeployableVectorRequest_SourceEnvironmentID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableVectorRequest_SourceEnvironmentID)
	if !ok {
		that2, ok := that.(CreateDeployableVectorRequest_SourceEnvironmentID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SourceEnvironmentID != that1.SourceEnvironmentID {
		return false
	}
	return true
}
func (this *CreateDeployableVectorResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDeployableVectorResponse)
	if !ok {
		that2, ok := that.(CreateDeployableVectorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Vector.Equal(that1.Vector) {
		return false
	}
	return true
}
func (this *DeployableGroupsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableGroupsRequest)
	if !ok {
		that2, ok := that.(DeployableGroupsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeployableGroupsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableGroupsResponse)
	if !ok {
		that2, ok := that.(DeployableGroupsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DeployableGroups) != len(that1.DeployableGroups) {
		return false
	}
	for i := range this.DeployableGroups {
		if !this.DeployableGroups[i].Equal(that1.DeployableGroups[i]) {
			return false
		}
	}
	return true
}
func (this *EnvironmentsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnvironmentsRequest)
	if !ok {
		that2, ok := that.(EnvironmentsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	return true
}
func (this *EnvironmentsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnvironmentsResponse)
	if !ok {
		that2, ok := that.(EnvironmentsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Environments) != len(that1.Environments) {
		return false
	}
	for i := range this.Environments {
		if !this.Environments[i].Equal(that1.Environments[i]) {
			return false
		}
	}
	return true
}
func (this *EnvironmentConfigsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnvironmentConfigsRequest)
	if !ok {
		that2, ok := that.(EnvironmentConfigsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *EnvironmentConfigsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnvironmentConfigsResponse)
	if !ok {
		that2, ok := that.(EnvironmentConfigsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	return true
}
func (this *DeployablesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployablesRequest)
	if !ok {
		that2, ok := that.(DeployablesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	return true
}
func (this *DeployablesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployablesResponse)
	if !ok {
		that2, ok := that.(DeployablesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Deployables) != len(that1.Deployables) {
		return false
	}
	for i := range this.Deployables {
		if !this.Deployables[i].Equal(that1.Deployables[i]) {
			return false
		}
	}
	return true
}
func (this *DeployableConfigsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableConfigsRequest)
	if !ok {
		that2, ok := that.(DeployableConfigsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *DeployableConfigsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableConfigsResponse)
	if !ok {
		that2, ok := that.(DeployableConfigsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	return true
}
func (this *DeployableVectorsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableVectorsRequest)
	if !ok {
		that2, ok := that.(DeployableVectorsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	return true
}
func (this *DeployableVectorsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeployableVectorsResponse)
	if !ok {
		that2, ok := that.(DeployableVectorsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Vectors) != len(that1.Vectors) {
		return false
	}
	for i := range this.Vectors {
		if !this.Vectors[i].Equal(that1.Vectors[i]) {
			return false
		}
	}
	return true
}
func (this *ReportBuildCompleteRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReportBuildCompleteRequest)
	if !ok {
		that2, ok := that.(ReportBuildCompleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.BuildNumber != that1.BuildNumber {
		return false
	}
	if this.ArtifactType != that1.ArtifactType {
		return false
	}
	if that1.BuildArtifactOneof == nil {
		if this.BuildArtifactOneof != nil {
			return false
		}
	} else if this.BuildArtifactOneof == nil {
		return false
	} else if !this.BuildArtifactOneof.Equal(that1.BuildArtifactOneof) {
		return false
	}
	if this.GitHash != that1.GitHash {
		return false
	}
	return true
}
func (this *ReportBuildCompleteRequest_DockerImage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReportBuildCompleteRequest_DockerImage)
	if !ok {
		that2, ok := that.(ReportBuildCompleteRequest_DockerImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DockerImage != that1.DockerImage {
		return false
	}
	return true
}
func (this *ReportBuildCompleteResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReportBuildCompleteResponse)
	if !ok {
		that2, ok := that.(ReportBuildCompleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Deployments) != len(that1.Deployments) {
		return false
	}
	for i := range this.Deployments {
		if !this.Deployments[i].Equal(that1.Deployments[i]) {
			return false
		}
	}
	return true
}
func (this *DeploymentsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeploymentsRequest)
	if !ok {
		that2, ok := that.(DeploymentsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableID != that1.DeployableID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *DeploymentsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeploymentsResponse)
	if !ok {
		that2, ok := that.(DeploymentsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Deployments) != len(that1.Deployments) {
		return false
	}
	for i := range this.Deployments {
		if !this.Deployments[i].Equal(that1.Deployments[i]) {
			return false
		}
	}
	return true
}
func (this *PromotionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PromotionRequest)
	if !ok {
		that2, ok := that.(PromotionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeploymentID != that1.DeploymentID {
		return false
	}
	return true
}
func (this *PromotionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PromotionResponse)
	if !ok {
		that2, ok := that.(PromotionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Deployments) != len(that1.Deployments) {
		return false
	}
	for i := range this.Deployments {
		if !this.Deployments[i].Equal(that1.Deployments[i]) {
			return false
		}
	}
	return true
}
func (this *PromoteGroupRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PromoteGroupRequest)
	if !ok {
		that2, ok := that.(PromoteGroupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeployableGroupID != that1.DeployableGroupID {
		return false
	}
	if this.BuildNumber != that1.BuildNumber {
		return false
	}
	if this.EnvironmentID != that1.EnvironmentID {
		return false
	}
	return true
}
func (this *PromoteGroupResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PromoteGroupResponse)
	if !ok {
		that2, ok := that.(PromoteGroupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Deployments) != len(that1.Deployments) {
		return false
	}
	for i := range this.Deployments {
		if !this.Deployments[i].Equal(that1.Deployments[i]) {
			return false
		}
	}
	return true
}
func (this *DeployableGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&deploy.DeployableGroup{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "ModifiedTimestamp: "+fmt.Sprintf("%#v", this.ModifiedTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Environment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&deploy.Environment{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "IsProd: "+fmt.Sprintf("%#v", this.IsProd)+",\n")
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "ModifiedTimestamp: "+fmt.Sprintf("%#v", this.ModifiedTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvironmentConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&deploy.EnvironmentConfig{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Deployable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&deploy.Deployable{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "ModifiedTimestamp: "+fmt.Sprintf("%#v", this.ModifiedTimestamp)+",\n")
	s = append(s, "GitURL: "+fmt.Sprintf("%#v", this.GitURL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&deploy.DeployableConfig{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Deployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&deploy.Deployment{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "DeploymentNumber: "+fmt.Sprintf("%#v", this.DeploymentNumber)+",\n")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "DeployableConfigID: "+fmt.Sprintf("%#v", this.DeployableConfigID)+",\n")
	s = append(s, "DeployableVectorID: "+fmt.Sprintf("%#v", this.DeployableVectorID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.DeploymentOneof != nil {
		s = append(s, "DeploymentOneof: "+fmt.Sprintf("%#v", this.DeploymentOneof)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "BuildNumber: "+fmt.Sprintf("%#v", this.BuildNumber)+",\n")
	s = append(s, "StartedTimestamp: "+fmt.Sprintf("%#v", this.StartedTimestamp)+",\n")
	s = append(s, "CompletedTimestamp: "+fmt.Sprintf("%#v", this.CompletedTimestamp)+",\n")
	s = append(s, "GitHash: "+fmt.Sprintf("%#v", this.GitHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Deployment_EcsDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&deploy.Deployment_EcsDeployment{` +
		`EcsDeployment:` + fmt.Sprintf("%#v", this.EcsDeployment) + `}`}, ", ")
	return s
}
func (this *ECSDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&deploy.ECSDeployment{")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "ClusterDeployableConfigName: "+fmt.Sprintf("%#v", this.ClusterDeployableConfigName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableVector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&deploy.DeployableVector{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "SourceType: "+fmt.Sprintf("%#v", this.SourceType)+",\n")
	if this.DeploymentSourceOneof != nil {
		s = append(s, "DeploymentSourceOneof: "+fmt.Sprintf("%#v", this.DeploymentSourceOneof)+",\n")
	}
	s = append(s, "TargetEnvironmentID: "+fmt.Sprintf("%#v", this.TargetEnvironmentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableVector_EnvironmentID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&deploy.DeployableVector_EnvironmentID{` +
		`EnvironmentID:` + fmt.Sprintf("%#v", this.EnvironmentID) + `}`}, ", ")
	return s
}
func (this *CreateDeployableGroupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&deploy.CreateDeployableGroupRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableGroupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.CreateDeployableGroupResponse{")
	if this.DeployableGroup != nil {
		s = append(s, "DeployableGroup: "+fmt.Sprintf("%#v", this.DeployableGroup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEnvironmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&deploy.CreateEnvironmentRequest{")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "IsProd: "+fmt.Sprintf("%#v", this.IsProd)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEnvironmentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.CreateEnvironmentResponse{")
	if this.Environment != nil {
		s = append(s, "Environment: "+fmt.Sprintf("%#v", this.Environment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&deploy.CreateDeployableRequest{")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "GitURL: "+fmt.Sprintf("%#v", this.GitURL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.CreateDeployableResponse{")
	if this.Deployable != nil {
		s = append(s, "Deployable: "+fmt.Sprintf("%#v", this.Deployable)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEnvironmentConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&deploy.CreateEnvironmentConfigRequest{")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "SourceConfigID: "+fmt.Sprintf("%#v", this.SourceConfigID)+",\n")
	s = append(s, "OmitFromSource: "+fmt.Sprintf("%#v", this.OmitFromSource)+",\n")
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEnvironmentConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.CreateEnvironmentConfigResponse{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&deploy.CreateDeployableConfigRequest{")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "SourceConfigID: "+fmt.Sprintf("%#v", this.SourceConfigID)+",\n")
	s = append(s, "OmitFromSource: "+fmt.Sprintf("%#v", this.OmitFromSource)+",\n")
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%#v: %#v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	if this.Values != nil {
		s = append(s, "Values: "+mapStringForValues+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.CreateDeployableConfigResponse{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableVectorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&deploy.CreateDeployableVectorRequest{")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "SourceType: "+fmt.Sprintf("%#v", this.SourceType)+",\n")
	if this.DeploymentSourceOneof != nil {
		s = append(s, "DeploymentSourceOneof: "+fmt.Sprintf("%#v", this.DeploymentSourceOneof)+",\n")
	}
	s = append(s, "TargetEnvironmentID: "+fmt.Sprintf("%#v", this.TargetEnvironmentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDeployableVectorRequest_SourceEnvironmentID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&deploy.CreateDeployableVectorRequest_SourceEnvironmentID{` +
		`SourceEnvironmentID:` + fmt.Sprintf("%#v", this.SourceEnvironmentID) + `}`}, ", ")
	return s
}
func (this *CreateDeployableVectorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.CreateDeployableVectorResponse{")
	if this.Vector != nil {
		s = append(s, "Vector: "+fmt.Sprintf("%#v", this.Vector)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableGroupsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&deploy.DeployableGroupsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableGroupsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeployableGroupsResponse{")
	if this.DeployableGroups != nil {
		s = append(s, "DeployableGroups: "+fmt.Sprintf("%#v", this.DeployableGroups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvironmentsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.EnvironmentsRequest{")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvironmentsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.EnvironmentsResponse{")
	if this.Environments != nil {
		s = append(s, "Environments: "+fmt.Sprintf("%#v", this.Environments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvironmentConfigsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&deploy.EnvironmentConfigsRequest{")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnvironmentConfigsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.EnvironmentConfigsResponse{")
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployablesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeployablesRequest{")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployablesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeployablesResponse{")
	if this.Deployables != nil {
		s = append(s, "Deployables: "+fmt.Sprintf("%#v", this.Deployables)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableConfigsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&deploy.DeployableConfigsRequest{")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableConfigsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeployableConfigsResponse{")
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableVectorsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeployableVectorsRequest{")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeployableVectorsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeployableVectorsResponse{")
	if this.Vectors != nil {
		s = append(s, "Vectors: "+fmt.Sprintf("%#v", this.Vectors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportBuildCompleteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&deploy.ReportBuildCompleteRequest{")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "BuildNumber: "+fmt.Sprintf("%#v", this.BuildNumber)+",\n")
	s = append(s, "ArtifactType: "+fmt.Sprintf("%#v", this.ArtifactType)+",\n")
	if this.BuildArtifactOneof != nil {
		s = append(s, "BuildArtifactOneof: "+fmt.Sprintf("%#v", this.BuildArtifactOneof)+",\n")
	}
	s = append(s, "GitHash: "+fmt.Sprintf("%#v", this.GitHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportBuildCompleteRequest_DockerImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&deploy.ReportBuildCompleteRequest_DockerImage{` +
		`DockerImage:` + fmt.Sprintf("%#v", this.DockerImage) + `}`}, ", ")
	return s
}
func (this *ReportBuildCompleteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.ReportBuildCompleteResponse{")
	if this.Deployments != nil {
		s = append(s, "Deployments: "+fmt.Sprintf("%#v", this.Deployments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&deploy.DeploymentsRequest{")
	s = append(s, "DeployableID: "+fmt.Sprintf("%#v", this.DeployableID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.DeploymentsResponse{")
	if this.Deployments != nil {
		s = append(s, "Deployments: "+fmt.Sprintf("%#v", this.Deployments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromotionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.PromotionRequest{")
	s = append(s, "DeploymentID: "+fmt.Sprintf("%#v", this.DeploymentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromotionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.PromotionResponse{")
	if this.Deployments != nil {
		s = append(s, "Deployments: "+fmt.Sprintf("%#v", this.Deployments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteGroupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&deploy.PromoteGroupRequest{")
	s = append(s, "DeployableGroupID: "+fmt.Sprintf("%#v", this.DeployableGroupID)+",\n")
	s = append(s, "BuildNumber: "+fmt.Sprintf("%#v", this.BuildNumber)+",\n")
	s = append(s, "EnvironmentID: "+fmt.Sprintf("%#v", this.EnvironmentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromoteGroupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&deploy.PromoteGroupResponse{")
	if this.Deployments != nil {
		s = append(s, "Deployments: "+fmt.Sprintf("%#v", this.Deployments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Deploy service

type DeployClient interface {
	CreateDeployable(ctx context.Context, in *CreateDeployableRequest, opts ...grpc.CallOption) (*CreateDeployableResponse, error)
	CreateDeployableConfig(ctx context.Context, in *CreateDeployableConfigRequest, opts ...grpc.CallOption) (*CreateDeployableConfigResponse, error)
	CreateDeployableGroup(ctx context.Context, in *CreateDeployableGroupRequest, opts ...grpc.CallOption) (*CreateDeployableGroupResponse, error)
	CreateDeployableVector(ctx context.Context, in *CreateDeployableVectorRequest, opts ...grpc.CallOption) (*CreateDeployableVectorResponse, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	CreateEnvironmentConfig(ctx context.Context, in *CreateEnvironmentConfigRequest, opts ...grpc.CallOption) (*CreateEnvironmentConfigResponse, error)
	Deployables(ctx context.Context, in *DeployablesRequest, opts ...grpc.CallOption) (*DeployablesResponse, error)
	DeployableConfigs(ctx context.Context, in *DeployableConfigsRequest, opts ...grpc.CallOption) (*DeployableConfigsResponse, error)
	DeployableGroups(ctx context.Context, in *DeployableGroupsRequest, opts ...grpc.CallOption) (*DeployableGroupsResponse, error)
	DeployableVectors(ctx context.Context, in *DeployableVectorsRequest, opts ...grpc.CallOption) (*DeployableVectorsResponse, error)
	Deployments(ctx context.Context, in *DeploymentsRequest, opts ...grpc.CallOption) (*DeploymentsResponse, error)
	Environments(ctx context.Context, in *EnvironmentsRequest, opts ...grpc.CallOption) (*EnvironmentsResponse, error)
	EnvironmentConfigs(ctx context.Context, in *EnvironmentConfigsRequest, opts ...grpc.CallOption) (*EnvironmentConfigsResponse, error)
	Promote(ctx context.Context, in *PromotionRequest, opts ...grpc.CallOption) (*PromotionResponse, error)
	PromoteGroup(ctx context.Context, in *PromoteGroupRequest, opts ...grpc.CallOption) (*PromoteGroupResponse, error)
	ReportBuildComplete(ctx context.Context, in *ReportBuildCompleteRequest, opts ...grpc.CallOption) (*ReportBuildCompleteResponse, error)
}

type deployClient struct {
	cc *grpc.ClientConn
}

func NewDeployClient(cc *grpc.ClientConn) DeployClient {
	return &deployClient{cc}
}

func (c *deployClient) CreateDeployable(ctx context.Context, in *CreateDeployableRequest, opts ...grpc.CallOption) (*CreateDeployableResponse, error) {
	out := new(CreateDeployableResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/CreateDeployable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) CreateDeployableConfig(ctx context.Context, in *CreateDeployableConfigRequest, opts ...grpc.CallOption) (*CreateDeployableConfigResponse, error) {
	out := new(CreateDeployableConfigResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/CreateDeployableConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) CreateDeployableGroup(ctx context.Context, in *CreateDeployableGroupRequest, opts ...grpc.CallOption) (*CreateDeployableGroupResponse, error) {
	out := new(CreateDeployableGroupResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/CreateDeployableGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) CreateDeployableVector(ctx context.Context, in *CreateDeployableVectorRequest, opts ...grpc.CallOption) (*CreateDeployableVectorResponse, error) {
	out := new(CreateDeployableVectorResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/CreateDeployableVector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	out := new(CreateEnvironmentResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/CreateEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) CreateEnvironmentConfig(ctx context.Context, in *CreateEnvironmentConfigRequest, opts ...grpc.CallOption) (*CreateEnvironmentConfigResponse, error) {
	out := new(CreateEnvironmentConfigResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/CreateEnvironmentConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Deployables(ctx context.Context, in *DeployablesRequest, opts ...grpc.CallOption) (*DeployablesResponse, error) {
	out := new(DeployablesResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/Deployables", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) DeployableConfigs(ctx context.Context, in *DeployableConfigsRequest, opts ...grpc.CallOption) (*DeployableConfigsResponse, error) {
	out := new(DeployableConfigsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/DeployableConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) DeployableGroups(ctx context.Context, in *DeployableGroupsRequest, opts ...grpc.CallOption) (*DeployableGroupsResponse, error) {
	out := new(DeployableGroupsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/DeployableGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) DeployableVectors(ctx context.Context, in *DeployableVectorsRequest, opts ...grpc.CallOption) (*DeployableVectorsResponse, error) {
	out := new(DeployableVectorsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/DeployableVectors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Deployments(ctx context.Context, in *DeploymentsRequest, opts ...grpc.CallOption) (*DeploymentsResponse, error) {
	out := new(DeploymentsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/Deployments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Environments(ctx context.Context, in *EnvironmentsRequest, opts ...grpc.CallOption) (*EnvironmentsResponse, error) {
	out := new(EnvironmentsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/Environments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) EnvironmentConfigs(ctx context.Context, in *EnvironmentConfigsRequest, opts ...grpc.CallOption) (*EnvironmentConfigsResponse, error) {
	out := new(EnvironmentConfigsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/EnvironmentConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Promote(ctx context.Context, in *PromotionRequest, opts ...grpc.CallOption) (*PromotionResponse, error) {
	out := new(PromotionResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/Promote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) PromoteGroup(ctx context.Context, in *PromoteGroupRequest, opts ...grpc.CallOption) (*PromoteGroupResponse, error) {
	out := new(PromoteGroupResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/PromoteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) ReportBuildComplete(ctx context.Context, in *ReportBuildCompleteRequest, opts ...grpc.CallOption) (*ReportBuildCompleteResponse, error) {
	out := new(ReportBuildCompleteResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/ReportBuildComplete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deploy service

type DeployServer interface {
	CreateDeployable(context.Context, *CreateDeployableRequest) (*CreateDeployableResponse, error)
	CreateDeployableConfig(context.Context, *CreateDeployableConfigRequest) (*CreateDeployableConfigResponse, error)
	CreateDeployableGroup(context.Context, *CreateDeployableGroupRequest) (*CreateDeployableGroupResponse, error)
	CreateDeployableVector(context.Context, *CreateDeployableVectorRequest) (*CreateDeployableVectorResponse, error)
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	CreateEnvironmentConfig(context.Context, *CreateEnvironmentConfigRequest) (*CreateEnvironmentConfigResponse, error)
	Deployables(context.Context, *DeployablesRequest) (*DeployablesResponse, error)
	DeployableConfigs(context.Context, *DeployableConfigsRequest) (*DeployableConfigsResponse, error)
	DeployableGroups(context.Context, *DeployableGroupsRequest) (*DeployableGroupsResponse, error)
	DeployableVectors(context.Context, *DeployableVectorsRequest) (*DeployableVectorsResponse, error)
	Deployments(context.Context, *DeploymentsRequest) (*DeploymentsResponse, error)
	Environments(context.Context, *EnvironmentsRequest) (*EnvironmentsResponse, error)
	EnvironmentConfigs(context.Context, *EnvironmentConfigsRequest) (*EnvironmentConfigsResponse, error)
	Promote(context.Context, *PromotionRequest) (*PromotionResponse, error)
	PromoteGroup(context.Context, *PromoteGroupRequest) (*PromoteGroupResponse, error)
	ReportBuildComplete(context.Context, *ReportBuildCompleteRequest) (*ReportBuildCompleteResponse, error)
}

func RegisterDeployServer(s *grpc.Server, srv DeployServer) {
	s.RegisterService(&_Deploy_serviceDesc, srv)
}

func _Deploy_CreateDeployable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).CreateDeployable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/CreateDeployable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).CreateDeployable(ctx, req.(*CreateDeployableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_CreateDeployableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployableConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).CreateDeployableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/CreateDeployableConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).CreateDeployableConfig(ctx, req.(*CreateDeployableConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_CreateDeployableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).CreateDeployableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/CreateDeployableGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).CreateDeployableGroup(ctx, req.(*CreateDeployableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_CreateDeployableVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeployableVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).CreateDeployableVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/CreateDeployableVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).CreateDeployableVector(ctx, req.(*CreateDeployableVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_CreateEnvironmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).CreateEnvironmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/CreateEnvironmentConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).CreateEnvironmentConfig(ctx, req.(*CreateEnvironmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Deployables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Deployables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/Deployables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Deployables(ctx, req.(*DeployablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_DeployableConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployableConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).DeployableConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/DeployableConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).DeployableConfigs(ctx, req.(*DeployableConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_DeployableGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployableGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).DeployableGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/DeployableGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).DeployableGroups(ctx, req.(*DeployableGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_DeployableVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployableVectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).DeployableVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/DeployableVectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).DeployableVectors(ctx, req.(*DeployableVectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Deployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Deployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/Deployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Deployments(ctx, req.(*DeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Environments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Environments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/Environments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Environments(ctx, req.(*EnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_EnvironmentConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).EnvironmentConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/EnvironmentConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).EnvironmentConfigs(ctx, req.(*EnvironmentConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Promote(ctx, req.(*PromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_PromoteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).PromoteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/PromoteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).PromoteGroup(ctx, req.(*PromoteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_ReportBuildComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBuildCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).ReportBuildComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/ReportBuildComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).ReportBuildComplete(ctx, req.(*ReportBuildCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deploy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deploy.Deploy",
	HandlerType: (*DeployServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployable",
			Handler:    _Deploy_CreateDeployable_Handler,
		},
		{
			MethodName: "CreateDeployableConfig",
			Handler:    _Deploy_CreateDeployableConfig_Handler,
		},
		{
			MethodName: "CreateDeployableGroup",
			Handler:    _Deploy_CreateDeployableGroup_Handler,
		},
		{
			MethodName: "CreateDeployableVector",
			Handler:    _Deploy_CreateDeployableVector_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _Deploy_CreateEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironmentConfig",
			Handler:    _Deploy_CreateEnvironmentConfig_Handler,
		},
		{
			MethodName: "Deployables",
			Handler:    _Deploy_Deployables_Handler,
		},
		{
			MethodName: "DeployableConfigs",
			Handler:    _Deploy_DeployableConfigs_Handler,
		},
		{
			MethodName: "DeployableGroups",
			Handler:    _Deploy_DeployableGroups_Handler,
		},
		{
			MethodName: "DeployableVectors",
			Handler:    _Deploy_DeployableVectors_Handler,
		},
		{
			MethodName: "Deployments",
			Handler:    _Deploy_Deployments_Handler,
		},
		{
			MethodName: "Environments",
			Handler:    _Deploy_Environments_Handler,
		},
		{
			MethodName: "EnvironmentConfigs",
			Handler:    _Deploy_EnvironmentConfigs_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _Deploy_Promote_Handler,
		},
		{
			MethodName: "PromoteGroup",
			Handler:    _Deploy_PromoteGroup_Handler,
		},
		{
			MethodName: "ReportBuildComplete",
			Handler:    _Deploy_ReportBuildComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *DeployableGroup) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableGroup) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if m.ModifiedTimestamp != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.ModifiedTimestamp))
	}
	return i, nil
}

func (m *Environment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Environment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Description) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.IsProd {
		data[i] = 0x28
		i++
		if m.IsProd {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if m.ModifiedTimestamp != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.ModifiedTimestamp))
	}
	return i, nil
}

func (m *EnvironmentConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnvironmentConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.EnvironmentID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.Status) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.Values) > 0 {
		for k, _ := range m.Values {
			data[i] = 0x22
			i++
			v := m.Values[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *Deployable) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Deployable) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Description) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if m.ModifiedTimestamp != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintSvc(data, i, uint64(m.ModifiedTimestamp))
	}
	if len(m.GitURL) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GitURL)))
		i += copy(data[i:], m.GitURL)
	}
	return i, nil
}

func (m *DeployableConfig) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableConfig) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.EnvironmentID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.DeployableID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if len(m.Status) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	if len(m.Values) > 0 {
		for k, _ := range m.Values {
			data[i] = 0x2a
			i++
			v := m.Values[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *Deployment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Deployment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if m.DeploymentNumber != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.DeploymentNumber))
	}
	if len(m.EnvironmentID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.DeployableID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if len(m.DeployableConfigID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableConfigID)))
		i += copy(data[i:], m.DeployableConfigID)
	}
	if len(m.DeployableVectorID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableVectorID)))
		i += copy(data[i:], m.DeployableVectorID)
	}
	if m.Type != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.DeploymentOneof != nil {
		nn1, err := m.DeploymentOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.Status != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.Status))
	}
	if len(m.BuildNumber) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.BuildNumber)))
		i += copy(data[i:], m.BuildNumber)
	}
	if m.StartedTimestamp != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintSvc(data, i, uint64(m.StartedTimestamp))
	}
	if m.CompletedTimestamp != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintSvc(data, i, uint64(m.CompletedTimestamp))
	}
	if len(m.GitHash) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GitHash)))
		i += copy(data[i:], m.GitHash)
	}
	return i, nil
}

func (m *Deployment_EcsDeployment) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.EcsDeployment != nil {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(m.EcsDeployment.Size()))
		n2, err := m.EcsDeployment.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ECSDeployment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ECSDeployment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Image)))
		i += copy(data[i:], m.Image)
	}
	if len(m.ClusterDeployableConfigName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ClusterDeployableConfigName)))
		i += copy(data[i:], m.ClusterDeployableConfigName)
	}
	return i, nil
}

func (m *DeployableVector) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableVector) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.DeployableID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if m.SourceType != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.SourceType))
	}
	if m.DeploymentSourceOneof != nil {
		nn3, err := m.DeploymentSourceOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if len(m.TargetEnvironmentID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.TargetEnvironmentID)))
		i += copy(data[i:], m.TargetEnvironmentID)
	}
	return i, nil
}

func (m *DeployableVector_EnvironmentID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x22
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
	i += copy(data[i:], m.EnvironmentID)
	return i, nil
}
func (m *CreateDeployableGroupRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableGroupRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Description) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	return i, nil
}

func (m *CreateDeployableGroupResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableGroupResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeployableGroup != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.DeployableGroup.Size()))
		n4, err := m.DeployableGroup.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CreateEnvironmentRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEnvironmentRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if m.IsProd {
		data[i] = 0x20
		i++
		if m.IsProd {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateEnvironmentResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEnvironmentResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Environment != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Environment.Size()))
		n5, err := m.Environment.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CreateDeployableRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Description) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if len(m.GitURL) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GitURL)))
		i += copy(data[i:], m.GitURL)
	}
	return i, nil
}

func (m *CreateDeployableResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Deployable != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Deployable.Size()))
		n6, err := m.Deployable.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CreateEnvironmentConfigRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEnvironmentConfigRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EnvironmentID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.SourceConfigID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SourceConfigID)))
		i += copy(data[i:], m.SourceConfigID)
	}
	if len(m.Values) > 0 {
		for k, _ := range m.Values {
			data[i] = 0x1a
			i++
			v := m.Values[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.OmitFromSource) > 0 {
		for _, s := range m.OmitFromSource {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CreateEnvironmentConfigResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEnvironmentConfigResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Config.Size()))
		n7, err := m.Config.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CreateDeployableConfigRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableConfigRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if len(m.EnvironmentID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.SourceConfigID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SourceConfigID)))
		i += copy(data[i:], m.SourceConfigID)
	}
	if len(m.OmitFromSource) > 0 {
		for _, s := range m.OmitFromSource {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Values) > 0 {
		for k, _ := range m.Values {
			data[i] = 0x2a
			i++
			v := m.Values[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *CreateDeployableConfigResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableConfigResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Config.Size()))
		n8, err := m.Config.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *CreateDeployableVectorRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableVectorRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if m.SourceType != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.SourceType))
	}
	if m.DeploymentSourceOneof != nil {
		nn9, err := m.DeploymentSourceOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if len(m.TargetEnvironmentID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.TargetEnvironmentID)))
		i += copy(data[i:], m.TargetEnvironmentID)
	}
	return i, nil
}

func (m *CreateDeployableVectorRequest_SourceEnvironmentID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x22
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.SourceEnvironmentID)))
	i += copy(data[i:], m.SourceEnvironmentID)
	return i, nil
}
func (m *CreateDeployableVectorResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateDeployableVectorResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vector != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Vector.Size()))
		n10, err := m.Vector.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *DeployableGroupsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableGroupsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeployableGroupsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableGroupsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableGroups) > 0 {
		for _, msg := range m.DeployableGroups {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EnvironmentsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnvironmentsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	return i, nil
}

func (m *EnvironmentsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnvironmentsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Environments) > 0 {
		for _, msg := range m.Environments {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EnvironmentConfigsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnvironmentConfigsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EnvironmentID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.Status) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	return i, nil
}

func (m *EnvironmentConfigsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EnvironmentConfigsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeployablesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployablesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	return i, nil
}

func (m *DeployablesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployablesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployables) > 0 {
		for _, msg := range m.Deployables {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeployableConfigsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableConfigsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if len(m.EnvironmentID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	if len(m.Status) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Status)))
		i += copy(data[i:], m.Status)
	}
	return i, nil
}

func (m *DeployableConfigsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableConfigsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, msg := range m.Configs {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeployableVectorsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableVectorsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	return i, nil
}

func (m *DeployableVectorsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeployableVectorsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Vectors) > 0 {
		for _, msg := range m.Vectors {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReportBuildCompleteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReportBuildCompleteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if len(m.BuildNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.BuildNumber)))
		i += copy(data[i:], m.BuildNumber)
	}
	if m.ArtifactType != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.ArtifactType))
	}
	if m.BuildArtifactOneof != nil {
		nn11, err := m.BuildArtifactOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	if len(m.GitHash) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GitHash)))
		i += copy(data[i:], m.GitHash)
	}
	return i, nil
}

func (m *ReportBuildCompleteRequest_DockerImage) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x22
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.DockerImage)))
	i += copy(data[i:], m.DockerImage)
	return i, nil
}
func (m *ReportBuildCompleteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReportBuildCompleteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, msg := range m.Deployments {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeploymentsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeploymentsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableID)))
		i += copy(data[i:], m.DeployableID)
	}
	if m.Status != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Status))
	}
	return i, nil
}

func (m *DeploymentsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeploymentsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, msg := range m.Deployments {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PromotionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PromotionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeploymentID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeploymentID)))
		i += copy(data[i:], m.DeploymentID)
	}
	return i, nil
}

func (m *PromotionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PromotionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, msg := range m.Deployments {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PromoteGroupRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PromoteGroupRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeployableGroupID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeployableGroupID)))
		i += copy(data[i:], m.DeployableGroupID)
	}
	if len(m.BuildNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.BuildNumber)))
		i += copy(data[i:], m.BuildNumber)
	}
	if len(m.EnvironmentID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EnvironmentID)))
		i += copy(data[i:], m.EnvironmentID)
	}
	return i, nil
}

func (m *PromoteGroupResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PromoteGroupResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, msg := range m.Deployments {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DeployableGroup) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	if m.ModifiedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.ModifiedTimestamp))
	}
	return n
}

func (m *Environment) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.IsProd {
		n += 2
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	if m.ModifiedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.ModifiedTimestamp))
	}
	return n
}

func (m *EnvironmentConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Deployable) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	if m.ModifiedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.ModifiedTimestamp))
	}
	l = len(m.GitURL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployableConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Deployment) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DeploymentNumber != 0 {
		n += 1 + sovSvc(uint64(m.DeploymentNumber))
	}
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableConfigID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableVectorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.DeploymentOneof != nil {
		n += m.DeploymentOneof.Size()
	}
	if m.Status != 0 {
		n += 1 + sovSvc(uint64(m.Status))
	}
	l = len(m.BuildNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.StartedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.StartedTimestamp))
	}
	if m.CompletedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CompletedTimestamp))
	}
	l = len(m.GitHash)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Deployment_EcsDeployment) Size() (n int) {
	var l int
	_ = l
	if m.EcsDeployment != nil {
		l = m.EcsDeployment.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ECSDeployment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ClusterDeployableConfigName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployableVector) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.SourceType != 0 {
		n += 1 + sovSvc(uint64(m.SourceType))
	}
	if m.DeploymentSourceOneof != nil {
		n += m.DeploymentSourceOneof.Size()
	}
	l = len(m.TargetEnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployableVector_EnvironmentID) Size() (n int) {
	var l int
	_ = l
	l = len(m.EnvironmentID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *CreateDeployableGroupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateDeployableGroupResponse) Size() (n int) {
	var l int
	_ = l
	if m.DeployableGroup != nil {
		l = m.DeployableGroup.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEnvironmentRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.IsProd {
		n += 2
	}
	return n
}

func (m *CreateEnvironmentResponse) Size() (n int) {
	var l int
	_ = l
	if m.Environment != nil {
		l = m.Environment.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateDeployableRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.GitURL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateDeployableResponse) Size() (n int) {
	var l int
	_ = l
	if m.Deployable != nil {
		l = m.Deployable.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEnvironmentConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SourceConfigID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	if len(m.OmitFromSource) > 0 {
		for _, s := range m.OmitFromSource {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateEnvironmentConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateDeployableConfigRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SourceConfigID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.OmitFromSource) > 0 {
		for _, s := range m.OmitFromSource {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CreateDeployableConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateDeployableVectorRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.SourceType != 0 {
		n += 1 + sovSvc(uint64(m.SourceType))
	}
	if m.DeploymentSourceOneof != nil {
		n += m.DeploymentSourceOneof.Size()
	}
	l = len(m.TargetEnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateDeployableVectorRequest_SourceEnvironmentID) Size() (n int) {
	var l int
	_ = l
	l = len(m.SourceEnvironmentID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *CreateDeployableVectorResponse) Size() (n int) {
	var l int
	_ = l
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployableGroupsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeployableGroupsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.DeployableGroups) > 0 {
		for _, e := range m.DeployableGroups {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *EnvironmentsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *EnvironmentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Environments) > 0 {
		for _, e := range m.Environments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *EnvironmentConfigsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *EnvironmentConfigsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeployablesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployablesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deployables) > 0 {
		for _, e := range m.Deployables {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeployableConfigsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployableConfigsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeployableVectorsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeployableVectorsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Vectors) > 0 {
		for _, e := range m.Vectors {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ReportBuildCompleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.BuildNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ArtifactType != 0 {
		n += 1 + sovSvc(uint64(m.ArtifactType))
	}
	if m.BuildArtifactOneof != nil {
		n += m.BuildArtifactOneof.Size()
	}
	l = len(m.GitHash)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ReportBuildCompleteRequest_DockerImage) Size() (n int) {
	var l int
	_ = l
	l = len(m.DockerImage)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ReportBuildCompleteResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeploymentsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSvc(uint64(m.Status))
	}
	return n
}

func (m *DeploymentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *PromotionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeploymentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PromotionResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *PromoteGroupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeployableGroupID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.BuildNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EnvironmentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PromoteGroupResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeployableGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableGroup{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`ModifiedTimestamp:` + fmt.Sprintf("%v", this.ModifiedTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Environment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Environment{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`IsProd:` + fmt.Sprintf("%v", this.IsProd) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`ModifiedTimestamp:` + fmt.Sprintf("%v", this.ModifiedTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvironmentConfig) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&EnvironmentConfig{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Values:` + mapStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *Deployable) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Deployable{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`ModifiedTimestamp:` + fmt.Sprintf("%v", this.ModifiedTimestamp) + `,`,
		`GitURL:` + fmt.Sprintf("%v", this.GitURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableConfig) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&DeployableConfig{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Values:` + mapStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *Deployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Deployment{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DeploymentNumber:` + fmt.Sprintf("%v", this.DeploymentNumber) + `,`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`DeployableConfigID:` + fmt.Sprintf("%v", this.DeployableConfigID) + `,`,
		`DeployableVectorID:` + fmt.Sprintf("%v", this.DeployableVectorID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DeploymentOneof:` + fmt.Sprintf("%v", this.DeploymentOneof) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`BuildNumber:` + fmt.Sprintf("%v", this.BuildNumber) + `,`,
		`StartedTimestamp:` + fmt.Sprintf("%v", this.StartedTimestamp) + `,`,
		`CompletedTimestamp:` + fmt.Sprintf("%v", this.CompletedTimestamp) + `,`,
		`GitHash:` + fmt.Sprintf("%v", this.GitHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Deployment_EcsDeployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Deployment_EcsDeployment{`,
		`EcsDeployment:` + strings.Replace(fmt.Sprintf("%v", this.EcsDeployment), "ECSDeployment", "ECSDeployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ECSDeployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ECSDeployment{`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`ClusterDeployableConfigName:` + fmt.Sprintf("%v", this.ClusterDeployableConfigName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableVector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableVector{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`SourceType:` + fmt.Sprintf("%v", this.SourceType) + `,`,
		`DeploymentSourceOneof:` + fmt.Sprintf("%v", this.DeploymentSourceOneof) + `,`,
		`TargetEnvironmentID:` + fmt.Sprintf("%v", this.TargetEnvironmentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableVector_EnvironmentID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableVector_EnvironmentID{`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableGroupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableGroupRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableGroupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableGroupResponse{`,
		`DeployableGroup:` + strings.Replace(fmt.Sprintf("%v", this.DeployableGroup), "DeployableGroup", "DeployableGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEnvironmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEnvironmentRequest{`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`IsProd:` + fmt.Sprintf("%v", this.IsProd) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEnvironmentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEnvironmentResponse{`,
		`Environment:` + strings.Replace(fmt.Sprintf("%v", this.Environment), "Environment", "Environment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableRequest{`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`GitURL:` + fmt.Sprintf("%v", this.GitURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableResponse{`,
		`Deployable:` + strings.Replace(fmt.Sprintf("%v", this.Deployable), "Deployable", "Deployable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEnvironmentConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&CreateEnvironmentConfigRequest{`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`SourceConfigID:` + fmt.Sprintf("%v", this.SourceConfigID) + `,`,
		`Values:` + mapStringForValues + `,`,
		`OmitFromSource:` + fmt.Sprintf("%v", this.OmitFromSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEnvironmentConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEnvironmentConfigResponse{`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "EnvironmentConfig", "EnvironmentConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k, _ := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string]string{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&CreateDeployableConfigRequest{`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`SourceConfigID:` + fmt.Sprintf("%v", this.SourceConfigID) + `,`,
		`OmitFromSource:` + fmt.Sprintf("%v", this.OmitFromSource) + `,`,
		`Values:` + mapStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableConfigResponse{`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "DeployableConfig", "DeployableConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableVectorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableVectorRequest{`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`SourceType:` + fmt.Sprintf("%v", this.SourceType) + `,`,
		`DeploymentSourceOneof:` + fmt.Sprintf("%v", this.DeploymentSourceOneof) + `,`,
		`TargetEnvironmentID:` + fmt.Sprintf("%v", this.TargetEnvironmentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableVectorRequest_SourceEnvironmentID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableVectorRequest_SourceEnvironmentID{`,
		`SourceEnvironmentID:` + fmt.Sprintf("%v", this.SourceEnvironmentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDeployableVectorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDeployableVectorResponse{`,
		`Vector:` + strings.Replace(fmt.Sprintf("%v", this.Vector), "DeployableVector", "DeployableVector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableGroupsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableGroupsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *DeployableGroupsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableGroupsResponse{`,
		`DeployableGroups:` + strings.Replace(fmt.Sprintf("%v", this.DeployableGroups), "DeployableGroup", "DeployableGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvironmentsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvironmentsRequest{`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvironmentsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvironmentsResponse{`,
		`Environments:` + strings.Replace(fmt.Sprintf("%v", this.Environments), "Environment", "Environment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvironmentConfigsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvironmentConfigsRequest{`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnvironmentConfigsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnvironmentConfigsResponse{`,
		`Configs:` + strings.Replace(fmt.Sprintf("%v", this.Configs), "EnvironmentConfig", "EnvironmentConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployablesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployablesRequest{`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployablesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployablesResponse{`,
		`Deployables:` + strings.Replace(fmt.Sprintf("%v", this.Deployables), "Deployable", "Deployable", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableConfigsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableConfigsRequest{`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableConfigsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableConfigsResponse{`,
		`Configs:` + strings.Replace(fmt.Sprintf("%v", this.Configs), "DeployableConfig", "DeployableConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableVectorsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableVectorsRequest{`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeployableVectorsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeployableVectorsResponse{`,
		`Vectors:` + strings.Replace(fmt.Sprintf("%v", this.Vectors), "DeployableVector", "DeployableVector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportBuildCompleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportBuildCompleteRequest{`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`BuildNumber:` + fmt.Sprintf("%v", this.BuildNumber) + `,`,
		`ArtifactType:` + fmt.Sprintf("%v", this.ArtifactType) + `,`,
		`BuildArtifactOneof:` + fmt.Sprintf("%v", this.BuildArtifactOneof) + `,`,
		`GitHash:` + fmt.Sprintf("%v", this.GitHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportBuildCompleteRequest_DockerImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportBuildCompleteRequest_DockerImage{`,
		`DockerImage:` + fmt.Sprintf("%v", this.DockerImage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportBuildCompleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportBuildCompleteResponse{`,
		`Deployments:` + strings.Replace(fmt.Sprintf("%v", this.Deployments), "Deployment", "Deployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentsRequest{`,
		`DeployableID:` + fmt.Sprintf("%v", this.DeployableID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentsResponse{`,
		`Deployments:` + strings.Replace(fmt.Sprintf("%v", this.Deployments), "Deployment", "Deployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromotionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromotionRequest{`,
		`DeploymentID:` + fmt.Sprintf("%v", this.DeploymentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromotionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromotionResponse{`,
		`Deployments:` + strings.Replace(fmt.Sprintf("%v", this.Deployments), "Deployment", "Deployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoteGroupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteGroupRequest{`,
		`DeployableGroupID:` + fmt.Sprintf("%v", this.DeployableGroupID) + `,`,
		`BuildNumber:` + fmt.Sprintf("%v", this.BuildNumber) + `,`,
		`EnvironmentID:` + fmt.Sprintf("%v", this.EnvironmentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromoteGroupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoteGroupResponse{`,
		`Deployments:` + strings.Replace(fmt.Sprintf("%v", this.Deployments), "Deployment", "Deployment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeployableGroup) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTimestamp", wireType)
			}
			m.ModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ModifiedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Environment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Environment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Environment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProd = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTimestamp", wireType)
			}
			m.ModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ModifiedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Values == nil {
				m.Values = make(map[string]string)
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployable) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTimestamp", wireType)
			}
			m.ModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ModifiedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitURL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableConfig) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Values == nil {
				m.Values = make(map[string]string)
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentNumber", wireType)
			}
			m.DeploymentNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DeploymentNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableConfigID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableVectorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableVectorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Deployment_DeploymentType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcsDeployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ECSDeployment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DeploymentOneof = &Deployment_EcsDeployment{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (Deployment_DeploymentStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTimestamp", wireType)
			}
			m.StartedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StartedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTimestamp", wireType)
			}
			m.CompletedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CompletedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitHash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSDeployment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECSDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECSDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterDeployableConfigName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterDeployableConfigName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableVector) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SourceType |= (DeployableVector_DeployableVectorSourceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentSourceOneof = &DeployableVector_EnvironmentID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetEnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableGroupRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableGroupResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeployableGroup == nil {
				m.DeployableGroup = &DeployableGroup{}
			}
			if err := m.DeployableGroup.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEnvironmentRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEnvironmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEnvironmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEnvironmentResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEnvironmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEnvironmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environment == nil {
				m.Environment = &Environment{}
			}
			if err := m.Environment.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitURL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deployable == nil {
				m.Deployable = &Deployable{}
			}
			if err := m.Deployable.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEnvironmentConfigRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEnvironmentConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEnvironmentConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceConfigID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Values == nil {
				m.Values = make(map[string]string)
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmitFromSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OmitFromSource = append(m.OmitFromSource, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEnvironmentConfigResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEnvironmentConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEnvironmentConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &EnvironmentConfig{}
			}
			if err := m.Config.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableConfigRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceConfigID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OmitFromSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OmitFromSource = append(m.OmitFromSource, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.Values == nil {
				m.Values = make(map[string]string)
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableConfigResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DeployableConfig{}
			}
			if err := m.Config.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableVectorRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableVectorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableVectorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SourceType |= (CreateDeployableVectorRequest_DeployableVectorSourceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceEnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentSourceOneof = &CreateDeployableVectorRequest_SourceEnvironmentID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetEnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDeployableVectorResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDeployableVectorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDeployableVectorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vector == nil {
				m.Vector = &DeployableVector{}
			}
			if err := m.Vector.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableGroupsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableGroupsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroups = append(m.DeployableGroups, &DeployableGroup{})
			if err := m.DeployableGroups[len(m.DeployableGroups)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environments = append(m.Environments, &Environment{})
			if err := m.Environments[len(m.Environments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentConfigsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvironmentConfigsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &EnvironmentConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployablesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployablesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployables = append(m.Deployables, &Deployable{})
			if err := m.Deployables[len(m.Deployables)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableConfigsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableConfigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableConfigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableConfigsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableConfigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableConfigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &DeployableConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableVectorsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableVectorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableVectorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployableVectorsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployableVectorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployableVectorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vectors = append(m.Vectors, &DeployableVector{})
			if err := m.Vectors[len(m.Vectors)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportBuildCompleteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportBuildCompleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportBuildCompleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactType", wireType)
			}
			m.ArtifactType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ArtifactType |= (ReportBuildCompleteRequest_BuildArtifactType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildArtifactOneof = &ReportBuildCompleteRequest_DockerImage{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GitHash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportBuildCompleteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportBuildCompleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportBuildCompleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (DeploymentsRequest_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteGroupRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployableGroupID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployableGroupID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoteGroupResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoteGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoteGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSvc = []byte{
	// 2101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x5a, 0xcf, 0x73, 0x1b, 0x49,
	0x15, 0xce, 0x8c, 0x64, 0x39, 0x7e, 0x92, 0x9d, 0x51, 0xcb, 0xb1, 0x65, 0x65, 0x71, 0xec, 0xc9,
	0x26, 0xa4, 0x0a, 0xd6, 0x61, 0x95, 0xdd, 0x62, 0x77, 0x59, 0xb6, 0xd6, 0x92, 0x15, 0x47, 0xc4,
	0x91, 0xbd, 0x63, 0x39, 0xb0, 0x05, 0xb5, 0x42, 0x96, 0xc6, 0x8e, 0x76, 0x2d, 0x8d, 0xd0, 0x8c,
	0x52, 0x95, 0x1b, 0x77, 0x2e, 0xdc, 0xb8, 0x43, 0x51, 0xc5, 0x85, 0x2a, 0xae, 0xc0, 0x8d, 0x13,
	0xdc, 0x96, 0x1b, 0x27, 0x8a, 0x0d, 0x17, 0x4e, 0xc0, 0x5f, 0x40, 0xf1, 0xd4, 0xdd, 0x33, 0xd3,
	0x3d, 0x33, 0xad, 0x28, 0x76, 0xd8, 0x4a, 0x71, 0x70, 0x45, 0xd3, 0xfd, 0xfa, 0xf5, 0xeb, 0xef,
	0x7d, 0xef, 0x47, 0xf7, 0x2e, 0x2c, 0xb8, 0x4f, 0x3a, 0x5b, 0xc3, 0x91, 0xe3, 0x39, 0x24, 0xd3,
	0xb5, 0x87, 0x67, 0xce, 0xd3, 0xd2, 0x1b, 0xa7, 0x3d, 0xef, 0xf1, 0xf8, 0x78, 0xab, 0xe3, 0xf4,
	0xef, 0x9c, 0x3a, 0xa7, 0xce, 0x1d, 0x3a, 0x7d, 0x3c, 0x3e, 0xa1, 0x5f, 0xf4, 0x83, 0xfe, 0x62,
	0xcb, 0xcc, 0xdf, 0x6b, 0x70, 0x65, 0x87, 0xae, 0x6c, 0x1f, 0x9f, 0xd9, 0xbb, 0x23, 0x67, 0x3c,
	0x24, 0x2b, 0xa0, 0xf7, 0xba, 0x45, 0x6d, 0x43, 0xbb, 0xbd, 0x50, 0xc9, 0x3c, 0xfb, 0xeb, 0x75,
	0xbd, 0xbe, 0x63, 0xe1, 0x08, 0x21, 0x90, 0x1e, 0xb4, 0xfb, 0x76, 0x51, 0x9f, 0xcc, 0x58, 0xf4,
	0x37, 0xd9, 0x80, 0x6c, 0xd7, 0x76, 0x3b, 0xa3, 0xde, 0xd0, 0xeb, 0x39, 0x83, 0x62, 0x8a, 0x4e,
	0x89, 0x43, 0xe4, 0x6b, 0x90, 0xef, 0x8c, 0xec, 0xb6, 0x67, 0x77, 0x5b, 0x5e, 0xaf, 0x6f, 0xbb,
	0x5e, 0xbb, 0x3f, 0x2c, 0xa6, 0x51, 0x2e, 0x6d, 0x19, 0x7c, 0xa2, 0xe9, 0x8f, 0x93, 0x37, 0x80,
	0xf4, 0x9d, 0x6e, 0xef, 0xa4, 0x27, 0x49, 0xcf, 0x51, 0xe9, 0xbc, 0x3f, 0x13, 0x88, 0x9b, 0x3f,
	0xd3, 0x21, 0x5b, 0x1b, 0x3c, 0xe9, 0x8d, 0x9c, 0x41, 0xdf, 0x1e, 0x78, 0x4a, 0xcb, 0x6b, 0x50,
	0xe8, 0x06, 0x87, 0x6c, 0x9d, 0x4e, 0x4e, 0xd9, 0x42, 0x41, 0x7a, 0x90, 0xca, 0x55, 0x14, 0xcc,
	0x47, 0x30, 0xc0, 0x75, 0xf9, 0x6e, 0x64, 0x28, 0x04, 0x20, 0xa5, 0x06, 0x20, 0x1d, 0x07, 0x60,
	0x15, 0xe6, 0x7b, 0x6e, 0x0b, 0xe1, 0xee, 0xd2, 0x83, 0x5c, 0xb6, 0x32, 0x3d, 0xf7, 0x00, 0xbf,
	0x92, 0x91, 0xc9, 0xbc, 0x10, 0x32, 0xf3, 0x2a, 0x64, 0x7e, 0xa7, 0x43, 0x5e, 0x40, 0xa6, 0xea,
	0x0c, 0x4e, 0x7a, 0xa7, 0x4a, 0x7c, 0xde, 0x81, 0x25, 0x3b, 0x14, 0x0e, 0xa1, 0xc9, 0xa3, 0xcc,
	0xa2, 0xa0, 0x06, 0xc5, 0x17, 0x05, 0x41, 0x84, 0x64, 0x05, 0x32, 0xb8, 0xa1, 0x37, 0x76, 0x39,
	0x28, 0xfc, 0x8b, 0x7c, 0x1b, 0x32, 0x4f, 0xda, 0x67, 0x63, 0xdb, 0x45, 0x44, 0x52, 0xb7, 0xb3,
	0xe5, 0x9b, 0x5b, 0x0c, 0xce, 0xad, 0x98, 0x51, 0x5b, 0x8f, 0xa8, 0x5c, 0x6d, 0xe0, 0x8d, 0x9e,
	0x5a, 0x7c, 0x51, 0xe9, 0x5d, 0xc8, 0x0a, 0xc3, 0xc4, 0x80, 0xd4, 0x67, 0xf6, 0x53, 0x66, 0xb8,
	0x35, 0xf9, 0x49, 0x96, 0x61, 0x8e, 0x8a, 0x72, 0x32, 0xb2, 0x8f, 0xf7, 0xf4, 0x77, 0x34, 0x73,
	0x1b, 0x56, 0x42, 0x67, 0xb2, 0x2d, 0x0e, 0x99, 0x4d, 0x59, 0x98, 0x3f, 0x6a, 0x3c, 0x68, 0xec,
	0x7f, 0xb7, 0x61, 0x5c, 0x22, 0x00, 0x99, 0xed, 0x6a, 0xb3, 0xfe, 0xa8, 0x66, 0x68, 0x64, 0x09,
	0x60, 0xa7, 0x76, 0x60, 0xd5, 0xaa, 0xdb, 0xcd, 0xda, 0x8e, 0xa1, 0x9b, 0x3f, 0xd7, 0x71, 0x20,
	0xd0, 0xf1, 0x65, 0xb1, 0x2a, 0xad, 0x66, 0xd5, 0xdc, 0x8c, 0x61, 0x35, 0xff, 0x42, 0xe4, 0xb9,
	0xac, 0x20, 0x0f, 0xb9, 0x01, 0xf3, 0x98, 0x45, 0x5a, 0xe3, 0xd1, 0x59, 0x71, 0x81, 0x1e, 0x06,
	0xf0, 0x30, 0x99, 0xdd, 0x9e, 0x77, 0x64, 0xed, 0x59, 0x19, 0x9c, 0x3a, 0x1a, 0x9d, 0x99, 0xff,
	0xd2, 0xc1, 0x88, 0x02, 0xfd, 0x3f, 0x20, 0xd8, 0xdb, 0xb0, 0x28, 0x80, 0x8c, 0x0b, 0x29, 0xcf,
	0x2a, 0x06, 0x2e, 0xcc, 0x85, 0xdb, 0xe3, 0xba, 0x5c, 0x28, 0x26, 0xf1, 0x32, 0x2d, 0xf1, 0xf2,
	0xfd, 0x80, 0x97, 0x73, 0x94, 0x97, 0xaf, 0xfb, 0xbc, 0x8c, 0x1e, 0xe5, 0x15, 0xa4, 0xe5, 0x1f,
	0x32, 0x3e, 0x2d, 0xa7, 0x26, 0x3b, 0x64, 0x46, 0x37, 0x90, 0x6a, 0x0d, 0xc6, 0xfd, 0x63, 0x7b,
	0x44, 0xed, 0x41, 0x66, 0x84, 0x13, 0x0d, 0x3a, 0x9e, 0xe0, 0x98, 0xd4, 0x79, 0x1d, 0x93, 0x9e,
	0xc9, 0x31, 0xf7, 0x61, 0x59, 0x58, 0xd6, 0xa1, 0x40, 0x4c, 0x56, 0x53, 0x8a, 0x57, 0x56, 0x70,
	0x35, 0x89, 0xe2, 0x84, 0x3a, 0x48, 0x37, 0x3a, 0x16, 0xd5, 0xf4, 0xc4, 0xee, 0x78, 0xce, 0x68,
	0xa2, 0x29, 0x93, 0xa4, 0xe9, 0x11, 0x9d, 0x96, 0x35, 0xf1, 0xb1, 0xc9, 0x51, 0xd2, 0xde, 0xd3,
	0xa1, 0x4d, 0xc3, 0x67, 0xa9, 0xbc, 0x29, 0x53, 0x62, 0x72, 0x5c, 0xe1, 0x67, 0x13, 0x05, 0x2d,
	0x2a, 0x4e, 0x3e, 0x40, 0xec, 0x3a, 0x6e, 0x2b, 0xc4, 0x94, 0x46, 0x54, 0xb6, 0x7c, 0x35, 0xc8,
	0x75, 0xd5, 0xc3, 0x70, 0xe1, 0xfd, 0x4b, 0x88, 0x60, 0xc7, 0x15, 0x1c, 0xf8, 0xad, 0x80, 0xa3,
	0x0b, 0x74, 0xe3, 0x1b, 0x53, 0x37, 0x66, 0x6c, 0x09, 0x88, 0xbc, 0x09, 0xb9, 0xe3, 0x71, 0xef,
	0xac, 0xeb, 0x3b, 0x18, 0x58, 0x8a, 0xa0, 0x63, 0xdc, 0xb7, 0x48, 0x04, 0x14, 0x1e, 0xc9, 0x29,
	0x22, 0xcb, 0x88, 0xc0, 0x27, 0xc2, 0x98, 0xbf, 0x03, 0x05, 0x6c, 0x19, 0x86, 0x67, 0xb6, 0x2c,
	0x9e, 0xa3, 0xe2, 0x24, 0x98, 0x0a, 0x17, 0xac, 0xc1, 0xe5, 0x49, 0x92, 0x78, 0xdc, 0x76, 0x1f,
	0x17, 0x17, 0xe9, 0xe6, 0x93, 0xa4, 0x71, 0x1f, 0x3f, 0xcd, 0x5b, 0xb0, 0x24, 0x03, 0x26, 0x73,
	0x7c, 0x1e, 0x52, 0x88, 0x8c, 0xa1, 0x99, 0x9f, 0xf8, 0x19, 0x24, 0x3c, 0x1f, 0x66, 0xc3, 0x25,
	0x2e, 0xd9, 0x3a, 0x6c, 0x6e, 0x37, 0x8f, 0x0e, 0x71, 0x01, 0xae, 0x3e, 0xa8, 0x35, 0x76, 0xea,
	0x8d, 0x5d, 0x8c, 0x8a, 0x2b, 0x90, 0xad, 0x37, 0x5a, 0x07, 0xd6, 0xfe, 0xae, 0x55, 0x3b, 0x3c,
	0x34, 0x74, 0x92, 0x83, 0xcb, 0xd5, 0xfd, 0x87, 0x07, 0x7b, 0xb5, 0x66, 0xcd, 0x48, 0x4d, 0x02,
	0xe8, 0xde, 0x76, 0x7d, 0x0f, 0x03, 0x26, 0x5d, 0x21, 0x20, 0x10, 0xbe, 0xe5, 0x0c, 0x6c, 0xe7,
	0xc4, 0xfc, 0x14, 0x16, 0x25, 0xb7, 0x4c, 0x42, 0xb6, 0xd7, 0x6f, 0x9f, 0xda, 0x3c, 0x8c, 0xd9,
	0x07, 0xa9, 0xc2, 0x7a, 0xe7, 0x6c, 0xec, 0x7a, 0xf6, 0xa8, 0x15, 0xa7, 0xab, 0xd0, 0x05, 0x5d,
	0xe3, 0x52, 0x51, 0xce, 0x36, 0x50, 0xc4, 0xfc, 0x65, 0x4a, 0x4c, 0x91, 0x8c, 0x6e, 0xca, 0xb0,
	0x8d, 0xc5, 0x93, 0x3e, 0x53, 0x3c, 0x35, 0x21, 0xeb, 0x3a, 0xe3, 0x51, 0xc7, 0x6e, 0x51, 0x0a,
	0xa7, 0x28, 0x93, 0xee, 0xc6, 0xb3, 0x1a, 0xdb, 0x3d, 0x36, 0x70, 0x48, 0xd7, 0x52, 0x52, 0x83,
	0x1b, 0xfc, 0x26, 0xef, 0xc5, 0xd2, 0x42, 0x5a, 0x91, 0x16, 0x28, 0xad, 0xa5, 0xc4, 0xf0, 0x00,
	0xae, 0x22, 0xb9, 0x4e, 0x6d, 0xaf, 0x15, 0x51, 0xc1, 0x42, 0x7c, 0x15, 0x55, 0x14, 0x9a, 0x54,
	0x40, 0xce, 0x2f, 0x05, 0x2f, 0x36, 0xd8, 0x35, 0xef, 0x43, 0x49, 0x6d, 0xb2, 0x4c, 0xab, 0x05,
	0x98, 0xab, 0x1c, 0xd5, 0xf7, 0x76, 0x90, 0x23, 0x48, 0xa2, 0x5a, 0xe3, 0x51, 0xdd, 0xda, 0x6f,
	0x3c, 0xac, 0x35, 0x9a, 0xad, 0x3a, 0x66, 0xcf, 0xca, 0x1a, 0xac, 0x0a, 0x64, 0xe0, 0x98, 0x31,
	0x4e, 0x34, 0xe1, 0xb5, 0x2a, 0x2d, 0x99, 0x91, 0x7a, 0x6d, 0xd9, 0x3f, 0xc2, 0x5c, 0xef, 0x05,
	0x15, 0x5a, 0x53, 0x57, 0x68, 0x3d, 0x56, 0xa1, 0xcd, 0x0e, 0x7c, 0x45, 0xa1, 0xd5, 0x1d, 0x3a,
	0x03, 0xd7, 0x26, 0x15, 0x9f, 0x9e, 0x61, 0xff, 0x40, 0xb7, 0xc8, 0x96, 0x57, 0xe3, 0xfe, 0x63,
	0x4b, 0xaf, 0x44, 0xda, 0x07, 0xf3, 0x37, 0x1a, 0x14, 0xd9, 0x2e, 0x02, 0x6e, 0xbe, 0xdd, 0x8a,
	0x06, 0x45, 0x3b, 0x67, 0x83, 0xf2, 0x62, 0x7d, 0xbf, 0xd0, 0xf6, 0xa6, 0xc5, 0xb6, 0xd7, 0xb4,
	0x60, 0x2d, 0xc1, 0x62, 0x8e, 0xc9, 0xdb, 0x90, 0x15, 0x58, 0xc3, 0xe1, 0x28, 0x24, 0x34, 0x8f,
	0x96, 0x28, 0x37, 0xb9, 0xc6, 0xac, 0x46, 0xc1, 0x7e, 0x25, 0x50, 0x10, 0x5a, 0xa9, 0xb4, 0xb2,
	0x95, 0x6a, 0xf8, 0x3e, 0x14, 0x8d, 0xe7, 0x80, 0x94, 0x01, 0x42, 0x5b, 0x38, 0x1e, 0x24, 0x4e,
	0x0f, 0x4b, 0x90, 0x32, 0xff, 0xa4, 0xc3, 0x7a, 0x0c, 0x62, 0x96, 0x97, 0x7c, 0x50, 0xe2, 0x75,
	0x5f, 0x9b, 0xb1, 0xee, 0xbf, 0x0f, 0x06, 0x0f, 0x9e, 0xb0, 0x78, 0xb3, 0x54, 0x45, 0x70, 0xed,
	0x12, 0x8b, 0xce, 0xa0, 0x70, 0x2f, 0xb9, 0xe2, 0x77, 0x97, 0x7c, 0x27, 0xe8, 0xbf, 0x52, 0xb4,
	0xff, 0x2a, 0xfb, 0x47, 0x99, 0x6e, 0x6f, 0x52, 0x37, 0x46, 0x6e, 0x83, 0xe1, 0xf4, 0x11, 0xdc,
	0x93, 0x91, 0xd3, 0xe7, 0x01, 0x4d, 0x6f, 0x1b, 0x0b, 0xd6, 0xd2, 0x64, 0xfc, 0x1e, 0x0e, 0x33,
	0x6b, 0x2e, 0xd2, 0xb7, 0x35, 0xe1, 0xba, 0xd2, 0x34, 0xee, 0xa2, 0x37, 0x21, 0xc3, 0xa0, 0xe0,
	0xee, 0x59, 0x53, 0xde, 0x75, 0x2c, 0x2e, 0x68, 0xfe, 0x47, 0x8f, 0x27, 0x07, 0xd9, 0x41, 0xb1,
	0x72, 0xa0, 0xcd, 0x54, 0x0e, 0xce, 0xdf, 0x68, 0x27, 0xf9, 0x35, 0x35, 0xb3, 0x5f, 0x67, 0xf6,
	0x05, 0xa9, 0x47, 0x3a, 0xf0, 0x37, 0x65, 0x06, 0x28, 0xf0, 0x78, 0xd9, 0xed, 0xb8, 0xe5, 0x47,
	0x48, 0x7c, 0x3f, 0xee, 0xd5, 0x6f, 0x44, 0xbc, 0x5a, 0x54, 0xdd, 0x14, 0x02, 0xa7, 0xfe, 0x3a,
	0x15, 0x77, 0x2a, 0x2b, 0x59, 0x17, 0x74, 0x6a, 0x5b, 0xae, 0xf1, 0x3a, 0xad, 0xf1, 0x1f, 0xaa,
	0x70, 0x93, 0xb6, 0x9c, 0xb5, 0xe0, 0x7f, 0xa8, 0x28, 0xf8, 0xb4, 0x5a, 0xb3, 0x35, 0xff, 0x77,
	0x65, 0x3f, 0x81, 0x03, 0x3e, 0x76, 0x21, 0x07, 0xd8, 0xbd, 0x42, 0xcd, 0x01, 0xbe, 0x82, 0xcb,
	0x99, 0xb8, 0x5d, 0xa4, 0x9a, 0xb8, 0xdc, 0x13, 0xe6, 0x0f, 0xa1, 0x18, 0x9f, 0xe2, 0x1b, 0xed,
	0x40, 0x3e, 0x5a, 0xa3, 0x5c, 0xdc, 0x33, 0x35, 0xad, 0x17, 0x30, 0x22, 0x35, 0xca, 0x35, 0x7f,
	0x00, 0x05, 0x01, 0x46, 0xf7, 0xe5, 0x16, 0x40, 0x73, 0x1f, 0x96, 0x65, 0xed, 0xdc, 0xf6, 0x6f,
	0x42, 0x4e, 0xf0, 0xb8, 0x6f, 0x76, 0x62, 0xcd, 0x96, 0x04, 0xcd, 0x3e, 0xac, 0xc5, 0x32, 0xa4,
	0x7b, 0xf1, 0x02, 0x15, 0x5e, 0xfd, 0x75, 0xf1, 0xea, 0x6f, 0x7e, 0x04, 0xa5, 0xa4, 0xed, 0xf8,
	0x29, 0xee, 0xc2, 0x3c, 0x0b, 0x63, 0xff, 0x00, 0x53, 0xb2, 0xb8, 0x2f, 0x69, 0x7e, 0x1f, 0x84,
	0x2b, 0xe6, 0xcb, 0xc6, 0xfb, 0x01, 0x14, 0x24, 0xe5, 0xdc, 0xd0, 0xb7, 0x26, 0x3d, 0x47, 0x30,
	0xcc, 0x8d, 0x4d, 0xea, 0x08, 0x44, 0x31, 0xf3, 0x17, 0x9a, 0xc8, 0xbe, 0x08, 0xd6, 0x5f, 0x7a,
	0xad, 0x51, 0xbc, 0x1a, 0x22, 0xc5, 0xd6, 0x12, 0x8c, 0x0c, 0x3a, 0xa1, 0x88, 0x87, 0xd4, 0x19,
	0x39, 0x70, 0xd0, 0x47, 0xe2, 0xa9, 0x59, 0xa8, 0x5e, 0xf0, 0xd4, 0xb2, 0x8d, 0x81, 0xca, 0xd0,
	0x46, 0x96, 0x08, 0xa6, 0xd8, 0xc8, 0x33, 0x86, 0x2f, 0x68, 0xfe, 0x53, 0x87, 0x92, 0x65, 0x0f,
	0x9d, 0x91, 0x57, 0x99, 0x5c, 0xde, 0xab, 0xfc, 0xaa, 0x7d, 0x41, 0xe7, 0x94, 0x23, 0xef, 0x03,
	0xcc, 0x35, 0x57, 0x70, 0x55, 0xb6, 0x12, 0xbe, 0x11, 0xc8, 0x0f, 0x06, 0x1f, 0xc3, 0x62, 0x7b,
	0xe4, 0xf5, 0x4e, 0xda, 0x1d, 0x4f, 0xbc, 0x4d, 0xbe, 0xe5, 0x9f, 0x41, 0x6d, 0xe5, 0x16, 0x1d,
	0xdc, 0xe6, 0x8b, 0x69, 0x75, 0xc9, 0xb5, 0x85, 0x2f, 0xec, 0x83, 0x73, 0x5d, 0xa7, 0xf3, 0x19,
	0x5e, 0xa7, 0xd9, 0x65, 0x9b, 0x56, 0x17, 0x2c, 0x22, 0x59, 0x36, 0x5a, 0xa7, 0x97, 0x6e, 0xf1,
	0x49, 0x61, 0x4e, 0x7e, 0x52, 0x28, 0x43, 0x3e, 0xb6, 0x85, 0x5c, 0x07, 0x0c, 0xc8, 0xed, 0xec,
	0x57, 0x1f, 0xd4, 0xac, 0x56, 0xfd, 0xe1, 0xf6, 0x6e, 0xcd, 0xd0, 0x2a, 0x2b, 0xb0, 0xcc, 0x20,
	0x08, 0x0e, 0xc5, 0xf2, 0xfe, 0x21, 0x5c, 0x4b, 0x3c, 0x49, 0x34, 0xc0, 0xc4, 0x74, 0x46, 0xe2,
	0x6f, 0x33, 0x96, 0x28, 0x66, 0xfe, 0x59, 0xf3, 0x73, 0x81, 0x94, 0x7b, 0xcf, 0xe9, 0xbd, 0x77,
	0xa5, 0x1c, 0x96, 0xf8, 0x26, 0xe5, 0x6f, 0xb1, 0x25, 0x3f, 0x0c, 0x99, 0xd8, 0x5f, 0xf1, 0xa7,
	0x94, 0x79, 0x48, 0x6d, 0x37, 0x3e, 0x3e, 0xff, 0xfb, 0x49, 0x98, 0x81, 0xe4, 0x84, 0x7f, 0x3e,
	0x80, 0xea, 0x60, 0xe0, 0xf5, 0xaf, 0xef, 0x4c, 0xae, 0x45, 0x31, 0x74, 0xe4, 0x1c, 0x2f, 0xa0,
	0xc3, 0xf3, 0x47, 0x2e, 0x14, 0xc3, 0x10, 0xac, 0x43, 0x5e, 0x50, 0x75, 0x21, 0xab, 0x7e, 0xab,
	0x41, 0x81, 0xe9, 0x92, 0xaf, 0xfc, 0x2f, 0xe9, 0xd2, 0xb8, 0x99, 0x14, 0x85, 0x72, 0xd0, 0x9d,
	0xfb, 0x05, 0xd6, 0xdc, 0x83, 0x65, 0xd9, 0xf4, 0x8b, 0x20, 0x51, 0xfe, 0x49, 0x16, 0x32, 0x6c,
	0x8e, 0x1c, 0x81, 0x11, 0x6d, 0x8c, 0xc8, 0x75, 0x55, 0xbb, 0xc9, 0x11, 0x2b, 0x6d, 0xa8, 0x05,
	0xb8, 0x5d, 0xa7, 0xb0, 0x92, 0xdc, 0x73, 0x93, 0x9b, 0x33, 0xdd, 0x01, 0x4a, 0xb7, 0x9e, 0x27,
	0xc6, 0x37, 0xea, 0xc2, 0xd5, 0xc4, 0x97, 0x17, 0xf2, 0xba, 0x4a, 0x81, 0xe8, 0xfb, 0xd2, 0xcd,
	0xe7, 0x48, 0xa9, 0x8f, 0xc3, 0x9f, 0xf8, 0x6e, 0xce, 0xd4, 0x9a, 0xab, 0x8f, 0x13, 0xe9, 0x42,
	0xbf, 0x07, 0xf9, 0xd8, 0x15, 0x94, 0x6c, 0x28, 0x2f, 0xce, 0xbe, 0xfa, 0xcd, 0x29, 0x12, 0x5c,
	0xf3, 0xa7, 0xfe, 0xab, 0x49, 0xfc, 0x3f, 0x15, 0xde, 0x9a, 0xed, 0x62, 0x5e, 0xfa, 0xea, 0x73,
	0xe5, 0xf8, 0x5e, 0xf7, 0x20, 0x2b, 0xb4, 0x33, 0xa4, 0x14, 0x2f, 0x8c, 0x7e, 0x46, 0x2b, 0x5d,
	0x4b, 0x9c, 0x0b, 0xd1, 0x88, 0xf5, 0x08, 0x21, 0x1a, 0xaa, 0x1e, 0xa7, 0xb4, 0x39, 0x45, 0x82,
	0x6b, 0x3e, 0x12, 0x5f, 0x6b, 0x59, 0x4b, 0x1d, 0xd2, 0x5e, 0xd1, 0xd5, 0x97, 0x36, 0xd4, 0x02,
	0x49, 0x06, 0xf3, 0x86, 0x21, 0xc9, 0x60, 0xb9, 0x3d, 0x49, 0x32, 0x38, 0xda, 0x6d, 0x04, 0x90,
	0xd2, 0x08, 0x8e, 0x42, 0x2a, 0x16, 0x89, 0x28, 0xa4, 0x72, 0x42, 0xaf, 0x43, 0x4e, 0xec, 0xec,
	0xc9, 0xb5, 0x84, 0xd6, 0x37, 0xd0, 0xf4, 0x5a, 0xf2, 0x24, 0x57, 0x85, 0x1d, 0x71, 0xbc, 0xc9,
	0x26, 0x9b, 0xca, 0x5e, 0x3a, 0x50, 0x6b, 0x4e, 0x13, 0xe1, 0xca, 0x3f, 0xc0, 0x3a, 0xc6, 0x12,
	0x1e, 0x09, 0xfa, 0xaa, 0x68, 0x4d, 0x29, 0xad, 0x25, 0xcc, 0x84, 0xe7, 0x14, 0x13, 0x66, 0x78,
	0xce, 0x84, 0x0a, 0x10, 0x9e, 0x33, 0x31, 0xc7, 0x7e, 0x02, 0x85, 0x84, 0x1e, 0x82, 0x98, 0xcf,
	0x6f, 0x95, 0x4a, 0x37, 0xa6, 0xca, 0x30, 0xfd, 0x95, 0xaf, 0x7f, 0xfe, 0xc5, 0xba, 0xf6, 0x97,
	0x2f, 0xd6, 0x2f, 0xfd, 0x1b, 0xff, 0xfd, 0xf1, 0xb3, 0x75, 0xed, 0x57, 0xf8, 0xf7, 0x47, 0xfc,
	0xfb, 0x1c, 0xff, 0xfe, 0x86, 0x7f, 0xff, 0x78, 0x86, 0x73, 0xf8, 0xef, 0x4f, 0xff, 0xbe, 0x7e,
	0xe9, 0x38, 0x43, 0xff, 0x67, 0x8e, 0xbb, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x03, 0x06, 0xbd,
	0x15, 0x10, 0x22, 0x00, 0x00,
}
