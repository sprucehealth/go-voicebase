// Code generated by protoc-gen-gogo.
// source: events.proto
// DO NOT EDIT!

/*
	Package excomms is a generated protocol buffer package.

	It is generated from these files:
		events.proto

	It has these top-level messages:
		Event
		ProvisionedEndpoint
*/
package excomms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EndpointType int32

const (
	EndpointType_INVALID EndpointType = 0
	EndpointType_PHONE   EndpointType = 1
	EndpointType_EMAIL   EndpointType = 2
)

var EndpointType_name = map[int32]string{
	0: "INVALID",
	1: "PHONE",
	2: "EMAIL",
}
var EndpointType_value = map[string]int32{
	"INVALID": 0,
	"PHONE":   1,
	"EMAIL":   2,
}

func (EndpointType) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

type Event_Type int32

const (
	Event_INVALID              Event_Type = 0
	Event_PROVISIONED_ENDPOINT Event_Type = 1
)

var Event_Type_name = map[int32]string{
	0: "INVALID",
	1: "PROVISIONED_ENDPOINT",
}
var Event_Type_value = map[string]int32{
	"INVALID":              0,
	"PROVISIONED_ENDPOINT": 1,
}

func (Event_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0, 0} }

type Event struct {
	Type Event_Type `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.Event_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*Event_ProvisionedEndpoint
	Details isEvent_Details `protobuf_oneof:"details"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

type isEvent_Details interface {
	isEvent_Details()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ProvisionedEndpoint struct {
	ProvisionedEndpoint *ProvisionedEndpoint `protobuf:"bytes,10,opt,name=provisioned_endpoint,json=provisionedEndpoint,oneof"`
}

func (*Event_ProvisionedEndpoint) isEvent_Details() {}

func (m *Event) GetDetails() isEvent_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Event) GetProvisionedEndpoint() *ProvisionedEndpoint {
	if x, ok := m.GetDetails().(*Event_ProvisionedEndpoint); ok {
		return x.ProvisionedEndpoint
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_ProvisionedEndpoint)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// details
	switch x := m.Details.(type) {
	case *Event_ProvisionedEndpoint:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProvisionedEndpoint); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Details has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 10: // details.provisioned_endpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProvisionedEndpoint)
		err := b.DecodeMessage(msg)
		m.Details = &Event_ProvisionedEndpoint{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// details
	switch x := m.Details.(type) {
	case *Event_ProvisionedEndpoint:
		s := proto.Size(x.ProvisionedEndpoint)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProvisionedEndpoint struct {
	ForEntityID  string       `protobuf:"bytes,1,opt,name=for_entity_id,json=forEntityId,proto3" json:"for_entity_id,omitempty"`
	EndpointType EndpointType `protobuf:"varint,2,opt,name=endpoint_type,json=endpointType,proto3,enum=excomms.EndpointType" json:"endpoint_type,omitempty"`
	Endpoint     string       `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *ProvisionedEndpoint) Reset()                    { *m = ProvisionedEndpoint{} }
func (*ProvisionedEndpoint) ProtoMessage()               {}
func (*ProvisionedEndpoint) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

func init() {
	proto.RegisterType((*Event)(nil), "excomms.Event")
	proto.RegisterType((*ProvisionedEndpoint)(nil), "excomms.ProvisionedEndpoint")
	proto.RegisterEnum("excomms.EndpointType", EndpointType_name, EndpointType_value)
	proto.RegisterEnum("excomms.Event_Type", Event_Type_name, Event_Type_value)
}
func (x EndpointType) String() string {
	s, ok := EndpointType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Event_Type) String() string {
	s, ok := Event_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Details == nil {
		if this.Details != nil {
			return false
		}
	} else if this.Details == nil {
		return false
	} else if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *Event_ProvisionedEndpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_ProvisionedEndpoint)
	if !ok {
		that2, ok := that.(Event_ProvisionedEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ProvisionedEndpoint.Equal(that1.ProvisionedEndpoint) {
		return false
	}
	return true
}
func (this *ProvisionedEndpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionedEndpoint)
	if !ok {
		that2, ok := that.(ProvisionedEndpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ForEntityID != that1.ForEntityID {
		return false
	}
	if this.EndpointType != that1.EndpointType {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.Event{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_ProvisionedEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.Event_ProvisionedEndpoint{` +
		`ProvisionedEndpoint:` + fmt.Sprintf("%#v", this.ProvisionedEndpoint) + `}`}, ", ")
	return s
}
func (this *ProvisionedEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProvisionedEndpoint{")
	s = append(s, "ForEntityID: "+fmt.Sprintf("%#v", this.ForEntityID)+",\n")
	s = append(s, "EndpointType: "+fmt.Sprintf("%#v", this.EndpointType)+",\n")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringEvents(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintEvents(data, i, uint64(m.Type))
	}
	if m.Details != nil {
		nn1, err := m.Details.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Event_ProvisionedEndpoint) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ProvisionedEndpoint != nil {
		data[i] = 0x52
		i++
		i = encodeVarintEvents(data, i, uint64(m.ProvisionedEndpoint.Size()))
		n2, err := m.ProvisionedEndpoint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ProvisionedEndpoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionedEndpoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ForEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintEvents(data, i, uint64(len(m.ForEntityID)))
		i += copy(data[i:], m.ForEntityID)
	}
	if m.EndpointType != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintEvents(data, i, uint64(m.EndpointType))
	}
	if len(m.Endpoint) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintEvents(data, i, uint64(len(m.Endpoint)))
		i += copy(data[i:], m.Endpoint)
	}
	return i, nil
}

func encodeFixed64Events(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Events(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEvents(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEvents(uint64(m.Type))
	}
	if m.Details != nil {
		n += m.Details.Size()
	}
	return n
}

func (m *Event_ProvisionedEndpoint) Size() (n int) {
	var l int
	_ = l
	if m.ProvisionedEndpoint != nil {
		l = m.ProvisionedEndpoint.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *ProvisionedEndpoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.ForEntityID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EndpointType != 0 {
		n += 1 + sovEvents(uint64(m.EndpointType))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_ProvisionedEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_ProvisionedEndpoint{`,
		`ProvisionedEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ProvisionedEndpoint), "ProvisionedEndpoint", "ProvisionedEndpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionedEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionedEndpoint{`,
		`ForEntityID:` + fmt.Sprintf("%v", this.ForEntityID) + `,`,
		`EndpointType:` + fmt.Sprintf("%v", this.EndpointType) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Event_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionedEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProvisionedEndpoint{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &Event_ProvisionedEndpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionedEndpoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionedEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionedEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointType", wireType)
			}
			m.EndpointType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EndpointType |= (EndpointType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0x31, 0x6f, 0xda, 0x40,
	0x18, 0xf5, 0x51, 0x28, 0xe5, 0x0c, 0xad, 0x75, 0x50, 0x09, 0xa1, 0xea, 0x8a, 0x58, 0x8a, 0xaa,
	0x62, 0x54, 0xd8, 0xba, 0x81, 0xec, 0x0a, 0x4b, 0xd4, 0x76, 0x5d, 0xc4, 0x6a, 0x15, 0x7c, 0x50,
	0x4b, 0xc5, 0x67, 0xd9, 0x07, 0x0a, 0x5b, 0x7e, 0x42, 0x7e, 0x43, 0xa6, 0xfc, 0x89, 0xec, 0x19,
	0x19, 0x33, 0x45, 0xe1, 0xb2, 0x64, 0xe4, 0x27, 0x44, 0xbe, 0x10, 0x43, 0x94, 0x6c, 0xf7, 0xbe,
	0xef, 0xbd, 0xef, 0xe9, 0xbd, 0x83, 0x45, 0xb2, 0x22, 0x01, 0x8b, 0xd5, 0x30, 0xa2, 0x8c, 0xa2,
	0x3c, 0x39, 0x99, 0xd2, 0xc5, 0x22, 0xae, 0xb5, 0xe6, 0x3e, 0xfb, 0xb7, 0x9c, 0xa8, 0x53, 0xba,
	0x68, 0xcf, 0xe9, 0x9c, 0xb6, 0xc5, 0x7e, 0xb2, 0x9c, 0x09, 0x24, 0x80, 0x78, 0x3d, 0xea, 0x1a,
	0x97, 0x00, 0xe6, 0xf4, 0xe4, 0x10, 0xfa, 0x02, 0xb3, 0x6c, 0x1d, 0x92, 0x2a, 0xa8, 0x83, 0xe6,
	0xfb, 0x4e, 0x59, 0xdd, 0x1f, 0x54, 0xc5, 0x56, 0x1d, 0xad, 0x43, 0xe2, 0x08, 0x02, 0xfa, 0x0d,
	0x2b, 0x61, 0x44, 0x57, 0x7e, 0xec, 0xd3, 0x80, 0x78, 0x2e, 0x09, 0xbc, 0x90, 0xfa, 0x01, 0xab,
	0xc2, 0x3a, 0x68, 0xca, 0x9d, 0x4f, 0xa9, 0xd0, 0x3e, 0x90, 0xf4, 0x3d, 0x67, 0x20, 0x39, 0xe5,
	0xf0, 0xe5, 0xb8, 0xd1, 0x82, 0xd9, 0xc4, 0x00, 0xc9, 0x30, 0x6f, 0x98, 0xe3, 0xde, 0xd0, 0xd0,
	0x14, 0x09, 0x55, 0x61, 0xc5, 0x76, 0xac, 0xb1, 0xf1, 0xc7, 0xb0, 0x4c, 0x5d, 0x73, 0x75, 0x53,
	0xb3, 0x2d, 0xc3, 0x1c, 0x29, 0xa0, 0x5f, 0x80, 0x79, 0x8f, 0xb0, 0xbf, 0xfe, 0xff, 0xb8, 0x71,
	0x0e, 0x60, 0xf9, 0x15, 0x23, 0xd4, 0x85, 0xa5, 0x19, 0x8d, 0x5c, 0x12, 0x30, 0x9f, 0xad, 0x5d,
	0xdf, 0x13, 0xb1, 0x0a, 0xfd, 0x0f, 0xfc, 0xe6, 0xb3, 0xfc, 0x93, 0x46, 0xba, 0x98, 0x1b, 0x9a,
	0x23, 0xcf, 0x52, 0xe0, 0xa1, 0x1f, 0xb0, 0xf4, 0x94, 0xc6, 0x15, 0x5d, 0x64, 0x44, 0x17, 0x1f,
	0x0f, 0x5d, 0xec, 0xb7, 0xa2, 0x8d, 0x22, 0x39, 0x42, 0xa8, 0x06, 0xdf, 0xa5, 0x4d, 0xbc, 0x49,
	0xbc, 0x9c, 0x14, 0x7f, 0xfd, 0x0e, 0x8b, 0xc7, 0xca, 0xe7, 0x31, 0x0b, 0x30, 0x67, 0x0f, 0x2c,
	0x53, 0x57, 0x40, 0xf2, 0xd4, 0x7f, 0xf5, 0x8c, 0xa1, 0x92, 0xe9, 0x7f, 0xdb, 0x6c, 0x31, 0xb8,
	0xde, 0x62, 0x69, 0xb7, 0xc5, 0xe0, 0x94, 0x63, 0x70, 0xc1, 0x31, 0xb8, 0xe2, 0x18, 0x6c, 0x38,
	0x06, 0xb7, 0x1c, 0x83, 0x7b, 0x8e, 0xa5, 0x1d, 0xc7, 0xe0, 0xec, 0x0e, 0x4b, 0x93, 0xb7, 0xe2,
	0x33, 0xbb, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xd2, 0xac, 0xff, 0x14, 0x02, 0x00, 0x00,
}
