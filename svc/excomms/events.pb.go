// Code generated by protoc-gen-gogo.
// source: events.proto
// DO NOT EDIT!

/*
	Package excomms is a generated protocol buffer package.

	It is generated from these files:
		events.proto

	It has these top-level messages:
		Event
		ProvisionedEndpoint
*/
package excomms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EndpointType int32

const (
	EndpointType_INVALID EndpointType = 0
	EndpointType_PHONE   EndpointType = 1
	EndpointType_EMAIL   EndpointType = 2
)

var EndpointType_name = map[int32]string{
	0: "INVALID",
	1: "PHONE",
	2: "EMAIL",
}
var EndpointType_value = map[string]int32{
	"INVALID": 0,
	"PHONE":   1,
	"EMAIL":   2,
}

type Event_Type int32

const (
	Event_INVALID              Event_Type = 0
	Event_PROVISIONED_ENDPOINT Event_Type = 1
)

var Event_Type_name = map[int32]string{
	0: "INVALID",
	1: "PROVISIONED_ENDPOINT",
}
var Event_Type_value = map[string]int32{
	"INVALID":              0,
	"PROVISIONED_ENDPOINT": 1,
}

type Event struct {
	Type Event_Type `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.Event_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*Event_ProvisionedEndpoint
	Details isEvent_Details `protobuf_oneof:"details"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}

type isEvent_Details interface {
	isEvent_Details()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ProvisionedEndpoint struct {
	ProvisionedEndpoint *ProvisionedEndpoint `protobuf:"bytes,10,opt,name=provisioned_endpoint,oneof"`
}

func (*Event_ProvisionedEndpoint) isEvent_Details() {}

func (m *Event) GetDetails() isEvent_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Event) GetProvisionedEndpoint() *ProvisionedEndpoint {
	if x, ok := m.GetDetails().(*Event_ProvisionedEndpoint); ok {
		return x.ProvisionedEndpoint
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, []interface{}{
		(*Event_ProvisionedEndpoint)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// details
	switch x := m.Details.(type) {
	case *Event_ProvisionedEndpoint:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProvisionedEndpoint); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Details has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 10: // details.provisioned_endpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProvisionedEndpoint)
		err := b.DecodeMessage(msg)
		m.Details = &Event_ProvisionedEndpoint{msg}
		return true, err
	default:
		return false, nil
	}
}

type ProvisionedEndpoint struct {
	ForEntityID  string       `protobuf:"bytes,1,opt,name=for_entity_id,proto3" json:"for_entity_id,omitempty"`
	EndpointType EndpointType `protobuf:"varint,2,opt,name=endpoint_type,proto3,enum=excomms.EndpointType" json:"endpoint_type,omitempty"`
	Endpoint     string       `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *ProvisionedEndpoint) Reset()      { *m = ProvisionedEndpoint{} }
func (*ProvisionedEndpoint) ProtoMessage() {}

func init() {
	proto.RegisterType((*Event)(nil), "excomms.Event")
	proto.RegisterType((*ProvisionedEndpoint)(nil), "excomms.ProvisionedEndpoint")
	proto.RegisterEnum("excomms.EndpointType", EndpointType_name, EndpointType_value)
	proto.RegisterEnum("excomms.Event_Type", Event_Type_name, Event_Type_value)
}
func (x EndpointType) String() string {
	s, ok := EndpointType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Event_Type) String() string {
	s, ok := Event_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Details == nil {
		if this.Details != nil {
			return false
		}
	} else if this.Details == nil {
		return false
	} else if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *Event_ProvisionedEndpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_ProvisionedEndpoint)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ProvisionedEndpoint.Equal(that1.ProvisionedEndpoint) {
		return false
	}
	return true
}
func (this *ProvisionedEndpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionedEndpoint)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ForEntityID != that1.ForEntityID {
		return false
	}
	if this.EndpointType != that1.EndpointType {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.Event{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_ProvisionedEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.Event_ProvisionedEndpoint{` +
		`ProvisionedEndpoint:` + fmt.Sprintf("%#v", this.ProvisionedEndpoint) + `}`}, ", ")
	return s
}
func (this *ProvisionedEndpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProvisionedEndpoint{")
	s = append(s, "ForEntityID: "+fmt.Sprintf("%#v", this.ForEntityID)+",\n")
	s = append(s, "EndpointType: "+fmt.Sprintf("%#v", this.EndpointType)+",\n")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringEvents(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *Event) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Event) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintEvents(data, i, uint64(m.Type))
	}
	if m.Details != nil {
		nn1, err := m.Details.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Event_ProvisionedEndpoint) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ProvisionedEndpoint != nil {
		data[i] = 0x52
		i++
		i = encodeVarintEvents(data, i, uint64(m.ProvisionedEndpoint.Size()))
		n2, err := m.ProvisionedEndpoint.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ProvisionedEndpoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionedEndpoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ForEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintEvents(data, i, uint64(len(m.ForEntityID)))
		i += copy(data[i:], m.ForEntityID)
	}
	if m.EndpointType != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintEvents(data, i, uint64(m.EndpointType))
	}
	if len(m.Endpoint) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintEvents(data, i, uint64(len(m.Endpoint)))
		i += copy(data[i:], m.Endpoint)
	}
	return i, nil
}

func encodeFixed64Events(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Events(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEvents(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEvents(uint64(m.Type))
	}
	if m.Details != nil {
		n += m.Details.Size()
	}
	return n
}

func (m *Event_ProvisionedEndpoint) Size() (n int) {
	var l int
	_ = l
	if m.ProvisionedEndpoint != nil {
		l = m.ProvisionedEndpoint.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *ProvisionedEndpoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.ForEntityID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.EndpointType != 0 {
		n += 1 + sovEvents(uint64(m.EndpointType))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Details:` + fmt.Sprintf("%v", this.Details) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_ProvisionedEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_ProvisionedEndpoint{`,
		`ProvisionedEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ProvisionedEndpoint), "ProvisionedEndpoint", "ProvisionedEndpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionedEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionedEndpoint{`,
		`ForEntityID:` + fmt.Sprintf("%v", this.ForEntityID) + `,`,
		`EndpointType:` + fmt.Sprintf("%v", this.EndpointType) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Event_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionedEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProvisionedEndpoint{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &Event_ProvisionedEndpoint{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionedEndpoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionedEndpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionedEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointType", wireType)
			}
			m.EndpointType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EndpointType |= (EndpointType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)
