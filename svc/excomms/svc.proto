syntax = "proto3";

package excomms;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// ChannelType specifies the channel over which the communication
// is intended to take place.
enum ChannelType {
	VOICE = 0;
	SMS = 1;
	EMAIL = 2;
}

message PublishedExternalMessage {
	string from_channel_id = 1 [(gogoproto.customname) = "FromChannelID"];
	string to_channel_id = 2 [(gogoproto.customname) = "ToChannelID"];
	uint64 timestamp = 3;
	enum Type {
		SMS = 0;
		INCOMING_CALL_EVENT = 1;
		OUTGOING_CALL_EVENT = 2;
		EMAIL = 3;
	}
	Type type = 4;
	oneof item {
		SMSItem sms_item = 5 [(gogoproto.customname) = "SMSItem"];
		IncomingCallEventItem incoming = 6;
		OutgoingCallEventItem outgoing = 7;
		EmailItem email_item = 8;
	}

	enum Direction {
		INBOUND = 0;
		OUTBOUND = 1;
	}
	Direction direction = 9;
}

message SMSItem {
	string text = 1;
	repeated MediaAttachment attachments = 2;
}

message IncomingCallEventItem {
	enum Type {
		ANSWERED = 0;
		UNANSWERED = 1;
		LEFT_VOICEMAIL = 2;
		LEFT_URGENT_VOICEMAIL = 3;
	}
	Type type = 1;
	uint32 duration_in_seconds = 2;
	string voicemail_media_id = 3 [(gogoproto.customname) = "VoicemailMediaID"];
	uint64 voicemail_duration_ns = 4 [(gogoproto.customname) = "VoicemailDurationNS"];
	string transcription_text  = 5;
}

message OutgoingCallEventItem {
	enum Type {
		PLACED = 0;
		ANSWERED = 1;
		UNANSWERED = 2;
	}
	Type type = 1;
	uint32 duration_in_seconds = 2;
	string caller_entity_id = 3 [(gogoproto.customname) = "CallerEntityID"];
	string callee_entity_id = 4 [(gogoproto.customname) = "CalleeEntityID"];
}

message EmailItem {
	string body = 1;
	string subject = 2;
	repeated MediaAttachment attachments = 3;
}

message MediaAttachment {
	string media_id = 1 [(gogoproto.customname) = "MediaID"];
	string content_type = 2;
	string name = 3;
}

// RPC

// SendMessageRequest represents a request to send a message
// over an external channel.
message SendMessageRequest {
	ChannelType deprecated_channel = 1;
	oneof message {
		EmailMessage email = 2;
		SMSMessage sms = 3 [(gogoproto.customname) = "SMS"];
	}

	// uuid for client to group and retrieve list of external messages
	string uuid = 4 [(gogoproto.customname) = "UUID"];
}

message EmailMessage {
	string subject = 1;
	string body = 2;
	string from_name = 3;
	string from_email_address = 4;
	string to_name = 5;
	string to_email_address = 6;
	repeated string MediaIDs = 7 [(gogoproto.customname) = "MediaIDs"];
	string template_id = 8 [(gogoproto.customname) = "TemplateID"];
	message Substitution {
		string key = 1;
		string value = 2;
	}
	repeated Substitution template_substitutions = 9;
	bool transactional = 10;
}

message SMSMessage {
	string text = 1;
	string from_phone_number = 2;
	string to_phone_number = 3;
	repeated string MediaIDs = 4 [(gogoproto.customname) = "MediaIDs"];
}

message SendMessageResponse {
}

message InitiatePhoneCallRequest {
	enum CallInitiationType {
		// CONNECT_PARTIES instructs service to call
		// the source and once the source answers, connect the
		// source to the destination by calling the destination
		// and merging the calls.
		CONNECT_PARTIES = 0;

		// RETURN_PHONE_NUMBER instructs service to return a number
		// to the caller that the user can call to be connected
		// to the patient.
		RETURN_PHONE_NUMBER = 1;
	}

	CallInitiationType call_initiation_type = 1;
	string from_phone_number = 2;
	string to_phone_number = 3;
	string organization_id = 4 [(gogoproto.customname) = "OrganizationID"];
	string caller_entity_id = 5 [(gogoproto.customname) = "CallerEntityID"];
	string device_id = 6 [(gogoproto.customname) = "DeviceID"];
}

message InitiatePhoneCallResponse {
	// phone_number returns the phone number which the caller can call
	// to connect the caller to the destination phone number in the request.
	string proxy_phone_number = 3;
	string originating_phone_number = 4;
}

enum PhoneNumberCapability {
	VOICE_ENABLED = 0;
	SMS_ENABLED = 1;
	MMS_ENABLED = 2;
}

message AvailablePhoneNumber {
	string friendly_name = 1;
	string phone_number = 2;
	repeated PhoneNumberCapability capabilities = 3;
}

message SearchAvailablePhoneNumbersRequest {
	string area_code = 1;
	repeated PhoneNumberCapability capabilities = 2;
}

message SearchAvailablePhoneNumbersResponse {
	repeated AvailablePhoneNumber phone_numbers = 1;
}


message ProvisionPhoneNumberRequest {
	string provision_for = 1;
	oneof number {
		string phone_number = 2;
		string area_code = 3;
	}
	string uuid = 4 [(gogoproto.customname) = "UUID"];
}

message ProvisionPhoneNumberResponse {
	string phone_number = 3;
}

message DeprovisionPhoneNumberRequest {
	string phone_number = 1;
	string reason = 2;
}

message DeprovisionPhoneNumberResponse {

}


message DeprovisionEmailRequest {
	string email = 1;
	string reason = 2;
}

message DeprovisionEmailResponse {
}


message ProvisionEmailAddressRequest {
	string provision_for = 1;
	string email_address = 2;
}

message ProvisionEmailAddressResponse {
	string email_address = 1;
}

enum IPCallParticipantRole {
	INVALID_IPCALL_PARTICIPANT_ROLE = 0;
	CALLER = 1;
	RECIPIENT = 2;
};

enum IPCallType {
	INVALID_IPCALL_TYPE = 0;
	VIDEO = 1;
	AUDIO = 2;
}

enum IPCallState {
	INVALID_IPCALL_STATE = 0;
	PENDING = 1;
	ACCEPTED = 2;
	DECLINED = 3;
	CONNECTED = 4;
	FAILED = 5;
	COMPLETED = 6;
}

enum NetworkType {
	UNKNOWN = 0;
	CELLULAR = 1;
	WIFI = 2;
}

message IPCall {
	string id = 1 [(gogoproto.customname) = "ID"];
	IPCallType type = 2;
	bool pending = 3;
	repeated IPCallParticipant participants = 4;
	string token = 5;
}

message IPCallParticipant {
	string account_id = 1 [(gogoproto.customname) = "AccountID"];
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
	IPCallParticipantRole role = 3;
	IPCallState state = 4;
	string identity = 5;
	NetworkType network_type = 6;
}

message InitiateIPCallRequest {
	IPCallType type = 1;
	string caller_entity_id = 2 [(gogoproto.customname) = "CallerEntityID"];
	repeated string recipient_entity_ids = 3 [(gogoproto.customname) = "RecipientEntityIDs"];
	NetworkType network_type = 4;
}

message InitiateIPCallResponse {
	IPCall call = 1;
}

message IPCallRequest {
	string ipcall_id = 1 [(gogoproto.customname) = "IPCallID"];
	string account_id = 2 [(gogoproto.customname) = "AccountID"];
}

message IPCallResponse {
	IPCall call = 1;
}

message PendingIPCallsRequest {
	string account_id = 1 [(gogoproto.customname) = "AccountID"];
}

message PendingIPCallsResponse {
	repeated IPCall calls = 1;
}

message UpdateIPCallRequest {
	string ipcall_id = 1 [(gogoproto.customname) = "IPCallID"];
	string account_id = 2 [(gogoproto.customname) = "AccountID"];
	IPCallState state = 3;
	NetworkType network_type = 4;
}

message UpdateIPCallResponse {
	IPCall call = 1;
}

message BlockNumberRequest {
	string number = 1;
	string org_id = 2 [(gogoproto.customname) = "OrgID"];
	string provisioned_phone_number = 3;
}

message BlockNumberResponse {
	repeated string numbers = 1;
}

message UnblockNumberRequest {
	string number = 1;
	string org_id = 2 [(gogoproto.customname) = "OrgID"];
	string provisioned_phone_number = 3;
}


message UnblockNumberResponse {
	repeated string numbers = 1;
}

message ListBlockedNumbersRequest {
	string provisioned_phone_number = 1;
	string org_id = 2 [(gogoproto.customname) = "OrgID"];
}

message ListBlockedNumbersResponse {
	repeated string numbers = 1;
}

service ExComms {

	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	rpc SearchAvailablePhoneNumbers (SearchAvailablePhoneNumbersRequest) returns (SearchAvailablePhoneNumbersResponse);

	// DeprovisionPhoneNumber releases the phone number if one is currently provisioned.
	rpc DeprovisionPhoneNumber (DeprovisionPhoneNumberRequest) returns (DeprovisionPhoneNumberResponse);

	// DeprovisionEmail deprovisions the email address if one is currently provisioned
	rpc DeprovisionEmail (DeprovisionEmailRequest) returns (DeprovisionEmailResponse);

	// BlockNumber blocks any incoming calls or sms that originate from the number to the provisioned
	// number for the org.
	rpc BlockNumber (BlockNumberRequest) returns (BlockNumberResponse);

	// UnblockNumber unblocks any blocked phone number for the provisioned number for the org.
	rpc UnblockNumber (UnblockNumberRequest) returns (UnblockNumberResponse);

	// ListBlockedNumbers returns a list of blocked numbers for the provisioned phone number and org.
	rpc ListBlockedNumbers (ListBlockedNumbersRequest) returns (ListBlockedNumbersResponse);

	// ProvisionEmailAddress provisions an email address for the requester.
	rpc ProvisionEmailAddress (ProvisionEmailAddressRequest) returns (ProvisionEmailAddressResponse);

	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	rpc ProvisionPhoneNumber (ProvisionPhoneNumberRequest) returns (ProvisionPhoneNumberResponse);

	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	rpc SendMessage (SendMessageRequest) returns (SendMessageResponse);

	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	rpc InitiatePhoneCall (InitiatePhoneCallRequest) returns (InitiatePhoneCallResponse);

	// InitiateIPCall starts a new voip or video call.
	rpc InitiateIPCall (InitiateIPCallRequest) returns (InitiateIPCallResponse);

	// IPCall returns an IPCall given its ID
	rpc IPCall (IPCallRequest) returns (IPCallResponse);

	// PendingIPCalls returns all IPCalls for an account that are still pending (not yet completed).
	rpc PendingIPCalls (PendingIPCallsRequest) returns (PendingIPCallsResponse);

	// UpdateIPCall updates the state of a voip or video call.
	rpc UpdateIPCall (UpdateIPCallRequest) returns (UpdateIPCallResponse);
}
