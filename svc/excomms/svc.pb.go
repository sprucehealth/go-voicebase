// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package excomms is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		TwilioParams
		PublishedExternalMessage
		SMSItem
		CallEventItem
		MediaAttachment
		SendMessageRequest
		SendMessageResponse
		InitiatePhoneCallRequest
		InitiatePhoneCallResponse
		AvailablePhoneNumber
		SearchAvailablePhoneNumbersRequest
		SearchAvailablePhoneNumbersResponse
		ProvisionPhoneNumberRequest
		ProvisionPhoneNumberResponse
		ProcessTwilioEventRequest
		ProcessTwilioEventResponse
*/
package excomms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChannelType specifies the channel over which the communication
// is intended to take place.
type ChannelType int32

const (
	ChannelType_Voice ChannelType = 0
	ChannelType_SMS   ChannelType = 1
)

var ChannelType_name = map[int32]string{
	0: "Voice",
	1: "SMS",
}
var ChannelType_value = map[string]int32{
	"Voice": 0,
	"SMS":   1,
}

type TwilioEvent int32

const (
	TwilioEvent_PROCESS_INCOMING_CALL                     TwilioEvent = 0
	TwilioEvent_PROVIDER_CALL_CONNECTED                   TwilioEvent = 1
	TwilioEvent_PROVIDER_ENTERED_DIGITS                   TwilioEvent = 2
	TwilioEvent_TWIML_REQUESTED_WAIT_MUSIC                TwilioEvent = 3
	TwilioEvent_TWIML_REQUESTED_ABOUT_TO_CONNECT_PROVIDER TwilioEvent = 4
	TwilioEvent_TWIML_REQUESTED_VOICEMAIL                 TwilioEvent = 5
	TwilioEvent_PROCESS_INCOMING_CALL_STATUS              TwilioEvent = 6
	TwilioEvent_INCOMING_SMS                              TwilioEvent = 7
	TwilioEvent_DIRECT_CALLER_TO_VOICEMAIL                TwilioEvent = 8
	TwilioEvent_PROCESS_OUTGOING_CALL                     TwilioEvent = 9
	TwilioEvent_PROCESS_VOICEMAIL                         TwilioEvent = 10
	TwilioEvent_PROCESS_OUTGOING_CALL_STATUS              TwilioEvent = 11
)

var TwilioEvent_name = map[int32]string{
	0:  "PROCESS_INCOMING_CALL",
	1:  "PROVIDER_CALL_CONNECTED",
	2:  "PROVIDER_ENTERED_DIGITS",
	3:  "TWIML_REQUESTED_WAIT_MUSIC",
	4:  "TWIML_REQUESTED_ABOUT_TO_CONNECT_PROVIDER",
	5:  "TWIML_REQUESTED_VOICEMAIL",
	6:  "PROCESS_INCOMING_CALL_STATUS",
	7:  "INCOMING_SMS",
	8:  "DIRECT_CALLER_TO_VOICEMAIL",
	9:  "PROCESS_OUTGOING_CALL",
	10: "PROCESS_VOICEMAIL",
	11: "PROCESS_OUTGOING_CALL_STATUS",
}
var TwilioEvent_value = map[string]int32{
	"PROCESS_INCOMING_CALL":                     0,
	"PROVIDER_CALL_CONNECTED":                   1,
	"PROVIDER_ENTERED_DIGITS":                   2,
	"TWIML_REQUESTED_WAIT_MUSIC":                3,
	"TWIML_REQUESTED_ABOUT_TO_CONNECT_PROVIDER": 4,
	"TWIML_REQUESTED_VOICEMAIL":                 5,
	"PROCESS_INCOMING_CALL_STATUS":              6,
	"INCOMING_SMS":                              7,
	"DIRECT_CALLER_TO_VOICEMAIL":                8,
	"PROCESS_OUTGOING_CALL":                     9,
	"PROCESS_VOICEMAIL":                         10,
	"PROCESS_OUTGOING_CALL_STATUS":              11,
}

type PhoneNumberCapability int32

const (
	PhoneNumberCapability_VOICE_ENABLED PhoneNumberCapability = 0
	PhoneNumberCapability_SMS_ENABLED   PhoneNumberCapability = 1
	PhoneNumberCapability_MMS_ENABLED   PhoneNumberCapability = 2
)

var PhoneNumberCapability_name = map[int32]string{
	0: "VOICE_ENABLED",
	1: "SMS_ENABLED",
	2: "MMS_ENABLED",
}
var PhoneNumberCapability_value = map[string]int32{
	"VOICE_ENABLED": 0,
	"SMS_ENABLED":   1,
	"MMS_ENABLED":   2,
}

type TwilioParams_CallStatus int32

const (
	TwilioParams_CALL_STATUS_UNDEFINED TwilioParams_CallStatus = 0
	TwilioParams_QUEUED                TwilioParams_CallStatus = 1
	TwilioParams_RINGING               TwilioParams_CallStatus = 2
	TwilioParams_IN_PROGRESS           TwilioParams_CallStatus = 3
	TwilioParams_COMPLETED             TwilioParams_CallStatus = 4
	TwilioParams_BUSY                  TwilioParams_CallStatus = 5
	TwilioParams_FAILED                TwilioParams_CallStatus = 6
	TwilioParams_NO_ANSWER             TwilioParams_CallStatus = 7
	TwilioParams_CANCELED              TwilioParams_CallStatus = 8
	TwilioParams_ANSWERED              TwilioParams_CallStatus = 9
	TwilioParams_INITIATED             TwilioParams_CallStatus = 10
)

var TwilioParams_CallStatus_name = map[int32]string{
	0:  "CALL_STATUS_UNDEFINED",
	1:  "QUEUED",
	2:  "RINGING",
	3:  "IN_PROGRESS",
	4:  "COMPLETED",
	5:  "BUSY",
	6:  "FAILED",
	7:  "NO_ANSWER",
	8:  "CANCELED",
	9:  "ANSWERED",
	10: "INITIATED",
}
var TwilioParams_CallStatus_value = map[string]int32{
	"CALL_STATUS_UNDEFINED": 0,
	"QUEUED":                1,
	"RINGING":               2,
	"IN_PROGRESS":           3,
	"COMPLETED":             4,
	"BUSY":                  5,
	"FAILED":                6,
	"NO_ANSWER":             7,
	"CANCELED":              8,
	"ANSWERED":              9,
	"INITIATED":             10,
}

type TwilioParams_Direction int32

const (
	TwilioParams_DIRECTION_UNDEFINED TwilioParams_Direction = 0
	TwilioParams_INBOUND             TwilioParams_Direction = 1
	TwilioParams_OUTBOUND_DIAL       TwilioParams_Direction = 2
	TwilioParams_OUTBOUND_API        TwilioParams_Direction = 3
)

var TwilioParams_Direction_name = map[int32]string{
	0: "DIRECTION_UNDEFINED",
	1: "INBOUND",
	2: "OUTBOUND_DIAL",
	3: "OUTBOUND_API",
}
var TwilioParams_Direction_value = map[string]int32{
	"DIRECTION_UNDEFINED": 0,
	"INBOUND":             1,
	"OUTBOUND_DIAL":       2,
	"OUTBOUND_API":        3,
}

type PublishedExternalMessage_Type int32

const (
	PublishedExternalMessage_SMS        PublishedExternalMessage_Type = 0
	PublishedExternalMessage_CALL_EVENT PublishedExternalMessage_Type = 1
)

var PublishedExternalMessage_Type_name = map[int32]string{
	0: "SMS",
	1: "CALL_EVENT",
}
var PublishedExternalMessage_Type_value = map[string]int32{
	"SMS":        0,
	"CALL_EVENT": 1,
}

type CallEventItem_Type int32

const (
	CallEventItem_INCOMING_ANSWERED       CallEventItem_Type = 0
	CallEventItem_INCOMING_UNANSWERED     CallEventItem_Type = 1
	CallEventItem_INCOMING_LEFT_VOICEMAIL CallEventItem_Type = 2
	CallEventItem_OUTGOING_PLACED         CallEventItem_Type = 3
	CallEventItem_OUTGOING_ANSWERED       CallEventItem_Type = 4
	CallEventItem_OUTGOING_UNANSWERED     CallEventItem_Type = 5
)

var CallEventItem_Type_name = map[int32]string{
	0: "INCOMING_ANSWERED",
	1: "INCOMING_UNANSWERED",
	2: "INCOMING_LEFT_VOICEMAIL",
	3: "OUTGOING_PLACED",
	4: "OUTGOING_ANSWERED",
	5: "OUTGOING_UNANSWERED",
}
var CallEventItem_Type_value = map[string]int32{
	"INCOMING_ANSWERED":       0,
	"INCOMING_UNANSWERED":     1,
	"INCOMING_LEFT_VOICEMAIL": 2,
	"OUTGOING_PLACED":         3,
	"OUTGOING_ANSWERED":       4,
	"OUTGOING_UNANSWERED":     5,
}

type SendMessageResponse_Result int32

const (
	SendMessageResponse_SUCCESS               SendMessageResponse_Result = 0
	SendMessageResponse_CHANNEL_NOT_SUPPORTED SendMessageResponse_Result = 2
	SendMessageResponse_INTERNAL_ERROR        SendMessageResponse_Result = 3
)

var SendMessageResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	2: "CHANNEL_NOT_SUPPORTED",
	3: "INTERNAL_ERROR",
}
var SendMessageResponse_Result_value = map[string]int32{
	"SUCCESS":               0,
	"CHANNEL_NOT_SUPPORTED": 2,
	"INTERNAL_ERROR":        3,
}

type InitiatePhoneCallRequest_CallInitiationType int32

const (
	// CONNECT_PARTIES instructs service to call
	// the source and once the source answers, connect the
	// source to the destination by calling the destination
	// and merging the calls.
	InitiatePhoneCallRequest_CONNECT_PARTIES InitiatePhoneCallRequest_CallInitiationType = 0
	// RETURN_PHONE_NUMBER instructs service to return a number
	// to the caller that the user can call to be connected
	// to the patient.
	InitiatePhoneCallRequest_RETURN_PHONE_NUMBER InitiatePhoneCallRequest_CallInitiationType = 1
)

var InitiatePhoneCallRequest_CallInitiationType_name = map[int32]string{
	0: "CONNECT_PARTIES",
	1: "RETURN_PHONE_NUMBER",
}
var InitiatePhoneCallRequest_CallInitiationType_value = map[string]int32{
	"CONNECT_PARTIES":     0,
	"RETURN_PHONE_NUMBER": 1,
}

type InitiatePhoneCallResponse_Result int32

const (
	InitiatePhoneCallResponse_SUCCESS        InitiatePhoneCallResponse_Result = 0
	InitiatePhoneCallResponse_INTERNAL_ERROR InitiatePhoneCallResponse_Result = 1
)

var InitiatePhoneCallResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "INTERNAL_ERROR",
}
var InitiatePhoneCallResponse_Result_value = map[string]int32{
	"SUCCESS":        0,
	"INTERNAL_ERROR": 1,
}

type SearchAvailablePhoneNumbersResponse_Result int32

const (
	SearchAvailablePhoneNumbersResponse_SUCCESS        SearchAvailablePhoneNumbersResponse_Result = 0
	SearchAvailablePhoneNumbersResponse_INTERNAL_ERROR SearchAvailablePhoneNumbersResponse_Result = 1
)

var SearchAvailablePhoneNumbersResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "INTERNAL_ERROR",
}
var SearchAvailablePhoneNumbersResponse_Result_value = map[string]int32{
	"SUCCESS":        0,
	"INTERNAL_ERROR": 1,
}

type ProvisionPhoneNumberResponse_Result int32

const (
	ProvisionPhoneNumberResponse_SUCCESS                              ProvisionPhoneNumberResponse_Result = 0
	ProvisionPhoneNumberResponse_NOT_AVAILABLE                        ProvisionPhoneNumberResponse_Result = 1
	ProvisionPhoneNumberResponse_NUMBER_ALREADY_PROVISIONED           ProvisionPhoneNumberResponse_Result = 2
	ProvisionPhoneNumberResponse_DIFFERENT_NUMBER_ALREADY_PROVISIONED ProvisionPhoneNumberResponse_Result = 3
	ProvisionPhoneNumberResponse_INTERNAL_ERROR                       ProvisionPhoneNumberResponse_Result = 4
)

var ProvisionPhoneNumberResponse_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "NOT_AVAILABLE",
	2: "NUMBER_ALREADY_PROVISIONED",
	3: "DIFFERENT_NUMBER_ALREADY_PROVISIONED",
	4: "INTERNAL_ERROR",
}
var ProvisionPhoneNumberResponse_Result_value = map[string]int32{
	"SUCCESS":                              0,
	"NOT_AVAILABLE":                        1,
	"NUMBER_ALREADY_PROVISIONED":           2,
	"DIFFERENT_NUMBER_ALREADY_PROVISIONED": 3,
	"INTERNAL_ERROR":                       4,
}

type ProcessTwilioEventResponse_Failure_Reason int32

const (
	ProcessTwilioEventResponse_Failure_INTERNAL_ERROR ProcessTwilioEventResponse_Failure_Reason = 0
	ProcessTwilioEventResponse_Failure_UNKNOWN_EVENT  ProcessTwilioEventResponse_Failure_Reason = 1
)

var ProcessTwilioEventResponse_Failure_Reason_name = map[int32]string{
	0: "INTERNAL_ERROR",
	1: "UNKNOWN_EVENT",
}
var ProcessTwilioEventResponse_Failure_Reason_value = map[string]int32{
	"INTERNAL_ERROR": 0,
	"UNKNOWN_EVENT":  1,
}

type TwilioParams struct {
	CallSID            string                          `protobuf:"bytes,1,opt,name=call_sid,proto3" json:"call_sid,omitempty"`
	AccountSID         string                          `protobuf:"bytes,2,opt,name=account_sid,proto3" json:"account_sid,omitempty"`
	From               string                          `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                 string                          `protobuf:"bytes,4,opt,name=to_number,proto3" json:"to_number,omitempty"`
	CallStatus         TwilioParams_CallStatus         `protobuf:"varint,5,opt,name=call_status,proto3,enum=excomms.TwilioParams_CallStatus" json:"call_status,omitempty"`
	APIVersion         string                          `protobuf:"bytes,6,opt,name=api_version,proto3" json:"api_version,omitempty"`
	Direction          TwilioParams_Direction          `protobuf:"varint,7,opt,name=direction,proto3,enum=excomms.TwilioParams_Direction" json:"direction,omitempty"`
	CallDuration       uint32                          `protobuf:"varint,8,opt,name=call_duration,proto3" json:"call_duration,omitempty"`
	RecordingURL       string                          `protobuf:"bytes,9,opt,name=recording_url,proto3" json:"recording_url,omitempty"`
	RecordingSID       string                          `protobuf:"bytes,10,opt,name=recording_sid,proto3" json:"recording_sid,omitempty"`
	RecordingDuration  uint32                          `protobuf:"varint,11,opt,name=recording_duration,proto3" json:"recording_duration,omitempty"`
	Digits             string                          `protobuf:"bytes,12,opt,name=digits,proto3" json:"digits,omitempty"`
	MessageSID         string                          `protobuf:"bytes,13,opt,name=message_sid,proto3" json:"message_sid,omitempty"`
	SMSSID             string                          `protobuf:"bytes,14,opt,name=sms_sid,proto3" json:"sms_sid,omitempty"`
	Body               string                          `protobuf:"bytes,15,opt,name=body,proto3" json:"body,omitempty"`
	NumMedia           uint32                          `protobuf:"varint,16,opt,name=num_media,proto3" json:"num_media,omitempty"`
	MediaItems         []*TwilioParams_TwilioMediaItem `protobuf:"bytes,17,rep,name=media_items" json:"media_items,omitempty"`
	MessagingServiceID string                          `protobuf:"bytes,18,opt,name=messaging_service_id,proto3" json:"messaging_service_id,omitempty"`
	// these three parameters are only present in a twilio request
	// attempting to get a twiml document to execute on the queued caller's
	// end before the two parties are connected.
	QueueSID        string `protobuf:"bytes,19,opt,name=queue_sid,proto3" json:"queue_sid,omitempty"`
	QueueTime       uint32 `protobuf:"varint,20,opt,name=queue_time,proto3" json:"queue_time,omitempty"`
	DequeingCallSID string `protobuf:"bytes,21,opt,name=dequeuing_call_sid,proto3" json:"dequeuing_call_sid,omitempty"`
	// this parameter is only present for status callbacks from a dial twiml verb
	ParentCallSID string `protobuf:"bytes,22,opt,name=parent_call_sid,proto3" json:"parent_call_sid,omitempty"`
	// infrequently used parameters
	ForwardedFrom string `protobuf:"bytes,100,opt,name=forwarded_from,proto3" json:"forwarded_from,omitempty"`
	CallerName    string `protobuf:"bytes,101,opt,name=caller_name,proto3" json:"caller_name,omitempty"`
	FromCity      string `protobuf:"bytes,102,opt,name=from_city,proto3" json:"from_city,omitempty"`
	FromState     string `protobuf:"bytes,103,opt,name=from_state,proto3" json:"from_state,omitempty"`
	FromZip       string `protobuf:"bytes,104,opt,name=from_zip,proto3" json:"from_zip,omitempty"`
	FromCountry   string `protobuf:"bytes,105,opt,name=from_country,proto3" json:"from_country,omitempty"`
	ToCity        string `protobuf:"bytes,106,opt,name=to_city,proto3" json:"to_city,omitempty"`
	ToState       string `protobuf:"bytes,107,opt,name=to_state,proto3" json:"to_state,omitempty"`
	ToZip         string `protobuf:"bytes,108,opt,name=to_zip,proto3" json:"to_zip,omitempty"`
	ToCountry     string `protobuf:"bytes,109,opt,name=to_country,proto3" json:"to_country,omitempty"`
}

func (m *TwilioParams) Reset()      { *m = TwilioParams{} }
func (*TwilioParams) ProtoMessage() {}

func (m *TwilioParams) GetMediaItems() []*TwilioParams_TwilioMediaItem {
	if m != nil {
		return m.MediaItems
	}
	return nil
}

type TwilioParams_TwilioMediaItem struct {
	ContentType string `protobuf:"bytes,1,opt,name=content_type,proto3" json:"content_type,omitempty"`
	MediaURL    string `protobuf:"bytes,2,opt,name=media_url,proto3" json:"media_url,omitempty"`
}

func (m *TwilioParams_TwilioMediaItem) Reset()      { *m = TwilioParams_TwilioMediaItem{} }
func (*TwilioParams_TwilioMediaItem) ProtoMessage() {}

type PublishedExternalMessage struct {
	FromChannelID string                        `protobuf:"bytes,1,opt,name=from_channel_id,proto3" json:"from_channel_id,omitempty"`
	ToChannelID   string                        `protobuf:"bytes,2,opt,name=to_channel_id,proto3" json:"to_channel_id,omitempty"`
	Timestamp     uint64                        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          PublishedExternalMessage_Type `protobuf:"varint,4,opt,name=type,proto3,enum=excomms.PublishedExternalMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*PublishedExternalMessage_SMSItem
	//	*PublishedExternalMessage_CallEventItem
	Item isPublishedExternalMessage_Item `protobuf_oneof:"item"`
}

func (m *PublishedExternalMessage) Reset()      { *m = PublishedExternalMessage{} }
func (*PublishedExternalMessage) ProtoMessage() {}

type isPublishedExternalMessage_Item interface {
	isPublishedExternalMessage_Item()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PublishedExternalMessage_SMSItem struct {
	SMSItem *SMSItem `protobuf:"bytes,5,opt,name=sms_item,oneof"`
}
type PublishedExternalMessage_CallEventItem struct {
	CallEventItem *CallEventItem `protobuf:"bytes,6,opt,name=call_event_item,oneof"`
}

func (*PublishedExternalMessage_SMSItem) isPublishedExternalMessage_Item()       {}
func (*PublishedExternalMessage_CallEventItem) isPublishedExternalMessage_Item() {}

func (m *PublishedExternalMessage) GetItem() isPublishedExternalMessage_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PublishedExternalMessage) GetSMSItem() *SMSItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_SMSItem); ok {
		return x.SMSItem
	}
	return nil
}

func (m *PublishedExternalMessage) GetCallEventItem() *CallEventItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_CallEventItem); ok {
		return x.CallEventItem
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PublishedExternalMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _PublishedExternalMessage_OneofMarshaler, _PublishedExternalMessage_OneofUnmarshaler, []interface{}{
		(*PublishedExternalMessage_SMSItem)(nil),
		(*PublishedExternalMessage_CallEventItem)(nil),
	}
}

func _PublishedExternalMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PublishedExternalMessage)
	// item
	switch x := m.Item.(type) {
	case *PublishedExternalMessage_SMSItem:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMSItem); err != nil {
			return err
		}
	case *PublishedExternalMessage_CallEventItem:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallEventItem); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PublishedExternalMessage.Item has unexpected type %T", x)
	}
	return nil
}

func _PublishedExternalMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PublishedExternalMessage)
	switch tag {
	case 5: // item.sms_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_SMSItem{msg}
		return true, err
	case 6: // item.call_event_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CallEventItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_CallEventItem{msg}
		return true, err
	default:
		return false, nil
	}
}

type SMSItem struct {
	Text        string             `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Attachments []*MediaAttachment `protobuf:"bytes,2,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *SMSItem) Reset()      { *m = SMSItem{} }
func (*SMSItem) ProtoMessage() {}

func (m *SMSItem) GetAttachments() []*MediaAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type CallEventItem struct {
	Type              CallEventItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.CallEventItem_Type" json:"type,omitempty"`
	DurationInSeconds uint32             `protobuf:"varint,2,opt,name=duration_in_seconds,proto3" json:"duration_in_seconds,omitempty"`
	URL               string             `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *CallEventItem) Reset()      { *m = CallEventItem{} }
func (*CallEventItem) ProtoMessage() {}

type MediaAttachment struct {
	URL         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,proto3" json:"content_type,omitempty"`
}

func (m *MediaAttachment) Reset()      { *m = MediaAttachment{} }
func (*MediaAttachment) ProtoMessage() {}

// SendMessageRequest represents a request to send a message
// over an external channel.
type SendMessageRequest struct {
	Text          string      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FromChannelID string      `protobuf:"bytes,2,opt,name=from_channel_id,proto3" json:"from_channel_id,omitempty"`
	ToChannelID   string      `protobuf:"bytes,3,opt,name=to_channel_id,proto3" json:"to_channel_id,omitempty"`
	Channel       ChannelType `protobuf:"varint,4,opt,name=channel,proto3,enum=excomms.ChannelType" json:"channel,omitempty"`
}

func (m *SendMessageRequest) Reset()      { *m = SendMessageRequest{} }
func (*SendMessageRequest) ProtoMessage() {}

type SendMessageResponse struct {
	Result       SendMessageResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=excomms.SendMessageResponse_Result" json:"result,omitempty"`
	ErrorMessage string                     `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
}

func (m *SendMessageResponse) Reset()      { *m = SendMessageResponse{} }
func (*SendMessageResponse) ProtoMessage() {}

type InitiatePhoneCallRequest struct {
	CallInitiationType   InitiatePhoneCallRequest_CallInitiationType `protobuf:"varint,1,opt,name=call_initiation_type,proto3,enum=excomms.InitiatePhoneCallRequest_CallInitiationType" json:"call_initiation_type,omitempty"`
	FromPhoneNumber      string                                      `protobuf:"bytes,2,opt,name=from_phone_number,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber        string                                      `protobuf:"bytes,3,opt,name=to_phone_number,proto3" json:"to_phone_number,omitempty"`
	OrganizationEntityID string                                      `protobuf:"bytes,4,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
}

func (m *InitiatePhoneCallRequest) Reset()      { *m = InitiatePhoneCallRequest{} }
func (*InitiatePhoneCallRequest) ProtoMessage() {}

type InitiatePhoneCallResponse struct {
	Result       InitiatePhoneCallResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=excomms.InitiatePhoneCallResponse_Result" json:"result,omitempty"`
	ErrorMessage string                           `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	// phone_number returns the phone number which the caller can call
	// to connect the caller to the destination phone number in the request.
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
}

func (m *InitiatePhoneCallResponse) Reset()      { *m = InitiatePhoneCallResponse{} }
func (*InitiatePhoneCallResponse) ProtoMessage() {}

type AvailablePhoneNumber struct {
	FriendlyName string                  `protobuf:"bytes,1,opt,name=friendly_name,proto3" json:"friendly_name,omitempty"`
	PhoneNumber  string                  `protobuf:"bytes,2,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
	Capabilities []PhoneNumberCapability `protobuf:"varint,3,rep,name=capabilities,enum=excomms.PhoneNumberCapability" json:"capabilities,omitempty"`
}

func (m *AvailablePhoneNumber) Reset()      { *m = AvailablePhoneNumber{} }
func (*AvailablePhoneNumber) ProtoMessage() {}

type SearchAvailablePhoneNumbersRequest struct {
	AreaCode     string                  `protobuf:"bytes,1,opt,name=area_code,proto3" json:"area_code,omitempty"`
	Capabilities []PhoneNumberCapability `protobuf:"varint,2,rep,name=capabilities,enum=excomms.PhoneNumberCapability" json:"capabilities,omitempty"`
}

func (m *SearchAvailablePhoneNumbersRequest) Reset()      { *m = SearchAvailablePhoneNumbersRequest{} }
func (*SearchAvailablePhoneNumbersRequest) ProtoMessage() {}

type SearchAvailablePhoneNumbersResponse struct {
	PhoneNumbers []*AvailablePhoneNumber                    `protobuf:"bytes,1,rep,name=phone_numbers" json:"phone_numbers,omitempty"`
	Result       SearchAvailablePhoneNumbersResponse_Result `protobuf:"varint,2,opt,name=result,proto3,enum=excomms.SearchAvailablePhoneNumbersResponse_Result" json:"result,omitempty"`
	ErrorMessage string                                     `protobuf:"bytes,3,opt,name=error_message,proto3" json:"error_message,omitempty"`
}

func (m *SearchAvailablePhoneNumbersResponse) Reset()      { *m = SearchAvailablePhoneNumbersResponse{} }
func (*SearchAvailablePhoneNumbersResponse) ProtoMessage() {}

func (m *SearchAvailablePhoneNumbersResponse) GetPhoneNumbers() []*AvailablePhoneNumber {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

type ProvisionPhoneNumberRequest struct {
	ProvisionFor string `protobuf:"bytes,1,opt,name=provision_for,proto3" json:"provision_for,omitempty"`
	// Types that are valid to be assigned to Number:
	//	*ProvisionPhoneNumberRequest_PhoneNumber
	//	*ProvisionPhoneNumberRequest_AreaCode
	Number isProvisionPhoneNumberRequest_Number `protobuf_oneof:"number"`
}

func (m *ProvisionPhoneNumberRequest) Reset()      { *m = ProvisionPhoneNumberRequest{} }
func (*ProvisionPhoneNumberRequest) ProtoMessage() {}

type isProvisionPhoneNumberRequest_Number interface {
	isProvisionPhoneNumberRequest_Number()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProvisionPhoneNumberRequest_PhoneNumber struct {
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,proto3,oneof"`
}
type ProvisionPhoneNumberRequest_AreaCode struct {
	AreaCode string `protobuf:"bytes,3,opt,name=area_code,proto3,oneof"`
}

func (*ProvisionPhoneNumberRequest_PhoneNumber) isProvisionPhoneNumberRequest_Number() {}
func (*ProvisionPhoneNumberRequest_AreaCode) isProvisionPhoneNumberRequest_Number()    {}

func (m *ProvisionPhoneNumberRequest) GetNumber() isProvisionPhoneNumberRequest_Number {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *ProvisionPhoneNumberRequest) GetPhoneNumber() string {
	if x, ok := m.GetNumber().(*ProvisionPhoneNumberRequest_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return ""
}

func (m *ProvisionPhoneNumberRequest) GetAreaCode() string {
	if x, ok := m.GetNumber().(*ProvisionPhoneNumberRequest_AreaCode); ok {
		return x.AreaCode
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProvisionPhoneNumberRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _ProvisionPhoneNumberRequest_OneofMarshaler, _ProvisionPhoneNumberRequest_OneofUnmarshaler, []interface{}{
		(*ProvisionPhoneNumberRequest_PhoneNumber)(nil),
		(*ProvisionPhoneNumberRequest_AreaCode)(nil),
	}
}

func _ProvisionPhoneNumberRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProvisionPhoneNumberRequest)
	// number
	switch x := m.Number.(type) {
	case *ProvisionPhoneNumberRequest_PhoneNumber:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PhoneNumber)
	case *ProvisionPhoneNumberRequest_AreaCode:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AreaCode)
	case nil:
	default:
		return fmt.Errorf("ProvisionPhoneNumberRequest.Number has unexpected type %T", x)
	}
	return nil
}

func _ProvisionPhoneNumberRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProvisionPhoneNumberRequest)
	switch tag {
	case 2: // number.phone_number
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &ProvisionPhoneNumberRequest_PhoneNumber{x}
		return true, err
	case 3: // number.area_code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &ProvisionPhoneNumberRequest_AreaCode{x}
		return true, err
	default:
		return false, nil
	}
}

type ProvisionPhoneNumberResponse struct {
	Result       ProvisionPhoneNumberResponse_Result `protobuf:"varint,1,opt,name=result,proto3,enum=excomms.ProvisionPhoneNumberResponse_Result" json:"result,omitempty"`
	ErrorMessage string                              `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	PhoneNumber  string                              `protobuf:"bytes,3,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
}

func (m *ProvisionPhoneNumberResponse) Reset()      { *m = ProvisionPhoneNumberResponse{} }
func (*ProvisionPhoneNumberResponse) ProtoMessage() {}

type ProcessTwilioEventRequest struct {
	Params *TwilioParams `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
	Event  TwilioEvent   `protobuf:"varint,2,opt,name=event,proto3,enum=excomms.TwilioEvent" json:"event,omitempty"`
}

func (m *ProcessTwilioEventRequest) Reset()      { *m = ProcessTwilioEventRequest{} }
func (*ProcessTwilioEventRequest) ProtoMessage() {}

func (m *ProcessTwilioEventRequest) GetParams() *TwilioParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type ProcessTwilioEventResponse struct {
	Twiml   string                              `protobuf:"bytes,1,opt,name=twiml,proto3" json:"twiml,omitempty"`
	Success bool                                `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Failure *ProcessTwilioEventResponse_Failure `protobuf:"bytes,4,opt,name=failure" json:"failure,omitempty"`
}

func (m *ProcessTwilioEventResponse) Reset()      { *m = ProcessTwilioEventResponse{} }
func (*ProcessTwilioEventResponse) ProtoMessage() {}

func (m *ProcessTwilioEventResponse) GetFailure() *ProcessTwilioEventResponse_Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type ProcessTwilioEventResponse_Failure struct {
	Message string                                    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Reason  ProcessTwilioEventResponse_Failure_Reason `protobuf:"varint,2,opt,name=reason,proto3,enum=excomms.ProcessTwilioEventResponse_Failure_Reason" json:"reason,omitempty"`
}

func (m *ProcessTwilioEventResponse_Failure) Reset()      { *m = ProcessTwilioEventResponse_Failure{} }
func (*ProcessTwilioEventResponse_Failure) ProtoMessage() {}

func init() {
	proto.RegisterType((*TwilioParams)(nil), "excomms.TwilioParams")
	proto.RegisterType((*TwilioParams_TwilioMediaItem)(nil), "excomms.TwilioParams.TwilioMediaItem")
	proto.RegisterType((*PublishedExternalMessage)(nil), "excomms.PublishedExternalMessage")
	proto.RegisterType((*SMSItem)(nil), "excomms.SMSItem")
	proto.RegisterType((*CallEventItem)(nil), "excomms.CallEventItem")
	proto.RegisterType((*MediaAttachment)(nil), "excomms.MediaAttachment")
	proto.RegisterType((*SendMessageRequest)(nil), "excomms.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "excomms.SendMessageResponse")
	proto.RegisterType((*InitiatePhoneCallRequest)(nil), "excomms.InitiatePhoneCallRequest")
	proto.RegisterType((*InitiatePhoneCallResponse)(nil), "excomms.InitiatePhoneCallResponse")
	proto.RegisterType((*AvailablePhoneNumber)(nil), "excomms.AvailablePhoneNumber")
	proto.RegisterType((*SearchAvailablePhoneNumbersRequest)(nil), "excomms.SearchAvailablePhoneNumbersRequest")
	proto.RegisterType((*SearchAvailablePhoneNumbersResponse)(nil), "excomms.SearchAvailablePhoneNumbersResponse")
	proto.RegisterType((*ProvisionPhoneNumberRequest)(nil), "excomms.ProvisionPhoneNumberRequest")
	proto.RegisterType((*ProvisionPhoneNumberResponse)(nil), "excomms.ProvisionPhoneNumberResponse")
	proto.RegisterType((*ProcessTwilioEventRequest)(nil), "excomms.ProcessTwilioEventRequest")
	proto.RegisterType((*ProcessTwilioEventResponse)(nil), "excomms.ProcessTwilioEventResponse")
	proto.RegisterType((*ProcessTwilioEventResponse_Failure)(nil), "excomms.ProcessTwilioEventResponse.Failure")
	proto.RegisterEnum("excomms.ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterEnum("excomms.TwilioEvent", TwilioEvent_name, TwilioEvent_value)
	proto.RegisterEnum("excomms.PhoneNumberCapability", PhoneNumberCapability_name, PhoneNumberCapability_value)
	proto.RegisterEnum("excomms.TwilioParams_CallStatus", TwilioParams_CallStatus_name, TwilioParams_CallStatus_value)
	proto.RegisterEnum("excomms.TwilioParams_Direction", TwilioParams_Direction_name, TwilioParams_Direction_value)
	proto.RegisterEnum("excomms.PublishedExternalMessage_Type", PublishedExternalMessage_Type_name, PublishedExternalMessage_Type_value)
	proto.RegisterEnum("excomms.CallEventItem_Type", CallEventItem_Type_name, CallEventItem_Type_value)
	proto.RegisterEnum("excomms.SendMessageResponse_Result", SendMessageResponse_Result_name, SendMessageResponse_Result_value)
	proto.RegisterEnum("excomms.InitiatePhoneCallRequest_CallInitiationType", InitiatePhoneCallRequest_CallInitiationType_name, InitiatePhoneCallRequest_CallInitiationType_value)
	proto.RegisterEnum("excomms.InitiatePhoneCallResponse_Result", InitiatePhoneCallResponse_Result_name, InitiatePhoneCallResponse_Result_value)
	proto.RegisterEnum("excomms.SearchAvailablePhoneNumbersResponse_Result", SearchAvailablePhoneNumbersResponse_Result_name, SearchAvailablePhoneNumbersResponse_Result_value)
	proto.RegisterEnum("excomms.ProvisionPhoneNumberResponse_Result", ProvisionPhoneNumberResponse_Result_name, ProvisionPhoneNumberResponse_Result_value)
	proto.RegisterEnum("excomms.ProcessTwilioEventResponse_Failure_Reason", ProcessTwilioEventResponse_Failure_Reason_name, ProcessTwilioEventResponse_Failure_Reason_value)
}
func (x ChannelType) String() string {
	s, ok := ChannelType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TwilioEvent) String() string {
	s, ok := TwilioEvent_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PhoneNumberCapability) String() string {
	s, ok := PhoneNumberCapability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TwilioParams_CallStatus) String() string {
	s, ok := TwilioParams_CallStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TwilioParams_Direction) String() string {
	s, ok := TwilioParams_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PublishedExternalMessage_Type) String() string {
	s, ok := PublishedExternalMessage_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CallEventItem_Type) String() string {
	s, ok := CallEventItem_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SendMessageResponse_Result) String() string {
	s, ok := SendMessageResponse_Result_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InitiatePhoneCallRequest_CallInitiationType) String() string {
	s, ok := InitiatePhoneCallRequest_CallInitiationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InitiatePhoneCallResponse_Result) String() string {
	s, ok := InitiatePhoneCallResponse_Result_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SearchAvailablePhoneNumbersResponse_Result) String() string {
	s, ok := SearchAvailablePhoneNumbersResponse_Result_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ProvisionPhoneNumberResponse_Result) String() string {
	s, ok := ProvisionPhoneNumberResponse_Result_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ProcessTwilioEventResponse_Failure_Reason) String() string {
	s, ok := ProcessTwilioEventResponse_Failure_Reason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TwilioParams) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwilioParams)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CallSID != that1.CallSID {
		return false
	}
	if this.AccountSID != that1.AccountSID {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.CallStatus != that1.CallStatus {
		return false
	}
	if this.APIVersion != that1.APIVersion {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	if this.CallDuration != that1.CallDuration {
		return false
	}
	if this.RecordingURL != that1.RecordingURL {
		return false
	}
	if this.RecordingSID != that1.RecordingSID {
		return false
	}
	if this.RecordingDuration != that1.RecordingDuration {
		return false
	}
	if this.Digits != that1.Digits {
		return false
	}
	if this.MessageSID != that1.MessageSID {
		return false
	}
	if this.SMSSID != that1.SMSSID {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.NumMedia != that1.NumMedia {
		return false
	}
	if len(this.MediaItems) != len(that1.MediaItems) {
		return false
	}
	for i := range this.MediaItems {
		if !this.MediaItems[i].Equal(that1.MediaItems[i]) {
			return false
		}
	}
	if this.MessagingServiceID != that1.MessagingServiceID {
		return false
	}
	if this.QueueSID != that1.QueueSID {
		return false
	}
	if this.QueueTime != that1.QueueTime {
		return false
	}
	if this.DequeingCallSID != that1.DequeingCallSID {
		return false
	}
	if this.ParentCallSID != that1.ParentCallSID {
		return false
	}
	if this.ForwardedFrom != that1.ForwardedFrom {
		return false
	}
	if this.CallerName != that1.CallerName {
		return false
	}
	if this.FromCity != that1.FromCity {
		return false
	}
	if this.FromState != that1.FromState {
		return false
	}
	if this.FromZip != that1.FromZip {
		return false
	}
	if this.FromCountry != that1.FromCountry {
		return false
	}
	if this.ToCity != that1.ToCity {
		return false
	}
	if this.ToState != that1.ToState {
		return false
	}
	if this.ToZip != that1.ToZip {
		return false
	}
	if this.ToCountry != that1.ToCountry {
		return false
	}
	return true
}
func (this *TwilioParams_TwilioMediaItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TwilioParams_TwilioMediaItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.MediaURL != that1.MediaURL {
		return false
	}
	return true
}
func (this *PublishedExternalMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FromChannelID != that1.FromChannelID {
		return false
	}
	if this.ToChannelID != that1.ToChannelID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Item == nil {
		if this.Item != nil {
			return false
		}
	} else if this.Item == nil {
		return false
	} else if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_SMSItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_SMSItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMSItem.Equal(that1.SMSItem) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_CallEventItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_CallEventItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CallEventItem.Equal(that1.CallEventItem) {
		return false
	}
	return true
}
func (this *SMSItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *CallEventItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CallEventItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DurationInSeconds != that1.DurationInSeconds {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *MediaAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MediaAttachment)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	return true
}
func (this *SendMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.FromChannelID != that1.FromChannelID {
		return false
	}
	if this.ToChannelID != that1.ToChannelID {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	return true
}
func (this *SendMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *InitiatePhoneCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiatePhoneCallRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CallInitiationType != that1.CallInitiationType {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	return true
}
func (this *InitiatePhoneCallResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiatePhoneCallResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *AvailablePhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AvailablePhoneNumber)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FriendlyName != that1.FriendlyName {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if this.Capabilities[i] != that1.Capabilities[i] {
			return false
		}
	}
	return true
}
func (this *SearchAvailablePhoneNumbersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAvailablePhoneNumbersRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AreaCode != that1.AreaCode {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if this.Capabilities[i] != that1.Capabilities[i] {
			return false
		}
	}
	return true
}
func (this *SearchAvailablePhoneNumbersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAvailablePhoneNumbersResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.PhoneNumbers) != len(that1.PhoneNumbers) {
		return false
	}
	for i := range this.PhoneNumbers {
		if !this.PhoneNumbers[i].Equal(that1.PhoneNumbers[i]) {
			return false
		}
	}
	if this.Result != that1.Result {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProvisionFor != that1.ProvisionFor {
		return false
	}
	if that1.Number == nil {
		if this.Number != nil {
			return false
		}
	} else if this.Number == nil {
		return false
	} else if !this.Number.Equal(that1.Number) {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest_PhoneNumber)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest_AreaCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest_AreaCode)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AreaCode != that1.AreaCode {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.ErrorMessage != that1.ErrorMessage {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *ProcessTwilioEventRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProcessTwilioEventRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(that1.Params) {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	return true
}
func (this *ProcessTwilioEventResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProcessTwilioEventResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Twiml != that1.Twiml {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *ProcessTwilioEventResponse_Failure) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProcessTwilioEventResponse_Failure)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *TwilioParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 36)
	s = append(s, "&excomms.TwilioParams{")
	s = append(s, "CallSID: "+fmt.Sprintf("%#v", this.CallSID)+",\n")
	s = append(s, "AccountSID: "+fmt.Sprintf("%#v", this.AccountSID)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "CallStatus: "+fmt.Sprintf("%#v", this.CallStatus)+",\n")
	s = append(s, "APIVersion: "+fmt.Sprintf("%#v", this.APIVersion)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "CallDuration: "+fmt.Sprintf("%#v", this.CallDuration)+",\n")
	s = append(s, "RecordingURL: "+fmt.Sprintf("%#v", this.RecordingURL)+",\n")
	s = append(s, "RecordingSID: "+fmt.Sprintf("%#v", this.RecordingSID)+",\n")
	s = append(s, "RecordingDuration: "+fmt.Sprintf("%#v", this.RecordingDuration)+",\n")
	s = append(s, "Digits: "+fmt.Sprintf("%#v", this.Digits)+",\n")
	s = append(s, "MessageSID: "+fmt.Sprintf("%#v", this.MessageSID)+",\n")
	s = append(s, "SMSSID: "+fmt.Sprintf("%#v", this.SMSSID)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "NumMedia: "+fmt.Sprintf("%#v", this.NumMedia)+",\n")
	if this.MediaItems != nil {
		s = append(s, "MediaItems: "+fmt.Sprintf("%#v", this.MediaItems)+",\n")
	}
	s = append(s, "MessagingServiceID: "+fmt.Sprintf("%#v", this.MessagingServiceID)+",\n")
	s = append(s, "QueueSID: "+fmt.Sprintf("%#v", this.QueueSID)+",\n")
	s = append(s, "QueueTime: "+fmt.Sprintf("%#v", this.QueueTime)+",\n")
	s = append(s, "DequeingCallSID: "+fmt.Sprintf("%#v", this.DequeingCallSID)+",\n")
	s = append(s, "ParentCallSID: "+fmt.Sprintf("%#v", this.ParentCallSID)+",\n")
	s = append(s, "ForwardedFrom: "+fmt.Sprintf("%#v", this.ForwardedFrom)+",\n")
	s = append(s, "CallerName: "+fmt.Sprintf("%#v", this.CallerName)+",\n")
	s = append(s, "FromCity: "+fmt.Sprintf("%#v", this.FromCity)+",\n")
	s = append(s, "FromState: "+fmt.Sprintf("%#v", this.FromState)+",\n")
	s = append(s, "FromZip: "+fmt.Sprintf("%#v", this.FromZip)+",\n")
	s = append(s, "FromCountry: "+fmt.Sprintf("%#v", this.FromCountry)+",\n")
	s = append(s, "ToCity: "+fmt.Sprintf("%#v", this.ToCity)+",\n")
	s = append(s, "ToState: "+fmt.Sprintf("%#v", this.ToState)+",\n")
	s = append(s, "ToZip: "+fmt.Sprintf("%#v", this.ToZip)+",\n")
	s = append(s, "ToCountry: "+fmt.Sprintf("%#v", this.ToCountry)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TwilioParams_TwilioMediaItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.TwilioParams_TwilioMediaItem{")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "MediaURL: "+fmt.Sprintf("%#v", this.MediaURL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishedExternalMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&excomms.PublishedExternalMessage{")
	s = append(s, "FromChannelID: "+fmt.Sprintf("%#v", this.FromChannelID)+",\n")
	s = append(s, "ToChannelID: "+fmt.Sprintf("%#v", this.ToChannelID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishedExternalMessage_SMSItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_SMSItem{` +
		`SMSItem:` + fmt.Sprintf("%#v", this.SMSItem) + `}`}, ", ")
	return s
}
func (this *PublishedExternalMessage_CallEventItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_CallEventItem{` +
		`CallEventItem:` + fmt.Sprintf("%#v", this.CallEventItem) + `}`}, ", ")
	return s
}
func (this *SMSItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SMSItem{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallEventItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.CallEventItem{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DurationInSeconds: "+fmt.Sprintf("%#v", this.DurationInSeconds)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.MediaAttachment{")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.SendMessageRequest{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "FromChannelID: "+fmt.Sprintf("%#v", this.FromChannelID)+",\n")
	s = append(s, "ToChannelID: "+fmt.Sprintf("%#v", this.ToChannelID)+",\n")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SendMessageResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiatePhoneCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.InitiatePhoneCallRequest{")
	s = append(s, "CallInitiationType: "+fmt.Sprintf("%#v", this.CallInitiationType)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiatePhoneCallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.InitiatePhoneCallResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AvailablePhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.AvailablePhoneNumber{")
	s = append(s, "FriendlyName: "+fmt.Sprintf("%#v", this.FriendlyName)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAvailablePhoneNumbersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SearchAvailablePhoneNumbersRequest{")
	s = append(s, "AreaCode: "+fmt.Sprintf("%#v", this.AreaCode)+",\n")
	s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAvailablePhoneNumbersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.SearchAvailablePhoneNumbersResponse{")
	if this.PhoneNumbers != nil {
		s = append(s, "PhoneNumbers: "+fmt.Sprintf("%#v", this.PhoneNumbers)+",\n")
	}
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionPhoneNumberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProvisionPhoneNumberRequest{")
	s = append(s, "ProvisionFor: "+fmt.Sprintf("%#v", this.ProvisionFor)+",\n")
	if this.Number != nil {
		s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.ProvisionPhoneNumberRequest_PhoneNumber{` +
		`PhoneNumber:` + fmt.Sprintf("%#v", this.PhoneNumber) + `}`}, ", ")
	return s
}
func (this *ProvisionPhoneNumberRequest_AreaCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.ProvisionPhoneNumberRequest_AreaCode{` +
		`AreaCode:` + fmt.Sprintf("%#v", this.AreaCode) + `}`}, ", ")
	return s
}
func (this *ProvisionPhoneNumberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProvisionPhoneNumberResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "ErrorMessage: "+fmt.Sprintf("%#v", this.ErrorMessage)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTwilioEventRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.ProcessTwilioEventRequest{")
	if this.Params != nil {
		s = append(s, "Params: "+fmt.Sprintf("%#v", this.Params)+",\n")
	}
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTwilioEventResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProcessTwilioEventResponse{")
	s = append(s, "Twiml: "+fmt.Sprintf("%#v", this.Twiml)+",\n")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTwilioEventResponse_Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.ProcessTwilioEventResponse_Failure{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ExComms service

type ExCommsClient interface {
	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	SearchAvailablePhoneNumbers(ctx context.Context, in *SearchAvailablePhoneNumbersRequest, opts ...grpc.CallOption) (*SearchAvailablePhoneNumbersResponse, error)
	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	ProvisionPhoneNumber(ctx context.Context, in *ProvisionPhoneNumberRequest, opts ...grpc.CallOption) (*ProvisionPhoneNumberResponse, error)
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error)
	// ProcessTwilio processes the incoming twilio event and its corresponding parameters
	ProcessTwilioEvent(ctx context.Context, in *ProcessTwilioEventRequest, opts ...grpc.CallOption) (*ProcessTwilioEventResponse, error)
}

type exCommsClient struct {
	cc *grpc.ClientConn
}

func NewExCommsClient(cc *grpc.ClientConn) ExCommsClient {
	return &exCommsClient{cc}
}

func (c *exCommsClient) SearchAvailablePhoneNumbers(ctx context.Context, in *SearchAvailablePhoneNumbersRequest, opts ...grpc.CallOption) (*SearchAvailablePhoneNumbersResponse, error) {
	out := new(SearchAvailablePhoneNumbersResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/SearchAvailablePhoneNumbers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) ProvisionPhoneNumber(ctx context.Context, in *ProvisionPhoneNumberRequest, opts ...grpc.CallOption) (*ProvisionPhoneNumberResponse, error) {
	out := new(ProvisionPhoneNumberResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/ProvisionPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error) {
	out := new(InitiatePhoneCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/InitiatePhoneCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) ProcessTwilioEvent(ctx context.Context, in *ProcessTwilioEventRequest, opts ...grpc.CallOption) (*ProcessTwilioEventResponse, error) {
	out := new(ProcessTwilioEventResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/ProcessTwilioEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExComms service

type ExCommsServer interface {
	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	SearchAvailablePhoneNumbers(context.Context, *SearchAvailablePhoneNumbersRequest) (*SearchAvailablePhoneNumbersResponse, error)
	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	ProvisionPhoneNumber(context.Context, *ProvisionPhoneNumberRequest) (*ProvisionPhoneNumberResponse, error)
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(context.Context, *InitiatePhoneCallRequest) (*InitiatePhoneCallResponse, error)
	// ProcessTwilio processes the incoming twilio event and its corresponding parameters
	ProcessTwilioEvent(context.Context, *ProcessTwilioEventRequest) (*ProcessTwilioEventResponse, error)
}

func RegisterExCommsServer(s *grpc.Server, srv ExCommsServer) {
	s.RegisterService(&_ExComms_serviceDesc, srv)
}

func _ExComms_SearchAvailablePhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SearchAvailablePhoneNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).SearchAvailablePhoneNumbers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_ProvisionPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProvisionPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).ProvisionPhoneNumber(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_InitiatePhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InitiatePhoneCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).InitiatePhoneCall(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_ProcessTwilioEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProcessTwilioEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).ProcessTwilioEvent(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ExComms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "excomms.ExComms",
	HandlerType: (*ExCommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAvailablePhoneNumbers",
			Handler:    _ExComms_SearchAvailablePhoneNumbers_Handler,
		},
		{
			MethodName: "ProvisionPhoneNumber",
			Handler:    _ExComms_ProvisionPhoneNumber_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ExComms_SendMessage_Handler,
		},
		{
			MethodName: "InitiatePhoneCall",
			Handler:    _ExComms_InitiatePhoneCall_Handler,
		},
		{
			MethodName: "ProcessTwilioEvent",
			Handler:    _ExComms_ProcessTwilioEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *TwilioParams) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TwilioParams) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CallSID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CallSID)))
		i += copy(data[i:], m.CallSID)
	}
	if len(m.AccountSID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountSID)))
		i += copy(data[i:], m.AccountSID)
	}
	if len(m.From) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.From)))
		i += copy(data[i:], m.From)
	}
	if len(m.To) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.To)))
		i += copy(data[i:], m.To)
	}
	if m.CallStatus != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallStatus))
	}
	if len(m.APIVersion) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.APIVersion)))
		i += copy(data[i:], m.APIVersion)
	}
	if m.Direction != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.Direction))
	}
	if m.CallDuration != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallDuration))
	}
	if len(m.RecordingURL) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.RecordingURL)))
		i += copy(data[i:], m.RecordingURL)
	}
	if len(m.RecordingSID) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.RecordingSID)))
		i += copy(data[i:], m.RecordingSID)
	}
	if m.RecordingDuration != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintSvc(data, i, uint64(m.RecordingDuration))
	}
	if len(m.Digits) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Digits)))
		i += copy(data[i:], m.Digits)
	}
	if len(m.MessageSID) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MessageSID)))
		i += copy(data[i:], m.MessageSID)
	}
	if len(m.SMSSID) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SMSSID)))
		i += copy(data[i:], m.SMSSID)
	}
	if len(m.Body) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if m.NumMedia != 0 {
		data[i] = 0x80
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(m.NumMedia))
	}
	if len(m.MediaItems) > 0 {
		for _, msg := range m.MediaItems {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MessagingServiceID) > 0 {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MessagingServiceID)))
		i += copy(data[i:], m.MessagingServiceID)
	}
	if len(m.QueueSID) > 0 {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.QueueSID)))
		i += copy(data[i:], m.QueueSID)
	}
	if m.QueueTime != 0 {
		data[i] = 0xa0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(m.QueueTime))
	}
	if len(m.DequeingCallSID) > 0 {
		data[i] = 0xaa
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DequeingCallSID)))
		i += copy(data[i:], m.DequeingCallSID)
	}
	if len(m.ParentCallSID) > 0 {
		data[i] = 0xb2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ParentCallSID)))
		i += copy(data[i:], m.ParentCallSID)
	}
	if len(m.ForwardedFrom) > 0 {
		data[i] = 0xa2
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ForwardedFrom)))
		i += copy(data[i:], m.ForwardedFrom)
	}
	if len(m.CallerName) > 0 {
		data[i] = 0xaa
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CallerName)))
		i += copy(data[i:], m.CallerName)
	}
	if len(m.FromCity) > 0 {
		data[i] = 0xb2
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromCity)))
		i += copy(data[i:], m.FromCity)
	}
	if len(m.FromState) > 0 {
		data[i] = 0xba
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromState)))
		i += copy(data[i:], m.FromState)
	}
	if len(m.FromZip) > 0 {
		data[i] = 0xc2
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromZip)))
		i += copy(data[i:], m.FromZip)
	}
	if len(m.FromCountry) > 0 {
		data[i] = 0xca
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromCountry)))
		i += copy(data[i:], m.FromCountry)
	}
	if len(m.ToCity) > 0 {
		data[i] = 0xd2
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToCity)))
		i += copy(data[i:], m.ToCity)
	}
	if len(m.ToState) > 0 {
		data[i] = 0xda
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToState)))
		i += copy(data[i:], m.ToState)
	}
	if len(m.ToZip) > 0 {
		data[i] = 0xe2
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToZip)))
		i += copy(data[i:], m.ToZip)
	}
	if len(m.ToCountry) > 0 {
		data[i] = 0xea
		i++
		data[i] = 0x6
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToCountry)))
		i += copy(data[i:], m.ToCountry)
	}
	return i, nil
}

func (m *TwilioParams_TwilioMediaItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TwilioParams_TwilioMediaItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContentType) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ContentType)))
		i += copy(data[i:], m.ContentType)
	}
	if len(m.MediaURL) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaURL)))
		i += copy(data[i:], m.MediaURL)
	}
	return i, nil
}

func (m *PublishedExternalMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PublishedExternalMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromChannelID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromChannelID)))
		i += copy(data[i:], m.FromChannelID)
	}
	if len(m.ToChannelID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToChannelID)))
		i += copy(data[i:], m.ToChannelID)
	}
	if m.Timestamp != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Timestamp))
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.Item != nil {
		nn1, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *PublishedExternalMessage_SMSItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMSItem != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(m.SMSItem.Size()))
		n2, err := m.SMSItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PublishedExternalMessage_CallEventItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CallEventItem != nil {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallEventItem.Size()))
		n3, err := m.CallEventItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *SMSItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CallEventItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CallEventItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationInSeconds))
	}
	if len(m.URL) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	return i, nil
}

func (m *MediaAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MediaAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	if len(m.ContentType) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ContentType)))
		i += copy(data[i:], m.ContentType)
	}
	return i, nil
}

func (m *SendMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SendMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.FromChannelID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromChannelID)))
		i += copy(data[i:], m.FromChannelID)
	}
	if len(m.ToChannelID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToChannelID)))
		i += copy(data[i:], m.ToChannelID)
	}
	if m.Channel != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *SendMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SendMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Result))
	}
	if len(m.ErrorMessage) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ErrorMessage)))
		i += copy(data[i:], m.ErrorMessage)
	}
	return i, nil
}

func (m *InitiatePhoneCallRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiatePhoneCallRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallInitiationType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallInitiationType))
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	return i, nil
}

func (m *InitiatePhoneCallResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiatePhoneCallResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Result))
	}
	if len(m.ErrorMessage) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ErrorMessage)))
		i += copy(data[i:], m.ErrorMessage)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *AvailablePhoneNumber) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AvailablePhoneNumber) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendlyName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FriendlyName)))
		i += copy(data[i:], m.FriendlyName)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.Capabilities) > 0 {
		for _, num := range m.Capabilities {
			data[i] = 0x18
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SearchAvailablePhoneNumbersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAvailablePhoneNumbersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AreaCode) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AreaCode)))
		i += copy(data[i:], m.AreaCode)
	}
	if len(m.Capabilities) > 0 {
		for _, num := range m.Capabilities {
			data[i] = 0x10
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SearchAvailablePhoneNumbersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAvailablePhoneNumbersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, msg := range m.PhoneNumbers {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Result))
	}
	if len(m.ErrorMessage) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ErrorMessage)))
		i += copy(data[i:], m.ErrorMessage)
	}
	return i, nil
}

func (m *ProvisionPhoneNumberRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionPhoneNumberRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProvisionFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProvisionFor)))
		i += copy(data[i:], m.ProvisionFor)
	}
	if m.Number != nil {
		nn4, err := m.Number.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *ProvisionPhoneNumberRequest_PhoneNumber) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
	i += copy(data[i:], m.PhoneNumber)
	return i, nil
}
func (m *ProvisionPhoneNumberRequest_AreaCode) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.AreaCode)))
	i += copy(data[i:], m.AreaCode)
	return i, nil
}
func (m *ProvisionPhoneNumberResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionPhoneNumberResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Result))
	}
	if len(m.ErrorMessage) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ErrorMessage)))
		i += copy(data[i:], m.ErrorMessage)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *ProcessTwilioEventRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProcessTwilioEventRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Params.Size()))
		n5, err := m.Params.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Event != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Event))
	}
	return i, nil
}

func (m *ProcessTwilioEventResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProcessTwilioEventResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Twiml) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Twiml)))
		i += copy(data[i:], m.Twiml)
	}
	if m.Success {
		data[i] = 0x18
		i++
		if m.Success {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Failure != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.Failure.Size()))
		n6, err := m.Failure.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ProcessTwilioEventResponse_Failure) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProcessTwilioEventResponse_Failure) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Message)))
		i += copy(data[i:], m.Message)
	}
	if m.Reason != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Reason))
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *TwilioParams) Size() (n int) {
	var l int
	_ = l
	l = len(m.CallSID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountSID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.CallStatus != 0 {
		n += 1 + sovSvc(uint64(m.CallStatus))
	}
	l = len(m.APIVersion)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovSvc(uint64(m.Direction))
	}
	if m.CallDuration != 0 {
		n += 1 + sovSvc(uint64(m.CallDuration))
	}
	l = len(m.RecordingURL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RecordingSID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.RecordingDuration != 0 {
		n += 1 + sovSvc(uint64(m.RecordingDuration))
	}
	l = len(m.Digits)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MessageSID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SMSSID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.NumMedia != 0 {
		n += 2 + sovSvc(uint64(m.NumMedia))
	}
	if len(m.MediaItems) > 0 {
		for _, e := range m.MediaItems {
			l = e.Size()
			n += 2 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.MessagingServiceID)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.QueueSID)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	if m.QueueTime != 0 {
		n += 2 + sovSvc(uint64(m.QueueTime))
	}
	l = len(m.DequeingCallSID)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.ParentCallSID)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.ForwardedFrom)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.CallerName)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.FromCity)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.FromState)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.FromZip)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.FromCountry)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.ToCity)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.ToState)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.ToZip)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	l = len(m.ToCountry)
	if l > 0 {
		n += 2 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TwilioParams_TwilioMediaItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaURL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PublishedExternalMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.FromChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSvc(uint64(m.Timestamp))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	return n
}

func (m *PublishedExternalMessage_SMSItem) Size() (n int) {
	var l int
	_ = l
	if m.SMSItem != nil {
		l = m.SMSItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *PublishedExternalMessage_CallEventItem) Size() (n int) {
	var l int
	_ = l
	if m.CallEventItem != nil {
		l = m.CallEventItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SMSItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CallEventItem) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		n += 1 + sovSvc(uint64(m.DurationInSeconds))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MediaAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SendMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Channel != 0 {
		n += 1 + sovSvc(uint64(m.Channel))
	}
	return n
}

func (m *SendMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovSvc(uint64(m.Result))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *InitiatePhoneCallRequest) Size() (n int) {
	var l int
	_ = l
	if m.CallInitiationType != 0 {
		n += 1 + sovSvc(uint64(m.CallInitiationType))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *InitiatePhoneCallResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovSvc(uint64(m.Result))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AvailablePhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.FriendlyName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *SearchAvailablePhoneNumbersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AreaCode)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *SearchAvailablePhoneNumbersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, e := range m.PhoneNumbers {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Result != 0 {
		n += 1 + sovSvc(uint64(m.Result))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProvisionPhoneNumberRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProvisionFor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Number != nil {
		n += m.Number.Size()
	}
	return n
}

func (m *ProvisionPhoneNumberRequest_PhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProvisionPhoneNumberRequest_AreaCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.AreaCode)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProvisionPhoneNumberResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovSvc(uint64(m.Result))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProcessTwilioEventRequest) Size() (n int) {
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovSvc(uint64(m.Event))
	}
	return n
}

func (m *ProcessTwilioEventResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Twiml)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Success {
		n += 2
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProcessTwilioEventResponse_Failure) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovSvc(uint64(m.Reason))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TwilioParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwilioParams{`,
		`CallSID:` + fmt.Sprintf("%v", this.CallSID) + `,`,
		`AccountSID:` + fmt.Sprintf("%v", this.AccountSID) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`CallStatus:` + fmt.Sprintf("%v", this.CallStatus) + `,`,
		`APIVersion:` + fmt.Sprintf("%v", this.APIVersion) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`CallDuration:` + fmt.Sprintf("%v", this.CallDuration) + `,`,
		`RecordingURL:` + fmt.Sprintf("%v", this.RecordingURL) + `,`,
		`RecordingSID:` + fmt.Sprintf("%v", this.RecordingSID) + `,`,
		`RecordingDuration:` + fmt.Sprintf("%v", this.RecordingDuration) + `,`,
		`Digits:` + fmt.Sprintf("%v", this.Digits) + `,`,
		`MessageSID:` + fmt.Sprintf("%v", this.MessageSID) + `,`,
		`SMSSID:` + fmt.Sprintf("%v", this.SMSSID) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`NumMedia:` + fmt.Sprintf("%v", this.NumMedia) + `,`,
		`MediaItems:` + strings.Replace(fmt.Sprintf("%v", this.MediaItems), "TwilioParams_TwilioMediaItem", "TwilioParams_TwilioMediaItem", 1) + `,`,
		`MessagingServiceID:` + fmt.Sprintf("%v", this.MessagingServiceID) + `,`,
		`QueueSID:` + fmt.Sprintf("%v", this.QueueSID) + `,`,
		`QueueTime:` + fmt.Sprintf("%v", this.QueueTime) + `,`,
		`DequeingCallSID:` + fmt.Sprintf("%v", this.DequeingCallSID) + `,`,
		`ParentCallSID:` + fmt.Sprintf("%v", this.ParentCallSID) + `,`,
		`ForwardedFrom:` + fmt.Sprintf("%v", this.ForwardedFrom) + `,`,
		`CallerName:` + fmt.Sprintf("%v", this.CallerName) + `,`,
		`FromCity:` + fmt.Sprintf("%v", this.FromCity) + `,`,
		`FromState:` + fmt.Sprintf("%v", this.FromState) + `,`,
		`FromZip:` + fmt.Sprintf("%v", this.FromZip) + `,`,
		`FromCountry:` + fmt.Sprintf("%v", this.FromCountry) + `,`,
		`ToCity:` + fmt.Sprintf("%v", this.ToCity) + `,`,
		`ToState:` + fmt.Sprintf("%v", this.ToState) + `,`,
		`ToZip:` + fmt.Sprintf("%v", this.ToZip) + `,`,
		`ToCountry:` + fmt.Sprintf("%v", this.ToCountry) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TwilioParams_TwilioMediaItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TwilioParams_TwilioMediaItem{`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`MediaURL:` + fmt.Sprintf("%v", this.MediaURL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage{`,
		`FromChannelID:` + fmt.Sprintf("%v", this.FromChannelID) + `,`,
		`ToChannelID:` + fmt.Sprintf("%v", this.ToChannelID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Item:` + fmt.Sprintf("%v", this.Item) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_SMSItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_SMSItem{`,
		`SMSItem:` + strings.Replace(fmt.Sprintf("%v", this.SMSItem), "SMSItem", "SMSItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_CallEventItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_CallEventItem{`,
		`CallEventItem:` + strings.Replace(fmt.Sprintf("%v", this.CallEventItem), "CallEventItem", "CallEventItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSItem{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "MediaAttachment", "MediaAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallEventItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallEventItem{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DurationInSeconds:` + fmt.Sprintf("%v", this.DurationInSeconds) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaAttachment{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`FromChannelID:` + fmt.Sprintf("%v", this.FromChannelID) + `,`,
		`ToChannelID:` + fmt.Sprintf("%v", this.ToChannelID) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiatePhoneCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiatePhoneCallRequest{`,
		`CallInitiationType:` + fmt.Sprintf("%v", this.CallInitiationType) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiatePhoneCallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiatePhoneCallResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AvailablePhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AvailablePhoneNumber{`,
		`FriendlyName:` + fmt.Sprintf("%v", this.FriendlyName) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAvailablePhoneNumbersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAvailablePhoneNumbersRequest{`,
		`AreaCode:` + fmt.Sprintf("%v", this.AreaCode) + `,`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAvailablePhoneNumbersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAvailablePhoneNumbersResponse{`,
		`PhoneNumbers:` + strings.Replace(fmt.Sprintf("%v", this.PhoneNumbers), "AvailablePhoneNumber", "AvailablePhoneNumber", 1) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest{`,
		`ProvisionFor:` + fmt.Sprintf("%v", this.ProvisionFor) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest_PhoneNumber{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest_AreaCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest_AreaCode{`,
		`AreaCode:` + fmt.Sprintf("%v", this.AreaCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`ErrorMessage:` + fmt.Sprintf("%v", this.ErrorMessage) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTwilioEventRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTwilioEventRequest{`,
		`Params:` + strings.Replace(fmt.Sprintf("%v", this.Params), "TwilioParams", "TwilioParams", 1) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTwilioEventResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTwilioEventResponse{`,
		`Twiml:` + fmt.Sprintf("%v", this.Twiml) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "ProcessTwilioEventResponse_Failure", "ProcessTwilioEventResponse_Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTwilioEventResponse_Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTwilioEventResponse_Failure{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TwilioParams) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwilioParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwilioParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallStatus", wireType)
			}
			m.CallStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CallStatus |= (TwilioParams_CallStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Direction |= (TwilioParams_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallDuration", wireType)
			}
			m.CallDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CallDuration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordingURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordingURL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordingSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordingSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordingDuration", wireType)
			}
			m.RecordingDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RecordingDuration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digits = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMSSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SMSSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMedia", wireType)
			}
			m.NumMedia = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumMedia |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaItems = append(m.MediaItems, &TwilioParams_TwilioMediaItem{})
			if err := m.MediaItems[len(m.MediaItems)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagingServiceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessagingServiceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTime", wireType)
			}
			m.QueueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.QueueTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DequeingCallSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DequeingCallSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCallSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentCallSID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedFrom = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromCity = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromZip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromZip = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromCountry = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToCity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToCity = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToState = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToZip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToZip = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToCountry = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwilioParams_TwilioMediaItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwilioMediaItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwilioMediaItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaURL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishedExternalMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishedExternalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishedExternalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (PublishedExternalMessage_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMSItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_SMSItem{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallEventItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallEventItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_CallEventItem{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &MediaAttachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallEventItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallEventItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallEventItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (CallEventItem_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationInSeconds", wireType)
			}
			m.DurationInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationInSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (ChannelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Result |= (SendMessageResponse_Result(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiatePhoneCallRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiatePhoneCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiatePhoneCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallInitiationType", wireType)
			}
			m.CallInitiationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CallInitiationType |= (InitiatePhoneCallRequest_CallInitiationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiatePhoneCallResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiatePhoneCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiatePhoneCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Result |= (InitiatePhoneCallResponse_Result(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailablePhoneNumber) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailablePhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailablePhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var v PhoneNumberCapability
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (PhoneNumberCapability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capabilities = append(m.Capabilities, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAvailablePhoneNumbersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var v PhoneNumberCapability
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (PhoneNumberCapability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capabilities = append(m.Capabilities, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAvailablePhoneNumbersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, &AvailablePhoneNumber{})
			if err := m.PhoneNumbers[len(m.PhoneNumbers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Result |= (SearchAvailablePhoneNumbersResponse_Result(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionPhoneNumberRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionPhoneNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionPhoneNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &ProvisionPhoneNumberRequest_PhoneNumber{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &ProvisionPhoneNumberRequest_AreaCode{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionPhoneNumberResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionPhoneNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionPhoneNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Result |= (ProvisionPhoneNumberResponse_Result(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTwilioEventRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessTwilioEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessTwilioEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &TwilioParams{}
			}
			if err := m.Params.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Event |= (TwilioEvent(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTwilioEventResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessTwilioEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessTwilioEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twiml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Twiml = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &ProcessTwilioEventResponse_Failure{}
			}
			if err := m.Failure.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTwilioEventResponse_Failure) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Reason |= (ProcessTwilioEventResponse_Failure_Reason(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)
