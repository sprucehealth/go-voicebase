// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package excomms is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		PublishedExternalMessage
		SMSItem
		CallEventItem
		EmailItem
		MediaAttachment
		SendMessageRequest
		EmailMessage
		SMSMessage
		SendMessageResponse
		InitiatePhoneCallRequest
		InitiatePhoneCallResponse
		AvailablePhoneNumber
		SearchAvailablePhoneNumbersRequest
		SearchAvailablePhoneNumbersResponse
		ProvisionPhoneNumberRequest
		ProvisionPhoneNumberResponse
		ProvisionEmailAddressRequest
		ProvisionEmailAddressResponse
*/
package excomms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChannelType specifies the channel over which the communication
// is intended to take place.
type ChannelType int32

const (
	ChannelType_VOICE ChannelType = 0
	ChannelType_SMS   ChannelType = 1
	ChannelType_EMAIL ChannelType = 2
)

var ChannelType_name = map[int32]string{
	0: "VOICE",
	1: "SMS",
	2: "EMAIL",
}
var ChannelType_value = map[string]int32{
	"VOICE": 0,
	"SMS":   1,
	"EMAIL": 2,
}

type PhoneNumberCapability int32

const (
	PhoneNumberCapability_VOICE_ENABLED PhoneNumberCapability = 0
	PhoneNumberCapability_SMS_ENABLED   PhoneNumberCapability = 1
	PhoneNumberCapability_MMS_ENABLED   PhoneNumberCapability = 2
)

var PhoneNumberCapability_name = map[int32]string{
	0: "VOICE_ENABLED",
	1: "SMS_ENABLED",
	2: "MMS_ENABLED",
}
var PhoneNumberCapability_value = map[string]int32{
	"VOICE_ENABLED": 0,
	"SMS_ENABLED":   1,
	"MMS_ENABLED":   2,
}

type PublishedExternalMessage_Type int32

const (
	PublishedExternalMessage_SMS        PublishedExternalMessage_Type = 0
	PublishedExternalMessage_CALL_EVENT PublishedExternalMessage_Type = 1
	PublishedExternalMessage_EMAIL      PublishedExternalMessage_Type = 2
)

var PublishedExternalMessage_Type_name = map[int32]string{
	0: "SMS",
	1: "CALL_EVENT",
	2: "EMAIL",
}
var PublishedExternalMessage_Type_value = map[string]int32{
	"SMS":        0,
	"CALL_EVENT": 1,
	"EMAIL":      2,
}

type PublishedExternalMessage_Direction int32

const (
	PublishedExternalMessage_INBOUND  PublishedExternalMessage_Direction = 0
	PublishedExternalMessage_OUTBOUND PublishedExternalMessage_Direction = 1
)

var PublishedExternalMessage_Direction_name = map[int32]string{
	0: "INBOUND",
	1: "OUTBOUND",
}
var PublishedExternalMessage_Direction_value = map[string]int32{
	"INBOUND":  0,
	"OUTBOUND": 1,
}

type CallEventItem_Type int32

const (
	CallEventItem_INCOMING_ANSWERED       CallEventItem_Type = 0
	CallEventItem_INCOMING_UNANSWERED     CallEventItem_Type = 1
	CallEventItem_INCOMING_LEFT_VOICEMAIL CallEventItem_Type = 2
	CallEventItem_OUTGOING_PLACED         CallEventItem_Type = 3
	CallEventItem_OUTGOING_ANSWERED       CallEventItem_Type = 4
	CallEventItem_OUTGOING_UNANSWERED     CallEventItem_Type = 5
)

var CallEventItem_Type_name = map[int32]string{
	0: "INCOMING_ANSWERED",
	1: "INCOMING_UNANSWERED",
	2: "INCOMING_LEFT_VOICEMAIL",
	3: "OUTGOING_PLACED",
	4: "OUTGOING_ANSWERED",
	5: "OUTGOING_UNANSWERED",
}
var CallEventItem_Type_value = map[string]int32{
	"INCOMING_ANSWERED":       0,
	"INCOMING_UNANSWERED":     1,
	"INCOMING_LEFT_VOICEMAIL": 2,
	"OUTGOING_PLACED":         3,
	"OUTGOING_ANSWERED":       4,
	"OUTGOING_UNANSWERED":     5,
}

type InitiatePhoneCallRequest_CallInitiationType int32

const (
	// CONNECT_PARTIES instructs service to call
	// the source and once the source answers, connect the
	// source to the destination by calling the destination
	// and merging the calls.
	InitiatePhoneCallRequest_CONNECT_PARTIES InitiatePhoneCallRequest_CallInitiationType = 0
	// RETURN_PHONE_NUMBER instructs service to return a number
	// to the caller that the user can call to be connected
	// to the patient.
	InitiatePhoneCallRequest_RETURN_PHONE_NUMBER InitiatePhoneCallRequest_CallInitiationType = 1
)

var InitiatePhoneCallRequest_CallInitiationType_name = map[int32]string{
	0: "CONNECT_PARTIES",
	1: "RETURN_PHONE_NUMBER",
}
var InitiatePhoneCallRequest_CallInitiationType_value = map[string]int32{
	"CONNECT_PARTIES":     0,
	"RETURN_PHONE_NUMBER": 1,
}

type PublishedExternalMessage struct {
	FromChannelID string                        `protobuf:"bytes,1,opt,name=from_channel_id,proto3" json:"from_channel_id,omitempty"`
	ToChannelID   string                        `protobuf:"bytes,2,opt,name=to_channel_id,proto3" json:"to_channel_id,omitempty"`
	Timestamp     uint64                        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          PublishedExternalMessage_Type `protobuf:"varint,4,opt,name=type,proto3,enum=excomms.PublishedExternalMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*PublishedExternalMessage_SMSItem
	//	*PublishedExternalMessage_CallEventItem
	//	*PublishedExternalMessage_EmailItem
	Item      isPublishedExternalMessage_Item    `protobuf_oneof:"item"`
	Direction PublishedExternalMessage_Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=excomms.PublishedExternalMessage_Direction" json:"direction,omitempty"`
}

func (m *PublishedExternalMessage) Reset()      { *m = PublishedExternalMessage{} }
func (*PublishedExternalMessage) ProtoMessage() {}

type isPublishedExternalMessage_Item interface {
	isPublishedExternalMessage_Item()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PublishedExternalMessage_SMSItem struct {
	SMSItem *SMSItem `protobuf:"bytes,5,opt,name=sms_item,oneof"`
}
type PublishedExternalMessage_CallEventItem struct {
	CallEventItem *CallEventItem `protobuf:"bytes,6,opt,name=call_event_item,oneof"`
}
type PublishedExternalMessage_EmailItem struct {
	EmailItem *EmailItem `protobuf:"bytes,7,opt,name=email_item,oneof"`
}

func (*PublishedExternalMessage_SMSItem) isPublishedExternalMessage_Item()       {}
func (*PublishedExternalMessage_CallEventItem) isPublishedExternalMessage_Item() {}
func (*PublishedExternalMessage_EmailItem) isPublishedExternalMessage_Item()     {}

func (m *PublishedExternalMessage) GetItem() isPublishedExternalMessage_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PublishedExternalMessage) GetSMSItem() *SMSItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_SMSItem); ok {
		return x.SMSItem
	}
	return nil
}

func (m *PublishedExternalMessage) GetCallEventItem() *CallEventItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_CallEventItem); ok {
		return x.CallEventItem
	}
	return nil
}

func (m *PublishedExternalMessage) GetEmailItem() *EmailItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_EmailItem); ok {
		return x.EmailItem
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PublishedExternalMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _PublishedExternalMessage_OneofMarshaler, _PublishedExternalMessage_OneofUnmarshaler, []interface{}{
		(*PublishedExternalMessage_SMSItem)(nil),
		(*PublishedExternalMessage_CallEventItem)(nil),
		(*PublishedExternalMessage_EmailItem)(nil),
	}
}

func _PublishedExternalMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PublishedExternalMessage)
	// item
	switch x := m.Item.(type) {
	case *PublishedExternalMessage_SMSItem:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMSItem); err != nil {
			return err
		}
	case *PublishedExternalMessage_CallEventItem:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallEventItem); err != nil {
			return err
		}
	case *PublishedExternalMessage_EmailItem:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmailItem); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PublishedExternalMessage.Item has unexpected type %T", x)
	}
	return nil
}

func _PublishedExternalMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PublishedExternalMessage)
	switch tag {
	case 5: // item.sms_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_SMSItem{msg}
		return true, err
	case 6: // item.call_event_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CallEventItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_CallEventItem{msg}
		return true, err
	case 7: // item.email_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_EmailItem{msg}
		return true, err
	default:
		return false, nil
	}
}

type SMSItem struct {
	Text        string             `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Attachments []*MediaAttachment `protobuf:"bytes,2,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *SMSItem) Reset()      { *m = SMSItem{} }
func (*SMSItem) ProtoMessage() {}

func (m *SMSItem) GetAttachments() []*MediaAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type CallEventItem struct {
	Type              CallEventItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.CallEventItem_Type" json:"type,omitempty"`
	DurationInSeconds uint32             `protobuf:"varint,2,opt,name=duration_in_seconds,proto3" json:"duration_in_seconds,omitempty"`
	URL               string             `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *CallEventItem) Reset()      { *m = CallEventItem{} }
func (*CallEventItem) ProtoMessage() {}

type EmailItem struct {
	Body        string             `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Subject     string             `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Attachments []*MediaAttachment `protobuf:"bytes,3,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *EmailItem) Reset()      { *m = EmailItem{} }
func (*EmailItem) ProtoMessage() {}

func (m *EmailItem) GetAttachments() []*MediaAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type MediaAttachment struct {
	URL         string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,proto3" json:"content_type,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MediaAttachment) Reset()      { *m = MediaAttachment{} }
func (*MediaAttachment) ProtoMessage() {}

// SendMessageRequest represents a request to send a message
// over an external channel.
type SendMessageRequest struct {
	Channel ChannelType `protobuf:"varint,1,opt,name=channel,proto3,enum=excomms.ChannelType" json:"channel,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*SendMessageRequest_Email
	//	*SendMessageRequest_SMS
	Message isSendMessageRequest_Message `protobuf_oneof:"message"`
	// uuid for client to group and retrieve list of external messages
	UUID string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *SendMessageRequest) Reset()      { *m = SendMessageRequest{} }
func (*SendMessageRequest) ProtoMessage() {}

type isSendMessageRequest_Message interface {
	isSendMessageRequest_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SendMessageRequest_Email struct {
	Email *EmailMessage `protobuf:"bytes,2,opt,name=email,oneof"`
}
type SendMessageRequest_SMS struct {
	SMS *SMSMessage `protobuf:"bytes,3,opt,name=sms,oneof"`
}

func (*SendMessageRequest_Email) isSendMessageRequest_Message() {}
func (*SendMessageRequest_SMS) isSendMessageRequest_Message()   {}

func (m *SendMessageRequest) GetMessage() isSendMessageRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SendMessageRequest) GetEmail() *EmailMessage {
	if x, ok := m.GetMessage().(*SendMessageRequest_Email); ok {
		return x.Email
	}
	return nil
}

func (m *SendMessageRequest) GetSMS() *SMSMessage {
	if x, ok := m.GetMessage().(*SendMessageRequest_SMS); ok {
		return x.SMS
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SendMessageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _SendMessageRequest_OneofMarshaler, _SendMessageRequest_OneofUnmarshaler, []interface{}{
		(*SendMessageRequest_Email)(nil),
		(*SendMessageRequest_SMS)(nil),
	}
}

func _SendMessageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SendMessageRequest)
	// message
	switch x := m.Message.(type) {
	case *SendMessageRequest_Email:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *SendMessageRequest_SMS:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMS); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SendMessageRequest.Message has unexpected type %T", x)
	}
	return nil
}

func _SendMessageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SendMessageRequest)
	switch tag {
	case 2: // message.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SendMessageRequest_Email{msg}
		return true, err
	case 3: // message.sms
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SendMessageRequest_SMS{msg}
		return true, err
	default:
		return false, nil
	}
}

type EmailMessage struct {
	Subject          string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body             string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	FromName         string `protobuf:"bytes,3,opt,name=from_name,proto3" json:"from_name,omitempty"`
	FromEmailAddress string `protobuf:"bytes,4,opt,name=from_email_address,proto3" json:"from_email_address,omitempty"`
	ToName           string `protobuf:"bytes,5,opt,name=to_name,proto3" json:"to_name,omitempty"`
	ToEmailAddress   string `protobuf:"bytes,6,opt,name=to_email_address,proto3" json:"to_email_address,omitempty"`
}

func (m *EmailMessage) Reset()      { *m = EmailMessage{} }
func (*EmailMessage) ProtoMessage() {}

type SMSMessage struct {
	Text            string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FromPhoneNumber string `protobuf:"bytes,2,opt,name=from_phone_number,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber   string `protobuf:"bytes,3,opt,name=to_phone_number,proto3" json:"to_phone_number,omitempty"`
}

func (m *SMSMessage) Reset()      { *m = SMSMessage{} }
func (*SMSMessage) ProtoMessage() {}

type SendMessageResponse struct {
}

func (m *SendMessageResponse) Reset()      { *m = SendMessageResponse{} }
func (*SendMessageResponse) ProtoMessage() {}

type InitiatePhoneCallRequest struct {
	CallInitiationType InitiatePhoneCallRequest_CallInitiationType `protobuf:"varint,1,opt,name=call_initiation_type,proto3,enum=excomms.InitiatePhoneCallRequest_CallInitiationType" json:"call_initiation_type,omitempty"`
	FromPhoneNumber    string                                      `protobuf:"bytes,2,opt,name=from_phone_number,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber      string                                      `protobuf:"bytes,3,opt,name=to_phone_number,proto3" json:"to_phone_number,omitempty"`
	OrganizationID     string                                      `protobuf:"bytes,4,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
}

func (m *InitiatePhoneCallRequest) Reset()      { *m = InitiatePhoneCallRequest{} }
func (*InitiatePhoneCallRequest) ProtoMessage() {}

type InitiatePhoneCallResponse struct {
	// phone_number returns the phone number which the caller can call
	// to connect the caller to the destination phone number in the request.
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
}

func (m *InitiatePhoneCallResponse) Reset()      { *m = InitiatePhoneCallResponse{} }
func (*InitiatePhoneCallResponse) ProtoMessage() {}

type AvailablePhoneNumber struct {
	FriendlyName string                  `protobuf:"bytes,1,opt,name=friendly_name,proto3" json:"friendly_name,omitempty"`
	PhoneNumber  string                  `protobuf:"bytes,2,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
	Capabilities []PhoneNumberCapability `protobuf:"varint,3,rep,name=capabilities,enum=excomms.PhoneNumberCapability" json:"capabilities,omitempty"`
}

func (m *AvailablePhoneNumber) Reset()      { *m = AvailablePhoneNumber{} }
func (*AvailablePhoneNumber) ProtoMessage() {}

type SearchAvailablePhoneNumbersRequest struct {
	AreaCode     string                  `protobuf:"bytes,1,opt,name=area_code,proto3" json:"area_code,omitempty"`
	Capabilities []PhoneNumberCapability `protobuf:"varint,2,rep,name=capabilities,enum=excomms.PhoneNumberCapability" json:"capabilities,omitempty"`
}

func (m *SearchAvailablePhoneNumbersRequest) Reset()      { *m = SearchAvailablePhoneNumbersRequest{} }
func (*SearchAvailablePhoneNumbersRequest) ProtoMessage() {}

type SearchAvailablePhoneNumbersResponse struct {
	PhoneNumbers []*AvailablePhoneNumber `protobuf:"bytes,1,rep,name=phone_numbers" json:"phone_numbers,omitempty"`
}

func (m *SearchAvailablePhoneNumbersResponse) Reset()      { *m = SearchAvailablePhoneNumbersResponse{} }
func (*SearchAvailablePhoneNumbersResponse) ProtoMessage() {}

func (m *SearchAvailablePhoneNumbersResponse) GetPhoneNumbers() []*AvailablePhoneNumber {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

type ProvisionPhoneNumberRequest struct {
	ProvisionFor string `protobuf:"bytes,1,opt,name=provision_for,proto3" json:"provision_for,omitempty"`
	// Types that are valid to be assigned to Number:
	//	*ProvisionPhoneNumberRequest_PhoneNumber
	//	*ProvisionPhoneNumberRequest_AreaCode
	Number isProvisionPhoneNumberRequest_Number `protobuf_oneof:"number"`
}

func (m *ProvisionPhoneNumberRequest) Reset()      { *m = ProvisionPhoneNumberRequest{} }
func (*ProvisionPhoneNumberRequest) ProtoMessage() {}

type isProvisionPhoneNumberRequest_Number interface {
	isProvisionPhoneNumberRequest_Number()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProvisionPhoneNumberRequest_PhoneNumber struct {
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,proto3,oneof"`
}
type ProvisionPhoneNumberRequest_AreaCode struct {
	AreaCode string `protobuf:"bytes,3,opt,name=area_code,proto3,oneof"`
}

func (*ProvisionPhoneNumberRequest_PhoneNumber) isProvisionPhoneNumberRequest_Number() {}
func (*ProvisionPhoneNumberRequest_AreaCode) isProvisionPhoneNumberRequest_Number()    {}

func (m *ProvisionPhoneNumberRequest) GetNumber() isProvisionPhoneNumberRequest_Number {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *ProvisionPhoneNumberRequest) GetPhoneNumber() string {
	if x, ok := m.GetNumber().(*ProvisionPhoneNumberRequest_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return ""
}

func (m *ProvisionPhoneNumberRequest) GetAreaCode() string {
	if x, ok := m.GetNumber().(*ProvisionPhoneNumberRequest_AreaCode); ok {
		return x.AreaCode
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProvisionPhoneNumberRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), []interface{}) {
	return _ProvisionPhoneNumberRequest_OneofMarshaler, _ProvisionPhoneNumberRequest_OneofUnmarshaler, []interface{}{
		(*ProvisionPhoneNumberRequest_PhoneNumber)(nil),
		(*ProvisionPhoneNumberRequest_AreaCode)(nil),
	}
}

func _ProvisionPhoneNumberRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProvisionPhoneNumberRequest)
	// number
	switch x := m.Number.(type) {
	case *ProvisionPhoneNumberRequest_PhoneNumber:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PhoneNumber)
	case *ProvisionPhoneNumberRequest_AreaCode:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AreaCode)
	case nil:
	default:
		return fmt.Errorf("ProvisionPhoneNumberRequest.Number has unexpected type %T", x)
	}
	return nil
}

func _ProvisionPhoneNumberRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProvisionPhoneNumberRequest)
	switch tag {
	case 2: // number.phone_number
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &ProvisionPhoneNumberRequest_PhoneNumber{x}
		return true, err
	case 3: // number.area_code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &ProvisionPhoneNumberRequest_AreaCode{x}
		return true, err
	default:
		return false, nil
	}
}

type ProvisionPhoneNumberResponse struct {
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
}

func (m *ProvisionPhoneNumberResponse) Reset()      { *m = ProvisionPhoneNumberResponse{} }
func (*ProvisionPhoneNumberResponse) ProtoMessage() {}

type ProvisionEmailAddressRequest struct {
	ProvisionFor string `protobuf:"bytes,1,opt,name=provision_for,proto3" json:"provision_for,omitempty"`
	EmailAddress string `protobuf:"bytes,2,opt,name=email_address,proto3" json:"email_address,omitempty"`
}

func (m *ProvisionEmailAddressRequest) Reset()      { *m = ProvisionEmailAddressRequest{} }
func (*ProvisionEmailAddressRequest) ProtoMessage() {}

type ProvisionEmailAddressResponse struct {
	EmailAddress string `protobuf:"bytes,1,opt,name=email_address,proto3" json:"email_address,omitempty"`
}

func (m *ProvisionEmailAddressResponse) Reset()      { *m = ProvisionEmailAddressResponse{} }
func (*ProvisionEmailAddressResponse) ProtoMessage() {}

func init() {
	proto.RegisterType((*PublishedExternalMessage)(nil), "excomms.PublishedExternalMessage")
	proto.RegisterType((*SMSItem)(nil), "excomms.SMSItem")
	proto.RegisterType((*CallEventItem)(nil), "excomms.CallEventItem")
	proto.RegisterType((*EmailItem)(nil), "excomms.EmailItem")
	proto.RegisterType((*MediaAttachment)(nil), "excomms.MediaAttachment")
	proto.RegisterType((*SendMessageRequest)(nil), "excomms.SendMessageRequest")
	proto.RegisterType((*EmailMessage)(nil), "excomms.EmailMessage")
	proto.RegisterType((*SMSMessage)(nil), "excomms.SMSMessage")
	proto.RegisterType((*SendMessageResponse)(nil), "excomms.SendMessageResponse")
	proto.RegisterType((*InitiatePhoneCallRequest)(nil), "excomms.InitiatePhoneCallRequest")
	proto.RegisterType((*InitiatePhoneCallResponse)(nil), "excomms.InitiatePhoneCallResponse")
	proto.RegisterType((*AvailablePhoneNumber)(nil), "excomms.AvailablePhoneNumber")
	proto.RegisterType((*SearchAvailablePhoneNumbersRequest)(nil), "excomms.SearchAvailablePhoneNumbersRequest")
	proto.RegisterType((*SearchAvailablePhoneNumbersResponse)(nil), "excomms.SearchAvailablePhoneNumbersResponse")
	proto.RegisterType((*ProvisionPhoneNumberRequest)(nil), "excomms.ProvisionPhoneNumberRequest")
	proto.RegisterType((*ProvisionPhoneNumberResponse)(nil), "excomms.ProvisionPhoneNumberResponse")
	proto.RegisterType((*ProvisionEmailAddressRequest)(nil), "excomms.ProvisionEmailAddressRequest")
	proto.RegisterType((*ProvisionEmailAddressResponse)(nil), "excomms.ProvisionEmailAddressResponse")
	proto.RegisterEnum("excomms.ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterEnum("excomms.PhoneNumberCapability", PhoneNumberCapability_name, PhoneNumberCapability_value)
	proto.RegisterEnum("excomms.PublishedExternalMessage_Type", PublishedExternalMessage_Type_name, PublishedExternalMessage_Type_value)
	proto.RegisterEnum("excomms.PublishedExternalMessage_Direction", PublishedExternalMessage_Direction_name, PublishedExternalMessage_Direction_value)
	proto.RegisterEnum("excomms.CallEventItem_Type", CallEventItem_Type_name, CallEventItem_Type_value)
	proto.RegisterEnum("excomms.InitiatePhoneCallRequest_CallInitiationType", InitiatePhoneCallRequest_CallInitiationType_name, InitiatePhoneCallRequest_CallInitiationType_value)
}
func (x ChannelType) String() string {
	s, ok := ChannelType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PhoneNumberCapability) String() string {
	s, ok := PhoneNumberCapability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PublishedExternalMessage_Type) String() string {
	s, ok := PublishedExternalMessage_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PublishedExternalMessage_Direction) String() string {
	s, ok := PublishedExternalMessage_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CallEventItem_Type) String() string {
	s, ok := CallEventItem_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InitiatePhoneCallRequest_CallInitiationType) String() string {
	s, ok := InitiatePhoneCallRequest_CallInitiationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PublishedExternalMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FromChannelID != that1.FromChannelID {
		return false
	}
	if this.ToChannelID != that1.ToChannelID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Item == nil {
		if this.Item != nil {
			return false
		}
	} else if this.Item == nil {
		return false
	} else if !this.Item.Equal(that1.Item) {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_SMSItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_SMSItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMSItem.Equal(that1.SMSItem) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_CallEventItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_CallEventItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CallEventItem.Equal(that1.CallEventItem) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_EmailItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_EmailItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EmailItem.Equal(that1.EmailItem) {
		return false
	}
	return true
}
func (this *SMSItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *CallEventItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CallEventItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DurationInSeconds != that1.DurationInSeconds {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *EmailItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailItem)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *MediaAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MediaAttachment)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SendMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	return true
}
func (this *SendMessageRequest_Email) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest_Email)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *SendMessageRequest_SMS) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest_SMS)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMS.Equal(that1.SMS) {
		return false
	}
	return true
}
func (this *EmailMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.FromName != that1.FromName {
		return false
	}
	if this.FromEmailAddress != that1.FromEmailAddress {
		return false
	}
	if this.ToName != that1.ToName {
		return false
	}
	if this.ToEmailAddress != that1.ToEmailAddress {
		return false
	}
	return true
}
func (this *SMSMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	return true
}
func (this *SendMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *InitiatePhoneCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiatePhoneCallRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CallInitiationType != that1.CallInitiationType {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *InitiatePhoneCallResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiatePhoneCallResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *AvailablePhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AvailablePhoneNumber)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FriendlyName != that1.FriendlyName {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if this.Capabilities[i] != that1.Capabilities[i] {
			return false
		}
	}
	return true
}
func (this *SearchAvailablePhoneNumbersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAvailablePhoneNumbersRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AreaCode != that1.AreaCode {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if this.Capabilities[i] != that1.Capabilities[i] {
			return false
		}
	}
	return true
}
func (this *SearchAvailablePhoneNumbersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAvailablePhoneNumbersResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.PhoneNumbers) != len(that1.PhoneNumbers) {
		return false
	}
	for i := range this.PhoneNumbers {
		if !this.PhoneNumbers[i].Equal(that1.PhoneNumbers[i]) {
			return false
		}
	}
	return true
}
func (this *ProvisionPhoneNumberRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProvisionFor != that1.ProvisionFor {
		return false
	}
	if that1.Number == nil {
		if this.Number != nil {
			return false
		}
	} else if this.Number == nil {
		return false
	} else if !this.Number.Equal(that1.Number) {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest_PhoneNumber)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest_AreaCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest_AreaCode)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AreaCode != that1.AreaCode {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *ProvisionEmailAddressRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionEmailAddressRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProvisionFor != that1.ProvisionFor {
		return false
	}
	if this.EmailAddress != that1.EmailAddress {
		return false
	}
	return true
}
func (this *ProvisionEmailAddressResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionEmailAddressResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EmailAddress != that1.EmailAddress {
		return false
	}
	return true
}
func (this *PublishedExternalMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&excomms.PublishedExternalMessage{")
	s = append(s, "FromChannelID: "+fmt.Sprintf("%#v", this.FromChannelID)+",\n")
	s = append(s, "ToChannelID: "+fmt.Sprintf("%#v", this.ToChannelID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishedExternalMessage_SMSItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_SMSItem{` +
		`SMSItem:` + fmt.Sprintf("%#v", this.SMSItem) + `}`}, ", ")
	return s
}
func (this *PublishedExternalMessage_CallEventItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_CallEventItem{` +
		`CallEventItem:` + fmt.Sprintf("%#v", this.CallEventItem) + `}`}, ", ")
	return s
}
func (this *PublishedExternalMessage_EmailItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_EmailItem{` +
		`EmailItem:` + fmt.Sprintf("%#v", this.EmailItem) + `}`}, ", ")
	return s
}
func (this *SMSItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SMSItem{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallEventItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.CallEventItem{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DurationInSeconds: "+fmt.Sprintf("%#v", this.DurationInSeconds)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.EmailItem{")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.MediaAttachment{")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.SendMessageRequest{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.SendMessageRequest_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *SendMessageRequest_SMS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.SendMessageRequest_SMS{` +
		`SMS:` + fmt.Sprintf("%#v", this.SMS) + `}`}, ", ")
	return s
}
func (this *EmailMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&excomms.EmailMessage{")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "FromName: "+fmt.Sprintf("%#v", this.FromName)+",\n")
	s = append(s, "FromEmailAddress: "+fmt.Sprintf("%#v", this.FromEmailAddress)+",\n")
	s = append(s, "ToName: "+fmt.Sprintf("%#v", this.ToName)+",\n")
	s = append(s, "ToEmailAddress: "+fmt.Sprintf("%#v", this.ToEmailAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.SMSMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&excomms.SendMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiatePhoneCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.InitiatePhoneCallRequest{")
	s = append(s, "CallInitiationType: "+fmt.Sprintf("%#v", this.CallInitiationType)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiatePhoneCallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.InitiatePhoneCallResponse{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AvailablePhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.AvailablePhoneNumber{")
	s = append(s, "FriendlyName: "+fmt.Sprintf("%#v", this.FriendlyName)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAvailablePhoneNumbersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SearchAvailablePhoneNumbersRequest{")
	s = append(s, "AreaCode: "+fmt.Sprintf("%#v", this.AreaCode)+",\n")
	s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAvailablePhoneNumbersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.SearchAvailablePhoneNumbersResponse{")
	if this.PhoneNumbers != nil {
		s = append(s, "PhoneNumbers: "+fmt.Sprintf("%#v", this.PhoneNumbers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionPhoneNumberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProvisionPhoneNumberRequest{")
	s = append(s, "ProvisionFor: "+fmt.Sprintf("%#v", this.ProvisionFor)+",\n")
	if this.Number != nil {
		s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.ProvisionPhoneNumberRequest_PhoneNumber{` +
		`PhoneNumber:` + fmt.Sprintf("%#v", this.PhoneNumber) + `}`}, ", ")
	return s
}
func (this *ProvisionPhoneNumberRequest_AreaCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.ProvisionPhoneNumberRequest_AreaCode{` +
		`AreaCode:` + fmt.Sprintf("%#v", this.AreaCode) + `}`}, ", ")
	return s
}
func (this *ProvisionPhoneNumberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.ProvisionPhoneNumberResponse{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionEmailAddressRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.ProvisionEmailAddressRequest{")
	s = append(s, "ProvisionFor: "+fmt.Sprintf("%#v", this.ProvisionFor)+",\n")
	s = append(s, "EmailAddress: "+fmt.Sprintf("%#v", this.EmailAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionEmailAddressResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.ProvisionEmailAddressResponse{")
	s = append(s, "EmailAddress: "+fmt.Sprintf("%#v", this.EmailAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ExComms service

type ExCommsClient interface {
	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	SearchAvailablePhoneNumbers(ctx context.Context, in *SearchAvailablePhoneNumbersRequest, opts ...grpc.CallOption) (*SearchAvailablePhoneNumbersResponse, error)
	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	ProvisionPhoneNumber(ctx context.Context, in *ProvisionPhoneNumberRequest, opts ...grpc.CallOption) (*ProvisionPhoneNumberResponse, error)
	// ProvisionEmailAddress provisions an email address for the requester.
	ProvisionEmailAddress(ctx context.Context, in *ProvisionEmailAddressRequest, opts ...grpc.CallOption) (*ProvisionEmailAddressResponse, error)
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error)
}

type exCommsClient struct {
	cc *grpc.ClientConn
}

func NewExCommsClient(cc *grpc.ClientConn) ExCommsClient {
	return &exCommsClient{cc}
}

func (c *exCommsClient) SearchAvailablePhoneNumbers(ctx context.Context, in *SearchAvailablePhoneNumbersRequest, opts ...grpc.CallOption) (*SearchAvailablePhoneNumbersResponse, error) {
	out := new(SearchAvailablePhoneNumbersResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/SearchAvailablePhoneNumbers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) ProvisionPhoneNumber(ctx context.Context, in *ProvisionPhoneNumberRequest, opts ...grpc.CallOption) (*ProvisionPhoneNumberResponse, error) {
	out := new(ProvisionPhoneNumberResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/ProvisionPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) ProvisionEmailAddress(ctx context.Context, in *ProvisionEmailAddressRequest, opts ...grpc.CallOption) (*ProvisionEmailAddressResponse, error) {
	out := new(ProvisionEmailAddressResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/ProvisionEmailAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error) {
	out := new(InitiatePhoneCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/InitiatePhoneCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExComms service

type ExCommsServer interface {
	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	SearchAvailablePhoneNumbers(context.Context, *SearchAvailablePhoneNumbersRequest) (*SearchAvailablePhoneNumbersResponse, error)
	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	ProvisionPhoneNumber(context.Context, *ProvisionPhoneNumberRequest) (*ProvisionPhoneNumberResponse, error)
	// ProvisionEmailAddress provisions an email address for the requester.
	ProvisionEmailAddress(context.Context, *ProvisionEmailAddressRequest) (*ProvisionEmailAddressResponse, error)
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(context.Context, *InitiatePhoneCallRequest) (*InitiatePhoneCallResponse, error)
}

func RegisterExCommsServer(s *grpc.Server, srv ExCommsServer) {
	s.RegisterService(&_ExComms_serviceDesc, srv)
}

func _ExComms_SearchAvailablePhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SearchAvailablePhoneNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).SearchAvailablePhoneNumbers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_ProvisionPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProvisionPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).ProvisionPhoneNumber(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_ProvisionEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProvisionEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).ProvisionEmailAddress(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExComms_InitiatePhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InitiatePhoneCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServer).InitiatePhoneCall(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ExComms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "excomms.ExComms",
	HandlerType: (*ExCommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAvailablePhoneNumbers",
			Handler:    _ExComms_SearchAvailablePhoneNumbers_Handler,
		},
		{
			MethodName: "ProvisionPhoneNumber",
			Handler:    _ExComms_ProvisionPhoneNumber_Handler,
		},
		{
			MethodName: "ProvisionEmailAddress",
			Handler:    _ExComms_ProvisionEmailAddress_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ExComms_SendMessage_Handler,
		},
		{
			MethodName: "InitiatePhoneCall",
			Handler:    _ExComms_InitiatePhoneCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *PublishedExternalMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PublishedExternalMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromChannelID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromChannelID)))
		i += copy(data[i:], m.FromChannelID)
	}
	if len(m.ToChannelID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToChannelID)))
		i += copy(data[i:], m.ToChannelID)
	}
	if m.Timestamp != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Timestamp))
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.Item != nil {
		nn1, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.Direction != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintSvc(data, i, uint64(m.Direction))
	}
	return i, nil
}

func (m *PublishedExternalMessage_SMSItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMSItem != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(m.SMSItem.Size()))
		n2, err := m.SMSItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PublishedExternalMessage_CallEventItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CallEventItem != nil {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallEventItem.Size()))
		n3, err := m.CallEventItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *PublishedExternalMessage_EmailItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.EmailItem != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(m.EmailItem.Size()))
		n4, err := m.EmailItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *SMSItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CallEventItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CallEventItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationInSeconds))
	}
	if len(m.URL) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	return i, nil
}

func (m *EmailItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.Subject) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Subject)))
		i += copy(data[i:], m.Subject)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MediaAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MediaAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.URL) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	if len(m.ContentType) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ContentType)))
		i += copy(data[i:], m.ContentType)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *SendMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SendMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Channel))
	}
	if m.Message != nil {
		nn5, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if len(m.UUID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	return i, nil
}

func (m *SendMessageRequest_Email) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Email != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Email.Size()))
		n6, err := m.Email.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *SendMessageRequest_SMS) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMS != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.SMS.Size()))
		n7, err := m.SMS.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *EmailMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Subject)))
		i += copy(data[i:], m.Subject)
	}
	if len(m.Body) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.FromName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromName)))
		i += copy(data[i:], m.FromName)
	}
	if len(m.FromEmailAddress) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromEmailAddress)))
		i += copy(data[i:], m.FromEmailAddress)
	}
	if len(m.ToName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToName)))
		i += copy(data[i:], m.ToName)
	}
	if len(m.ToEmailAddress) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToEmailAddress)))
		i += copy(data[i:], m.ToEmailAddress)
	}
	return i, nil
}

func (m *SMSMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	return i, nil
}

func (m *SendMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SendMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitiatePhoneCallRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiatePhoneCallRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallInitiationType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallInitiationType))
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	return i, nil
}

func (m *InitiatePhoneCallResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiatePhoneCallResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *AvailablePhoneNumber) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AvailablePhoneNumber) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendlyName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FriendlyName)))
		i += copy(data[i:], m.FriendlyName)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.Capabilities) > 0 {
		for _, num := range m.Capabilities {
			data[i] = 0x18
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SearchAvailablePhoneNumbersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAvailablePhoneNumbersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AreaCode) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AreaCode)))
		i += copy(data[i:], m.AreaCode)
	}
	if len(m.Capabilities) > 0 {
		for _, num := range m.Capabilities {
			data[i] = 0x10
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SearchAvailablePhoneNumbersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAvailablePhoneNumbersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, msg := range m.PhoneNumbers {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProvisionPhoneNumberRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionPhoneNumberRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProvisionFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProvisionFor)))
		i += copy(data[i:], m.ProvisionFor)
	}
	if m.Number != nil {
		nn8, err := m.Number.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *ProvisionPhoneNumberRequest_PhoneNumber) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
	i += copy(data[i:], m.PhoneNumber)
	return i, nil
}
func (m *ProvisionPhoneNumberRequest_AreaCode) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.AreaCode)))
	i += copy(data[i:], m.AreaCode)
	return i, nil
}
func (m *ProvisionPhoneNumberResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionPhoneNumberResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *ProvisionEmailAddressRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionEmailAddressRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProvisionFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProvisionFor)))
		i += copy(data[i:], m.ProvisionFor)
	}
	if len(m.EmailAddress) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EmailAddress)))
		i += copy(data[i:], m.EmailAddress)
	}
	return i, nil
}

func (m *ProvisionEmailAddressResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionEmailAddressResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EmailAddress) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EmailAddress)))
		i += copy(data[i:], m.EmailAddress)
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PublishedExternalMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.FromChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSvc(uint64(m.Timestamp))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.Direction != 0 {
		n += 1 + sovSvc(uint64(m.Direction))
	}
	return n
}

func (m *PublishedExternalMessage_SMSItem) Size() (n int) {
	var l int
	_ = l
	if m.SMSItem != nil {
		l = m.SMSItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *PublishedExternalMessage_CallEventItem) Size() (n int) {
	var l int
	_ = l
	if m.CallEventItem != nil {
		l = m.CallEventItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *PublishedExternalMessage_EmailItem) Size() (n int) {
	var l int
	_ = l
	if m.EmailItem != nil {
		l = m.EmailItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SMSItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CallEventItem) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		n += 1 + sovSvc(uint64(m.DurationInSeconds))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *EmailItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *MediaAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SendMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSvc(uint64(m.Channel))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SendMessageRequest_Email) Size() (n int) {
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SendMessageRequest_SMS) Size() (n int) {
	var l int
	_ = l
	if m.SMS != nil {
		l = m.SMS.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *EmailMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToEmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SMSMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SendMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InitiatePhoneCallRequest) Size() (n int) {
	var l int
	_ = l
	if m.CallInitiationType != 0 {
		n += 1 + sovSvc(uint64(m.CallInitiationType))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *InitiatePhoneCallResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AvailablePhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.FriendlyName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *SearchAvailablePhoneNumbersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AreaCode)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *SearchAvailablePhoneNumbersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, e := range m.PhoneNumbers {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ProvisionPhoneNumberRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProvisionFor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Number != nil {
		n += m.Number.Size()
	}
	return n
}

func (m *ProvisionPhoneNumberRequest_PhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProvisionPhoneNumberRequest_AreaCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.AreaCode)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProvisionPhoneNumberResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProvisionEmailAddressRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProvisionFor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProvisionEmailAddressResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PublishedExternalMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage{`,
		`FromChannelID:` + fmt.Sprintf("%v", this.FromChannelID) + `,`,
		`ToChannelID:` + fmt.Sprintf("%v", this.ToChannelID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Item:` + fmt.Sprintf("%v", this.Item) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_SMSItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_SMSItem{`,
		`SMSItem:` + strings.Replace(fmt.Sprintf("%v", this.SMSItem), "SMSItem", "SMSItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_CallEventItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_CallEventItem{`,
		`CallEventItem:` + strings.Replace(fmt.Sprintf("%v", this.CallEventItem), "CallEventItem", "CallEventItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_EmailItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_EmailItem{`,
		`EmailItem:` + strings.Replace(fmt.Sprintf("%v", this.EmailItem), "EmailItem", "EmailItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSItem{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "MediaAttachment", "MediaAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallEventItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallEventItem{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DurationInSeconds:` + fmt.Sprintf("%v", this.DurationInSeconds) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailItem{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "MediaAttachment", "MediaAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaAttachment{`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailMessage", "EmailMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest_SMS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest_SMS{`,
		`SMS:` + strings.Replace(fmt.Sprintf("%v", this.SMS), "SMSMessage", "SMSMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage{`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`FromName:` + fmt.Sprintf("%v", this.FromName) + `,`,
		`FromEmailAddress:` + fmt.Sprintf("%v", this.FromEmailAddress) + `,`,
		`ToName:` + fmt.Sprintf("%v", this.ToName) + `,`,
		`ToEmailAddress:` + fmt.Sprintf("%v", this.ToEmailAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *InitiatePhoneCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiatePhoneCallRequest{`,
		`CallInitiationType:` + fmt.Sprintf("%v", this.CallInitiationType) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiatePhoneCallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiatePhoneCallResponse{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AvailablePhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AvailablePhoneNumber{`,
		`FriendlyName:` + fmt.Sprintf("%v", this.FriendlyName) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAvailablePhoneNumbersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAvailablePhoneNumbersRequest{`,
		`AreaCode:` + fmt.Sprintf("%v", this.AreaCode) + `,`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAvailablePhoneNumbersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAvailablePhoneNumbersResponse{`,
		`PhoneNumbers:` + strings.Replace(fmt.Sprintf("%v", this.PhoneNumbers), "AvailablePhoneNumber", "AvailablePhoneNumber", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest{`,
		`ProvisionFor:` + fmt.Sprintf("%v", this.ProvisionFor) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest_PhoneNumber{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest_AreaCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest_AreaCode{`,
		`AreaCode:` + fmt.Sprintf("%v", this.AreaCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberResponse{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionEmailAddressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionEmailAddressRequest{`,
		`ProvisionFor:` + fmt.Sprintf("%v", this.ProvisionFor) + `,`,
		`EmailAddress:` + fmt.Sprintf("%v", this.EmailAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionEmailAddressResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionEmailAddressResponse{`,
		`EmailAddress:` + fmt.Sprintf("%v", this.EmailAddress) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PublishedExternalMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishedExternalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishedExternalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (PublishedExternalMessage_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMSItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_SMSItem{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallEventItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallEventItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_CallEventItem{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_EmailItem{v}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Direction |= (PublishedExternalMessage_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &MediaAttachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallEventItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallEventItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallEventItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (CallEventItem_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationInSeconds", wireType)
			}
			m.DurationInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationInSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &MediaAttachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (ChannelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SendMessageRequest_Email{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SendMessageRequest_SMS{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToEmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToEmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiatePhoneCallRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiatePhoneCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiatePhoneCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallInitiationType", wireType)
			}
			m.CallInitiationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CallInitiationType |= (InitiatePhoneCallRequest_CallInitiationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiatePhoneCallResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiatePhoneCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiatePhoneCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailablePhoneNumber) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailablePhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailablePhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var v PhoneNumberCapability
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (PhoneNumberCapability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capabilities = append(m.Capabilities, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAvailablePhoneNumbersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var v PhoneNumberCapability
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (PhoneNumberCapability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capabilities = append(m.Capabilities, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAvailablePhoneNumbersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, &AvailablePhoneNumber{})
			if err := m.PhoneNumbers[len(m.PhoneNumbers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionPhoneNumberRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionPhoneNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionPhoneNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &ProvisionPhoneNumberRequest_PhoneNumber{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &ProvisionPhoneNumberRequest_AreaCode{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionPhoneNumberResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionPhoneNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionPhoneNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionEmailAddressRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionEmailAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionEmailAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionEmailAddressResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionEmailAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionEmailAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)
