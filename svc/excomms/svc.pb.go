// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
Package excomms is a generated protocol buffer package.

It is generated from these files:
	svc.proto

It has these top-level messages:
	SendMessageRequest
	SendMessageResponse
	InitiatePhoneCallRequest
	InitiatePhoneCallResponse
*/
package excomms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ChannelType specifies the channel over which the communication
// is intended to take place.
type ChannelType int32

const (
	ChannelType_Voice ChannelType = 0
	ChannelType_SMS   ChannelType = 1
)

var ChannelType_name = map[int32]string{
	0: "Voice",
	1: "SMS",
}
var ChannelType_value = map[string]int32{
	"Voice": 0,
	"SMS":   1,
}

func (x ChannelType) String() string {
	return proto.EnumName(ChannelType_name, int32(x))
}

type InitiatePhoneCallRequest_CallInitiationType int32

const (
	// ConnectParties instructs service to call
	// the source and once the source answers, connect the
	// source to the destination by calling the destination
	// and merging the calls.
	InitiatePhoneCallRequest_ConnectParties InitiatePhoneCallRequest_CallInitiationType = 0
	// ReturnPhoneNumber instructs service to return a number
	// to the caller that the user can call to be connected
	// to the patient.
	InitiatePhoneCallRequest_ReturnPhoneNumber InitiatePhoneCallRequest_CallInitiationType = 1
)

var InitiatePhoneCallRequest_CallInitiationType_name = map[int32]string{
	0: "ConnectParties",
	1: "ReturnPhoneNumber",
}
var InitiatePhoneCallRequest_CallInitiationType_value = map[string]int32{
	"ConnectParties":    0,
	"ReturnPhoneNumber": 1,
}

func (x InitiatePhoneCallRequest_CallInitiationType) String() string {
	return proto.EnumName(InitiatePhoneCallRequest_CallInitiationType_name, int32(x))
}

// SendMessageRequest represents a request to send a message
// over an external channel.
type SendMessageRequest struct {
	Text          string      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FromChannelId string      `protobuf:"bytes,2,opt,name=from_channel_id,proto3" json:"from_channel_id,omitempty"`
	ToChannelId   string      `protobuf:"bytes,3,opt,name=to_channel_id,proto3" json:"to_channel_id,omitempty"`
	Channel       ChannelType `protobuf:"varint,4,opt,name=channel,proto3,enum=excomms.ChannelType" json:"channel,omitempty"`
}

func (m *SendMessageRequest) Reset()         { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()    {}

type SendMessageResponse struct {
}

func (m *SendMessageResponse) Reset()         { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()    {}

type InitiatePhoneCallRequest struct {
	CallInitiationType InitiatePhoneCallRequest_CallInitiationType `protobuf:"varint,1,opt,name=call_initiation_type,proto3,enum=excomms.InitiatePhoneCallRequest_CallInitiationType" json:"call_initiation_type,omitempty"`
	FromPhoneNumber    string                                      `protobuf:"bytes,2,opt,name=from_phone_number,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber      string                                      `protobuf:"bytes,3,opt,name=to_phone_number,proto3" json:"to_phone_number,omitempty"`
}

func (m *InitiatePhoneCallRequest) Reset()         { *m = InitiatePhoneCallRequest{} }
func (m *InitiatePhoneCallRequest) String() string { return proto.CompactTextString(m) }
func (*InitiatePhoneCallRequest) ProtoMessage()    {}

type InitiatePhoneCallResponse struct {
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
}

func (m *InitiatePhoneCallResponse) Reset()         { *m = InitiatePhoneCallResponse{} }
func (m *InitiatePhoneCallResponse) String() string { return proto.CompactTextString(m) }
func (*InitiatePhoneCallResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*SendMessageRequest)(nil), "excomms.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "excomms.SendMessageResponse")
	proto.RegisterType((*InitiatePhoneCallRequest)(nil), "excomms.InitiatePhoneCallRequest")
	proto.RegisterType((*InitiatePhoneCallResponse)(nil), "excomms.InitiatePhoneCallResponse")
	proto.RegisterEnum("excomms.ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterEnum("excomms.InitiatePhoneCallRequest_CallInitiationType", InitiatePhoneCallRequest_CallInitiationType_name, InitiatePhoneCallRequest_CallInitiationType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ExCommsService service

type ExCommsServiceClient interface {
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error)
}

type exCommsServiceClient struct {
	cc *grpc.ClientConn
}

func NewExCommsServiceClient(cc *grpc.ClientConn) ExCommsServiceClient {
	return &exCommsServiceClient{cc}
}

func (c *exCommsServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/excomms.ExCommsService/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsServiceClient) InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error) {
	out := new(InitiatePhoneCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExCommsService/InitiatePhoneCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExCommsService service

type ExCommsServiceServer interface {
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(context.Context, *InitiatePhoneCallRequest) (*InitiatePhoneCallResponse, error)
}

func RegisterExCommsServiceServer(s *grpc.Server, srv ExCommsServiceServer) {
	s.RegisterService(&_ExCommsService_serviceDesc, srv)
}

func _ExCommsService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServiceServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ExCommsService_InitiatePhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InitiatePhoneCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ExCommsServiceServer).InitiatePhoneCall(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ExCommsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "excomms.ExCommsService",
	HandlerType: (*ExCommsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ExCommsService_SendMessage_Handler,
		},
		{
			MethodName: "InitiatePhoneCall",
			Handler:    _ExCommsService_InitiatePhoneCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
