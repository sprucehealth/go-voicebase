// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package excomms is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		PublishedExternalMessage
		SMSItem
		IncomingCallEventItem
		OutgoingCallEventItem
		EmailItem
		MediaAttachment
		SendMessageRequest
		EmailMessage
		SMSMessage
		SendMessageResponse
		InitiatePhoneCallRequest
		InitiatePhoneCallResponse
		AvailablePhoneNumber
		SearchAvailablePhoneNumbersRequest
		SearchAvailablePhoneNumbersResponse
		ProvisionPhoneNumberRequest
		ProvisionPhoneNumberResponse
		DeprovisionPhoneNumberRequest
		DeprovisionPhoneNumberResponse
		DeprovisionEmailRequest
		DeprovisionEmailResponse
		ProvisionEmailAddressRequest
		ProvisionEmailAddressResponse
		IPCall
		IPCallParticipant
		InitiateIPCallRequest
		InitiateIPCallResponse
		IPCallRequest
		IPCallResponse
		PendingIPCallsRequest
		PendingIPCallsResponse
		UpdateIPCallRequest
		UpdateIPCallResponse
*/
package excomms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

// ChannelType specifies the channel over which the communication
// is intended to take place.
type ChannelType int32

const (
	ChannelType_VOICE ChannelType = 0
	ChannelType_SMS   ChannelType = 1
	ChannelType_EMAIL ChannelType = 2
)

var ChannelType_name = map[int32]string{
	0: "VOICE",
	1: "SMS",
	2: "EMAIL",
}
var ChannelType_value = map[string]int32{
	"VOICE": 0,
	"SMS":   1,
	"EMAIL": 2,
}

func (ChannelType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type PhoneNumberCapability int32

const (
	PhoneNumberCapability_VOICE_ENABLED PhoneNumberCapability = 0
	PhoneNumberCapability_SMS_ENABLED   PhoneNumberCapability = 1
	PhoneNumberCapability_MMS_ENABLED   PhoneNumberCapability = 2
)

var PhoneNumberCapability_name = map[int32]string{
	0: "VOICE_ENABLED",
	1: "SMS_ENABLED",
	2: "MMS_ENABLED",
}
var PhoneNumberCapability_value = map[string]int32{
	"VOICE_ENABLED": 0,
	"SMS_ENABLED":   1,
	"MMS_ENABLED":   2,
}

func (PhoneNumberCapability) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type IPCallParticipantRole int32

const (
	IPCallParticipantRole_INVALID_IPCALL_PARTICIPANT_ROLE IPCallParticipantRole = 0
	IPCallParticipantRole_CALLER                          IPCallParticipantRole = 1
	IPCallParticipantRole_RECIPIENT                       IPCallParticipantRole = 2
)

var IPCallParticipantRole_name = map[int32]string{
	0: "INVALID_IPCALL_PARTICIPANT_ROLE",
	1: "CALLER",
	2: "RECIPIENT",
}
var IPCallParticipantRole_value = map[string]int32{
	"INVALID_IPCALL_PARTICIPANT_ROLE": 0,
	"CALLER":    1,
	"RECIPIENT": 2,
}

func (IPCallParticipantRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type IPCallType int32

const (
	IPCallType_INVALID_IPCALL_TYPE IPCallType = 0
	IPCallType_VIDEO               IPCallType = 1
	IPCallType_AUDIO               IPCallType = 2
)

var IPCallType_name = map[int32]string{
	0: "INVALID_IPCALL_TYPE",
	1: "VIDEO",
	2: "AUDIO",
}
var IPCallType_value = map[string]int32{
	"INVALID_IPCALL_TYPE": 0,
	"VIDEO":               1,
	"AUDIO":               2,
}

func (IPCallType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type IPCallState int32

const (
	IPCallState_INVALID_IPCALL_STATE IPCallState = 0
	IPCallState_PENDING              IPCallState = 1
	IPCallState_ACCEPTED             IPCallState = 2
	IPCallState_DECLINED             IPCallState = 3
	IPCallState_CONNECTED            IPCallState = 4
	IPCallState_FAILED               IPCallState = 5
	IPCallState_COMPLETED            IPCallState = 6
)

var IPCallState_name = map[int32]string{
	0: "INVALID_IPCALL_STATE",
	1: "PENDING",
	2: "ACCEPTED",
	3: "DECLINED",
	4: "CONNECTED",
	5: "FAILED",
	6: "COMPLETED",
}
var IPCallState_value = map[string]int32{
	"INVALID_IPCALL_STATE": 0,
	"PENDING":              1,
	"ACCEPTED":             2,
	"DECLINED":             3,
	"CONNECTED":            4,
	"FAILED":               5,
	"COMPLETED":            6,
}

func (IPCallState) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type NetworkType int32

const (
	NetworkType_UNKNOWN  NetworkType = 0
	NetworkType_CELLULAR NetworkType = 1
	NetworkType_WIFI     NetworkType = 2
)

var NetworkType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CELLULAR",
	2: "WIFI",
}
var NetworkType_value = map[string]int32{
	"UNKNOWN":  0,
	"CELLULAR": 1,
	"WIFI":     2,
}

func (NetworkType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type PublishedExternalMessage_Type int32

const (
	PublishedExternalMessage_SMS                 PublishedExternalMessage_Type = 0
	PublishedExternalMessage_INCOMING_CALL_EVENT PublishedExternalMessage_Type = 1
	PublishedExternalMessage_OUTGOING_CALL_EVENT PublishedExternalMessage_Type = 2
	PublishedExternalMessage_EMAIL               PublishedExternalMessage_Type = 3
)

var PublishedExternalMessage_Type_name = map[int32]string{
	0: "SMS",
	1: "INCOMING_CALL_EVENT",
	2: "OUTGOING_CALL_EVENT",
	3: "EMAIL",
}
var PublishedExternalMessage_Type_value = map[string]int32{
	"SMS": 0,
	"INCOMING_CALL_EVENT": 1,
	"OUTGOING_CALL_EVENT": 2,
	"EMAIL":               3,
}

func (PublishedExternalMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{0, 0}
}

type PublishedExternalMessage_Direction int32

const (
	PublishedExternalMessage_INBOUND  PublishedExternalMessage_Direction = 0
	PublishedExternalMessage_OUTBOUND PublishedExternalMessage_Direction = 1
)

var PublishedExternalMessage_Direction_name = map[int32]string{
	0: "INBOUND",
	1: "OUTBOUND",
}
var PublishedExternalMessage_Direction_value = map[string]int32{
	"INBOUND":  0,
	"OUTBOUND": 1,
}

func (PublishedExternalMessage_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{0, 1}
}

type IncomingCallEventItem_Type int32

const (
	IncomingCallEventItem_ANSWERED              IncomingCallEventItem_Type = 0
	IncomingCallEventItem_UNANSWERED            IncomingCallEventItem_Type = 1
	IncomingCallEventItem_LEFT_VOICEMAIL        IncomingCallEventItem_Type = 2
	IncomingCallEventItem_LEFT_URGENT_VOICEMAIL IncomingCallEventItem_Type = 3
)

var IncomingCallEventItem_Type_name = map[int32]string{
	0: "ANSWERED",
	1: "UNANSWERED",
	2: "LEFT_VOICEMAIL",
	3: "LEFT_URGENT_VOICEMAIL",
}
var IncomingCallEventItem_Type_value = map[string]int32{
	"ANSWERED":              0,
	"UNANSWERED":            1,
	"LEFT_VOICEMAIL":        2,
	"LEFT_URGENT_VOICEMAIL": 3,
}

func (IncomingCallEventItem_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{2, 0}
}

type OutgoingCallEventItem_Type int32

const (
	OutgoingCallEventItem_PLACED     OutgoingCallEventItem_Type = 0
	OutgoingCallEventItem_ANSWERED   OutgoingCallEventItem_Type = 1
	OutgoingCallEventItem_UNANSWERED OutgoingCallEventItem_Type = 2
)

var OutgoingCallEventItem_Type_name = map[int32]string{
	0: "PLACED",
	1: "ANSWERED",
	2: "UNANSWERED",
}
var OutgoingCallEventItem_Type_value = map[string]int32{
	"PLACED":     0,
	"ANSWERED":   1,
	"UNANSWERED": 2,
}

func (OutgoingCallEventItem_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{3, 0}
}

type InitiatePhoneCallRequest_CallInitiationType int32

const (
	// CONNECT_PARTIES instructs service to call
	// the source and once the source answers, connect the
	// source to the destination by calling the destination
	// and merging the calls.
	InitiatePhoneCallRequest_CONNECT_PARTIES InitiatePhoneCallRequest_CallInitiationType = 0
	// RETURN_PHONE_NUMBER instructs service to return a number
	// to the caller that the user can call to be connected
	// to the patient.
	InitiatePhoneCallRequest_RETURN_PHONE_NUMBER InitiatePhoneCallRequest_CallInitiationType = 1
)

var InitiatePhoneCallRequest_CallInitiationType_name = map[int32]string{
	0: "CONNECT_PARTIES",
	1: "RETURN_PHONE_NUMBER",
}
var InitiatePhoneCallRequest_CallInitiationType_value = map[string]int32{
	"CONNECT_PARTIES":     0,
	"RETURN_PHONE_NUMBER": 1,
}

func (InitiatePhoneCallRequest_CallInitiationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{10, 0}
}

type PublishedExternalMessage struct {
	FromChannelID string                        `protobuf:"bytes,1,opt,name=from_channel_id,json=fromChannelId,proto3" json:"from_channel_id,omitempty"`
	ToChannelID   string                        `protobuf:"bytes,2,opt,name=to_channel_id,json=toChannelId,proto3" json:"to_channel_id,omitempty"`
	Timestamp     uint64                        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          PublishedExternalMessage_Type `protobuf:"varint,4,opt,name=type,proto3,enum=excomms.PublishedExternalMessage_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*PublishedExternalMessage_SMSItem
	//	*PublishedExternalMessage_Incoming
	//	*PublishedExternalMessage_Outgoing
	//	*PublishedExternalMessage_EmailItem
	Item      isPublishedExternalMessage_Item    `protobuf_oneof:"item"`
	Direction PublishedExternalMessage_Direction `protobuf:"varint,9,opt,name=direction,proto3,enum=excomms.PublishedExternalMessage_Direction" json:"direction,omitempty"`
}

func (m *PublishedExternalMessage) Reset()                    { *m = PublishedExternalMessage{} }
func (*PublishedExternalMessage) ProtoMessage()               {}
func (*PublishedExternalMessage) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type isPublishedExternalMessage_Item interface {
	isPublishedExternalMessage_Item()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PublishedExternalMessage_SMSItem struct {
	SMSItem *SMSItem `protobuf:"bytes,5,opt,name=sms_item,json=smsItem,oneof"`
}
type PublishedExternalMessage_Incoming struct {
	Incoming *IncomingCallEventItem `protobuf:"bytes,6,opt,name=incoming,oneof"`
}
type PublishedExternalMessage_Outgoing struct {
	Outgoing *OutgoingCallEventItem `protobuf:"bytes,7,opt,name=outgoing,oneof"`
}
type PublishedExternalMessage_EmailItem struct {
	EmailItem *EmailItem `protobuf:"bytes,8,opt,name=email_item,json=emailItem,oneof"`
}

func (*PublishedExternalMessage_SMSItem) isPublishedExternalMessage_Item()   {}
func (*PublishedExternalMessage_Incoming) isPublishedExternalMessage_Item()  {}
func (*PublishedExternalMessage_Outgoing) isPublishedExternalMessage_Item()  {}
func (*PublishedExternalMessage_EmailItem) isPublishedExternalMessage_Item() {}

func (m *PublishedExternalMessage) GetItem() isPublishedExternalMessage_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PublishedExternalMessage) GetSMSItem() *SMSItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_SMSItem); ok {
		return x.SMSItem
	}
	return nil
}

func (m *PublishedExternalMessage) GetIncoming() *IncomingCallEventItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_Incoming); ok {
		return x.Incoming
	}
	return nil
}

func (m *PublishedExternalMessage) GetOutgoing() *OutgoingCallEventItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_Outgoing); ok {
		return x.Outgoing
	}
	return nil
}

func (m *PublishedExternalMessage) GetEmailItem() *EmailItem {
	if x, ok := m.GetItem().(*PublishedExternalMessage_EmailItem); ok {
		return x.EmailItem
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PublishedExternalMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PublishedExternalMessage_OneofMarshaler, _PublishedExternalMessage_OneofUnmarshaler, _PublishedExternalMessage_OneofSizer, []interface{}{
		(*PublishedExternalMessage_SMSItem)(nil),
		(*PublishedExternalMessage_Incoming)(nil),
		(*PublishedExternalMessage_Outgoing)(nil),
		(*PublishedExternalMessage_EmailItem)(nil),
	}
}

func _PublishedExternalMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PublishedExternalMessage)
	// item
	switch x := m.Item.(type) {
	case *PublishedExternalMessage_SMSItem:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMSItem); err != nil {
			return err
		}
	case *PublishedExternalMessage_Incoming:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Incoming); err != nil {
			return err
		}
	case *PublishedExternalMessage_Outgoing:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Outgoing); err != nil {
			return err
		}
	case *PublishedExternalMessage_EmailItem:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EmailItem); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PublishedExternalMessage.Item has unexpected type %T", x)
	}
	return nil
}

func _PublishedExternalMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PublishedExternalMessage)
	switch tag {
	case 5: // item.sms_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_SMSItem{msg}
		return true, err
	case 6: // item.incoming
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IncomingCallEventItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_Incoming{msg}
		return true, err
	case 7: // item.outgoing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OutgoingCallEventItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_Outgoing{msg}
		return true, err
	case 8: // item.email_item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailItem)
		err := b.DecodeMessage(msg)
		m.Item = &PublishedExternalMessage_EmailItem{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PublishedExternalMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PublishedExternalMessage)
	// item
	switch x := m.Item.(type) {
	case *PublishedExternalMessage_SMSItem:
		s := proto.Size(x.SMSItem)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PublishedExternalMessage_Incoming:
		s := proto.Size(x.Incoming)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PublishedExternalMessage_Outgoing:
		s := proto.Size(x.Outgoing)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PublishedExternalMessage_EmailItem:
		s := proto.Size(x.EmailItem)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SMSItem struct {
	Text        string             `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Attachments []*MediaAttachment `protobuf:"bytes,2,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *SMSItem) Reset()                    { *m = SMSItem{} }
func (*SMSItem) ProtoMessage()               {}
func (*SMSItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

func (m *SMSItem) GetAttachments() []*MediaAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type IncomingCallEventItem struct {
	Type                IncomingCallEventItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.IncomingCallEventItem_Type" json:"type,omitempty"`
	DurationInSeconds   uint32                     `protobuf:"varint,2,opt,name=duration_in_seconds,json=durationInSeconds,proto3" json:"duration_in_seconds,omitempty"`
	VoicemailMediaID    string                     `protobuf:"bytes,3,opt,name=voicemail_media_id,json=voicemailMediaId,proto3" json:"voicemail_media_id,omitempty"`
	VoicemailDurationNS uint64                     `protobuf:"varint,4,opt,name=voicemail_duration_ns,json=voicemailDurationNs,proto3" json:"voicemail_duration_ns,omitempty"`
	TranscriptionText   string                     `protobuf:"bytes,5,opt,name=transcription_text,json=transcriptionText,proto3" json:"transcription_text,omitempty"`
}

func (m *IncomingCallEventItem) Reset()                    { *m = IncomingCallEventItem{} }
func (*IncomingCallEventItem) ProtoMessage()               {}
func (*IncomingCallEventItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type OutgoingCallEventItem struct {
	Type              OutgoingCallEventItem_Type `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.OutgoingCallEventItem_Type" json:"type,omitempty"`
	DurationInSeconds uint32                     `protobuf:"varint,2,opt,name=duration_in_seconds,json=durationInSeconds,proto3" json:"duration_in_seconds,omitempty"`
	CallerEntityID    string                     `protobuf:"bytes,3,opt,name=caller_entity_id,json=callerEntityId,proto3" json:"caller_entity_id,omitempty"`
	CalleeEntityID    string                     `protobuf:"bytes,4,opt,name=callee_entity_id,json=calleeEntityId,proto3" json:"callee_entity_id,omitempty"`
}

func (m *OutgoingCallEventItem) Reset()                    { *m = OutgoingCallEventItem{} }
func (*OutgoingCallEventItem) ProtoMessage()               {}
func (*OutgoingCallEventItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type EmailItem struct {
	Body        string             `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Subject     string             `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Attachments []*MediaAttachment `protobuf:"bytes,3,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *EmailItem) Reset()                    { *m = EmailItem{} }
func (*EmailItem) ProtoMessage()               {}
func (*EmailItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

func (m *EmailItem) GetAttachments() []*MediaAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type MediaAttachment struct {
	MediaID     string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MediaAttachment) Reset()                    { *m = MediaAttachment{} }
func (*MediaAttachment) ProtoMessage()               {}
func (*MediaAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

// SendMessageRequest represents a request to send a message
// over an external channel.
type SendMessageRequest struct {
	Channel ChannelType `protobuf:"varint,1,opt,name=channel,proto3,enum=excomms.ChannelType" json:"channel,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*SendMessageRequest_Email
	//	*SendMessageRequest_SMS
	Message isSendMessageRequest_Message `protobuf_oneof:"message"`
	// uuid for client to group and retrieve list of external messages
	UUID string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

type isSendMessageRequest_Message interface {
	isSendMessageRequest_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SendMessageRequest_Email struct {
	Email *EmailMessage `protobuf:"bytes,2,opt,name=email,oneof"`
}
type SendMessageRequest_SMS struct {
	SMS *SMSMessage `protobuf:"bytes,3,opt,name=sms,oneof"`
}

func (*SendMessageRequest_Email) isSendMessageRequest_Message() {}
func (*SendMessageRequest_SMS) isSendMessageRequest_Message()   {}

func (m *SendMessageRequest) GetMessage() isSendMessageRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SendMessageRequest) GetEmail() *EmailMessage {
	if x, ok := m.GetMessage().(*SendMessageRequest_Email); ok {
		return x.Email
	}
	return nil
}

func (m *SendMessageRequest) GetSMS() *SMSMessage {
	if x, ok := m.GetMessage().(*SendMessageRequest_SMS); ok {
		return x.SMS
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SendMessageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SendMessageRequest_OneofMarshaler, _SendMessageRequest_OneofUnmarshaler, _SendMessageRequest_OneofSizer, []interface{}{
		(*SendMessageRequest_Email)(nil),
		(*SendMessageRequest_SMS)(nil),
	}
}

func _SendMessageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SendMessageRequest)
	// message
	switch x := m.Message.(type) {
	case *SendMessageRequest_Email:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Email); err != nil {
			return err
		}
	case *SendMessageRequest_SMS:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SMS); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SendMessageRequest.Message has unexpected type %T", x)
	}
	return nil
}

func _SendMessageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SendMessageRequest)
	switch tag {
	case 2: // message.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmailMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SendMessageRequest_Email{msg}
		return true, err
	case 3: // message.sms
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SMSMessage)
		err := b.DecodeMessage(msg)
		m.Message = &SendMessageRequest_SMS{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SendMessageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SendMessageRequest)
	// message
	switch x := m.Message.(type) {
	case *SendMessageRequest_Email:
		s := proto.Size(x.Email)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SendMessageRequest_SMS:
		s := proto.Size(x.SMS)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmailMessage struct {
	Subject               string                       `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Body                  string                       `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	FromName              string                       `protobuf:"bytes,3,opt,name=from_name,json=fromName,proto3" json:"from_name,omitempty"`
	FromEmailAddress      string                       `protobuf:"bytes,4,opt,name=from_email_address,json=fromEmailAddress,proto3" json:"from_email_address,omitempty"`
	ToName                string                       `protobuf:"bytes,5,opt,name=to_name,json=toName,proto3" json:"to_name,omitempty"`
	ToEmailAddress        string                       `protobuf:"bytes,6,opt,name=to_email_address,json=toEmailAddress,proto3" json:"to_email_address,omitempty"`
	MediaIDs              []string                     `protobuf:"bytes,7,rep,name=MediaIDs,json=mediaIDs" json:"MediaIDs,omitempty"`
	TemplateID            string                       `protobuf:"bytes,8,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateSubstitutions []*EmailMessage_Substitution `protobuf:"bytes,9,rep,name=template_substitutions,json=templateSubstitutions" json:"template_substitutions,omitempty"`
}

func (m *EmailMessage) Reset()                    { *m = EmailMessage{} }
func (*EmailMessage) ProtoMessage()               {}
func (*EmailMessage) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

func (m *EmailMessage) GetTemplateSubstitutions() []*EmailMessage_Substitution {
	if m != nil {
		return m.TemplateSubstitutions
	}
	return nil
}

type EmailMessage_Substitution struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EmailMessage_Substitution) Reset()                    { *m = EmailMessage_Substitution{} }
func (*EmailMessage_Substitution) ProtoMessage()               {}
func (*EmailMessage_Substitution) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7, 0} }

type SMSMessage struct {
	Text            string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FromPhoneNumber string   `protobuf:"bytes,2,opt,name=from_phone_number,json=fromPhoneNumber,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber   string   `protobuf:"bytes,3,opt,name=to_phone_number,json=toPhoneNumber,proto3" json:"to_phone_number,omitempty"`
	MediaIDs        []string `protobuf:"bytes,4,rep,name=MediaIDs,json=mediaIDs" json:"MediaIDs,omitempty"`
}

func (m *SMSMessage) Reset()                    { *m = SMSMessage{} }
func (*SMSMessage) ProtoMessage()               {}
func (*SMSMessage) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

type SendMessageResponse struct {
}

func (m *SendMessageResponse) Reset()                    { *m = SendMessageResponse{} }
func (*SendMessageResponse) ProtoMessage()               {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

type InitiatePhoneCallRequest struct {
	CallInitiationType InitiatePhoneCallRequest_CallInitiationType `protobuf:"varint,1,opt,name=call_initiation_type,json=callInitiationType,proto3,enum=excomms.InitiatePhoneCallRequest_CallInitiationType" json:"call_initiation_type,omitempty"`
	FromPhoneNumber    string                                      `protobuf:"bytes,2,opt,name=from_phone_number,json=fromPhoneNumber,proto3" json:"from_phone_number,omitempty"`
	ToPhoneNumber      string                                      `protobuf:"bytes,3,opt,name=to_phone_number,json=toPhoneNumber,proto3" json:"to_phone_number,omitempty"`
	OrganizationID     string                                      `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	CallerEntityID     string                                      `protobuf:"bytes,5,opt,name=caller_entity_id,json=callerEntityId,proto3" json:"caller_entity_id,omitempty"`
	DeviceID           string                                      `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *InitiatePhoneCallRequest) Reset()                    { *m = InitiatePhoneCallRequest{} }
func (*InitiatePhoneCallRequest) ProtoMessage()               {}
func (*InitiatePhoneCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

type InitiatePhoneCallResponse struct {
	// phone_number returns the phone number which the caller can call
	// to connect the caller to the destination phone number in the request.
	ProxyPhoneNumber       string `protobuf:"bytes,3,opt,name=proxy_phone_number,json=proxyPhoneNumber,proto3" json:"proxy_phone_number,omitempty"`
	OriginatingPhoneNumber string `protobuf:"bytes,4,opt,name=originating_phone_number,json=originatingPhoneNumber,proto3" json:"originating_phone_number,omitempty"`
}

func (m *InitiatePhoneCallResponse) Reset()                    { *m = InitiatePhoneCallResponse{} }
func (*InitiatePhoneCallResponse) ProtoMessage()               {}
func (*InitiatePhoneCallResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

type AvailablePhoneNumber struct {
	FriendlyName string                  `protobuf:"bytes,1,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	PhoneNumber  string                  `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Capabilities []PhoneNumberCapability `protobuf:"varint,3,rep,name=capabilities,enum=excomms.PhoneNumberCapability" json:"capabilities,omitempty"`
}

func (m *AvailablePhoneNumber) Reset()                    { *m = AvailablePhoneNumber{} }
func (*AvailablePhoneNumber) ProtoMessage()               {}
func (*AvailablePhoneNumber) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

type SearchAvailablePhoneNumbersRequest struct {
	AreaCode     string                  `protobuf:"bytes,1,opt,name=area_code,json=areaCode,proto3" json:"area_code,omitempty"`
	Capabilities []PhoneNumberCapability `protobuf:"varint,2,rep,name=capabilities,enum=excomms.PhoneNumberCapability" json:"capabilities,omitempty"`
}

func (m *SearchAvailablePhoneNumbersRequest) Reset()      { *m = SearchAvailablePhoneNumbersRequest{} }
func (*SearchAvailablePhoneNumbersRequest) ProtoMessage() {}
func (*SearchAvailablePhoneNumbersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{13}
}

type SearchAvailablePhoneNumbersResponse struct {
	PhoneNumbers []*AvailablePhoneNumber `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers" json:"phone_numbers,omitempty"`
}

func (m *SearchAvailablePhoneNumbersResponse) Reset()      { *m = SearchAvailablePhoneNumbersResponse{} }
func (*SearchAvailablePhoneNumbersResponse) ProtoMessage() {}
func (*SearchAvailablePhoneNumbersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{14}
}

func (m *SearchAvailablePhoneNumbersResponse) GetPhoneNumbers() []*AvailablePhoneNumber {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

type ProvisionPhoneNumberRequest struct {
	ProvisionFor string `protobuf:"bytes,1,opt,name=provision_for,json=provisionFor,proto3" json:"provision_for,omitempty"`
	// Types that are valid to be assigned to Number:
	//	*ProvisionPhoneNumberRequest_PhoneNumber
	//	*ProvisionPhoneNumberRequest_AreaCode
	Number isProvisionPhoneNumberRequest_Number `protobuf_oneof:"number"`
}

func (m *ProvisionPhoneNumberRequest) Reset()                    { *m = ProvisionPhoneNumberRequest{} }
func (*ProvisionPhoneNumberRequest) ProtoMessage()               {}
func (*ProvisionPhoneNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

type isProvisionPhoneNumberRequest_Number interface {
	isProvisionPhoneNumberRequest_Number()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProvisionPhoneNumberRequest_PhoneNumber struct {
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3,oneof"`
}
type ProvisionPhoneNumberRequest_AreaCode struct {
	AreaCode string `protobuf:"bytes,3,opt,name=area_code,json=areaCode,proto3,oneof"`
}

func (*ProvisionPhoneNumberRequest_PhoneNumber) isProvisionPhoneNumberRequest_Number() {}
func (*ProvisionPhoneNumberRequest_AreaCode) isProvisionPhoneNumberRequest_Number()    {}

func (m *ProvisionPhoneNumberRequest) GetNumber() isProvisionPhoneNumberRequest_Number {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *ProvisionPhoneNumberRequest) GetPhoneNumber() string {
	if x, ok := m.GetNumber().(*ProvisionPhoneNumberRequest_PhoneNumber); ok {
		return x.PhoneNumber
	}
	return ""
}

func (m *ProvisionPhoneNumberRequest) GetAreaCode() string {
	if x, ok := m.GetNumber().(*ProvisionPhoneNumberRequest_AreaCode); ok {
		return x.AreaCode
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProvisionPhoneNumberRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProvisionPhoneNumberRequest_OneofMarshaler, _ProvisionPhoneNumberRequest_OneofUnmarshaler, _ProvisionPhoneNumberRequest_OneofSizer, []interface{}{
		(*ProvisionPhoneNumberRequest_PhoneNumber)(nil),
		(*ProvisionPhoneNumberRequest_AreaCode)(nil),
	}
}

func _ProvisionPhoneNumberRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProvisionPhoneNumberRequest)
	// number
	switch x := m.Number.(type) {
	case *ProvisionPhoneNumberRequest_PhoneNumber:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.PhoneNumber)
	case *ProvisionPhoneNumberRequest_AreaCode:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AreaCode)
	case nil:
	default:
		return fmt.Errorf("ProvisionPhoneNumberRequest.Number has unexpected type %T", x)
	}
	return nil
}

func _ProvisionPhoneNumberRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProvisionPhoneNumberRequest)
	switch tag {
	case 2: // number.phone_number
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &ProvisionPhoneNumberRequest_PhoneNumber{x}
		return true, err
	case 3: // number.area_code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Number = &ProvisionPhoneNumberRequest_AreaCode{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProvisionPhoneNumberRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProvisionPhoneNumberRequest)
	// number
	switch x := m.Number.(type) {
	case *ProvisionPhoneNumberRequest_PhoneNumber:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PhoneNumber)))
		n += len(x.PhoneNumber)
	case *ProvisionPhoneNumberRequest_AreaCode:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AreaCode)))
		n += len(x.AreaCode)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProvisionPhoneNumberResponse struct {
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *ProvisionPhoneNumberResponse) Reset()                    { *m = ProvisionPhoneNumberResponse{} }
func (*ProvisionPhoneNumberResponse) ProtoMessage()               {}
func (*ProvisionPhoneNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

type DeprovisionPhoneNumberRequest struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Reason      string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *DeprovisionPhoneNumberRequest) Reset()      { *m = DeprovisionPhoneNumberRequest{} }
func (*DeprovisionPhoneNumberRequest) ProtoMessage() {}
func (*DeprovisionPhoneNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{17}
}

type DeprovisionPhoneNumberResponse struct {
}

func (m *DeprovisionPhoneNumberResponse) Reset()      { *m = DeprovisionPhoneNumberResponse{} }
func (*DeprovisionPhoneNumberResponse) ProtoMessage() {}
func (*DeprovisionPhoneNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{18}
}

type DeprovisionEmailRequest struct {
	Email  string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *DeprovisionEmailRequest) Reset()                    { *m = DeprovisionEmailRequest{} }
func (*DeprovisionEmailRequest) ProtoMessage()               {}
func (*DeprovisionEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

type DeprovisionEmailResponse struct {
}

func (m *DeprovisionEmailResponse) Reset()                    { *m = DeprovisionEmailResponse{} }
func (*DeprovisionEmailResponse) ProtoMessage()               {}
func (*DeprovisionEmailResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

type ProvisionEmailAddressRequest struct {
	ProvisionFor string `protobuf:"bytes,1,opt,name=provision_for,json=provisionFor,proto3" json:"provision_for,omitempty"`
	EmailAddress string `protobuf:"bytes,2,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
}

func (m *ProvisionEmailAddressRequest) Reset()                    { *m = ProvisionEmailAddressRequest{} }
func (*ProvisionEmailAddressRequest) ProtoMessage()               {}
func (*ProvisionEmailAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

type ProvisionEmailAddressResponse struct {
	EmailAddress string `protobuf:"bytes,1,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
}

func (m *ProvisionEmailAddressResponse) Reset()      { *m = ProvisionEmailAddressResponse{} }
func (*ProvisionEmailAddressResponse) ProtoMessage() {}
func (*ProvisionEmailAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{22}
}

type IPCall struct {
	ID           string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type         IPCallType           `protobuf:"varint,2,opt,name=type,proto3,enum=excomms.IPCallType" json:"type,omitempty"`
	Pending      bool                 `protobuf:"varint,3,opt,name=pending,proto3" json:"pending,omitempty"`
	Participants []*IPCallParticipant `protobuf:"bytes,4,rep,name=participants" json:"participants,omitempty"`
	Token        string               `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *IPCall) Reset()                    { *m = IPCall{} }
func (*IPCall) ProtoMessage()               {}
func (*IPCall) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

func (m *IPCall) GetParticipants() []*IPCallParticipant {
	if m != nil {
		return m.Participants
	}
	return nil
}

type IPCallParticipant struct {
	AccountID   string                `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EntityID    string                `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Role        IPCallParticipantRole `protobuf:"varint,3,opt,name=role,proto3,enum=excomms.IPCallParticipantRole" json:"role,omitempty"`
	State       IPCallState           `protobuf:"varint,4,opt,name=state,proto3,enum=excomms.IPCallState" json:"state,omitempty"`
	Identity    string                `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	NetworkType NetworkType           `protobuf:"varint,6,opt,name=network_type,json=networkType,proto3,enum=excomms.NetworkType" json:"network_type,omitempty"`
}

func (m *IPCallParticipant) Reset()                    { *m = IPCallParticipant{} }
func (*IPCallParticipant) ProtoMessage()               {}
func (*IPCallParticipant) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{24} }

type InitiateIPCallRequest struct {
	Type               IPCallType  `protobuf:"varint,1,opt,name=type,proto3,enum=excomms.IPCallType" json:"type,omitempty"`
	CallerEntityID     string      `protobuf:"bytes,2,opt,name=caller_entity_id,json=callerEntityId,proto3" json:"caller_entity_id,omitempty"`
	RecipientEntityIDs []string    `protobuf:"bytes,3,rep,name=recipient_entity_ids,json=recipientEntityIds" json:"recipient_entity_ids,omitempty"`
	NetworkType        NetworkType `protobuf:"varint,4,opt,name=network_type,json=networkType,proto3,enum=excomms.NetworkType" json:"network_type,omitempty"`
}

func (m *InitiateIPCallRequest) Reset()                    { *m = InitiateIPCallRequest{} }
func (*InitiateIPCallRequest) ProtoMessage()               {}
func (*InitiateIPCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

type InitiateIPCallResponse struct {
	Call *IPCall `protobuf:"bytes,1,opt,name=call" json:"call,omitempty"`
}

func (m *InitiateIPCallResponse) Reset()                    { *m = InitiateIPCallResponse{} }
func (*InitiateIPCallResponse) ProtoMessage()               {}
func (*InitiateIPCallResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

func (m *InitiateIPCallResponse) GetCall() *IPCall {
	if m != nil {
		return m.Call
	}
	return nil
}

type IPCallRequest struct {
	IPCallID  string `protobuf:"bytes,1,opt,name=ipcall_id,json=ipcallId,proto3" json:"ipcall_id,omitempty"`
	AccountID string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *IPCallRequest) Reset()                    { *m = IPCallRequest{} }
func (*IPCallRequest) ProtoMessage()               {}
func (*IPCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

type IPCallResponse struct {
	Call *IPCall `protobuf:"bytes,1,opt,name=call" json:"call,omitempty"`
}

func (m *IPCallResponse) Reset()                    { *m = IPCallResponse{} }
func (*IPCallResponse) ProtoMessage()               {}
func (*IPCallResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

func (m *IPCallResponse) GetCall() *IPCall {
	if m != nil {
		return m.Call
	}
	return nil
}

type PendingIPCallsRequest struct {
	AccountID string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *PendingIPCallsRequest) Reset()                    { *m = PendingIPCallsRequest{} }
func (*PendingIPCallsRequest) ProtoMessage()               {}
func (*PendingIPCallsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

type PendingIPCallsResponse struct {
	Calls []*IPCall `protobuf:"bytes,1,rep,name=calls" json:"calls,omitempty"`
}

func (m *PendingIPCallsResponse) Reset()                    { *m = PendingIPCallsResponse{} }
func (*PendingIPCallsResponse) ProtoMessage()               {}
func (*PendingIPCallsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

func (m *PendingIPCallsResponse) GetCalls() []*IPCall {
	if m != nil {
		return m.Calls
	}
	return nil
}

type UpdateIPCallRequest struct {
	IPCallID    string      `protobuf:"bytes,1,opt,name=ipcall_id,json=ipcallId,proto3" json:"ipcall_id,omitempty"`
	AccountID   string      `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	State       IPCallState `protobuf:"varint,3,opt,name=state,proto3,enum=excomms.IPCallState" json:"state,omitempty"`
	NetworkType NetworkType `protobuf:"varint,4,opt,name=network_type,json=networkType,proto3,enum=excomms.NetworkType" json:"network_type,omitempty"`
}

func (m *UpdateIPCallRequest) Reset()                    { *m = UpdateIPCallRequest{} }
func (*UpdateIPCallRequest) ProtoMessage()               {}
func (*UpdateIPCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

type UpdateIPCallResponse struct {
	Call *IPCall `protobuf:"bytes,1,opt,name=call" json:"call,omitempty"`
}

func (m *UpdateIPCallResponse) Reset()                    { *m = UpdateIPCallResponse{} }
func (*UpdateIPCallResponse) ProtoMessage()               {}
func (*UpdateIPCallResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

func (m *UpdateIPCallResponse) GetCall() *IPCall {
	if m != nil {
		return m.Call
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishedExternalMessage)(nil), "excomms.PublishedExternalMessage")
	proto.RegisterType((*SMSItem)(nil), "excomms.SMSItem")
	proto.RegisterType((*IncomingCallEventItem)(nil), "excomms.IncomingCallEventItem")
	proto.RegisterType((*OutgoingCallEventItem)(nil), "excomms.OutgoingCallEventItem")
	proto.RegisterType((*EmailItem)(nil), "excomms.EmailItem")
	proto.RegisterType((*MediaAttachment)(nil), "excomms.MediaAttachment")
	proto.RegisterType((*SendMessageRequest)(nil), "excomms.SendMessageRequest")
	proto.RegisterType((*EmailMessage)(nil), "excomms.EmailMessage")
	proto.RegisterType((*EmailMessage_Substitution)(nil), "excomms.EmailMessage.Substitution")
	proto.RegisterType((*SMSMessage)(nil), "excomms.SMSMessage")
	proto.RegisterType((*SendMessageResponse)(nil), "excomms.SendMessageResponse")
	proto.RegisterType((*InitiatePhoneCallRequest)(nil), "excomms.InitiatePhoneCallRequest")
	proto.RegisterType((*InitiatePhoneCallResponse)(nil), "excomms.InitiatePhoneCallResponse")
	proto.RegisterType((*AvailablePhoneNumber)(nil), "excomms.AvailablePhoneNumber")
	proto.RegisterType((*SearchAvailablePhoneNumbersRequest)(nil), "excomms.SearchAvailablePhoneNumbersRequest")
	proto.RegisterType((*SearchAvailablePhoneNumbersResponse)(nil), "excomms.SearchAvailablePhoneNumbersResponse")
	proto.RegisterType((*ProvisionPhoneNumberRequest)(nil), "excomms.ProvisionPhoneNumberRequest")
	proto.RegisterType((*ProvisionPhoneNumberResponse)(nil), "excomms.ProvisionPhoneNumberResponse")
	proto.RegisterType((*DeprovisionPhoneNumberRequest)(nil), "excomms.DeprovisionPhoneNumberRequest")
	proto.RegisterType((*DeprovisionPhoneNumberResponse)(nil), "excomms.DeprovisionPhoneNumberResponse")
	proto.RegisterType((*DeprovisionEmailRequest)(nil), "excomms.DeprovisionEmailRequest")
	proto.RegisterType((*DeprovisionEmailResponse)(nil), "excomms.DeprovisionEmailResponse")
	proto.RegisterType((*ProvisionEmailAddressRequest)(nil), "excomms.ProvisionEmailAddressRequest")
	proto.RegisterType((*ProvisionEmailAddressResponse)(nil), "excomms.ProvisionEmailAddressResponse")
	proto.RegisterType((*IPCall)(nil), "excomms.IPCall")
	proto.RegisterType((*IPCallParticipant)(nil), "excomms.IPCallParticipant")
	proto.RegisterType((*InitiateIPCallRequest)(nil), "excomms.InitiateIPCallRequest")
	proto.RegisterType((*InitiateIPCallResponse)(nil), "excomms.InitiateIPCallResponse")
	proto.RegisterType((*IPCallRequest)(nil), "excomms.IPCallRequest")
	proto.RegisterType((*IPCallResponse)(nil), "excomms.IPCallResponse")
	proto.RegisterType((*PendingIPCallsRequest)(nil), "excomms.PendingIPCallsRequest")
	proto.RegisterType((*PendingIPCallsResponse)(nil), "excomms.PendingIPCallsResponse")
	proto.RegisterType((*UpdateIPCallRequest)(nil), "excomms.UpdateIPCallRequest")
	proto.RegisterType((*UpdateIPCallResponse)(nil), "excomms.UpdateIPCallResponse")
	proto.RegisterEnum("excomms.ChannelType", ChannelType_name, ChannelType_value)
	proto.RegisterEnum("excomms.PhoneNumberCapability", PhoneNumberCapability_name, PhoneNumberCapability_value)
	proto.RegisterEnum("excomms.IPCallParticipantRole", IPCallParticipantRole_name, IPCallParticipantRole_value)
	proto.RegisterEnum("excomms.IPCallType", IPCallType_name, IPCallType_value)
	proto.RegisterEnum("excomms.IPCallState", IPCallState_name, IPCallState_value)
	proto.RegisterEnum("excomms.NetworkType", NetworkType_name, NetworkType_value)
	proto.RegisterEnum("excomms.PublishedExternalMessage_Type", PublishedExternalMessage_Type_name, PublishedExternalMessage_Type_value)
	proto.RegisterEnum("excomms.PublishedExternalMessage_Direction", PublishedExternalMessage_Direction_name, PublishedExternalMessage_Direction_value)
	proto.RegisterEnum("excomms.IncomingCallEventItem_Type", IncomingCallEventItem_Type_name, IncomingCallEventItem_Type_value)
	proto.RegisterEnum("excomms.OutgoingCallEventItem_Type", OutgoingCallEventItem_Type_name, OutgoingCallEventItem_Type_value)
	proto.RegisterEnum("excomms.InitiatePhoneCallRequest_CallInitiationType", InitiatePhoneCallRequest_CallInitiationType_name, InitiatePhoneCallRequest_CallInitiationType_value)
}
func (x ChannelType) String() string {
	s, ok := ChannelType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PhoneNumberCapability) String() string {
	s, ok := PhoneNumberCapability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IPCallParticipantRole) String() string {
	s, ok := IPCallParticipantRole_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IPCallType) String() string {
	s, ok := IPCallType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IPCallState) String() string {
	s, ok := IPCallState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NetworkType) String() string {
	s, ok := NetworkType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PublishedExternalMessage_Type) String() string {
	s, ok := PublishedExternalMessage_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PublishedExternalMessage_Direction) String() string {
	s, ok := PublishedExternalMessage_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x IncomingCallEventItem_Type) String() string {
	s, ok := IncomingCallEventItem_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OutgoingCallEventItem_Type) String() string {
	s, ok := OutgoingCallEventItem_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InitiatePhoneCallRequest_CallInitiationType) String() string {
	s, ok := InitiatePhoneCallRequest_CallInitiationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PublishedExternalMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage)
	if !ok {
		that2, ok := that.(PublishedExternalMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FromChannelID != that1.FromChannelID {
		return false
	}
	if this.ToChannelID != that1.ToChannelID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Item == nil {
		if this.Item != nil {
			return false
		}
	} else if this.Item == nil {
		return false
	} else if !this.Item.Equal(that1.Item) {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_SMSItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_SMSItem)
	if !ok {
		that2, ok := that.(PublishedExternalMessage_SMSItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMSItem.Equal(that1.SMSItem) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_Incoming) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_Incoming)
	if !ok {
		that2, ok := that.(PublishedExternalMessage_Incoming)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Incoming.Equal(that1.Incoming) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_Outgoing) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_Outgoing)
	if !ok {
		that2, ok := that.(PublishedExternalMessage_Outgoing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Outgoing.Equal(that1.Outgoing) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage_EmailItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedExternalMessage_EmailItem)
	if !ok {
		that2, ok := that.(PublishedExternalMessage_EmailItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EmailItem.Equal(that1.EmailItem) {
		return false
	}
	return true
}
func (this *SMSItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSItem)
	if !ok {
		that2, ok := that.(SMSItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *IncomingCallEventItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IncomingCallEventItem)
	if !ok {
		that2, ok := that.(IncomingCallEventItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DurationInSeconds != that1.DurationInSeconds {
		return false
	}
	if this.VoicemailMediaID != that1.VoicemailMediaID {
		return false
	}
	if this.VoicemailDurationNS != that1.VoicemailDurationNS {
		return false
	}
	if this.TranscriptionText != that1.TranscriptionText {
		return false
	}
	return true
}
func (this *OutgoingCallEventItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OutgoingCallEventItem)
	if !ok {
		that2, ok := that.(OutgoingCallEventItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.DurationInSeconds != that1.DurationInSeconds {
		return false
	}
	if this.CallerEntityID != that1.CallerEntityID {
		return false
	}
	if this.CalleeEntityID != that1.CalleeEntityID {
		return false
	}
	return true
}
func (this *EmailItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailItem)
	if !ok {
		that2, ok := that.(EmailItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *MediaAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MediaAttachment)
	if !ok {
		that2, ok := that.(MediaAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *SendMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest)
	if !ok {
		that2, ok := that.(SendMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	return true
}
func (this *SendMessageRequest_Email) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest_Email)
	if !ok {
		that2, ok := that.(SendMessageRequest_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Email.Equal(that1.Email) {
		return false
	}
	return true
}
func (this *SendMessageRequest_SMS) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageRequest_SMS)
	if !ok {
		that2, ok := that.(SendMessageRequest_SMS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SMS.Equal(that1.SMS) {
		return false
	}
	return true
}
func (this *EmailMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailMessage)
	if !ok {
		that2, ok := that.(EmailMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.FromName != that1.FromName {
		return false
	}
	if this.FromEmailAddress != that1.FromEmailAddress {
		return false
	}
	if this.ToName != that1.ToName {
		return false
	}
	if this.ToEmailAddress != that1.ToEmailAddress {
		return false
	}
	if len(this.MediaIDs) != len(that1.MediaIDs) {
		return false
	}
	for i := range this.MediaIDs {
		if this.MediaIDs[i] != that1.MediaIDs[i] {
			return false
		}
	}
	if this.TemplateID != that1.TemplateID {
		return false
	}
	if len(this.TemplateSubstitutions) != len(that1.TemplateSubstitutions) {
		return false
	}
	for i := range this.TemplateSubstitutions {
		if !this.TemplateSubstitutions[i].Equal(that1.TemplateSubstitutions[i]) {
			return false
		}
	}
	return true
}
func (this *EmailMessage_Substitution) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmailMessage_Substitution)
	if !ok {
		that2, ok := that.(EmailMessage_Substitution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SMSMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SMSMessage)
	if !ok {
		that2, ok := that.(SMSMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	if len(this.MediaIDs) != len(that1.MediaIDs) {
		return false
	}
	for i := range this.MediaIDs {
		if this.MediaIDs[i] != that1.MediaIDs[i] {
			return false
		}
	}
	return true
}
func (this *SendMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendMessageResponse)
	if !ok {
		that2, ok := that.(SendMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *InitiatePhoneCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiatePhoneCallRequest)
	if !ok {
		that2, ok := that.(InitiatePhoneCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CallInitiationType != that1.CallInitiationType {
		return false
	}
	if this.FromPhoneNumber != that1.FromPhoneNumber {
		return false
	}
	if this.ToPhoneNumber != that1.ToPhoneNumber {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.CallerEntityID != that1.CallerEntityID {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	return true
}
func (this *InitiatePhoneCallResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiatePhoneCallResponse)
	if !ok {
		that2, ok := that.(InitiatePhoneCallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProxyPhoneNumber != that1.ProxyPhoneNumber {
		return false
	}
	if this.OriginatingPhoneNumber != that1.OriginatingPhoneNumber {
		return false
	}
	return true
}
func (this *AvailablePhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AvailablePhoneNumber)
	if !ok {
		that2, ok := that.(AvailablePhoneNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FriendlyName != that1.FriendlyName {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if this.Capabilities[i] != that1.Capabilities[i] {
			return false
		}
	}
	return true
}
func (this *SearchAvailablePhoneNumbersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAvailablePhoneNumbersRequest)
	if !ok {
		that2, ok := that.(SearchAvailablePhoneNumbersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AreaCode != that1.AreaCode {
		return false
	}
	if len(this.Capabilities) != len(that1.Capabilities) {
		return false
	}
	for i := range this.Capabilities {
		if this.Capabilities[i] != that1.Capabilities[i] {
			return false
		}
	}
	return true
}
func (this *SearchAvailablePhoneNumbersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAvailablePhoneNumbersResponse)
	if !ok {
		that2, ok := that.(SearchAvailablePhoneNumbersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.PhoneNumbers) != len(that1.PhoneNumbers) {
		return false
	}
	for i := range this.PhoneNumbers {
		if !this.PhoneNumbers[i].Equal(that1.PhoneNumbers[i]) {
			return false
		}
	}
	return true
}
func (this *ProvisionPhoneNumberRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest)
	if !ok {
		that2, ok := that.(ProvisionPhoneNumberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProvisionFor != that1.ProvisionFor {
		return false
	}
	if that1.Number == nil {
		if this.Number != nil {
			return false
		}
	} else if this.Number == nil {
		return false
	} else if !this.Number.Equal(that1.Number) {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest_PhoneNumber)
	if !ok {
		that2, ok := that.(ProvisionPhoneNumberRequest_PhoneNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberRequest_AreaCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberRequest_AreaCode)
	if !ok {
		that2, ok := that.(ProvisionPhoneNumberRequest_AreaCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AreaCode != that1.AreaCode {
		return false
	}
	return true
}
func (this *ProvisionPhoneNumberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionPhoneNumberResponse)
	if !ok {
		that2, ok := that.(ProvisionPhoneNumberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *DeprovisionPhoneNumberRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeprovisionPhoneNumberRequest)
	if !ok {
		that2, ok := that.(DeprovisionPhoneNumberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *DeprovisionPhoneNumberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeprovisionPhoneNumberResponse)
	if !ok {
		that2, ok := that.(DeprovisionPhoneNumberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeprovisionEmailRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeprovisionEmailRequest)
	if !ok {
		that2, ok := that.(DeprovisionEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *DeprovisionEmailResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeprovisionEmailResponse)
	if !ok {
		that2, ok := that.(DeprovisionEmailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ProvisionEmailAddressRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionEmailAddressRequest)
	if !ok {
		that2, ok := that.(ProvisionEmailAddressRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProvisionFor != that1.ProvisionFor {
		return false
	}
	if this.EmailAddress != that1.EmailAddress {
		return false
	}
	return true
}
func (this *ProvisionEmailAddressResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionEmailAddressResponse)
	if !ok {
		that2, ok := that.(ProvisionEmailAddressResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EmailAddress != that1.EmailAddress {
		return false
	}
	return true
}
func (this *IPCall) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IPCall)
	if !ok {
		that2, ok := that.(IPCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Pending != that1.Pending {
		return false
	}
	if len(this.Participants) != len(that1.Participants) {
		return false
	}
	for i := range this.Participants {
		if !this.Participants[i].Equal(that1.Participants[i]) {
			return false
		}
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *IPCallParticipant) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IPCallParticipant)
	if !ok {
		that2, ok := that.(IPCallParticipant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.NetworkType != that1.NetworkType {
		return false
	}
	return true
}
func (this *InitiateIPCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiateIPCallRequest)
	if !ok {
		that2, ok := that.(InitiateIPCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.CallerEntityID != that1.CallerEntityID {
		return false
	}
	if len(this.RecipientEntityIDs) != len(that1.RecipientEntityIDs) {
		return false
	}
	for i := range this.RecipientEntityIDs {
		if this.RecipientEntityIDs[i] != that1.RecipientEntityIDs[i] {
			return false
		}
	}
	if this.NetworkType != that1.NetworkType {
		return false
	}
	return true
}
func (this *InitiateIPCallResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiateIPCallResponse)
	if !ok {
		that2, ok := that.(InitiateIPCallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Call.Equal(that1.Call) {
		return false
	}
	return true
}
func (this *IPCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IPCallRequest)
	if !ok {
		that2, ok := that.(IPCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.IPCallID != that1.IPCallID {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *IPCallResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IPCallResponse)
	if !ok {
		that2, ok := that.(IPCallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Call.Equal(that1.Call) {
		return false
	}
	return true
}
func (this *PendingIPCallsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PendingIPCallsRequest)
	if !ok {
		that2, ok := that.(PendingIPCallsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *PendingIPCallsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PendingIPCallsResponse)
	if !ok {
		that2, ok := that.(PendingIPCallsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Calls) != len(that1.Calls) {
		return false
	}
	for i := range this.Calls {
		if !this.Calls[i].Equal(that1.Calls[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateIPCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateIPCallRequest)
	if !ok {
		that2, ok := that.(UpdateIPCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.IPCallID != that1.IPCallID {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.NetworkType != that1.NetworkType {
		return false
	}
	return true
}
func (this *UpdateIPCallResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateIPCallResponse)
	if !ok {
		that2, ok := that.(UpdateIPCallResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Call.Equal(that1.Call) {
		return false
	}
	return true
}
func (this *PublishedExternalMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&excomms.PublishedExternalMessage{")
	s = append(s, "FromChannelID: "+fmt.Sprintf("%#v", this.FromChannelID)+",\n")
	s = append(s, "ToChannelID: "+fmt.Sprintf("%#v", this.ToChannelID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishedExternalMessage_SMSItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_SMSItem{` +
		`SMSItem:` + fmt.Sprintf("%#v", this.SMSItem) + `}`}, ", ")
	return s
}
func (this *PublishedExternalMessage_Incoming) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_Incoming{` +
		`Incoming:` + fmt.Sprintf("%#v", this.Incoming) + `}`}, ", ")
	return s
}
func (this *PublishedExternalMessage_Outgoing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_Outgoing{` +
		`Outgoing:` + fmt.Sprintf("%#v", this.Outgoing) + `}`}, ", ")
	return s
}
func (this *PublishedExternalMessage_EmailItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.PublishedExternalMessage_EmailItem{` +
		`EmailItem:` + fmt.Sprintf("%#v", this.EmailItem) + `}`}, ", ")
	return s
}
func (this *SMSItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SMSItem{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IncomingCallEventItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&excomms.IncomingCallEventItem{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DurationInSeconds: "+fmt.Sprintf("%#v", this.DurationInSeconds)+",\n")
	s = append(s, "VoicemailMediaID: "+fmt.Sprintf("%#v", this.VoicemailMediaID)+",\n")
	s = append(s, "VoicemailDurationNS: "+fmt.Sprintf("%#v", this.VoicemailDurationNS)+",\n")
	s = append(s, "TranscriptionText: "+fmt.Sprintf("%#v", this.TranscriptionText)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutgoingCallEventItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.OutgoingCallEventItem{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "DurationInSeconds: "+fmt.Sprintf("%#v", this.DurationInSeconds)+",\n")
	s = append(s, "CallerEntityID: "+fmt.Sprintf("%#v", this.CallerEntityID)+",\n")
	s = append(s, "CalleeEntityID: "+fmt.Sprintf("%#v", this.CalleeEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.EmailItem{")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.MediaAttachment{")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.SendMessageRequest{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.SendMessageRequest_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *SendMessageRequest_SMS) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.SendMessageRequest_SMS{` +
		`SMS:` + fmt.Sprintf("%#v", this.SMS) + `}`}, ", ")
	return s
}
func (this *EmailMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&excomms.EmailMessage{")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "FromName: "+fmt.Sprintf("%#v", this.FromName)+",\n")
	s = append(s, "FromEmailAddress: "+fmt.Sprintf("%#v", this.FromEmailAddress)+",\n")
	s = append(s, "ToName: "+fmt.Sprintf("%#v", this.ToName)+",\n")
	s = append(s, "ToEmailAddress: "+fmt.Sprintf("%#v", this.ToEmailAddress)+",\n")
	s = append(s, "MediaIDs: "+fmt.Sprintf("%#v", this.MediaIDs)+",\n")
	s = append(s, "TemplateID: "+fmt.Sprintf("%#v", this.TemplateID)+",\n")
	if this.TemplateSubstitutions != nil {
		s = append(s, "TemplateSubstitutions: "+fmt.Sprintf("%#v", this.TemplateSubstitutions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailMessage_Substitution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.EmailMessage_Substitution{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SMSMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.SMSMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "MediaIDs: "+fmt.Sprintf("%#v", this.MediaIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&excomms.SendMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiatePhoneCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&excomms.InitiatePhoneCallRequest{")
	s = append(s, "CallInitiationType: "+fmt.Sprintf("%#v", this.CallInitiationType)+",\n")
	s = append(s, "FromPhoneNumber: "+fmt.Sprintf("%#v", this.FromPhoneNumber)+",\n")
	s = append(s, "ToPhoneNumber: "+fmt.Sprintf("%#v", this.ToPhoneNumber)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "CallerEntityID: "+fmt.Sprintf("%#v", this.CallerEntityID)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiatePhoneCallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.InitiatePhoneCallResponse{")
	s = append(s, "ProxyPhoneNumber: "+fmt.Sprintf("%#v", this.ProxyPhoneNumber)+",\n")
	s = append(s, "OriginatingPhoneNumber: "+fmt.Sprintf("%#v", this.OriginatingPhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AvailablePhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.AvailablePhoneNumber{")
	s = append(s, "FriendlyName: "+fmt.Sprintf("%#v", this.FriendlyName)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAvailablePhoneNumbersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.SearchAvailablePhoneNumbersRequest{")
	s = append(s, "AreaCode: "+fmt.Sprintf("%#v", this.AreaCode)+",\n")
	s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAvailablePhoneNumbersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.SearchAvailablePhoneNumbersResponse{")
	if this.PhoneNumbers != nil {
		s = append(s, "PhoneNumbers: "+fmt.Sprintf("%#v", this.PhoneNumbers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionPhoneNumberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&excomms.ProvisionPhoneNumberRequest{")
	s = append(s, "ProvisionFor: "+fmt.Sprintf("%#v", this.ProvisionFor)+",\n")
	if this.Number != nil {
		s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.ProvisionPhoneNumberRequest_PhoneNumber{` +
		`PhoneNumber:` + fmt.Sprintf("%#v", this.PhoneNumber) + `}`}, ", ")
	return s
}
func (this *ProvisionPhoneNumberRequest_AreaCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&excomms.ProvisionPhoneNumberRequest_AreaCode{` +
		`AreaCode:` + fmt.Sprintf("%#v", this.AreaCode) + `}`}, ", ")
	return s
}
func (this *ProvisionPhoneNumberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.ProvisionPhoneNumberResponse{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprovisionPhoneNumberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.DeprovisionPhoneNumberRequest{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprovisionPhoneNumberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&excomms.DeprovisionPhoneNumberResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprovisionEmailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.DeprovisionEmailRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeprovisionEmailResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&excomms.DeprovisionEmailResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionEmailAddressRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.ProvisionEmailAddressRequest{")
	s = append(s, "ProvisionFor: "+fmt.Sprintf("%#v", this.ProvisionFor)+",\n")
	s = append(s, "EmailAddress: "+fmt.Sprintf("%#v", this.EmailAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionEmailAddressResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.ProvisionEmailAddressResponse{")
	s = append(s, "EmailAddress: "+fmt.Sprintf("%#v", this.EmailAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&excomms.IPCall{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Pending: "+fmt.Sprintf("%#v", this.Pending)+",\n")
	if this.Participants != nil {
		s = append(s, "Participants: "+fmt.Sprintf("%#v", this.Participants)+",\n")
	}
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPCallParticipant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&excomms.IPCallParticipant{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "NetworkType: "+fmt.Sprintf("%#v", this.NetworkType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiateIPCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.InitiateIPCallRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "CallerEntityID: "+fmt.Sprintf("%#v", this.CallerEntityID)+",\n")
	s = append(s, "RecipientEntityIDs: "+fmt.Sprintf("%#v", this.RecipientEntityIDs)+",\n")
	s = append(s, "NetworkType: "+fmt.Sprintf("%#v", this.NetworkType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiateIPCallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.InitiateIPCallResponse{")
	if this.Call != nil {
		s = append(s, "Call: "+fmt.Sprintf("%#v", this.Call)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&excomms.IPCallRequest{")
	s = append(s, "IPCallID: "+fmt.Sprintf("%#v", this.IPCallID)+",\n")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IPCallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.IPCallResponse{")
	if this.Call != nil {
		s = append(s, "Call: "+fmt.Sprintf("%#v", this.Call)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingIPCallsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.PendingIPCallsRequest{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingIPCallsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.PendingIPCallsResponse{")
	if this.Calls != nil {
		s = append(s, "Calls: "+fmt.Sprintf("%#v", this.Calls)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateIPCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&excomms.UpdateIPCallRequest{")
	s = append(s, "IPCallID: "+fmt.Sprintf("%#v", this.IPCallID)+",\n")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "NetworkType: "+fmt.Sprintf("%#v", this.NetworkType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateIPCallResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&excomms.UpdateIPCallResponse{")
	if this.Call != nil {
		s = append(s, "Call: "+fmt.Sprintf("%#v", this.Call)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ExComms service

type ExCommsClient interface {
	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	SearchAvailablePhoneNumbers(ctx context.Context, in *SearchAvailablePhoneNumbersRequest, opts ...grpc.CallOption) (*SearchAvailablePhoneNumbersResponse, error)
	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	ProvisionPhoneNumber(ctx context.Context, in *ProvisionPhoneNumberRequest, opts ...grpc.CallOption) (*ProvisionPhoneNumberResponse, error)
	// DeprovisionPhoneNumber releases the phone number if one is currently provisioned.
	DeprovisionPhoneNumber(ctx context.Context, in *DeprovisionPhoneNumberRequest, opts ...grpc.CallOption) (*DeprovisionPhoneNumberResponse, error)
	// DeprovisionEmail deprovisions the email address if one is currently provisioned
	DeprovisionEmail(ctx context.Context, in *DeprovisionEmailRequest, opts ...grpc.CallOption) (*DeprovisionEmailResponse, error)
	// ProvisionEmailAddress provisions an email address for the requester.
	ProvisionEmailAddress(ctx context.Context, in *ProvisionEmailAddressRequest, opts ...grpc.CallOption) (*ProvisionEmailAddressResponse, error)
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error)
	// InitiateIPCall starts a new voip or video call.
	InitiateIPCall(ctx context.Context, in *InitiateIPCallRequest, opts ...grpc.CallOption) (*InitiateIPCallResponse, error)
	// IPCall returns an IPCall given its ID
	IPCall(ctx context.Context, in *IPCallRequest, opts ...grpc.CallOption) (*IPCallResponse, error)
	// PendingIPCalls returns all IPCalls for an account that are still pending (not yet completed).
	PendingIPCalls(ctx context.Context, in *PendingIPCallsRequest, opts ...grpc.CallOption) (*PendingIPCallsResponse, error)
	// UpdateIPCall updates the state of a voip or video call.
	UpdateIPCall(ctx context.Context, in *UpdateIPCallRequest, opts ...grpc.CallOption) (*UpdateIPCallResponse, error)
}

type exCommsClient struct {
	cc *grpc.ClientConn
}

func NewExCommsClient(cc *grpc.ClientConn) ExCommsClient {
	return &exCommsClient{cc}
}

func (c *exCommsClient) SearchAvailablePhoneNumbers(ctx context.Context, in *SearchAvailablePhoneNumbersRequest, opts ...grpc.CallOption) (*SearchAvailablePhoneNumbersResponse, error) {
	out := new(SearchAvailablePhoneNumbersResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/SearchAvailablePhoneNumbers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) ProvisionPhoneNumber(ctx context.Context, in *ProvisionPhoneNumberRequest, opts ...grpc.CallOption) (*ProvisionPhoneNumberResponse, error) {
	out := new(ProvisionPhoneNumberResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/ProvisionPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) DeprovisionPhoneNumber(ctx context.Context, in *DeprovisionPhoneNumberRequest, opts ...grpc.CallOption) (*DeprovisionPhoneNumberResponse, error) {
	out := new(DeprovisionPhoneNumberResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/DeprovisionPhoneNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) DeprovisionEmail(ctx context.Context, in *DeprovisionEmailRequest, opts ...grpc.CallOption) (*DeprovisionEmailResponse, error) {
	out := new(DeprovisionEmailResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/DeprovisionEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) ProvisionEmailAddress(ctx context.Context, in *ProvisionEmailAddressRequest, opts ...grpc.CallOption) (*ProvisionEmailAddressResponse, error) {
	out := new(ProvisionEmailAddressResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/ProvisionEmailAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) InitiatePhoneCall(ctx context.Context, in *InitiatePhoneCallRequest, opts ...grpc.CallOption) (*InitiatePhoneCallResponse, error) {
	out := new(InitiatePhoneCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/InitiatePhoneCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) InitiateIPCall(ctx context.Context, in *InitiateIPCallRequest, opts ...grpc.CallOption) (*InitiateIPCallResponse, error) {
	out := new(InitiateIPCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/InitiateIPCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) IPCall(ctx context.Context, in *IPCallRequest, opts ...grpc.CallOption) (*IPCallResponse, error) {
	out := new(IPCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/IPCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) PendingIPCalls(ctx context.Context, in *PendingIPCallsRequest, opts ...grpc.CallOption) (*PendingIPCallsResponse, error) {
	out := new(PendingIPCallsResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/PendingIPCalls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exCommsClient) UpdateIPCall(ctx context.Context, in *UpdateIPCallRequest, opts ...grpc.CallOption) (*UpdateIPCallResponse, error) {
	out := new(UpdateIPCallResponse)
	err := grpc.Invoke(ctx, "/excomms.ExComms/UpdateIPCall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExComms service

type ExCommsServer interface {
	// SearchAvailablephoneNumbers returns a list of available phone numbers based on the search criteria.
	SearchAvailablePhoneNumbers(context.Context, *SearchAvailablePhoneNumbersRequest) (*SearchAvailablePhoneNumbersResponse, error)
	// ProvisionPhoneNumber provisions the phone number provided for the requester.
	ProvisionPhoneNumber(context.Context, *ProvisionPhoneNumberRequest) (*ProvisionPhoneNumberResponse, error)
	// DeprovisionPhoneNumber releases the phone number if one is currently provisioned.
	DeprovisionPhoneNumber(context.Context, *DeprovisionPhoneNumberRequest) (*DeprovisionPhoneNumberResponse, error)
	// DeprovisionEmail deprovisions the email address if one is currently provisioned
	DeprovisionEmail(context.Context, *DeprovisionEmailRequest) (*DeprovisionEmailResponse, error)
	// ProvisionEmailAddress provisions an email address for the requester.
	ProvisionEmailAddress(context.Context, *ProvisionEmailAddressRequest) (*ProvisionEmailAddressResponse, error)
	// SendMessage sends the message over an external channel as specified in the SendMessageRequest.
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// InitiatePhoneCall initiates a phone call as defined in the InitiatePhoneCallRequest.
	InitiatePhoneCall(context.Context, *InitiatePhoneCallRequest) (*InitiatePhoneCallResponse, error)
	// InitiateIPCall starts a new voip or video call.
	InitiateIPCall(context.Context, *InitiateIPCallRequest) (*InitiateIPCallResponse, error)
	// IPCall returns an IPCall given its ID
	IPCall(context.Context, *IPCallRequest) (*IPCallResponse, error)
	// PendingIPCalls returns all IPCalls for an account that are still pending (not yet completed).
	PendingIPCalls(context.Context, *PendingIPCallsRequest) (*PendingIPCallsResponse, error)
	// UpdateIPCall updates the state of a voip or video call.
	UpdateIPCall(context.Context, *UpdateIPCallRequest) (*UpdateIPCallResponse, error)
}

func RegisterExCommsServer(s *grpc.Server, srv ExCommsServer) {
	s.RegisterService(&_ExComms_serviceDesc, srv)
}

func _ExComms_SearchAvailablePhoneNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAvailablePhoneNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).SearchAvailablePhoneNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/SearchAvailablePhoneNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).SearchAvailablePhoneNumbers(ctx, req.(*SearchAvailablePhoneNumbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_ProvisionPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).ProvisionPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/ProvisionPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).ProvisionPhoneNumber(ctx, req.(*ProvisionPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_DeprovisionPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprovisionPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).DeprovisionPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/DeprovisionPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).DeprovisionPhoneNumber(ctx, req.(*DeprovisionPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_DeprovisionEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprovisionEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).DeprovisionEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/DeprovisionEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).DeprovisionEmail(ctx, req.(*DeprovisionEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_ProvisionEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).ProvisionEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/ProvisionEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).ProvisionEmailAddress(ctx, req.(*ProvisionEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_InitiatePhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePhoneCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).InitiatePhoneCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/InitiatePhoneCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).InitiatePhoneCall(ctx, req.(*InitiatePhoneCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_InitiateIPCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateIPCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).InitiateIPCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/InitiateIPCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).InitiateIPCall(ctx, req.(*InitiateIPCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_IPCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).IPCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/IPCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).IPCall(ctx, req.(*IPCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_PendingIPCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingIPCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).PendingIPCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/PendingIPCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).PendingIPCalls(ctx, req.(*PendingIPCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExComms_UpdateIPCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExCommsServer).UpdateIPCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/excomms.ExComms/UpdateIPCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExCommsServer).UpdateIPCall(ctx, req.(*UpdateIPCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExComms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "excomms.ExComms",
	HandlerType: (*ExCommsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAvailablePhoneNumbers",
			Handler:    _ExComms_SearchAvailablePhoneNumbers_Handler,
		},
		{
			MethodName: "ProvisionPhoneNumber",
			Handler:    _ExComms_ProvisionPhoneNumber_Handler,
		},
		{
			MethodName: "DeprovisionPhoneNumber",
			Handler:    _ExComms_DeprovisionPhoneNumber_Handler,
		},
		{
			MethodName: "DeprovisionEmail",
			Handler:    _ExComms_DeprovisionEmail_Handler,
		},
		{
			MethodName: "ProvisionEmailAddress",
			Handler:    _ExComms_ProvisionEmailAddress_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ExComms_SendMessage_Handler,
		},
		{
			MethodName: "InitiatePhoneCall",
			Handler:    _ExComms_InitiatePhoneCall_Handler,
		},
		{
			MethodName: "InitiateIPCall",
			Handler:    _ExComms_InitiateIPCall_Handler,
		},
		{
			MethodName: "IPCall",
			Handler:    _ExComms_IPCall_Handler,
		},
		{
			MethodName: "PendingIPCalls",
			Handler:    _ExComms_PendingIPCalls_Handler,
		},
		{
			MethodName: "UpdateIPCall",
			Handler:    _ExComms_UpdateIPCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *PublishedExternalMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PublishedExternalMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FromChannelID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromChannelID)))
		i += copy(data[i:], m.FromChannelID)
	}
	if len(m.ToChannelID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToChannelID)))
		i += copy(data[i:], m.ToChannelID)
	}
	if m.Timestamp != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Timestamp))
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.Item != nil {
		nn1, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.Direction != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.Direction))
	}
	return i, nil
}

func (m *PublishedExternalMessage_SMSItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMSItem != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(m.SMSItem.Size()))
		n2, err := m.SMSItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PublishedExternalMessage_Incoming) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Incoming != nil {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(m.Incoming.Size()))
		n3, err := m.Incoming.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *PublishedExternalMessage_Outgoing) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Outgoing != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Outgoing.Size()))
		n4, err := m.Outgoing.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *PublishedExternalMessage_EmailItem) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.EmailItem != nil {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(m.EmailItem.Size()))
		n5, err := m.EmailItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *SMSItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IncomingCallEventItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IncomingCallEventItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationInSeconds))
	}
	if len(m.VoicemailMediaID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VoicemailMediaID)))
		i += copy(data[i:], m.VoicemailMediaID)
	}
	if m.VoicemailDurationNS != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.VoicemailDurationNS))
	}
	if len(m.TranscriptionText) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.TranscriptionText)))
		i += copy(data[i:], m.TranscriptionText)
	}
	return i, nil
}

func (m *OutgoingCallEventItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OutgoingCallEventItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationInSeconds))
	}
	if len(m.CallerEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CallerEntityID)))
		i += copy(data[i:], m.CallerEntityID)
	}
	if len(m.CalleeEntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CalleeEntityID)))
		i += copy(data[i:], m.CalleeEntityID)
	}
	return i, nil
}

func (m *EmailItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.Subject) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Subject)))
		i += copy(data[i:], m.Subject)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MediaAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MediaAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if len(m.ContentType) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ContentType)))
		i += copy(data[i:], m.ContentType)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *SendMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SendMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Channel))
	}
	if m.Message != nil {
		nn6, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if len(m.UUID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	return i, nil
}

func (m *SendMessageRequest_Email) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Email != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Email.Size()))
		n7, err := m.Email.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *SendMessageRequest_SMS) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SMS != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.SMS.Size()))
		n8, err := m.SMS.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *EmailMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Subject)))
		i += copy(data[i:], m.Subject)
	}
	if len(m.Body) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	if len(m.FromName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromName)))
		i += copy(data[i:], m.FromName)
	}
	if len(m.FromEmailAddress) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromEmailAddress)))
		i += copy(data[i:], m.FromEmailAddress)
	}
	if len(m.ToName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToName)))
		i += copy(data[i:], m.ToName)
	}
	if len(m.ToEmailAddress) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToEmailAddress)))
		i += copy(data[i:], m.ToEmailAddress)
	}
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			data[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.TemplateID) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.TemplateID)))
		i += copy(data[i:], m.TemplateID)
	}
	if len(m.TemplateSubstitutions) > 0 {
		for _, msg := range m.TemplateSubstitutions {
			data[i] = 0x4a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EmailMessage_Substitution) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EmailMessage_Substitution) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *SMSMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SMSMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *SendMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SendMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitiatePhoneCallRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiatePhoneCallRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CallInitiationType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.CallInitiationType))
	}
	if len(m.FromPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromPhoneNumber)))
		i += copy(data[i:], m.FromPhoneNumber)
	}
	if len(m.ToPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ToPhoneNumber)))
		i += copy(data[i:], m.ToPhoneNumber)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.CallerEntityID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CallerEntityID)))
		i += copy(data[i:], m.CallerEntityID)
	}
	if len(m.DeviceID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	return i, nil
}

func (m *InitiatePhoneCallResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiatePhoneCallResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProxyPhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProxyPhoneNumber)))
		i += copy(data[i:], m.ProxyPhoneNumber)
	}
	if len(m.OriginatingPhoneNumber) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OriginatingPhoneNumber)))
		i += copy(data[i:], m.OriginatingPhoneNumber)
	}
	return i, nil
}

func (m *AvailablePhoneNumber) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AvailablePhoneNumber) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendlyName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FriendlyName)))
		i += copy(data[i:], m.FriendlyName)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.Capabilities) > 0 {
		for _, num := range m.Capabilities {
			data[i] = 0x18
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SearchAvailablePhoneNumbersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAvailablePhoneNumbersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AreaCode) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AreaCode)))
		i += copy(data[i:], m.AreaCode)
	}
	if len(m.Capabilities) > 0 {
		for _, num := range m.Capabilities {
			data[i] = 0x10
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *SearchAvailablePhoneNumbersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAvailablePhoneNumbersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, msg := range m.PhoneNumbers {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProvisionPhoneNumberRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionPhoneNumberRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProvisionFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProvisionFor)))
		i += copy(data[i:], m.ProvisionFor)
	}
	if m.Number != nil {
		nn9, err := m.Number.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *ProvisionPhoneNumberRequest_PhoneNumber) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
	i += copy(data[i:], m.PhoneNumber)
	return i, nil
}
func (m *ProvisionPhoneNumberRequest_AreaCode) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.AreaCode)))
	i += copy(data[i:], m.AreaCode)
	return i, nil
}
func (m *ProvisionPhoneNumberResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionPhoneNumberResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *DeprovisionPhoneNumberRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeprovisionPhoneNumberRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.Reason) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Reason)))
		i += copy(data[i:], m.Reason)
	}
	return i, nil
}

func (m *DeprovisionPhoneNumberResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeprovisionPhoneNumberResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeprovisionEmailRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeprovisionEmailRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.Reason) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Reason)))
		i += copy(data[i:], m.Reason)
	}
	return i, nil
}

func (m *DeprovisionEmailResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeprovisionEmailResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProvisionEmailAddressRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionEmailAddressRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProvisionFor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProvisionFor)))
		i += copy(data[i:], m.ProvisionFor)
	}
	if len(m.EmailAddress) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EmailAddress)))
		i += copy(data[i:], m.EmailAddress)
	}
	return i, nil
}

func (m *ProvisionEmailAddressResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionEmailAddressResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EmailAddress) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EmailAddress)))
		i += copy(data[i:], m.EmailAddress)
	}
	return i, nil
}

func (m *IPCall) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IPCall) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if m.Type != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.Pending {
		data[i] = 0x18
		i++
		if m.Pending {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Participants) > 0 {
		for _, msg := range m.Participants {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Token) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *IPCallParticipant) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IPCallParticipant) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Role != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Role))
	}
	if m.State != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.State))
	}
	if len(m.Identity) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Identity)))
		i += copy(data[i:], m.Identity)
	}
	if m.NetworkType != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.NetworkType))
	}
	return i, nil
}

func (m *InitiateIPCallRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiateIPCallRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.CallerEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CallerEntityID)))
		i += copy(data[i:], m.CallerEntityID)
	}
	if len(m.RecipientEntityIDs) > 0 {
		for _, s := range m.RecipientEntityIDs {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.NetworkType != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.NetworkType))
	}
	return i, nil
}

func (m *InitiateIPCallResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InitiateIPCallResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Call != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Call.Size()))
		n10, err := m.Call.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *IPCallRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IPCallRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPCallID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.IPCallID)))
		i += copy(data[i:], m.IPCallID)
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *IPCallResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IPCallResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Call != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Call.Size()))
		n11, err := m.Call.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *PendingIPCallsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PendingIPCallsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *PendingIPCallsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PendingIPCallsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for _, msg := range m.Calls {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateIPCallRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateIPCallRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPCallID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.IPCallID)))
		i += copy(data[i:], m.IPCallID)
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	if m.State != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.State))
	}
	if m.NetworkType != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.NetworkType))
	}
	return i, nil
}

func (m *UpdateIPCallResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateIPCallResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Call != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Call.Size()))
		n12, err := m.Call.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PublishedExternalMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.FromChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToChannelID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSvc(uint64(m.Timestamp))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	if m.Direction != 0 {
		n += 1 + sovSvc(uint64(m.Direction))
	}
	return n
}

func (m *PublishedExternalMessage_SMSItem) Size() (n int) {
	var l int
	_ = l
	if m.SMSItem != nil {
		l = m.SMSItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *PublishedExternalMessage_Incoming) Size() (n int) {
	var l int
	_ = l
	if m.Incoming != nil {
		l = m.Incoming.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *PublishedExternalMessage_Outgoing) Size() (n int) {
	var l int
	_ = l
	if m.Outgoing != nil {
		l = m.Outgoing.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *PublishedExternalMessage_EmailItem) Size() (n int) {
	var l int
	_ = l
	if m.EmailItem != nil {
		l = m.EmailItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SMSItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *IncomingCallEventItem) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		n += 1 + sovSvc(uint64(m.DurationInSeconds))
	}
	l = len(m.VoicemailMediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.VoicemailDurationNS != 0 {
		n += 1 + sovSvc(uint64(m.VoicemailDurationNS))
	}
	l = len(m.TranscriptionText)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *OutgoingCallEventItem) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.DurationInSeconds != 0 {
		n += 1 + sovSvc(uint64(m.DurationInSeconds))
	}
	l = len(m.CallerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CalleeEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *EmailItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *MediaAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SendMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSvc(uint64(m.Channel))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SendMessageRequest_Email) Size() (n int) {
	var l int
	_ = l
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SendMessageRequest_SMS) Size() (n int) {
	var l int
	_ = l
	if m.SMS != nil {
		l = m.SMS.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *EmailMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToEmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.TemplateID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TemplateSubstitutions) > 0 {
		for _, e := range m.TemplateSubstitutions {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *EmailMessage_Substitution) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SMSMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SendMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InitiatePhoneCallRequest) Size() (n int) {
	var l int
	_ = l
	if m.CallInitiationType != 0 {
		n += 1 + sovSvc(uint64(m.CallInitiationType))
	}
	l = len(m.FromPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ToPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CallerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *InitiatePhoneCallResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProxyPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OriginatingPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AvailablePhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.FriendlyName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *SearchAvailablePhoneNumbersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AreaCode)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Capabilities) > 0 {
		for _, e := range m.Capabilities {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *SearchAvailablePhoneNumbersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, e := range m.PhoneNumbers {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ProvisionPhoneNumberRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProvisionFor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Number != nil {
		n += m.Number.Size()
	}
	return n
}

func (m *ProvisionPhoneNumberRequest_PhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProvisionPhoneNumberRequest_AreaCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.AreaCode)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProvisionPhoneNumberResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeprovisionPhoneNumberRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeprovisionPhoneNumberResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeprovisionEmailRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeprovisionEmailResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProvisionEmailAddressRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProvisionFor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProvisionEmailAddressResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.EmailAddress)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *IPCall) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.Pending {
		n += 2
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *IPCallParticipant) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovSvc(uint64(m.Role))
	}
	if m.State != 0 {
		n += 1 + sovSvc(uint64(m.State))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.NetworkType != 0 {
		n += 1 + sovSvc(uint64(m.NetworkType))
	}
	return n
}

func (m *InitiateIPCallRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.CallerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.RecipientEntityIDs) > 0 {
		for _, s := range m.RecipientEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.NetworkType != 0 {
		n += 1 + sovSvc(uint64(m.NetworkType))
	}
	return n
}

func (m *InitiateIPCallResponse) Size() (n int) {
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *IPCallRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.IPCallID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *IPCallResponse) Size() (n int) {
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PendingIPCallsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PendingIPCallsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for _, e := range m.Calls {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *UpdateIPCallRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.IPCallID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovSvc(uint64(m.State))
	}
	if m.NetworkType != 0 {
		n += 1 + sovSvc(uint64(m.NetworkType))
	}
	return n
}

func (m *UpdateIPCallResponse) Size() (n int) {
	var l int
	_ = l
	if m.Call != nil {
		l = m.Call.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PublishedExternalMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage{`,
		`FromChannelID:` + fmt.Sprintf("%v", this.FromChannelID) + `,`,
		`ToChannelID:` + fmt.Sprintf("%v", this.ToChannelID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Item:` + fmt.Sprintf("%v", this.Item) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_SMSItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_SMSItem{`,
		`SMSItem:` + strings.Replace(fmt.Sprintf("%v", this.SMSItem), "SMSItem", "SMSItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_Incoming) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_Incoming{`,
		`Incoming:` + strings.Replace(fmt.Sprintf("%v", this.Incoming), "IncomingCallEventItem", "IncomingCallEventItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_Outgoing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_Outgoing{`,
		`Outgoing:` + strings.Replace(fmt.Sprintf("%v", this.Outgoing), "OutgoingCallEventItem", "OutgoingCallEventItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedExternalMessage_EmailItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedExternalMessage_EmailItem{`,
		`EmailItem:` + strings.Replace(fmt.Sprintf("%v", this.EmailItem), "EmailItem", "EmailItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSItem{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "MediaAttachment", "MediaAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IncomingCallEventItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IncomingCallEventItem{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DurationInSeconds:` + fmt.Sprintf("%v", this.DurationInSeconds) + `,`,
		`VoicemailMediaID:` + fmt.Sprintf("%v", this.VoicemailMediaID) + `,`,
		`VoicemailDurationNS:` + fmt.Sprintf("%v", this.VoicemailDurationNS) + `,`,
		`TranscriptionText:` + fmt.Sprintf("%v", this.TranscriptionText) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutgoingCallEventItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutgoingCallEventItem{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`DurationInSeconds:` + fmt.Sprintf("%v", this.DurationInSeconds) + `,`,
		`CallerEntityID:` + fmt.Sprintf("%v", this.CallerEntityID) + `,`,
		`CalleeEntityID:` + fmt.Sprintf("%v", this.CalleeEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailItem{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "MediaAttachment", "MediaAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaAttachment{`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest_Email{`,
		`Email:` + strings.Replace(fmt.Sprintf("%v", this.Email), "EmailMessage", "EmailMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest_SMS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest_SMS{`,
		`SMS:` + strings.Replace(fmt.Sprintf("%v", this.SMS), "SMSMessage", "SMSMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage{`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`FromName:` + fmt.Sprintf("%v", this.FromName) + `,`,
		`FromEmailAddress:` + fmt.Sprintf("%v", this.FromEmailAddress) + `,`,
		`ToName:` + fmt.Sprintf("%v", this.ToName) + `,`,
		`ToEmailAddress:` + fmt.Sprintf("%v", this.ToEmailAddress) + `,`,
		`MediaIDs:` + fmt.Sprintf("%v", this.MediaIDs) + `,`,
		`TemplateID:` + fmt.Sprintf("%v", this.TemplateID) + `,`,
		`TemplateSubstitutions:` + strings.Replace(fmt.Sprintf("%v", this.TemplateSubstitutions), "EmailMessage_Substitution", "EmailMessage_Substitution", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailMessage_Substitution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailMessage_Substitution{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SMSMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SMSMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`MediaIDs:` + fmt.Sprintf("%v", this.MediaIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *InitiatePhoneCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiatePhoneCallRequest{`,
		`CallInitiationType:` + fmt.Sprintf("%v", this.CallInitiationType) + `,`,
		`FromPhoneNumber:` + fmt.Sprintf("%v", this.FromPhoneNumber) + `,`,
		`ToPhoneNumber:` + fmt.Sprintf("%v", this.ToPhoneNumber) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`CallerEntityID:` + fmt.Sprintf("%v", this.CallerEntityID) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiatePhoneCallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiatePhoneCallResponse{`,
		`ProxyPhoneNumber:` + fmt.Sprintf("%v", this.ProxyPhoneNumber) + `,`,
		`OriginatingPhoneNumber:` + fmt.Sprintf("%v", this.OriginatingPhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AvailablePhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AvailablePhoneNumber{`,
		`FriendlyName:` + fmt.Sprintf("%v", this.FriendlyName) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAvailablePhoneNumbersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAvailablePhoneNumbersRequest{`,
		`AreaCode:` + fmt.Sprintf("%v", this.AreaCode) + `,`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAvailablePhoneNumbersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAvailablePhoneNumbersResponse{`,
		`PhoneNumbers:` + strings.Replace(fmt.Sprintf("%v", this.PhoneNumbers), "AvailablePhoneNumber", "AvailablePhoneNumber", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest{`,
		`ProvisionFor:` + fmt.Sprintf("%v", this.ProvisionFor) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest_PhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest_PhoneNumber{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberRequest_AreaCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberRequest_AreaCode{`,
		`AreaCode:` + fmt.Sprintf("%v", this.AreaCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionPhoneNumberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionPhoneNumberResponse{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprovisionPhoneNumberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprovisionPhoneNumberRequest{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprovisionPhoneNumberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprovisionPhoneNumberResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeprovisionEmailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprovisionEmailRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeprovisionEmailResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeprovisionEmailResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionEmailAddressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionEmailAddressRequest{`,
		`ProvisionFor:` + fmt.Sprintf("%v", this.ProvisionFor) + `,`,
		`EmailAddress:` + fmt.Sprintf("%v", this.EmailAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionEmailAddressResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionEmailAddressResponse{`,
		`EmailAddress:` + fmt.Sprintf("%v", this.EmailAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPCall{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Pending:` + fmt.Sprintf("%v", this.Pending) + `,`,
		`Participants:` + strings.Replace(fmt.Sprintf("%v", this.Participants), "IPCallParticipant", "IPCallParticipant", 1) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPCallParticipant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPCallParticipant{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`NetworkType:` + fmt.Sprintf("%v", this.NetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiateIPCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiateIPCallRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CallerEntityID:` + fmt.Sprintf("%v", this.CallerEntityID) + `,`,
		`RecipientEntityIDs:` + fmt.Sprintf("%v", this.RecipientEntityIDs) + `,`,
		`NetworkType:` + fmt.Sprintf("%v", this.NetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiateIPCallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiateIPCallResponse{`,
		`Call:` + strings.Replace(fmt.Sprintf("%v", this.Call), "IPCall", "IPCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPCallRequest{`,
		`IPCallID:` + fmt.Sprintf("%v", this.IPCallID) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IPCallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IPCallResponse{`,
		`Call:` + strings.Replace(fmt.Sprintf("%v", this.Call), "IPCall", "IPCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingIPCallsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingIPCallsRequest{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingIPCallsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingIPCallsResponse{`,
		`Calls:` + strings.Replace(fmt.Sprintf("%v", this.Calls), "IPCall", "IPCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateIPCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateIPCallRequest{`,
		`IPCallID:` + fmt.Sprintf("%v", this.IPCallID) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`NetworkType:` + fmt.Sprintf("%v", this.NetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateIPCallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateIPCallResponse{`,
		`Call:` + strings.Replace(fmt.Sprintf("%v", this.Call), "IPCall", "IPCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PublishedExternalMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishedExternalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishedExternalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChannelID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (PublishedExternalMessage_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMSItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_SMSItem{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incoming", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncomingCallEventItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_Incoming{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutgoingCallEventItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_Outgoing{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailItem{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &PublishedExternalMessage_EmailItem{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Direction |= (PublishedExternalMessage_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &MediaAttachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingCallEventItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingCallEventItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingCallEventItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (IncomingCallEventItem_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationInSeconds", wireType)
			}
			m.DurationInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationInSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoicemailMediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoicemailMediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoicemailDurationNS", wireType)
			}
			m.VoicemailDurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.VoicemailDurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscriptionText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranscriptionText = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingCallEventItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingCallEventItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingCallEventItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (OutgoingCallEventItem_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationInSeconds", wireType)
			}
			m.DurationInSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationInSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalleeEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalleeEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &MediaAttachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (ChannelType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmailMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SendMessageRequest_Email{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SMS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SMSMessage{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &SendMessageRequest_SMS{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToEmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToEmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIDs = append(m.MediaIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateSubstitutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateSubstitutions = append(m.TemplateSubstitutions, &EmailMessage_Substitution{})
			if err := m.TemplateSubstitutions[len(m.TemplateSubstitutions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailMessage_Substitution) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Substitution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Substitution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMSMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIDs = append(m.MediaIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiatePhoneCallRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiatePhoneCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiatePhoneCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallInitiationType", wireType)
			}
			m.CallInitiationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CallInitiationType |= (InitiatePhoneCallRequest_CallInitiationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiatePhoneCallResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiatePhoneCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiatePhoneCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatingPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatingPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailablePhoneNumber) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailablePhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailablePhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var v PhoneNumberCapability
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (PhoneNumberCapability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capabilities = append(m.Capabilities, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAvailablePhoneNumbersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var v PhoneNumberCapability
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (PhoneNumberCapability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Capabilities = append(m.Capabilities, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAvailablePhoneNumbersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAvailablePhoneNumbersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, &AvailablePhoneNumber{})
			if err := m.PhoneNumbers[len(m.PhoneNumbers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionPhoneNumberRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionPhoneNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionPhoneNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &ProvisionPhoneNumberRequest_PhoneNumber{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = &ProvisionPhoneNumberRequest_AreaCode{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionPhoneNumberResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionPhoneNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionPhoneNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprovisionPhoneNumberRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprovisionPhoneNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprovisionPhoneNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprovisionPhoneNumberResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprovisionPhoneNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprovisionPhoneNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprovisionEmailRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprovisionEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprovisionEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeprovisionEmailResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeprovisionEmailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeprovisionEmailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionEmailAddressRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionEmailAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionEmailAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisionFor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionEmailAddressResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionEmailAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionEmailAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPCall) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (IPCallType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pending = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &IPCallParticipant{})
			if err := m.Participants[len(m.Participants)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPCallParticipant) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPCallParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPCallParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Role |= (IPCallParticipantRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (IPCallState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			m.NetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NetworkType |= (NetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateIPCallRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateIPCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateIPCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (IPCallType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientEntityIDs = append(m.RecipientEntityIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			m.NetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NetworkType |= (NetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateIPCallResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateIPCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateIPCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &IPCall{}
			}
			if err := m.Call.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPCallRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPCallID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPCallID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPCallResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &IPCall{}
			}
			if err := m.Call.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingIPCallsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingIPCallsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingIPCallsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingIPCallsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingIPCallsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingIPCallsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calls = append(m.Calls, &IPCall{})
			if err := m.Calls[len(m.Calls)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateIPCallRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateIPCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateIPCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPCallID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPCallID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (IPCallState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkType", wireType)
			}
			m.NetworkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NetworkType |= (NetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateIPCallResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateIPCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateIPCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &IPCall{}
			}
			if err := m.Call.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSvc = []byte{
	// 2477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x19, 0x49, 0x73, 0x1b, 0x69,
	0x35, 0x5a, 0xac, 0xe5, 0xc9, 0x8b, 0xfc, 0x79, 0x89, 0x46, 0x49, 0x9c, 0xa4, 0xc3, 0x24, 0xc1,
	0x64, 0x9c, 0x29, 0x0f, 0xdb, 0x90, 0x01, 0x4a, 0x4b, 0x27, 0xe9, 0x8a, 0xdc, 0x12, 0x6d, 0x29,
	0xa9, 0xcc, 0x45, 0xd5, 0x96, 0xda, 0x76, 0x13, 0x49, 0x2d, 0xd4, 0x2d, 0x63, 0xcf, 0x09, 0x8a,
	0xe2, 0x3e, 0x17, 0x2e, 0x1c, 0xa8, 0x82, 0x13, 0x27, 0xce, 0x70, 0xe3, 0xc8, 0x89, 0x9a, 0x2a,
	0x2e, 0x9c, 0x28, 0x26, 0x5c, 0xe6, 0xc8, 0x4f, 0xe0, 0x7d, 0x4b, 0x77, 0x7f, 0x2d, 0xb5, 0xed,
	0x24, 0xd4, 0x1c, 0x54, 0xee, 0xef, 0x6d, 0xdf, 0xdb, 0xdf, 0xeb, 0x36, 0xe4, 0xdd, 0x93, 0xde,
	0xce, 0x78, 0xe2, 0x78, 0x0e, 0xc9, 0x5a, 0xa7, 0x3d, 0x67, 0x38, 0x74, 0xcb, 0x1f, 0x1c, 0xd9,
	0xde, 0xf1, 0xf4, 0x60, 0x07, 0x4f, 0x0f, 0x8f, 0x9c, 0x23, 0xe7, 0x21, 0xc3, 0x1f, 0x4c, 0x0f,
	0xd9, 0x89, 0x1d, 0xd8, 0x13, 0xe7, 0x53, 0x7e, 0xbb, 0x00, 0xa5, 0xd6, 0xf4, 0x60, 0x60, 0xbb,
	0xc7, 0x56, 0x5f, 0x3d, 0xf5, 0xac, 0xc9, 0xc8, 0x1c, 0xec, 0x59, 0xae, 0x6b, 0x1e, 0x59, 0xe4,
	0x63, 0x58, 0x39, 0x9c, 0x38, 0xc3, 0x6e, 0xef, 0xd8, 0x1c, 0x8d, 0xac, 0x41, 0xd7, 0xee, 0x97,
	0x12, 0xb7, 0x12, 0xf7, 0xf3, 0xd5, 0xd5, 0xd7, 0xff, 0xba, 0xb9, 0xf4, 0x18, 0x51, 0x35, 0x8e,
	0xd1, 0xea, 0xc6, 0xd2, 0xa1, 0x74, 0xec, 0x93, 0x8f, 0x60, 0xc9, 0x73, 0x64, 0xc6, 0x24, 0x63,
	0x5c, 0x41, 0xc6, 0x42, 0xdb, 0x09, 0xd9, 0x0a, 0x9e, 0x13, 0x32, 0x5d, 0x87, 0xbc, 0x67, 0x0f,
	0x2d, 0xd7, 0x33, 0x87, 0xe3, 0x52, 0x0a, 0x19, 0xd2, 0x46, 0x08, 0x20, 0x3f, 0x80, 0xb4, 0x77,
	0x36, 0xb6, 0x4a, 0x69, 0x44, 0x2c, 0xef, 0xde, 0xdd, 0x11, 0x16, 0xef, 0x9c, 0xa7, 0xfe, 0x4e,
	0x1b, 0xa9, 0x0d, 0xc6, 0x83, 0xbc, 0x39, 0x77, 0xe8, 0x76, 0x6d, 0xcf, 0x1a, 0x96, 0x16, 0x90,
	0xbf, 0xb0, 0x5b, 0x0c, 0xf8, 0xf7, 0xf7, 0xf6, 0x35, 0x84, 0x57, 0x0b, 0xa8, 0x5b, 0x56, 0x1c,
	0x9e, 0x5e, 0x31, 0xb2, 0xc8, 0x40, 0x1f, 0xc9, 0x27, 0x90, 0xb3, 0x47, 0x48, 0x6a, 0x8f, 0x8e,
	0x4a, 0x19, 0xc6, 0xbb, 0x15, 0xf0, 0x6a, 0x02, 0x51, 0x33, 0x07, 0x03, 0xf5, 0xc4, 0x1a, 0x79,
	0x82, 0x39, 0xe0, 0xa0, 0xdc, 0xce, 0xd4, 0x3b, 0x72, 0x28, 0x77, 0x76, 0x86, 0xbb, 0x29, 0x10,
	0x73, 0xdc, 0x3e, 0x07, 0xba, 0x11, 0xac, 0xa1, 0x69, 0x0f, 0xb8, 0xe6, 0x39, 0xc6, 0x4f, 0x02,
	0x7e, 0x95, 0xa2, 0x04, 0x4f, 0xde, 0xf2, 0x0f, 0x44, 0x83, 0x7c, 0xdf, 0x9e, 0x58, 0x3d, 0xcf,
	0x76, 0x46, 0xa5, 0x3c, 0xf3, 0xd6, 0xb7, 0x2e, 0xf7, 0x56, 0xdd, 0x67, 0x31, 0x42, 0x6e, 0xa5,
	0x01, 0x69, 0xea, 0x45, 0x92, 0x85, 0x14, 0x7a, 0xa6, 0x78, 0x85, 0x5c, 0x85, 0x35, 0x4d, 0xaf,
	0x35, 0xf7, 0x34, 0xfd, 0x49, 0xb7, 0x56, 0x69, 0x34, 0xba, 0xea, 0x73, 0x55, 0x6f, 0x17, 0x13,
	0x14, 0xd1, 0xec, 0xb4, 0x9f, 0x34, 0x67, 0x10, 0x49, 0x92, 0x87, 0x05, 0x75, 0xaf, 0xa2, 0x35,
	0x8a, 0x29, 0xe5, 0x2e, 0xe4, 0x83, 0x5b, 0x48, 0x01, 0xb2, 0x9a, 0x5e, 0x6d, 0x76, 0xf4, 0x3a,
	0x8a, 0x5d, 0x84, 0x1c, 0x72, 0xf3, 0x53, 0xa2, 0x9a, 0x81, 0x34, 0xb5, 0x57, 0x79, 0x09, 0x7e,
	0x3c, 0x08, 0xc1, 0xe0, 0x5b, 0xa7, 0x1e, 0xcf, 0x3f, 0x83, 0x3d, 0x63, 0x50, 0x0b, 0xa6, 0xe7,
	0x99, 0xbd, 0xe3, 0x21, 0xba, 0xce, 0xc5, 0x0c, 0x4b, 0xa1, 0x77, 0x4a, 0x81, 0xa5, 0x7b, 0x56,
	0xdf, 0x36, 0x2b, 0x01, 0x81, 0x21, 0x13, 0x2b, 0xbf, 0x49, 0xc1, 0x46, 0x6c, 0xf0, 0xc8, 0xf7,
	0x44, 0x9a, 0x25, 0x98, 0xe3, 0xee, 0x5c, 0x1c, 0x6a, 0x39, 0xc7, 0x76, 0x60, 0xad, 0x3f, 0x9d,
	0x98, 0xd4, 0xb8, 0xae, 0x3d, 0xea, 0xba, 0x56, 0xcf, 0x19, 0xf5, 0x5d, 0x96, 0xf8, 0x4b, 0xc6,
	0xaa, 0x8f, 0xd2, 0x46, 0xfb, 0x1c, 0x41, 0xaa, 0x40, 0x4e, 0x1c, 0xbb, 0xc7, 0xe3, 0x3b, 0xa4,
	0xca, 0xd2, 0x3a, 0x49, 0xb1, 0x3a, 0x59, 0xc7, 0x5c, 0x2c, 0x3e, 0xf7, 0xb1, 0xcc, 0x12, 0x2c,
	0x96, 0xe2, 0x49, 0x14, 0xd2, 0x27, 0xcf, 0x60, 0x23, 0x94, 0x11, 0xdc, 0x3e, 0x72, 0x59, 0x91,
	0xa4, 0xab, 0x57, 0x51, 0xcc, 0x5a, 0x20, 0xa6, 0x2e, 0xf0, 0xfa, 0xbe, 0xb1, 0x76, 0x32, 0x07,
	0x74, 0xc9, 0x07, 0x40, 0xbc, 0x89, 0x39, 0x72, 0x7b, 0x13, 0x7b, 0xcc, 0xe4, 0x30, 0x8f, 0x2f,
	0x30, 0x8f, 0xaf, 0x46, 0x30, 0x6d, 0x44, 0x28, 0xfb, 0x22, 0x37, 0x30, 0x76, 0x15, 0x7d, 0xff,
	0x85, 0x6a, 0xa8, 0x34, 0x92, 0xcb, 0x00, 0x1d, 0x3d, 0x38, 0x27, 0x30, 0x70, 0xcb, 0x0d, 0xf5,
	0x71, 0xbb, 0xfb, 0xbc, 0xa9, 0xd5, 0x78, 0x1e, 0x24, 0xc9, 0x7b, 0xb0, 0xc1, 0x60, 0x1d, 0xe3,
	0x09, 0xe6, 0x88, 0x84, 0x4a, 0x29, 0x7f, 0x4a, 0xc2, 0x46, 0x6c, 0x59, 0x9c, 0x1b, 0x97, 0x58,
	0xea, 0xff, 0x27, 0x2e, 0x9f, 0x40, 0xb1, 0x87, 0xb2, 0xac, 0x49, 0x17, 0x85, 0xd9, 0xde, 0x59,
	0x18, 0x15, 0x82, 0xee, 0x5c, 0xae, 0x31, 0x9c, 0xca, 0x50, 0x18, 0x93, 0xe5, 0x9e, 0x7c, 0xee,
	0x07, 0xdc, 0x96, 0xc4, 0x9d, 0x9e, 0xe1, 0xb6, 0x66, 0xb8, 0xfd, 0x73, 0x5f, 0xf9, 0x50, 0xf8,
	0x14, 0x20, 0xd3, 0x6a, 0x54, 0x6a, 0xaa, 0xa8, 0x0d, 0xc9, 0x9f, 0x51, 0xff, 0x26, 0x95, 0x29,
	0xe4, 0x83, 0x36, 0x40, 0xab, 0xe4, 0xc0, 0xe9, 0x9f, 0xf9, 0x55, 0x42, 0x9f, 0x49, 0x09, 0xb2,
	0xee, 0xf4, 0xe0, 0xa7, 0x58, 0x75, 0xbc, 0x07, 0x1b, 0xfe, 0x71, 0xb6, 0x7e, 0x52, 0x6f, 0x53,
	0x3f, 0x63, 0x58, 0x99, 0xc1, 0x93, 0xbb, 0x90, 0x0b, 0xb2, 0x98, 0x8f, 0x09, 0xd6, 0x51, 0xfd,
	0xe4, 0xcd, 0x0e, 0x45, 0xce, 0xde, 0x86, 0x45, 0x74, 0xb4, 0x87, 0x2c, 0x5d, 0x16, 0x50, 0xae,
	0x55, 0x41, 0xc0, 0x98, 0xf9, 0x68, 0xc7, 0xc8, 0x1c, 0x5a, 0xdc, 0xed, 0x06, 0x7b, 0x56, 0xfe,
	0x9e, 0x00, 0xb2, 0x6f, 0x8d, 0xfa, 0xa2, 0x5f, 0x19, 0xd6, 0xcf, 0xa6, 0x38, 0x18, 0x30, 0xba,
	0x59, 0x31, 0x65, 0x44, 0x66, 0xac, 0x07, 0x06, 0x88, 0xc1, 0xc2, 0x52, 0xc1, 0x27, 0xc2, 0x24,
	0x5f, 0x60, 0x79, 0xcf, 0xae, 0x2d, 0xec, 0x6e, 0x44, 0x9b, 0xa9, 0x10, 0x8e, 0xfd, 0x94, 0x53,
	0x91, 0x0f, 0x21, 0x85, 0x73, 0x80, 0x29, 0x52, 0xd8, 0x5d, 0x93, 0x67, 0x86, 0x20, 0xad, 0x66,
	0xd1, 0x48, 0xda, 0x1c, 0x91, 0x87, 0x92, 0xe2, 0x10, 0x4b, 0x4f, 0xa7, 0x41, 0xd0, 0x73, 0x88,
	0x4d, 0x77, 0x3a, 0x68, 0x3f, 0x83, 0x56, 0xf3, 0x80, 0x7e, 0x60, 0x8c, 0xca, 0x9f, 0x53, 0xb0,
	0x28, 0x5f, 0x2a, 0x47, 0x2a, 0x11, 0x8d, 0x94, 0x1f, 0xd7, 0xa4, 0x14, 0xd7, 0x6b, 0x90, 0x67,
	0xc3, 0x59, 0x72, 0x54, 0x8e, 0x02, 0x74, 0x3c, 0x93, 0x07, 0x40, 0x18, 0x92, 0x37, 0x06, 0xb3,
	0xdf, 0x9f, 0xe0, 0x1d, 0x5c, 0x25, 0xa3, 0x48, 0x31, 0xec, 0xe2, 0x0a, 0x87, 0x63, 0xef, 0xce,
	0xe2, 0xb0, 0x66, 0x82, 0x78, 0xb5, 0x67, 0x3c, 0x87, 0x89, 0xb9, 0x0f, 0x45, 0x44, 0x44, 0x85,
	0x64, 0x18, 0xc5, 0xb2, 0xe7, 0x44, 0x44, 0xdc, 0x87, 0x9c, 0x08, 0xb4, 0x8b, 0x63, 0x2e, 0x85,
	0x96, 0x2f, 0xa2, 0xe5, 0x01, 0xcc, 0xe0, 0xa9, 0x81, 0x4f, 0xe4, 0x21, 0x14, 0x30, 0x55, 0xc7,
	0x03, 0xd3, 0xb3, 0x68, 0xa6, 0xe4, 0x98, 0x9b, 0x96, 0x91, 0x18, 0xda, 0x02, 0x8c, 0xce, 0x02,
	0x9f, 0x04, 0xf3, 0xe5, 0x25, 0x6c, 0x06, 0x0c, 0xe8, 0x10, 0x17, 0x4b, 0x65, 0x4a, 0x2b, 0xd6,
	0xc5, 0xd9, 0x46, 0x33, 0x56, 0x89, 0x0d, 0xe1, 0xce, 0xbe, 0x44, 0x6a, 0x6c, 0xf8, 0x12, 0x64,
	0xa8, 0x5b, 0xfe, 0x2e, 0x2c, 0xca, 0x00, 0x52, 0x84, 0xd4, 0x2b, 0xcb, 0x2f, 0x1f, 0xfa, 0x48,
	0xd6, 0x61, 0xe1, 0xc4, 0x1c, 0x4c, 0xfd, 0x2c, 0xe5, 0x07, 0xe5, 0x77, 0x09, 0x80, 0x30, 0x05,
	0x62, 0x87, 0xd3, 0x36, 0xac, 0xb2, 0x08, 0x8c, 0x8f, 0x9d, 0x91, 0xd5, 0x1d, 0x4d, 0x87, 0x07,
	0xd6, 0x44, 0x08, 0x61, 0x4b, 0x55, 0x8b, 0xc2, 0x75, 0x06, 0xc6, 0xca, 0x59, 0x41, 0x37, 0x47,
	0x28, 0x79, 0x40, 0x71, 0x87, 0x92, 0xe9, 0x64, 0x27, 0xa7, 0x2f, 0x72, 0xb2, 0xb2, 0x01, 0x6b,
	0x91, 0x5a, 0x71, 0xc7, 0x68, 0xae, 0xa5, 0xfc, 0x35, 0x05, 0x25, 0x6d, 0x64, 0x7b, 0x36, 0x7a,
	0x82, 0x09, 0xa6, 0xed, 0xc8, 0xaf, 0xa4, 0x43, 0x58, 0xa7, 0xdd, 0x08, 0x7b, 0x24, 0x23, 0x60,
	0x03, 0x20, 0x6c, 0xb8, 0xdf, 0x96, 0x06, 0x61, 0xbc, 0x80, 0x1d, 0xfa, 0xac, 0x05, 0xcc, 0xac,
	0xec, 0x48, 0x6f, 0x0e, 0xf6, 0xb5, 0x78, 0xe6, 0x11, 0xac, 0x38, 0x93, 0x23, 0x73, 0x64, 0x7f,
	0x26, 0xfa, 0x7c, 0xa4, 0xe9, 0x36, 0x25, 0x14, 0x6d, 0xba, 0x32, 0xa9, 0xd4, 0xb2, 0xe5, 0x86,
	0xbf, 0xf0, 0xc6, 0x0d, 0xff, 0x9b, 0xb8, 0x6d, 0x59, 0x27, 0x38, 0x4d, 0x29, 0x1b, 0x2b, 0x0e,
	0x1e, 0x95, 0x3a, 0x03, 0x22, 0x43, 0x8e, 0xa3, 0xb1, 0xbb, 0xe3, 0xc4, 0x9f, 0xf7, 0x11, 0x59,
	0x83, 0x95, 0x5a, 0x53, 0xd7, 0xd5, 0x5a, 0xbb, 0xdb, 0xaa, 0x18, 0x6d, 0x4d, 0x15, 0x7b, 0x96,
	0xa1, 0xb6, 0x3b, 0x86, 0xde, 0x6d, 0x3d, 0x6d, 0xea, 0x6a, 0x57, 0xef, 0xec, 0x55, 0x55, 0xa3,
	0x98, 0x50, 0x7e, 0x95, 0x80, 0xf7, 0x62, 0x22, 0xc0, 0x03, 0x4c, 0xeb, 0x1e, 0xf7, 0xfa, 0xd3,
	0xb3, 0x38, 0x97, 0x15, 0x19, 0x46, 0xf6, 0xda, 0xf7, 0xa1, 0xe4, 0x4c, 0xec, 0x23, 0x7b, 0x84,
	0xca, 0x8c, 0x8e, 0xa2, 0x3c, 0xbc, 0x57, 0x6c, 0x4a, 0x78, 0x89, 0x53, 0xf9, 0x43, 0x02, 0xd6,
	0x2b, 0x27, 0x58, 0x6d, 0xe6, 0xc1, 0xc0, 0x92, 0x45, 0xde, 0x01, 0x7c, 0x11, 0xb0, 0x31, 0xf5,
	0x06, 0x67, 0xbc, 0xa1, 0xf0, 0x9a, 0x58, 0xf4, 0x81, 0xac, 0xad, 0xe0, 0x04, 0x88, 0x09, 0x7e,
	0x61, 0x2c, 0xc9, 0xa9, 0xe2, 0x90, 0x30, 0xc7, 0xe6, 0x81, 0x3d, 0x40, 0x53, 0x2d, 0x3e, 0x9c,
	0x96, 0xa5, 0xd5, 0x59, 0xba, 0xb3, 0xe6, 0xd3, 0x9d, 0x19, 0x11, 0x1e, 0xe5, 0xd7, 0x09, 0x50,
	0xf6, 0x2d, 0x73, 0xd2, 0x3b, 0x8e, 0x53, 0xd5, 0xf5, 0xf3, 0x1e, 0x1b, 0xa9, 0x39, 0xb1, 0xcc,
	0x6e, 0xcf, 0xe9, 0xfb, 0xea, 0xe6, 0x28, 0xa0, 0x86, 0xe7, 0x39, 0x3d, 0x92, 0xef, 0xa0, 0x87,
	0x0d, 0x77, 0x2e, 0x54, 0x43, 0xc4, 0xae, 0x0a, 0x4b, 0xb2, 0x57, 0x5c, 0xd4, 0x85, 0xb6, 0xb7,
	0x1b, 0xc1, 0x5d, 0x71, 0xec, 0xc6, 0xa2, 0xe4, 0x35, 0x57, 0xf9, 0x3c, 0x01, 0xd7, 0x5a, 0x13,
	0xe7, 0xc4, 0x76, 0x31, 0xbb, 0x64, 0x32, 0x61, 0x2b, 0x86, 0x67, 0xec, 0xa3, 0xbb, 0x87, 0xce,
	0xc4, 0x0f, 0x4f, 0x00, 0x7c, 0xec, 0xd0, 0x18, 0xc6, 0x84, 0x07, 0xc7, 0x5b, 0x24, 0x40, 0x37,
	0x64, 0xaf, 0xa5, 0x04, 0x45, 0xe0, 0xb7, 0x6a, 0x0e, 0x32, 0x9c, 0x5b, 0xa9, 0xc0, 0xf5, 0x78,
	0x8d, 0x84, 0xd9, 0xb3, 0xc9, 0x90, 0x9a, 0x4b, 0x06, 0xe5, 0x53, 0xb8, 0x51, 0xb7, 0xc6, 0x17,
	0x98, 0x35, 0x2b, 0x23, 0x31, 0x9f, 0x50, 0x9b, 0x90, 0x41, 0xdd, 0x5c, 0x7c, 0x23, 0xe2, 0xd9,
	0x26, 0x4e, 0xca, 0x2d, 0xd8, 0x3a, 0x4f, 0xb6, 0x68, 0x9a, 0x4f, 0xe0, 0xaa, 0x44, 0xc1, 0x66,
	0x8c, 0x7f, 0xef, 0xba, 0xbf, 0x4c, 0xf0, 0x0b, 0xc5, 0xce, 0x70, 0xde, 0x55, 0x65, 0x28, 0xcd,
	0x0b, 0x12, 0x97, 0x1c, 0x4b, 0x5e, 0x92, 0x07, 0xeb, 0x5b, 0x06, 0x6e, 0x29, 0x3a, 0xab, 0xf9,
	0xfd, 0x8b, 0x96, 0x24, 0x50, 0xa9, 0xc3, 0x8d, 0x73, 0x6e, 0x12, 0x01, 0x99, 0x93, 0x92, 0x88,
	0x91, 0xf2, 0x97, 0x04, 0x64, 0xb4, 0x16, 0xed, 0x3d, 0x68, 0x6e, 0x32, 0xd8, 0xf8, 0x32, 0xd8,
	0xf9, 0x92, 0xd8, 0xf3, 0x10, 0x42, 0xee, 0x89, 0x85, 0x3d, 0xc9, 0xe6, 0x47, 0xb8, 0x3b, 0x71,
	0x36, 0x69, 0x41, 0xc7, 0xbd, 0x67, 0x8c, 0xcd, 0x81, 0xbe, 0x21, 0xd3, 0xe0, 0xe7, 0x0c, 0xff,
	0x48, 0x7e, 0x84, 0x71, 0x35, 0x27, 0x9e, 0xdd, 0xb3, 0xc7, 0x26, 0x5d, 0x51, 0xd3, 0xac, 0x22,
	0xca, 0x33, 0xa2, 0x5a, 0x21, 0x89, 0x11, 0xa1, 0xa7, 0xf1, 0xf1, 0x9c, 0x57, 0xd6, 0x48, 0xac,
	0x35, 0xfc, 0xa0, 0xfc, 0x3e, 0x09, 0xab, 0x73, 0x9c, 0xd8, 0x3a, 0xc1, 0xec, 0xf5, 0x9c, 0x29,
	0xae, 0xa5, 0x81, 0x39, 0x4b, 0x68, 0x4e, 0xbe, 0xc2, 0xa1, 0x68, 0x55, 0x5e, 0x10, 0xf0, 0xae,
	0x1f, 0x0e, 0x8b, 0x64, 0xd8, 0xf5, 0x83, 0x31, 0x91, 0xb3, 0xfc, 0x01, 0xb1, 0x0b, 0xe9, 0x89,
	0x33, 0xe0, 0x45, 0x22, 0xb7, 0x8e, 0x79, 0xe5, 0x91, 0xca, 0x60, 0xb4, 0x38, 0x23, 0x17, 0x5c,
	0x0f, 0x3b, 0xbc, 0xf8, 0xd8, 0xb1, 0x3e, 0xc3, 0xb4, 0x4f, 0x71, 0x06, 0x27, 0x21, 0x65, 0xc8,
	0xd9, 0x7d, 0x7e, 0x9b, 0xb0, 0x33, 0x38, 0xe3, 0x4b, 0xd3, 0xe2, 0xc8, 0xf2, 0x7e, 0xee, 0x4c,
	0x5e, 0xf1, 0x59, 0x9e, 0x99, 0x11, 0xa7, 0x73, 0x24, 0x0b, 0x46, 0x61, 0x14, 0x1e, 0x94, 0x5f,
	0x26, 0xe9, 0xfb, 0x31, 0x1f, 0x33, 0xfc, 0x4e, 0x3f, 0x13, 0xef, 0x45, 0xde, 0xc3, 0x2e, 0x08,
	0x6b, 0xdc, 0x58, 0x4d, 0xbe, 0xf1, 0x58, 0x7d, 0x0a, 0xeb, 0x13, 0x0b, 0xfd, 0x62, 0xd3, 0xf7,
	0x84, 0x40, 0x00, 0x1f, 0x04, 0xf9, 0xea, 0x26, 0x4a, 0x20, 0x86, 0x8f, 0xf7, 0x85, 0xb8, 0x06,
	0x99, 0xcc, 0xc0, 0xf0, 0x7d, 0x6e, 0xd6, 0x07, 0xe9, 0x37, 0xf5, 0xc1, 0x0f, 0x61, 0x73, 0xd6,
	0x05, 0x41, 0x89, 0xa4, 0xa9, 0xba, 0xcc, 0x07, 0x85, 0xdd, 0x95, 0x19, 0x1f, 0x18, 0x0c, 0x89,
	0x25, 0xbd, 0x14, 0xf5, 0x1c, 0xe6, 0x8c, 0x3d, 0xe6, 0x2b, 0x96, 0x9f, 0x60, 0x2c, 0x67, 0x38,
	0x15, 0xcd, 0x19, 0x8e, 0x46, 0xeb, 0xa3, 0xc9, 0x98, 0xbc, 0x38, 0x19, 0x95, 0xef, 0xc0, 0xf2,
	0xbb, 0x28, 0xa8, 0xc2, 0x46, 0x8b, 0x17, 0x1a, 0x07, 0x07, 0xcd, 0xe6, 0xad, 0x4a, 0x41, 0xf9,
	0x31, 0x6c, 0xce, 0x8a, 0x11, 0x5a, 0xbc, 0x0f, 0x0b, 0xf4, 0x22, 0x7f, 0x92, 0xcd, 0xa9, 0xc1,
	0xb1, 0xca, 0x3f, 0x12, 0xb0, 0xd6, 0x19, 0xf7, 0xe7, 0x32, 0xed, 0xeb, 0xf2, 0x57, 0x58, 0x5d,
	0xa9, 0xcb, 0xab, 0xeb, 0x9d, 0xb3, 0xe7, 0x11, 0xac, 0x47, 0x8d, 0x7a, 0x8b, 0xd0, 0x6c, 0x3f,
	0x80, 0x82, 0xf4, 0xf6, 0x4a, 0xbf, 0xa1, 0xb1, 0x8f, 0x24, 0xb8, 0x18, 0x8a, 0x2f, 0x71, 0x89,
	0xf0, 0xbb, 0x5a, 0x72, 0xbb, 0x81, 0x81, 0x8c, 0xdb, 0x43, 0xc8, 0x2a, 0x2c, 0x31, 0xbe, 0xae,
	0xaa, 0x57, 0xaa, 0x0d, 0xf6, 0x35, 0x61, 0x05, 0x0a, 0xc8, 0x1f, 0x00, 0x12, 0x14, 0xb0, 0x27,
	0x01, 0x92, 0xdb, 0x2f, 0xb0, 0xf2, 0xe3, 0x5a, 0x13, 0x6a, 0x7e, 0x53, 0xd3, 0x9f, 0x57, 0x1a,
	0x5a, 0xbd, 0x8b, 0x04, 0xf4, 0x1b, 0x1f, 0xdb, 0x57, 0x6b, 0x5a, 0xab, 0xa2, 0xb7, 0xbb, 0x46,
	0xb3, 0x41, 0xf5, 0x03, 0xc8, 0x50, 0x14, 0xdd, 0x55, 0xc9, 0x12, 0xe4, 0x0d, 0x15, 0xd1, 0x1a,
	0xfb, 0x12, 0xb8, 0xfd, 0x08, 0x20, 0x6c, 0x12, 0xfc, 0x4b, 0x62, 0x44, 0x5a, 0xfb, 0x65, 0x8b,
	0x4a, 0xa0, 0xc6, 0x6a, 0x75, 0xb5, 0xc9, 0x6d, 0xac, 0x74, 0xea, 0x5a, 0x13, 0x99, 0x3f, 0x83,
	0x82, 0x14, 0x1d, 0x9c, 0x19, 0xeb, 0x33, 0xdc, 0xfb, 0xed, 0x4a, 0x9b, 0xb2, 0x17, 0x20, 0xdb,
	0x52, 0xf5, 0xba, 0xa6, 0x3f, 0x41, 0x01, 0xf4, 0xdb, 0x49, 0xad, 0xa6, 0xb6, 0xda, 0xd4, 0x32,
	0x7a, 0xaa, 0xab, 0xb5, 0x86, 0xa6, 0xe3, 0x29, 0x45, 0xb5, 0x13, 0x7b, 0x37, 0x1e, 0xd3, 0x54,
	0xf1, 0xc7, 0xe8, 0x4e, 0x7c, 0x5e, 0xe0, 0xa8, 0xbd, 0x56, 0x43, 0xa5, 0xa8, 0xcc, 0xf6, 0x2e,
	0x14, 0xa4, 0x30, 0xd3, 0x1b, 0x3a, 0xfa, 0x33, 0xbd, 0xf9, 0x42, 0xe7, 0x5f, 0x67, 0x6a, 0x6a,
	0xa3, 0xd1, 0x69, 0x54, 0xa8, 0xc5, 0x39, 0x48, 0xbf, 0xd0, 0x1e, 0x6b, 0xc5, 0xe4, 0xee, 0x57,
	0x59, 0xc8, 0xaa, 0xa7, 0x35, 0x1a, 0x5a, 0x72, 0x0a, 0xd7, 0x2e, 0x58, 0x00, 0x49, 0xf8, 0x71,
	0xf6, 0xf2, 0x6d, 0xb5, 0xfc, 0xe0, 0xcd, 0x88, 0x45, 0xb2, 0xf5, 0x60, 0x3d, 0x6e, 0xf9, 0x22,
	0xdf, 0x08, 0x17, 0xd8, 0xf3, 0xd7, 0xaa, 0xf2, 0xfb, 0x97, 0x50, 0x89, 0x4b, 0x6c, 0xd8, 0x8c,
	0x5f, 0xa1, 0x48, 0xf8, 0x91, 0xfe, 0xc2, 0xfd, 0xad, 0x7c, 0xef, 0x52, 0x3a, 0x71, 0xd5, 0x0b,
	0x28, 0xce, 0xae, 0x50, 0xe4, 0x56, 0x1c, 0xb3, 0xbc, 0xa6, 0x95, 0x6f, 0x5f, 0x40, 0x21, 0x04,
	0x1f, 0x62, 0x09, 0xc5, 0x6d, 0x45, 0x24, 0xc6, 0x07, 0x31, 0xfb, 0x59, 0xf9, 0xee, 0x65, 0x64,
	0xe2, 0x9e, 0xa7, 0x58, 0x7e, 0xe1, 0x8b, 0x39, 0xb9, 0x26, 0x45, 0x73, 0xf6, 0xd3, 0x56, 0xf9,
	0x7a, 0x3c, 0x52, 0x48, 0xfa, 0x14, 0x97, 0x98, 0xd9, 0xf7, 0x40, 0x72, 0xfb, 0xd2, 0xb7, 0xf4,
	0xb2, 0x72, 0x11, 0x89, 0x90, 0xfd, 0x13, 0x1c, 0x28, 0x91, 0xc9, 0x47, 0xb6, 0xe6, 0xb8, 0x22,
	0xbd, 0xba, 0x7c, 0xf3, 0x5c, 0xbc, 0x10, 0xf9, 0x71, 0xb8, 0x2f, 0xce, 0xb6, 0x3c, 0x21, 0xe2,
	0xea, 0x1c, 0x3c, 0xd4, 0x26, 0x3a, 0x60, 0x24, 0x6d, 0x62, 0x07, 0x98, 0xa4, 0xcd, 0x39, 0x93,
	0xe9, 0x19, 0x2c, 0xca, 0xcd, 0x99, 0x84, 0xae, 0x8e, 0x19, 0x44, 0xe5, 0x1b, 0xe7, 0x60, 0xb9,
	0xb0, 0xea, 0x83, 0x2f, 0xbe, 0xdc, 0x4a, 0xfc, 0xf3, 0xcb, 0xad, 0x2b, 0xff, 0xc5, 0xbf, 0xbf,
	0x78, 0xbd, 0x95, 0xf8, 0x23, 0xfe, 0xfe, 0x86, 0xbf, 0x2f, 0xf0, 0xf7, 0x6f, 0xfc, 0x7d, 0xf5,
	0x1a, 0x71, 0xf8, 0xf7, 0xf3, 0xff, 0x6c, 0x5d, 0x39, 0xc8, 0xb0, 0x7f, 0xbc, 0x7d, 0xf4, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x2c, 0xb1, 0x64, 0xbd, 0x1b, 0x00, 0x00,
}
