// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/excomms (interfaces: ExCommsClient)

package excommsmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	excomms "github.com/sprucehealth/backend/svc/excomms"
	grpc "google.golang.org/grpc"
)

// Mock of ExCommsClient interface
type MockExCommsClient struct {
	ctrl     *gomock.Controller
	recorder *_MockExCommsClientRecorder
}

// Recorder for MockExCommsClient (not exported)
type _MockExCommsClientRecorder struct {
	mock *MockExCommsClient
}

func NewMockExCommsClient(ctrl *gomock.Controller) *MockExCommsClient {
	mock := &MockExCommsClient{ctrl: ctrl}
	mock.recorder = &_MockExCommsClientRecorder{mock}
	return mock
}

func (_m *MockExCommsClient) EXPECT() *_MockExCommsClientRecorder {
	return _m.recorder
}

func (_m *MockExCommsClient) BlockNumber(_param0 context.Context, _param1 *excomms.BlockNumberRequest, _param2 ...grpc.CallOption) (*excomms.BlockNumberResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BlockNumber", _s...)
	ret0, _ := ret[0].(*excomms.BlockNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) BlockNumber(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockNumber", _s...)
}

func (_m *MockExCommsClient) DeprovisionEmail(_param0 context.Context, _param1 *excomms.DeprovisionEmailRequest, _param2 ...grpc.CallOption) (*excomms.DeprovisionEmailResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeprovisionEmail", _s...)
	ret0, _ := ret[0].(*excomms.DeprovisionEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) DeprovisionEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeprovisionEmail", _s...)
}

func (_m *MockExCommsClient) DeprovisionPhoneNumber(_param0 context.Context, _param1 *excomms.DeprovisionPhoneNumberRequest, _param2 ...grpc.CallOption) (*excomms.DeprovisionPhoneNumberResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeprovisionPhoneNumber", _s...)
	ret0, _ := ret[0].(*excomms.DeprovisionPhoneNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) DeprovisionPhoneNumber(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeprovisionPhoneNumber", _s...)
}

func (_m *MockExCommsClient) IPCall(_param0 context.Context, _param1 *excomms.IPCallRequest, _param2 ...grpc.CallOption) (*excomms.IPCallResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IPCall", _s...)
	ret0, _ := ret[0].(*excomms.IPCallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) IPCall(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IPCall", _s...)
}

func (_m *MockExCommsClient) InitiateIPCall(_param0 context.Context, _param1 *excomms.InitiateIPCallRequest, _param2 ...grpc.CallOption) (*excomms.InitiateIPCallResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InitiateIPCall", _s...)
	ret0, _ := ret[0].(*excomms.InitiateIPCallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) InitiateIPCall(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InitiateIPCall", _s...)
}

func (_m *MockExCommsClient) InitiatePhoneCall(_param0 context.Context, _param1 *excomms.InitiatePhoneCallRequest, _param2 ...grpc.CallOption) (*excomms.InitiatePhoneCallResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InitiatePhoneCall", _s...)
	ret0, _ := ret[0].(*excomms.InitiatePhoneCallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) InitiatePhoneCall(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InitiatePhoneCall", _s...)
}

func (_m *MockExCommsClient) ListBlockedNumbers(_param0 context.Context, _param1 *excomms.ListBlockedNumbersRequest, _param2 ...grpc.CallOption) (*excomms.ListBlockedNumbersResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListBlockedNumbers", _s...)
	ret0, _ := ret[0].(*excomms.ListBlockedNumbersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) ListBlockedNumbers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListBlockedNumbers", _s...)
}

func (_m *MockExCommsClient) PendingIPCalls(_param0 context.Context, _param1 *excomms.PendingIPCallsRequest, _param2 ...grpc.CallOption) (*excomms.PendingIPCallsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PendingIPCalls", _s...)
	ret0, _ := ret[0].(*excomms.PendingIPCallsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) PendingIPCalls(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PendingIPCalls", _s...)
}

func (_m *MockExCommsClient) ProvisionEmailAddress(_param0 context.Context, _param1 *excomms.ProvisionEmailAddressRequest, _param2 ...grpc.CallOption) (*excomms.ProvisionEmailAddressResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ProvisionEmailAddress", _s...)
	ret0, _ := ret[0].(*excomms.ProvisionEmailAddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) ProvisionEmailAddress(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProvisionEmailAddress", _s...)
}

func (_m *MockExCommsClient) ProvisionPhoneNumber(_param0 context.Context, _param1 *excomms.ProvisionPhoneNumberRequest, _param2 ...grpc.CallOption) (*excomms.ProvisionPhoneNumberResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ProvisionPhoneNumber", _s...)
	ret0, _ := ret[0].(*excomms.ProvisionPhoneNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) ProvisionPhoneNumber(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProvisionPhoneNumber", _s...)
}

func (_m *MockExCommsClient) SearchAvailablePhoneNumbers(_param0 context.Context, _param1 *excomms.SearchAvailablePhoneNumbersRequest, _param2 ...grpc.CallOption) (*excomms.SearchAvailablePhoneNumbersResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SearchAvailablePhoneNumbers", _s...)
	ret0, _ := ret[0].(*excomms.SearchAvailablePhoneNumbersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) SearchAvailablePhoneNumbers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchAvailablePhoneNumbers", _s...)
}

func (_m *MockExCommsClient) SendMessage(_param0 context.Context, _param1 *excomms.SendMessageRequest, _param2 ...grpc.CallOption) (*excomms.SendMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SendMessage", _s...)
	ret0, _ := ret[0].(*excomms.SendMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) SendMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendMessage", _s...)
}

func (_m *MockExCommsClient) UnblockNumber(_param0 context.Context, _param1 *excomms.UnblockNumberRequest, _param2 ...grpc.CallOption) (*excomms.UnblockNumberResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UnblockNumber", _s...)
	ret0, _ := ret[0].(*excomms.UnblockNumberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) UnblockNumber(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnblockNumber", _s...)
}

func (_m *MockExCommsClient) UpdateIPCall(_param0 context.Context, _param1 *excomms.UpdateIPCallRequest, _param2 ...grpc.CallOption) (*excomms.UpdateIPCallResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateIPCall", _s...)
	ret0, _ := ret[0].(*excomms.UpdateIPCallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExCommsClientRecorder) UpdateIPCall(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateIPCall", _s...)
}
