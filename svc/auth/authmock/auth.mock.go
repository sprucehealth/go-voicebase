// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/auth (interfaces: AuthClient)

package authmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/sprucehealth/backend/svc/auth"
	grpc "google.golang.org/grpc"
)

// Mock of AuthClient interface
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAuthClientRecorder
}

// Recorder for MockAuthClient (not exported)
type _MockAuthClientRecorder struct {
	mock *MockAuthClient
}

func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &_MockAuthClientRecorder{mock}
	return mock
}

func (_m *MockAuthClient) EXPECT() *_MockAuthClientRecorder {
	return _m.recorder
}

func (_m *MockAuthClient) AuthenticateLogin(_param0 context.Context, _param1 *auth.AuthenticateLoginRequest, _param2 ...grpc.CallOption) (*auth.AuthenticateLoginResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AuthenticateLogin", _s...)
	ret0, _ := ret[0].(*auth.AuthenticateLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) AuthenticateLogin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthenticateLogin", _s...)
}

func (_m *MockAuthClient) AuthenticateLoginWithCode(_param0 context.Context, _param1 *auth.AuthenticateLoginWithCodeRequest, _param2 ...grpc.CallOption) (*auth.AuthenticateLoginWithCodeResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AuthenticateLoginWithCode", _s...)
	ret0, _ := ret[0].(*auth.AuthenticateLoginWithCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) AuthenticateLoginWithCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthenticateLoginWithCode", _s...)
}

func (_m *MockAuthClient) BlockAccount(_param0 context.Context, _param1 *auth.BlockAccountRequest, _param2 ...grpc.CallOption) (*auth.BlockAccountResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "BlockAccount", _s...)
	ret0, _ := ret[0].(*auth.BlockAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) BlockAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockAccount", _s...)
}

func (_m *MockAuthClient) CheckAuthentication(_param0 context.Context, _param1 *auth.CheckAuthenticationRequest, _param2 ...grpc.CallOption) (*auth.CheckAuthenticationResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CheckAuthentication", _s...)
	ret0, _ := ret[0].(*auth.CheckAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) CheckAuthentication(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckAuthentication", _s...)
}

func (_m *MockAuthClient) CheckPasswordResetToken(_param0 context.Context, _param1 *auth.CheckPasswordResetTokenRequest, _param2 ...grpc.CallOption) (*auth.CheckPasswordResetTokenResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CheckPasswordResetToken", _s...)
	ret0, _ := ret[0].(*auth.CheckPasswordResetTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) CheckPasswordResetToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckPasswordResetToken", _s...)
}

func (_m *MockAuthClient) CheckVerificationCode(_param0 context.Context, _param1 *auth.CheckVerificationCodeRequest, _param2 ...grpc.CallOption) (*auth.CheckVerificationCodeResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CheckVerificationCode", _s...)
	ret0, _ := ret[0].(*auth.CheckVerificationCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) CheckVerificationCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckVerificationCode", _s...)
}

func (_m *MockAuthClient) CreateAccount(_param0 context.Context, _param1 *auth.CreateAccountRequest, _param2 ...grpc.CallOption) (*auth.CreateAccountResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateAccount", _s...)
	ret0, _ := ret[0].(*auth.CreateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) CreateAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAccount", _s...)
}

func (_m *MockAuthClient) CreatePasswordResetToken(_param0 context.Context, _param1 *auth.CreatePasswordResetTokenRequest, _param2 ...grpc.CallOption) (*auth.CreatePasswordResetTokenResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreatePasswordResetToken", _s...)
	ret0, _ := ret[0].(*auth.CreatePasswordResetTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) CreatePasswordResetToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePasswordResetToken", _s...)
}

func (_m *MockAuthClient) CreateVerificationCode(_param0 context.Context, _param1 *auth.CreateVerificationCodeRequest, _param2 ...grpc.CallOption) (*auth.CreateVerificationCodeResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateVerificationCode", _s...)
	ret0, _ := ret[0].(*auth.CreateVerificationCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) CreateVerificationCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVerificationCode", _s...)
}

func (_m *MockAuthClient) DeleteAccount(_param0 context.Context, _param1 *auth.DeleteAccountRequest, _param2 ...grpc.CallOption) (*auth.DeleteAccountResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteAccount", _s...)
	ret0, _ := ret[0].(*auth.DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) DeleteAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAccount", _s...)
}

func (_m *MockAuthClient) GetAccount(_param0 context.Context, _param1 *auth.GetAccountRequest, _param2 ...grpc.CallOption) (*auth.GetAccountResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAccount", _s...)
	ret0, _ := ret[0].(*auth.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) GetAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccount", _s...)
}

func (_m *MockAuthClient) GetAccountContacts(_param0 context.Context, _param1 *auth.GetAccountContactsRequest, _param2 ...grpc.CallOption) (*auth.GetAccountContactsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAccountContacts", _s...)
	ret0, _ := ret[0].(*auth.GetAccountContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) GetAccountContacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAccountContacts", _s...)
}

func (_m *MockAuthClient) GetLastLoginInfo(_param0 context.Context, _param1 *auth.GetLastLoginInfoRequest, _param2 ...grpc.CallOption) (*auth.GetLastLoginInfoResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetLastLoginInfo", _s...)
	ret0, _ := ret[0].(*auth.GetLastLoginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) GetLastLoginInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastLoginInfo", _s...)
}

func (_m *MockAuthClient) Unauthenticate(_param0 context.Context, _param1 *auth.UnauthenticateRequest, _param2 ...grpc.CallOption) (*auth.UnauthenticateResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Unauthenticate", _s...)
	ret0, _ := ret[0].(*auth.UnauthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) Unauthenticate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unauthenticate", _s...)
}

func (_m *MockAuthClient) UpdateAccountContacts(_param0 context.Context, _param1 *auth.UpdateAccountContactsRequest, _param2 ...grpc.CallOption) (*auth.UpdateAccountContactsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateAccountContacts", _s...)
	ret0, _ := ret[0].(*auth.UpdateAccountContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) UpdateAccountContacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAccountContacts", _s...)
}

func (_m *MockAuthClient) UpdateAuthToken(_param0 context.Context, _param1 *auth.UpdateAuthTokenRequest, _param2 ...grpc.CallOption) (*auth.UpdateAuthTokenResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateAuthToken", _s...)
	ret0, _ := ret[0].(*auth.UpdateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) UpdateAuthToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAuthToken", _s...)
}

func (_m *MockAuthClient) UpdatePassword(_param0 context.Context, _param1 *auth.UpdatePasswordRequest, _param2 ...grpc.CallOption) (*auth.UpdatePasswordResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdatePassword", _s...)
	ret0, _ := ret[0].(*auth.UpdatePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) UpdatePassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePassword", _s...)
}

func (_m *MockAuthClient) VerifiedValue(_param0 context.Context, _param1 *auth.VerifiedValueRequest, _param2 ...grpc.CallOption) (*auth.VerifiedValueResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VerifiedValue", _s...)
	ret0, _ := ret[0].(*auth.VerifiedValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthClientRecorder) VerifiedValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifiedValue", _s...)
}
