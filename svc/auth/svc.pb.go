// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package auth is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		VerificationCode
		Account
		AuthToken
		AuthenticateLoginRequest
		AuthenticateLoginResponse
		AuthenticateLoginWithCodeRequest
		AuthenticateLoginWithCodeResponse
		CheckAuthenticationRequest
		CheckAuthenticationResponse
		CreateAccountRequest
		CreateAccountResponse
		GetAccountRequest
		GetAccountResponse
		UnauthenticateRequest
		UnauthenticateResponse
		CreateVerificationCodeRequest
		CreateVerificationCodeResponse
		CheckVerificationCodeRequest
		CheckVerificationCodeResponse
		VerifiedValueRequest
		VerifiedValueResponse
		CreatePasswordResetTokenRequest
		CreatePasswordResetTokenResponse
		CheckPasswordResetTokenRequest
		CheckPasswordResetTokenResponse
		UpdatePasswordRequest
		BlockAccountRequest
		BlockAccountResponse
		UpdatePasswordResponse
		GetLastLoginInfoRequest
		GetLastLoginInfoResponse
		UpdateAuthTokenRequest
		UpdateAuthTokenResponse
*/
package auth

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// VerificationCodeType represents the various types/use cases of verification codes
type VerificationCodeType int32

const (
	VerificationCodeType_PHONE          VerificationCodeType = 0
	VerificationCodeType_EMAIL          VerificationCodeType = 1
	VerificationCodeType_ACCOUNT_2FA    VerificationCodeType = 2
	VerificationCodeType_PASSWORD_RESET VerificationCodeType = 3
)

var VerificationCodeType_name = map[int32]string{
	0: "PHONE",
	1: "EMAIL",
	2: "ACCOUNT_2FA",
	3: "PASSWORD_RESET",
}
var VerificationCodeType_value = map[string]int32{
	"PHONE":          0,
	"EMAIL":          1,
	"ACCOUNT_2FA":    2,
	"PASSWORD_RESET": 3,
}

func (VerificationCodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

// AccountType represents the various types of accounts
type AccountType int32

const (
	AccountType_UNKNOWN  AccountType = 0
	AccountType_PATIENT  AccountType = 1
	AccountType_PROVIDER AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "UNKNOWN",
	1: "PATIENT",
	2: "PROVIDER",
}
var AccountType_value = map[string]int32{
	"UNKNOWN":  0,
	"PATIENT":  1,
	"PROVIDER": 2,
}

func (AccountType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

// Various platforms that interact with the auth service
type Platform int32

const (
	Platform_UNKNOWN_PLATFORM Platform = 0
	Platform_IOS              Platform = 1
	Platform_ANDROID          Platform = 2
	Platform_WEB              Platform = 3
)

var Platform_name = map[int32]string{
	0: "UNKNOWN_PLATFORM",
	1: "IOS",
	2: "ANDROID",
	3: "WEB",
}
var Platform_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"IOS":              1,
	"ANDROID":          2,
	"WEB":              3,
}

func (Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

// TokenDuration represents the duration ranges available to tokens
type TokenDuration int32

const (
	TokenDuration_UNKNOWN_TOKEN_DURATION TokenDuration = 0
	TokenDuration_SHORT                  TokenDuration = 1
	TokenDuration_MEDIUM                 TokenDuration = 2
	TokenDuration_LONG                   TokenDuration = 3
)

var TokenDuration_name = map[int32]string{
	0: "UNKNOWN_TOKEN_DURATION",
	1: "SHORT",
	2: "MEDIUM",
	3: "LONG",
}
var TokenDuration_value = map[string]int32{
	"UNKNOWN_TOKEN_DURATION": 0,
	"SHORT":                  1,
	"MEDIUM":                 2,
	"LONG":                   3,
}

func (TokenDuration) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

// VerificationCode represents the collection of information used to represent the time bound verification code
type VerificationCode struct {
	Token           string               `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Code            string               `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Type            VerificationCodeType `protobuf:"varint,4,opt,name=type,proto3,enum=auth.VerificationCodeType" json:"type,omitempty"`
	ExpirationEpoch uint64               `protobuf:"varint,5,opt,name=expiration_epoch,json=expirationEpoch,proto3" json:"expiration_epoch,omitempty"`
}

func (m *VerificationCode) Reset()                    { *m = VerificationCode{} }
func (*VerificationCode) ProtoMessage()               {}
func (*VerificationCode) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

// Account represents the data associated with an account
type Account struct {
	ID        string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string      `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string      `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Type      AccountType `protobuf:"varint,4,opt,name=type,proto3,enum=auth.AccountType" json:"type,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

// An AuthToken represents the token value and metadata about the token
type AuthToken struct {
	Value               string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	ExpirationEpoch     uint64 `protobuf:"varint,2,opt,name=expiration_epoch,json=expirationEpoch,proto3" json:"expiration_epoch,omitempty"`
	ClientEncryptionKey string `protobuf:"bytes,3,opt,name=client_encryption_key,json=clientEncryptionKey,proto3" json:"client_encryption_key,omitempty"`
}

func (m *AuthToken) Reset()                    { *m = AuthToken{} }
func (*AuthToken) ProtoMessage()               {}
func (*AuthToken) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

// AuthenticateLoginRequest represents the information that is used to authenticate a users login.
// The token_attributes map is used when generating the auth token for this login. Future use of this token
//  must provide the same information.
type AuthenticateLoginRequest struct {
	Email           string            `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password        string            `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,3,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeviceID        string            `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Platform        Platform          `protobuf:"varint,5,opt,name=platform,proto3,enum=auth.Platform" json:"platform,omitempty"`
	Duration        TokenDuration     `protobuf:"varint,6,opt,name=duration,proto3,enum=auth.TokenDuration" json:"duration,omitempty"`
}

func (m *AuthenticateLoginRequest) Reset()                    { *m = AuthenticateLoginRequest{} }
func (*AuthenticateLoginRequest) ProtoMessage()               {}
func (*AuthenticateLoginRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

func (m *AuthenticateLoginRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// AuthenticateLoginResponse represents the information that is returned from AuthenticateLoginRequest
// In the event that requires_two_factor_auth is set to true, the provided token will only work for a short time and to make the 2FA call
type AuthenticateLoginResponse struct {
	Token                *AuthToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Account              *Account   `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	TwoFactorRequired    bool       `protobuf:"varint,4,opt,name=two_factor_required,json=twoFactorRequired,proto3" json:"two_factor_required,omitempty"`
	TwoFactorPhoneNumber string     `protobuf:"bytes,5,opt,name=two_factor_phone_number,json=twoFactorPhoneNumber,proto3" json:"two_factor_phone_number,omitempty"`
}

func (m *AuthenticateLoginResponse) Reset()                    { *m = AuthenticateLoginResponse{} }
func (*AuthenticateLoginResponse) ProtoMessage()               {}
func (*AuthenticateLoginResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

func (m *AuthenticateLoginResponse) GetToken() *AuthToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *AuthenticateLoginResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// AuthenticateLoginWithCodeRequest represents the information that is used to authenticate a use via token/code pair.
// The token_attributes map is used when generating the auth token for this login. Future use of this token
//  must provide the same information.
type AuthenticateLoginWithCodeRequest struct {
	Token           string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Code            string            `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,3,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeviceID        string            `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Platform        Platform          `protobuf:"varint,5,opt,name=platform,proto3,enum=auth.Platform" json:"platform,omitempty"`
	Duration        TokenDuration     `protobuf:"varint,6,opt,name=duration,proto3,enum=auth.TokenDuration" json:"duration,omitempty"`
}

func (m *AuthenticateLoginWithCodeRequest) Reset()      { *m = AuthenticateLoginWithCodeRequest{} }
func (*AuthenticateLoginWithCodeRequest) ProtoMessage() {}
func (*AuthenticateLoginWithCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{5}
}

func (m *AuthenticateLoginWithCodeRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// AuthenticateLoginWithCodeResponse represents the information that is returned from AuthenticateLoginWithCode
type AuthenticateLoginWithCodeResponse struct {
	Token   *AuthToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Account *Account   `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *AuthenticateLoginWithCodeResponse) Reset()      { *m = AuthenticateLoginWithCodeResponse{} }
func (*AuthenticateLoginWithCodeResponse) ProtoMessage() {}
func (*AuthenticateLoginWithCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{6}
}

func (m *AuthenticateLoginWithCodeResponse) GetToken() *AuthToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *AuthenticateLoginWithCodeResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// CheckAuthenticationRequest checks if the provided token maps to an account and is still valid
// The refresh parameter indicates if a new token should be created with an extended expiration
type CheckAuthenticationRequest struct {
	Token           string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,2,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheckAuthenticationRequest) Reset()                    { *m = CheckAuthenticationRequest{} }
func (*CheckAuthenticationRequest) ProtoMessage()               {}
func (*CheckAuthenticationRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

func (m *CheckAuthenticationRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// CheckAuthenticationResponse represents the information that is returned from IsAuthenticatedRequest
// If a refresh was requested then a new token will be returned
type CheckAuthenticationResponse struct {
	IsAuthenticated bool       `protobuf:"varint,1,opt,name=is_authenticated,json=isAuthenticated,proto3" json:"is_authenticated,omitempty"`
	Account         *Account   `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Token           *AuthToken `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *CheckAuthenticationResponse) Reset()                    { *m = CheckAuthenticationResponse{} }
func (*CheckAuthenticationResponse) ProtoMessage()               {}
func (*CheckAuthenticationResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

func (m *CheckAuthenticationResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CheckAuthenticationResponse) GetToken() *AuthToken {
	if m != nil {
		return m.Token
	}
	return nil
}

// CreateAccountRequest represents the information that is expected in account creation requests
// The email and optional? phone number are set as the primary for the account
type CreateAccountRequest struct {
	FirstName       string            `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string            `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email           string            `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber     string            `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Password        string            `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,6,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeviceID        string            `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Type            AccountType       `protobuf:"varint,8,opt,name=type,proto3,enum=auth.AccountType" json:"type,omitempty"`
	Platform        Platform          `protobuf:"varint,9,opt,name=platform,proto3,enum=auth.Platform" json:"platform,omitempty"`
	Duration        TokenDuration     `protobuf:"varint,10,opt,name=duration,proto3,enum=auth.TokenDuration" json:"duration,omitempty"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

func (m *CreateAccountRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// CreateAccountResponse represents the information that is returned from CreateAccountRequest
// The account id and innter auth information is returned from account creation
type CreateAccountResponse struct {
	Token   *AuthToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Account *Account   `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *CreateAccountResponse) Reset()                    { *m = CreateAccountResponse{} }
func (*CreateAccountResponse) ProtoMessage()               {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

func (m *CreateAccountResponse) GetToken() *AuthToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *CreateAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// GetAccountRequest represents the information required to request a users account information
//  AccountEmail is an optional second field. If ID is not provided, then email will be used to lookup the account
type GetAccountRequest struct {
	AccountID    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountEmail string `protobuf:"bytes,2,opt,name=account_email,json=accountEmail,proto3" json:"account_email,omitempty"`
}

func (m *GetAccountRequest) Reset()                    { *m = GetAccountRequest{} }
func (*GetAccountRequest) ProtoMessage()               {}
func (*GetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

// GetAccountResponse represents the information returned from a GetAccount request
type GetAccountResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *GetAccountResponse) Reset()                    { *m = GetAccountResponse{} }
func (*GetAccountResponse) ProtoMessage()               {}
func (*GetAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

func (m *GetAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// UnauthenticateRequest represents the information required to tombstone a token
type UnauthenticateRequest struct {
	Token           string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,2,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *UnauthenticateRequest) Reset()                    { *m = UnauthenticateRequest{} }
func (*UnauthenticateRequest) ProtoMessage()               {}
func (*UnauthenticateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

func (m *UnauthenticateRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// UnauthenticateResponse represents the information returned from an Unauthenticate request
type UnauthenticateResponse struct {
}

func (m *UnauthenticateResponse) Reset()                    { *m = UnauthenticateResponse{} }
func (*UnauthenticateResponse) ProtoMessage()               {}
func (*UnauthenticateResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

// CreateVerificationCodeRequest represents the information required to create a verification code
type CreateVerificationCodeRequest struct {
	Type          VerificationCodeType `protobuf:"varint,1,opt,name=type,proto3,enum=auth.VerificationCodeType" json:"type,omitempty"`
	ValueToVerify string               `protobuf:"bytes,2,opt,name=value_to_verify,json=valueToVerify,proto3" json:"value_to_verify,omitempty"`
}

func (m *CreateVerificationCodeRequest) Reset()      { *m = CreateVerificationCodeRequest{} }
func (*CreateVerificationCodeRequest) ProtoMessage() {}
func (*CreateVerificationCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{15}
}

// CreateVerificationCodeResponse represents the information returned from a CreateVerificationCode request
type CreateVerificationCodeResponse struct {
	VerificationCode *VerificationCode `protobuf:"bytes,1,opt,name=verification_code,json=verificationCode" json:"verification_code,omitempty"`
}

func (m *CreateVerificationCodeResponse) Reset()      { *m = CreateVerificationCodeResponse{} }
func (*CreateVerificationCodeResponse) ProtoMessage() {}
func (*CreateVerificationCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{16}
}

func (m *CreateVerificationCodeResponse) GetVerificationCode() *VerificationCode {
	if m != nil {
		return m.VerificationCode
	}
	return nil
}

// CheckVerificationCodeRequest represents the information required to check a verification code
type CheckVerificationCodeRequest struct {
	Token           string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Code            string            `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,3,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheckVerificationCodeRequest) Reset()                    { *m = CheckVerificationCodeRequest{} }
func (*CheckVerificationCodeRequest) ProtoMessage()               {}
func (*CheckVerificationCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

func (m *CheckVerificationCodeRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// CreateVerificationCodeResponse represents the information returned from a CheckVerificationCode request
type CheckVerificationCodeResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Value   string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CheckVerificationCodeResponse) Reset()      { *m = CheckVerificationCodeResponse{} }
func (*CheckVerificationCodeResponse) ProtoMessage() {}
func (*CheckVerificationCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{18}
}

func (m *CheckVerificationCodeResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// VerifiedValueRequest represents the information required to get the value associated with a verified code
type VerifiedValueRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *VerifiedValueRequest) Reset()                    { *m = VerifiedValueRequest{} }
func (*VerifiedValueRequest) ProtoMessage()               {}
func (*VerifiedValueRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

// VerifiedValueResponse represents the information returned from a VerifiedValue request
type VerifiedValueResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *VerifiedValueResponse) Reset()                    { *m = VerifiedValueResponse{} }
func (*VerifiedValueResponse) ProtoMessage()               {}
func (*VerifiedValueResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

// CreatePasswordResetTokenRequest represents the information required to generate a password reset token
type CreatePasswordResetTokenRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *CreatePasswordResetTokenRequest) Reset()      { *m = CreatePasswordResetTokenRequest{} }
func (*CreatePasswordResetTokenRequest) ProtoMessage() {}
func (*CreatePasswordResetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{21}
}

// CreatePasswordResetTokenResponse represents the information returned from a call to CreatePasswordResetToken
type CreatePasswordResetTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *CreatePasswordResetTokenResponse) Reset()      { *m = CreatePasswordResetTokenResponse{} }
func (*CreatePasswordResetTokenResponse) ProtoMessage() {}
func (*CreatePasswordResetTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{22}
}

// CheckPasswordResetTokenRequest represents the information required to generate a password reset token
type CheckPasswordResetTokenRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *CheckPasswordResetTokenRequest) Reset()      { *m = CheckPasswordResetTokenRequest{} }
func (*CheckPasswordResetTokenRequest) ProtoMessage() {}
func (*CheckPasswordResetTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{23}
}

// CheckPasswordResetTokenResponse represents the information returned from a call to CheckPasswordResetToken
type CheckPasswordResetTokenResponse struct {
	AccountID          string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountPhoneNumber string `protobuf:"bytes,2,opt,name=account_phone_number,json=accountPhoneNumber,proto3" json:"account_phone_number,omitempty"`
	AccountEmail       string `protobuf:"bytes,3,opt,name=account_email,json=accountEmail,proto3" json:"account_email,omitempty"`
}

func (m *CheckPasswordResetTokenResponse) Reset()      { *m = CheckPasswordResetTokenResponse{} }
func (*CheckPasswordResetTokenResponse) ProtoMessage() {}
func (*CheckPasswordResetTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{24}
}

// UpdatePasswordRequest represents the information required to reset a password
type UpdatePasswordRequest struct {
	Token       string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (m *UpdatePasswordRequest) Reset()                    { *m = UpdatePasswordRequest{} }
func (*UpdatePasswordRequest) ProtoMessage()               {}
func (*UpdatePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

// BlockAccountRequest represents the information required to block a certain account
// from accessing the Spruce platform
type BlockAccountRequest struct {
	AccountID string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *BlockAccountRequest) Reset()                    { *m = BlockAccountRequest{} }
func (*BlockAccountRequest) ProtoMessage()               {}
func (*BlockAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

// BlockAccountResponse represents the information returned from a call to BlockAccount
type BlockAccountResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *BlockAccountResponse) Reset()                    { *m = BlockAccountResponse{} }
func (*BlockAccountResponse) ProtoMessage()               {}
func (*BlockAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

func (m *BlockAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// UpdatePasswordResponse represents the information returned from UpdatePassword
type UpdatePasswordResponse struct {
}

func (m *UpdatePasswordResponse) Reset()                    { *m = UpdatePasswordResponse{} }
func (*UpdatePasswordResponse) ProtoMessage()               {}
func (*UpdatePasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

// GetLastLoginInfoRequest represents the information required
// to make a request for the last login info for an account.
type GetLastLoginInfoRequest struct {
	AccountID string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *GetLastLoginInfoRequest) Reset()                    { *m = GetLastLoginInfoRequest{} }
func (*GetLastLoginInfoRequest) ProtoMessage()               {}
func (*GetLastLoginInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

// GetLastLoginInfoResponse represents the login info from the last
// login of the account.
type GetLastLoginInfoResponse struct {
	Platform  Platform `protobuf:"varint,1,opt,name=platform,proto3,enum=auth.Platform" json:"platform,omitempty"`
	LoginTime uint64   `protobuf:"varint,2,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	DeviceID  string   `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	AccountID string   `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (m *GetLastLoginInfoResponse) Reset()                    { *m = GetLastLoginInfoResponse{} }
func (*GetLastLoginInfoResponse) ProtoMessage()               {}
func (*GetLastLoginInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

// UpdateAuthTokenRequest represents the mutable aspects of an auth token
type UpdateAuthTokenRequest struct {
	Token           string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	TokenAttributes map[string]string `protobuf:"bytes,2,rep,name=token_attributes,json=tokenAttributes" json:"token_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Duration        TokenDuration     `protobuf:"varint,3,opt,name=duration,proto3,enum=auth.TokenDuration" json:"duration,omitempty"`
}

func (m *UpdateAuthTokenRequest) Reset()                    { *m = UpdateAuthTokenRequest{} }
func (*UpdateAuthTokenRequest) ProtoMessage()               {}
func (*UpdateAuthTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

func (m *UpdateAuthTokenRequest) GetTokenAttributes() map[string]string {
	if m != nil {
		return m.TokenAttributes
	}
	return nil
}

// UpdateAuthTokenResponse represents the response from an UpdateAuthToken request
type UpdateAuthTokenResponse struct {
	Token *AuthToken `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *UpdateAuthTokenResponse) Reset()                    { *m = UpdateAuthTokenResponse{} }
func (*UpdateAuthTokenResponse) ProtoMessage()               {}
func (*UpdateAuthTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

func (m *UpdateAuthTokenResponse) GetToken() *AuthToken {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterType((*VerificationCode)(nil), "auth.VerificationCode")
	proto.RegisterType((*Account)(nil), "auth.Account")
	proto.RegisterType((*AuthToken)(nil), "auth.AuthToken")
	proto.RegisterType((*AuthenticateLoginRequest)(nil), "auth.AuthenticateLoginRequest")
	proto.RegisterType((*AuthenticateLoginResponse)(nil), "auth.AuthenticateLoginResponse")
	proto.RegisterType((*AuthenticateLoginWithCodeRequest)(nil), "auth.AuthenticateLoginWithCodeRequest")
	proto.RegisterType((*AuthenticateLoginWithCodeResponse)(nil), "auth.AuthenticateLoginWithCodeResponse")
	proto.RegisterType((*CheckAuthenticationRequest)(nil), "auth.CheckAuthenticationRequest")
	proto.RegisterType((*CheckAuthenticationResponse)(nil), "auth.CheckAuthenticationResponse")
	proto.RegisterType((*CreateAccountRequest)(nil), "auth.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "auth.CreateAccountResponse")
	proto.RegisterType((*GetAccountRequest)(nil), "auth.GetAccountRequest")
	proto.RegisterType((*GetAccountResponse)(nil), "auth.GetAccountResponse")
	proto.RegisterType((*UnauthenticateRequest)(nil), "auth.UnauthenticateRequest")
	proto.RegisterType((*UnauthenticateResponse)(nil), "auth.UnauthenticateResponse")
	proto.RegisterType((*CreateVerificationCodeRequest)(nil), "auth.CreateVerificationCodeRequest")
	proto.RegisterType((*CreateVerificationCodeResponse)(nil), "auth.CreateVerificationCodeResponse")
	proto.RegisterType((*CheckVerificationCodeRequest)(nil), "auth.CheckVerificationCodeRequest")
	proto.RegisterType((*CheckVerificationCodeResponse)(nil), "auth.CheckVerificationCodeResponse")
	proto.RegisterType((*VerifiedValueRequest)(nil), "auth.VerifiedValueRequest")
	proto.RegisterType((*VerifiedValueResponse)(nil), "auth.VerifiedValueResponse")
	proto.RegisterType((*CreatePasswordResetTokenRequest)(nil), "auth.CreatePasswordResetTokenRequest")
	proto.RegisterType((*CreatePasswordResetTokenResponse)(nil), "auth.CreatePasswordResetTokenResponse")
	proto.RegisterType((*CheckPasswordResetTokenRequest)(nil), "auth.CheckPasswordResetTokenRequest")
	proto.RegisterType((*CheckPasswordResetTokenResponse)(nil), "auth.CheckPasswordResetTokenResponse")
	proto.RegisterType((*UpdatePasswordRequest)(nil), "auth.UpdatePasswordRequest")
	proto.RegisterType((*BlockAccountRequest)(nil), "auth.BlockAccountRequest")
	proto.RegisterType((*BlockAccountResponse)(nil), "auth.BlockAccountResponse")
	proto.RegisterType((*UpdatePasswordResponse)(nil), "auth.UpdatePasswordResponse")
	proto.RegisterType((*GetLastLoginInfoRequest)(nil), "auth.GetLastLoginInfoRequest")
	proto.RegisterType((*GetLastLoginInfoResponse)(nil), "auth.GetLastLoginInfoResponse")
	proto.RegisterType((*UpdateAuthTokenRequest)(nil), "auth.UpdateAuthTokenRequest")
	proto.RegisterType((*UpdateAuthTokenResponse)(nil), "auth.UpdateAuthTokenResponse")
	proto.RegisterEnum("auth.VerificationCodeType", VerificationCodeType_name, VerificationCodeType_value)
	proto.RegisterEnum("auth.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("auth.Platform", Platform_name, Platform_value)
	proto.RegisterEnum("auth.TokenDuration", TokenDuration_name, TokenDuration_value)
}
func (x VerificationCodeType) String() string {
	s, ok := VerificationCodeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AccountType) String() string {
	s, ok := AccountType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Platform) String() string {
	s, ok := Platform_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TokenDuration) String() string {
	s, ok := TokenDuration_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *VerificationCode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VerificationCode)
	if !ok {
		that2, ok := that.(VerificationCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ExpirationEpoch != that1.ExpirationEpoch {
		return false
	}
	return true
}
func (this *Account) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Account)
	if !ok {
		that2, ok := that.(Account)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *AuthToken) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthToken)
	if !ok {
		that2, ok := that.(AuthToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.ExpirationEpoch != that1.ExpirationEpoch {
		return false
	}
	if this.ClientEncryptionKey != that1.ClientEncryptionKey {
		return false
	}
	return true
}
func (this *AuthenticateLoginRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateLoginRequest)
	if !ok {
		that2, ok := that.(AuthenticateLoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *AuthenticateLoginResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateLoginResponse)
	if !ok {
		that2, ok := that.(AuthenticateLoginResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if this.TwoFactorRequired != that1.TwoFactorRequired {
		return false
	}
	if this.TwoFactorPhoneNumber != that1.TwoFactorPhoneNumber {
		return false
	}
	return true
}
func (this *AuthenticateLoginWithCodeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateLoginWithCodeRequest)
	if !ok {
		that2, ok := that.(AuthenticateLoginWithCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *AuthenticateLoginWithCodeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateLoginWithCodeResponse)
	if !ok {
		that2, ok := that.(AuthenticateLoginWithCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	return true
}
func (this *CheckAuthenticationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckAuthenticationRequest)
	if !ok {
		that2, ok := that.(CheckAuthenticationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	return true
}
func (this *CheckAuthenticationResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckAuthenticationResponse)
	if !ok {
		that2, ok := that.(CheckAuthenticationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.IsAuthenticated != that1.IsAuthenticated {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *CreateAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateAccountRequest)
	if !ok {
		that2, ok := that.(CreateAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *CreateAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateAccountResponse)
	if !ok {
		that2, ok := that.(CreateAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	return true
}
func (this *GetAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAccountRequest)
	if !ok {
		that2, ok := that.(GetAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	if this.AccountEmail != that1.AccountEmail {
		return false
	}
	return true
}
func (this *GetAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAccountResponse)
	if !ok {
		that2, ok := that.(GetAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	return true
}
func (this *UnauthenticateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnauthenticateRequest)
	if !ok {
		that2, ok := that.(UnauthenticateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	return true
}
func (this *UnauthenticateResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnauthenticateResponse)
	if !ok {
		that2, ok := that.(UnauthenticateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateVerificationCodeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVerificationCodeRequest)
	if !ok {
		that2, ok := that.(CreateVerificationCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ValueToVerify != that1.ValueToVerify {
		return false
	}
	return true
}
func (this *CreateVerificationCodeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVerificationCodeResponse)
	if !ok {
		that2, ok := that.(CreateVerificationCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VerificationCode.Equal(that1.VerificationCode) {
		return false
	}
	return true
}
func (this *CheckVerificationCodeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckVerificationCodeRequest)
	if !ok {
		that2, ok := that.(CheckVerificationCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	return true
}
func (this *CheckVerificationCodeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckVerificationCodeResponse)
	if !ok {
		that2, ok := that.(CheckVerificationCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *VerifiedValueRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VerifiedValueRequest)
	if !ok {
		that2, ok := that.(VerifiedValueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *VerifiedValueResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VerifiedValueResponse)
	if !ok {
		that2, ok := that.(VerifiedValueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *CreatePasswordResetTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreatePasswordResetTokenRequest)
	if !ok {
		that2, ok := that.(CreatePasswordResetTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *CreatePasswordResetTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreatePasswordResetTokenResponse)
	if !ok {
		that2, ok := that.(CreatePasswordResetTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *CheckPasswordResetTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckPasswordResetTokenRequest)
	if !ok {
		that2, ok := that.(CheckPasswordResetTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *CheckPasswordResetTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CheckPasswordResetTokenResponse)
	if !ok {
		that2, ok := that.(CheckPasswordResetTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	if this.AccountPhoneNumber != that1.AccountPhoneNumber {
		return false
	}
	if this.AccountEmail != that1.AccountEmail {
		return false
	}
	return true
}
func (this *UpdatePasswordRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatePasswordRequest)
	if !ok {
		that2, ok := that.(UpdatePasswordRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.NewPassword != that1.NewPassword {
		return false
	}
	return true
}
func (this *BlockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BlockAccountRequest)
	if !ok {
		that2, ok := that.(BlockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *BlockAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BlockAccountResponse)
	if !ok {
		that2, ok := that.(BlockAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Account.Equal(that1.Account) {
		return false
	}
	return true
}
func (this *UpdatePasswordResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdatePasswordResponse)
	if !ok {
		that2, ok := that.(UpdatePasswordResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetLastLoginInfoRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetLastLoginInfoRequest)
	if !ok {
		that2, ok := that.(GetLastLoginInfoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *GetLastLoginInfoResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetLastLoginInfoResponse)
	if !ok {
		that2, ok := that.(GetLastLoginInfoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.LoginTime != that1.LoginTime {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *UpdateAuthTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateAuthTokenRequest)
	if !ok {
		that2, ok := that.(UpdateAuthTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if len(this.TokenAttributes) != len(that1.TokenAttributes) {
		return false
	}
	for i := range this.TokenAttributes {
		if this.TokenAttributes[i] != that1.TokenAttributes[i] {
			return false
		}
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *UpdateAuthTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateAuthTokenResponse)
	if !ok {
		that2, ok := that.(UpdateAuthTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *VerificationCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&auth.VerificationCode{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ExpirationEpoch: "+fmt.Sprintf("%#v", this.ExpirationEpoch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Account) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&auth.Account{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.AuthToken{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ExpirationEpoch: "+fmt.Sprintf("%#v", this.ExpirationEpoch)+",\n")
	s = append(s, "ClientEncryptionKey: "+fmt.Sprintf("%#v", this.ClientEncryptionKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticateLoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&auth.AuthenticateLoginRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticateLoginResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&auth.AuthenticateLoginResponse{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "TwoFactorRequired: "+fmt.Sprintf("%#v", this.TwoFactorRequired)+",\n")
	s = append(s, "TwoFactorPhoneNumber: "+fmt.Sprintf("%#v", this.TwoFactorPhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticateLoginWithCodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&auth.AuthenticateLoginWithCodeRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticateLoginWithCodeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.AuthenticateLoginWithCodeResponse{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckAuthenticationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.CheckAuthenticationRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckAuthenticationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.CheckAuthenticationResponse{")
	s = append(s, "IsAuthenticated: "+fmt.Sprintf("%#v", this.IsAuthenticated)+",\n")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&auth.CreateAccountRequest{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.CreateAccountResponse{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.GetAccountRequest{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "AccountEmail: "+fmt.Sprintf("%#v", this.AccountEmail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.GetAccountResponse{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnauthenticateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.UnauthenticateRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnauthenticateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&auth.UnauthenticateResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVerificationCodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.CreateVerificationCodeRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ValueToVerify: "+fmt.Sprintf("%#v", this.ValueToVerify)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVerificationCodeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.CreateVerificationCodeResponse{")
	if this.VerificationCode != nil {
		s = append(s, "VerificationCode: "+fmt.Sprintf("%#v", this.VerificationCode)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckVerificationCodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.CheckVerificationCodeRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckVerificationCodeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auth.CheckVerificationCodeResponse{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifiedValueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.VerifiedValueRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifiedValueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.VerifiedValueResponse{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePasswordResetTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.CreatePasswordResetTokenRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatePasswordResetTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.CreatePasswordResetTokenResponse{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckPasswordResetTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.CheckPasswordResetTokenRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckPasswordResetTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.CheckPasswordResetTokenResponse{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "AccountPhoneNumber: "+fmt.Sprintf("%#v", this.AccountPhoneNumber)+",\n")
	s = append(s, "AccountEmail: "+fmt.Sprintf("%#v", this.AccountEmail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePasswordRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.UpdatePasswordRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "NewPassword: "+fmt.Sprintf("%#v", this.NewPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.BlockAccountRequest{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockAccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.BlockAccountResponse{")
	if this.Account != nil {
		s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePasswordResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&auth.UpdatePasswordResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLastLoginInfoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.GetLastLoginInfoRequest{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLastLoginInfoResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&auth.GetLastLoginInfoResponse{")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "LoginTime: "+fmt.Sprintf("%#v", this.LoginTime)+",\n")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAuthTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auth.UpdateAuthTokenRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%#v: %#v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	if this.TokenAttributes != nil {
		s = append(s, "TokenAttributes: "+mapStringForTokenAttributes+",\n")
	}
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateAuthTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&auth.UpdateAuthTokenResponse{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Auth service

type AuthClient interface {
	AuthenticateLogin(ctx context.Context, in *AuthenticateLoginRequest, opts ...grpc.CallOption) (*AuthenticateLoginResponse, error)
	AuthenticateLoginWithCode(ctx context.Context, in *AuthenticateLoginWithCodeRequest, opts ...grpc.CallOption) (*AuthenticateLoginWithCodeResponse, error)
	CheckAuthentication(ctx context.Context, in *CheckAuthenticationRequest, opts ...grpc.CallOption) (*CheckAuthenticationResponse, error)
	CheckPasswordResetToken(ctx context.Context, in *CheckPasswordResetTokenRequest, opts ...grpc.CallOption) (*CheckPasswordResetTokenResponse, error)
	CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, opts ...grpc.CallOption) (*CheckVerificationCodeResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreatePasswordResetToken(ctx context.Context, in *CreatePasswordResetTokenRequest, opts ...grpc.CallOption) (*CreatePasswordResetTokenResponse, error)
	CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, opts ...grpc.CallOption) (*CreateVerificationCodeResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	Unauthenticate(ctx context.Context, in *UnauthenticateRequest, opts ...grpc.CallOption) (*UnauthenticateResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	UpdateAuthToken(ctx context.Context, in *UpdateAuthTokenRequest, opts ...grpc.CallOption) (*UpdateAuthTokenResponse, error)
	VerifiedValue(ctx context.Context, in *VerifiedValueRequest, opts ...grpc.CallOption) (*VerifiedValueResponse, error)
	BlockAccount(ctx context.Context, in *BlockAccountRequest, opts ...grpc.CallOption) (*BlockAccountResponse, error)
	GetLastLoginInfo(ctx context.Context, in *GetLastLoginInfoRequest, opts ...grpc.CallOption) (*GetLastLoginInfoResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AuthenticateLogin(ctx context.Context, in *AuthenticateLoginRequest, opts ...grpc.CallOption) (*AuthenticateLoginResponse, error) {
	out := new(AuthenticateLoginResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/AuthenticateLogin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthenticateLoginWithCode(ctx context.Context, in *AuthenticateLoginWithCodeRequest, opts ...grpc.CallOption) (*AuthenticateLoginWithCodeResponse, error) {
	out := new(AuthenticateLoginWithCodeResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/AuthenticateLoginWithCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckAuthentication(ctx context.Context, in *CheckAuthenticationRequest, opts ...grpc.CallOption) (*CheckAuthenticationResponse, error) {
	out := new(CheckAuthenticationResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/CheckAuthentication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckPasswordResetToken(ctx context.Context, in *CheckPasswordResetTokenRequest, opts ...grpc.CallOption) (*CheckPasswordResetTokenResponse, error) {
	out := new(CheckPasswordResetTokenResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/CheckPasswordResetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckVerificationCode(ctx context.Context, in *CheckVerificationCodeRequest, opts ...grpc.CallOption) (*CheckVerificationCodeResponse, error) {
	out := new(CheckVerificationCodeResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/CheckVerificationCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreatePasswordResetToken(ctx context.Context, in *CreatePasswordResetTokenRequest, opts ...grpc.CallOption) (*CreatePasswordResetTokenResponse, error) {
	out := new(CreatePasswordResetTokenResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/CreatePasswordResetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateVerificationCode(ctx context.Context, in *CreateVerificationCodeRequest, opts ...grpc.CallOption) (*CreateVerificationCodeResponse, error) {
	out := new(CreateVerificationCodeResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/CreateVerificationCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Unauthenticate(ctx context.Context, in *UnauthenticateRequest, opts ...grpc.CallOption) (*UnauthenticateResponse, error) {
	out := new(UnauthenticateResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/Unauthenticate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	out := new(UpdatePasswordResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/UpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateAuthToken(ctx context.Context, in *UpdateAuthTokenRequest, opts ...grpc.CallOption) (*UpdateAuthTokenResponse, error) {
	out := new(UpdateAuthTokenResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/UpdateAuthToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifiedValue(ctx context.Context, in *VerifiedValueRequest, opts ...grpc.CallOption) (*VerifiedValueResponse, error) {
	out := new(VerifiedValueResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/VerifiedValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) BlockAccount(ctx context.Context, in *BlockAccountRequest, opts ...grpc.CallOption) (*BlockAccountResponse, error) {
	out := new(BlockAccountResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/BlockAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetLastLoginInfo(ctx context.Context, in *GetLastLoginInfoRequest, opts ...grpc.CallOption) (*GetLastLoginInfoResponse, error) {
	out := new(GetLastLoginInfoResponse)
	err := grpc.Invoke(ctx, "/auth.Auth/GetLastLoginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	AuthenticateLogin(context.Context, *AuthenticateLoginRequest) (*AuthenticateLoginResponse, error)
	AuthenticateLoginWithCode(context.Context, *AuthenticateLoginWithCodeRequest) (*AuthenticateLoginWithCodeResponse, error)
	CheckAuthentication(context.Context, *CheckAuthenticationRequest) (*CheckAuthenticationResponse, error)
	CheckPasswordResetToken(context.Context, *CheckPasswordResetTokenRequest) (*CheckPasswordResetTokenResponse, error)
	CheckVerificationCode(context.Context, *CheckVerificationCodeRequest) (*CheckVerificationCodeResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreatePasswordResetToken(context.Context, *CreatePasswordResetTokenRequest) (*CreatePasswordResetTokenResponse, error)
	CreateVerificationCode(context.Context, *CreateVerificationCodeRequest) (*CreateVerificationCodeResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	Unauthenticate(context.Context, *UnauthenticateRequest) (*UnauthenticateResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	UpdateAuthToken(context.Context, *UpdateAuthTokenRequest) (*UpdateAuthTokenResponse, error)
	VerifiedValue(context.Context, *VerifiedValueRequest) (*VerifiedValueResponse, error)
	BlockAccount(context.Context, *BlockAccountRequest) (*BlockAccountResponse, error)
	GetLastLoginInfo(context.Context, *GetLastLoginInfoRequest) (*GetLastLoginInfoResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_AuthenticateLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthenticateLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthenticateLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthenticateLogin(ctx, req.(*AuthenticateLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthenticateLoginWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateLoginWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthenticateLoginWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthenticateLoginWithCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthenticateLoginWithCode(ctx, req.(*AuthenticateLoginWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckAuthentication(ctx, req.(*CheckAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckPasswordResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordResetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckPasswordResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckPasswordResetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckPasswordResetToken(ctx, req.(*CheckPasswordResetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CheckVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckVerificationCode(ctx, req.(*CheckVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreatePasswordResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordResetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreatePasswordResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreatePasswordResetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreatePasswordResetToken(ctx, req.(*CreatePasswordResetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/CreateVerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateVerificationCode(ctx, req.(*CreateVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Unauthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Unauthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/Unauthenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Unauthenticate(ctx, req.(*UnauthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/UpdateAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateAuthToken(ctx, req.(*UpdateAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifiedValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiedValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifiedValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/VerifiedValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifiedValue(ctx, req.(*VerifiedValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/BlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).BlockAccount(ctx, req.(*BlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetLastLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetLastLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetLastLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetLastLoginInfo(ctx, req.(*GetLastLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateLogin",
			Handler:    _Auth_AuthenticateLogin_Handler,
		},
		{
			MethodName: "AuthenticateLoginWithCode",
			Handler:    _Auth_AuthenticateLoginWithCode_Handler,
		},
		{
			MethodName: "CheckAuthentication",
			Handler:    _Auth_CheckAuthentication_Handler,
		},
		{
			MethodName: "CheckPasswordResetToken",
			Handler:    _Auth_CheckPasswordResetToken_Handler,
		},
		{
			MethodName: "CheckVerificationCode",
			Handler:    _Auth_CheckVerificationCode_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Auth_CreateAccount_Handler,
		},
		{
			MethodName: "CreatePasswordResetToken",
			Handler:    _Auth_CreatePasswordResetToken_Handler,
		},
		{
			MethodName: "CreateVerificationCode",
			Handler:    _Auth_CreateVerificationCode_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Auth_GetAccount_Handler,
		},
		{
			MethodName: "Unauthenticate",
			Handler:    _Auth_Unauthenticate_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Auth_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateAuthToken",
			Handler:    _Auth_UpdateAuthToken_Handler,
		},
		{
			MethodName: "VerifiedValue",
			Handler:    _Auth_VerifiedValue_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _Auth_BlockAccount_Handler,
		},
		{
			MethodName: "GetLastLoginInfo",
			Handler:    _Auth_GetLastLoginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorSvc,
}

func (m *VerificationCode) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VerificationCode) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.Code) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Code)))
		i += copy(data[i:], m.Code)
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.ExpirationEpoch != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.ExpirationEpoch))
	}
	return i, nil
}

func (m *Account) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Account) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.FirstName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LastName)))
		i += copy(data[i:], m.LastName)
	}
	if m.Type != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	return i, nil
}

func (m *AuthToken) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthToken) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.ExpirationEpoch != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.ExpirationEpoch))
	}
	if len(m.ClientEncryptionKey) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ClientEncryptionKey)))
		i += copy(data[i:], m.ClientEncryptionKey)
	}
	return i, nil
}

func (m *AuthenticateLoginRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthenticateLoginRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x1a
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.DeviceID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	if m.Platform != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.Platform))
	}
	if m.Duration != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *AuthenticateLoginResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthenticateLoginResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Token.Size()))
		n1, err := m.Token.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Account != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n2, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TwoFactorRequired {
		data[i] = 0x20
		i++
		if m.TwoFactorRequired {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.TwoFactorPhoneNumber) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.TwoFactorPhoneNumber)))
		i += copy(data[i:], m.TwoFactorPhoneNumber)
	}
	return i, nil
}

func (m *AuthenticateLoginWithCodeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthenticateLoginWithCodeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.Code) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Code)))
		i += copy(data[i:], m.Code)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x1a
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.DeviceID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	if m.Platform != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.Platform))
	}
	if m.Duration != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *AuthenticateLoginWithCodeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthenticateLoginWithCodeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Token.Size()))
		n3, err := m.Token.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Account != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n4, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CheckAuthenticationRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckAuthenticationRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x12
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *CheckAuthenticationResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckAuthenticationResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAuthenticated {
		data[i] = 0x8
		i++
		if m.IsAuthenticated {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Account != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n5, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Token != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Token.Size()))
		n6, err := m.Token.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CreateAccountRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateAccountRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FirstName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LastName)))
		i += copy(data[i:], m.LastName)
	}
	if len(m.Email) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.Password) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x32
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if len(m.DeviceID) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	if m.Type != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if m.Platform != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.Platform))
	}
	if m.Duration != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *CreateAccountResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateAccountResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Token.Size()))
		n7, err := m.Token.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Account != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n8, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *GetAccountRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAccountRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	if len(m.AccountEmail) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountEmail)))
		i += copy(data[i:], m.AccountEmail)
	}
	return i, nil
}

func (m *GetAccountResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAccountResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n9, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *UnauthenticateRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnauthenticateRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x12
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *UnauthenticateResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnauthenticateResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateVerificationCodeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVerificationCodeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.ValueToVerify) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ValueToVerify)))
		i += copy(data[i:], m.ValueToVerify)
	}
	return i, nil
}

func (m *CreateVerificationCodeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVerificationCodeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VerificationCode != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VerificationCode.Size()))
		n10, err := m.VerificationCode.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *CheckVerificationCodeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckVerificationCodeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.Code) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Code)))
		i += copy(data[i:], m.Code)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x1a
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *CheckVerificationCodeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckVerificationCodeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n11, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *VerifiedValueRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VerifiedValueRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *VerifiedValueResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VerifiedValueResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *CreatePasswordResetTokenRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreatePasswordResetTokenRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	return i, nil
}

func (m *CreatePasswordResetTokenResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreatePasswordResetTokenResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *CheckPasswordResetTokenRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckPasswordResetTokenRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *CheckPasswordResetTokenResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CheckPasswordResetTokenResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	if len(m.AccountPhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountPhoneNumber)))
		i += copy(data[i:], m.AccountPhoneNumber)
	}
	if len(m.AccountEmail) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountEmail)))
		i += copy(data[i:], m.AccountEmail)
	}
	return i, nil
}

func (m *UpdatePasswordRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdatePasswordRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.Code) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Code)))
		i += copy(data[i:], m.Code)
	}
	if len(m.NewPassword) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.NewPassword)))
		i += copy(data[i:], m.NewPassword)
	}
	return i, nil
}

func (m *BlockAccountRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BlockAccountRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *BlockAccountResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BlockAccountResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Account.Size()))
		n12, err := m.Account.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UpdatePasswordResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdatePasswordResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetLastLoginInfoRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetLastLoginInfoRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *GetLastLoginInfoResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetLastLoginInfoResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Platform != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Platform))
	}
	if m.LoginTime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.LoginTime))
	}
	if len(m.DeviceID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *UpdateAuthTokenRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateAuthTokenRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if len(m.TokenAttributes) > 0 {
		for k, _ := range m.TokenAttributes {
			data[i] = 0x12
			i++
			v := m.TokenAttributes[k]
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	if m.Duration != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *UpdateAuthTokenResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateAuthTokenResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Token.Size()))
		n13, err := m.Token.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *VerificationCode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.ExpirationEpoch != 0 {
		n += 1 + sovSvc(uint64(m.ExpirationEpoch))
	}
	return n
}

func (m *Account) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	return n
}

func (m *AuthToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ExpirationEpoch != 0 {
		n += 1 + sovSvc(uint64(m.ExpirationEpoch))
	}
	l = len(m.ClientEncryptionKey)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AuthenticateLoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovSvc(uint64(m.Platform))
	}
	if m.Duration != 0 {
		n += 1 + sovSvc(uint64(m.Duration))
	}
	return n
}

func (m *AuthenticateLoginResponse) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.TwoFactorRequired {
		n += 2
	}
	l = len(m.TwoFactorPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AuthenticateLoginWithCodeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovSvc(uint64(m.Platform))
	}
	if m.Duration != 0 {
		n += 1 + sovSvc(uint64(m.Duration))
	}
	return n
}

func (m *AuthenticateLoginWithCodeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CheckAuthenticationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CheckAuthenticationResponse) Size() (n int) {
	var l int
	_ = l
	if m.IsAuthenticated {
		n += 2
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.Platform != 0 {
		n += 1 + sovSvc(uint64(m.Platform))
	}
	if m.Duration != 0 {
		n += 1 + sovSvc(uint64(m.Duration))
	}
	return n
}

func (m *CreateAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountEmail)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UnauthenticateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UnauthenticateResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateVerificationCodeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ValueToVerify)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVerificationCodeResponse) Size() (n int) {
	var l int
	_ = l
	if m.VerificationCode != nil {
		l = m.VerificationCode.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CheckVerificationCodeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CheckVerificationCodeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *VerifiedValueRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *VerifiedValueResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreatePasswordResetTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreatePasswordResetTokenResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CheckPasswordResetTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CheckPasswordResetTokenResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountPhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountEmail)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdatePasswordRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *BlockAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *BlockAccountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdatePasswordResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetLastLoginInfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetLastLoginInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.Platform != 0 {
		n += 1 + sovSvc(uint64(m.Platform))
	}
	if m.LoginTime != 0 {
		n += 1 + sovSvc(uint64(m.LoginTime))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateAuthTokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TokenAttributes) > 0 {
		for k, v := range m.TokenAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + len(v) + sovSvc(uint64(len(v)))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	if m.Duration != 0 {
		n += 1 + sovSvc(uint64(m.Duration))
	}
	return n
}

func (m *UpdateAuthTokenResponse) Size() (n int) {
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VerificationCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerificationCode{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ExpirationEpoch:` + fmt.Sprintf("%v", this.ExpirationEpoch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Account) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Account{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthToken{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ExpirationEpoch:` + fmt.Sprintf("%v", this.ExpirationEpoch) + `,`,
		`ClientEncryptionKey:` + fmt.Sprintf("%v", this.ClientEncryptionKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticateLoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&AuthenticateLoginRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticateLoginResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticateLoginResponse{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "AuthToken", "AuthToken", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`TwoFactorRequired:` + fmt.Sprintf("%v", this.TwoFactorRequired) + `,`,
		`TwoFactorPhoneNumber:` + fmt.Sprintf("%v", this.TwoFactorPhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticateLoginWithCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&AuthenticateLoginWithCodeRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticateLoginWithCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticateLoginWithCodeResponse{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "AuthToken", "AuthToken", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckAuthenticationRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&CheckAuthenticationRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckAuthenticationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckAuthenticationResponse{`,
		`IsAuthenticated:` + fmt.Sprintf("%v", this.IsAuthenticated) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "AuthToken", "AuthToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&CreateAccountRequest{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateAccountResponse{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "AuthToken", "AuthToken", 1) + `,`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountRequest{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`AccountEmail:` + fmt.Sprintf("%v", this.AccountEmail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAccountResponse{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnauthenticateRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&UnauthenticateRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnauthenticateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnauthenticateResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateVerificationCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVerificationCodeRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ValueToVerify:` + fmt.Sprintf("%v", this.ValueToVerify) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVerificationCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVerificationCodeResponse{`,
		`VerificationCode:` + strings.Replace(fmt.Sprintf("%v", this.VerificationCode), "VerificationCode", "VerificationCode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckVerificationCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&CheckVerificationCodeRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckVerificationCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckVerificationCodeResponse{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifiedValueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifiedValueRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifiedValueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifiedValueResponse{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePasswordResetTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePasswordResetTokenRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePasswordResetTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePasswordResetTokenResponse{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckPasswordResetTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckPasswordResetTokenRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckPasswordResetTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckPasswordResetTokenResponse{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`AccountPhoneNumber:` + fmt.Sprintf("%v", this.AccountPhoneNumber) + `,`,
		`AccountEmail:` + fmt.Sprintf("%v", this.AccountEmail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePasswordRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePasswordRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`NewPassword:` + fmt.Sprintf("%v", this.NewPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockAccountRequest{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockAccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockAccountResponse{`,
		`Account:` + strings.Replace(fmt.Sprintf("%v", this.Account), "Account", "Account", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePasswordResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePasswordResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetLastLoginInfoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLastLoginInfoRequest{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLastLoginInfoResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLastLoginInfoResponse{`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`LoginTime:` + fmt.Sprintf("%v", this.LoginTime) + `,`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAuthTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForTokenAttributes := make([]string, 0, len(this.TokenAttributes))
	for k, _ := range this.TokenAttributes {
		keysForTokenAttributes = append(keysForTokenAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTokenAttributes)
	mapStringForTokenAttributes := "map[string]string{"
	for _, k := range keysForTokenAttributes {
		mapStringForTokenAttributes += fmt.Sprintf("%v: %v,", k, this.TokenAttributes[k])
	}
	mapStringForTokenAttributes += "}"
	s := strings.Join([]string{`&UpdateAuthTokenRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`TokenAttributes:` + mapStringForTokenAttributes + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateAuthTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateAuthTokenResponse{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "AuthToken", "AuthToken", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VerificationCode) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (VerificationCodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationEpoch", wireType)
			}
			m.ExpirationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpirationEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (AccountType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthToken) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationEpoch", wireType)
			}
			m.ExpirationEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpirationEpoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientEncryptionKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientEncryptionKey = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateLoginRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Platform |= (Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Duration |= (TokenDuration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateLoginResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &AuthToken{}
			}
			if err := m.Token.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoFactorRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TwoFactorRequired = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoFactorPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwoFactorPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateLoginWithCodeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateLoginWithCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateLoginWithCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Platform |= (Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Duration |= (TokenDuration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateLoginWithCodeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateLoginWithCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateLoginWithCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &AuthToken{}
			}
			if err := m.Token.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAuthenticationRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAuthenticationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAuthenticationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckAuthenticationResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckAuthenticationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckAuthenticationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthenticated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuthenticated = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &AuthToken{}
			}
			if err := m.Token.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (AccountType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Platform |= (Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Duration |= (TokenDuration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &AuthToken{}
			}
			if err := m.Token.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountEmail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnauthenticateRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnauthenticateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnauthenticateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnauthenticateResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnauthenticateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnauthenticateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVerificationCodeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVerificationCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVerificationCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (VerificationCodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueToVerify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueToVerify = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVerificationCodeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVerificationCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVerificationCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationCode == nil {
				m.VerificationCode = &VerificationCode{}
			}
			if err := m.VerificationCode.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckVerificationCodeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckVerificationCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckVerificationCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckVerificationCodeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckVerificationCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckVerificationCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifiedValueRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifiedValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifiedValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifiedValueResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifiedValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifiedValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePasswordResetTokenRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePasswordResetTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePasswordResetTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePasswordResetTokenResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePasswordResetTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePasswordResetTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPasswordResetTokenRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPasswordResetTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPasswordResetTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckPasswordResetTokenResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckPasswordResetTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckPasswordResetTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountEmail = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePasswordRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePasswordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePasswordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockAccountRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockAccountResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePasswordResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePasswordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePasswordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLastLoginInfoRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLastLoginInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLastLoginInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLastLoginInfoResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLastLoginInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLastLoginInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Platform |= (Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginTime", wireType)
			}
			m.LoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LoginTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthTokenRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.TokenAttributes == nil {
				m.TokenAttributes = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSvc
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(data[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.TokenAttributes[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.TokenAttributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Duration |= (TokenDuration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAuthTokenResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAuthTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAuthTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &AuthToken{}
			}
			if err := m.Token.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc.proto", fileDescriptorSvc) }

var fileDescriptorSvc = []byte{
	// 1729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x59, 0x4f, 0x53, 0xdb, 0xd6,
	0x16, 0xe7, 0xda, 0x06, 0xec, 0x63, 0xfe, 0x88, 0x8b, 0x01, 0x47, 0x04, 0x03, 0xca, 0x3f, 0xc2,
	0x24, 0x90, 0xe7, 0x4c, 0x5e, 0x32, 0xef, 0x4d, 0x27, 0x35, 0xd8, 0x21, 0x1e, 0xc0, 0x76, 0x84,
	0x09, 0x33, 0x69, 0x27, 0x8a, 0xb0, 0xaf, 0x41, 0x83, 0x91, 0x1c, 0x5b, 0x86, 0x7a, 0x97, 0xce,
	0xf4, 0x03, 0x74, 0xd7, 0xf6, 0x0b, 0x74, 0xfa, 0x29, 0xba, 0xee, 0xaa, 0x93, 0xe9, 0x2a, 0xab,
	0x4c, 0xe3, 0x6e, 0xba, 0xcc, 0xaa, 0xd3, 0x65, 0x47, 0x57, 0x57, 0xb6, 0x64, 0x24, 0x01, 0x69,
	0xc3, 0xa6, 0x3b, 0xeb, 0x9c, 0x73, 0xcf, 0x39, 0xf7, 0x77, 0xfe, 0x5e, 0x80, 0x48, 0xe3, 0xa8,
	0xb4, 0x54, 0xab, 0x6b, 0xba, 0x86, 0x43, 0x72, 0x53, 0xdf, 0xe7, 0x6f, 0xef, 0x29, 0xfa, 0x7e,
	0x73, 0x77, 0xa9, 0xa4, 0x1d, 0x2e, 0xef, 0x69, 0x7b, 0xda, 0x32, 0x65, 0xee, 0x36, 0x2b, 0xf4,
	0x8b, 0x7e, 0xd0, 0x5f, 0xe6, 0x21, 0xe1, 0x1b, 0x04, 0xdc, 0x53, 0x52, 0x57, 0x2a, 0x4a, 0x49,
	0xd6, 0x15, 0x4d, 0x5d, 0xd5, 0xca, 0x04, 0xc7, 0xa0, 0x5f, 0xd7, 0x0e, 0x88, 0x1a, 0x47, 0x73,
	0x68, 0x21, 0x22, 0x9a, 0x1f, 0x18, 0x43, 0xa8, 0xa4, 0x95, 0x49, 0x3c, 0x40, 0x89, 0xf4, 0x37,
	0x5e, 0x82, 0x90, 0xde, 0xaa, 0x91, 0x78, 0x68, 0x0e, 0x2d, 0x8c, 0x24, 0xf9, 0x25, 0xc3, 0x85,
	0xa5, 0x5e, 0x7d, 0xc5, 0x56, 0x8d, 0x88, 0x54, 0x0e, 0xdf, 0x04, 0x8e, 0x7c, 0x51, 0x53, 0xea,
	0x94, 0x27, 0x91, 0x9a, 0x56, 0xda, 0x8f, 0xf7, 0xcf, 0xa1, 0x85, 0x90, 0x38, 0xda, 0xa5, 0x67,
	0x0c, 0xb2, 0xf0, 0x15, 0x82, 0xc1, 0x54, 0xa9, 0xa4, 0x35, 0x55, 0x1d, 0x4f, 0x42, 0x40, 0x29,
	0x9b, 0xde, 0xac, 0x0c, 0xb4, 0xdf, 0xce, 0x06, 0xb2, 0x69, 0x31, 0xa0, 0x94, 0xf1, 0x0c, 0x40,
	0x45, 0xa9, 0x37, 0x74, 0x49, 0x95, 0x0f, 0x2d, 0xc7, 0x22, 0x94, 0x92, 0x93, 0x0f, 0x09, 0x9e,
	0x86, 0x48, 0x55, 0xb6, 0xb8, 0x41, 0xca, 0x0d, 0x1b, 0x04, 0xca, 0xbc, 0xe6, 0x70, 0x7d, 0xcc,
	0x74, 0x9d, 0x19, 0xec, 0x7a, 0x2c, 0xbc, 0x42, 0x10, 0x49, 0x35, 0xf5, 0xfd, 0x22, 0xc5, 0x20,
	0x06, 0xfd, 0x47, 0x72, 0xb5, 0x49, 0x2c, 0x64, 0xe8, 0x87, 0xeb, 0xad, 0x02, 0xae, 0xb7, 0xc2,
	0x49, 0x98, 0x28, 0x55, 0x15, 0xa2, 0xea, 0x12, 0x51, 0x4b, 0xf5, 0x56, 0x8d, 0x9e, 0x38, 0x20,
	0x2d, 0xe6, 0xde, 0xb8, 0xc9, 0xcc, 0x74, 0x78, 0xeb, 0xa4, 0x25, 0xfc, 0x19, 0x80, 0xb8, 0xe1,
	0x02, 0x51, 0x75, 0x03, 0x55, 0xb2, 0xa1, 0xed, 0x29, 0xaa, 0x48, 0x5e, 0x36, 0x49, 0x43, 0x37,
	0x3c, 0x22, 0x87, 0xb2, 0x52, 0xb5, 0x3c, 0xa2, 0x1f, 0x98, 0x87, 0x70, 0x4d, 0x6e, 0x34, 0x8e,
	0xb5, 0x7a, 0x99, 0xc1, 0xd2, 0xf9, 0xc6, 0xcf, 0x81, 0xa3, 0x01, 0x95, 0x64, 0x5d, 0xaf, 0x2b,
	0xbb, 0x4d, 0x9d, 0x34, 0xe2, 0xc1, 0xb9, 0xe0, 0x42, 0x34, 0x79, 0x97, 0x81, 0xe0, 0x61, 0x6b,
	0x89, 0x62, 0x90, 0xea, 0x9c, 0xca, 0xa8, 0x7a, 0xbd, 0x25, 0x8e, 0xea, 0x4e, 0x2a, 0xbe, 0x09,
	0x91, 0x32, 0x39, 0x52, 0x4a, 0x44, 0x52, 0xca, 0x14, 0xdd, 0xc8, 0xca, 0x50, 0xfb, 0xed, 0x6c,
	0x38, 0x4d, 0x89, 0xd9, 0xb4, 0x18, 0x36, 0xd9, 0xd9, 0x32, 0x5e, 0x84, 0x70, 0xad, 0x2a, 0xeb,
	0x15, 0xad, 0x7e, 0x48, 0xd3, 0x60, 0x24, 0x39, 0x62, 0xba, 0x50, 0x60, 0x54, 0xb1, 0xc3, 0xc7,
	0xcb, 0x10, 0x2e, 0x37, 0x4d, 0x28, 0xe3, 0x03, 0x54, 0x76, 0xdc, 0x94, 0xa5, 0x5e, 0xa5, 0x19,
	0x4b, 0xec, 0x08, 0xf1, 0x2b, 0x10, 0x73, 0x73, 0x18, 0x73, 0x10, 0x34, 0x00, 0x37, 0xf1, 0x32,
	0x7e, 0x76, 0xa3, 0x1a, 0xb0, 0x45, 0xf5, 0x7f, 0x81, 0x07, 0x48, 0xf8, 0x05, 0xc1, 0x25, 0x17,
	0x38, 0x1a, 0x35, 0x4d, 0x6d, 0x18, 0x29, 0x64, 0xab, 0x93, 0x68, 0x72, 0xb4, 0x0b, 0x1f, 0x35,
	0x6c, 0x15, 0xce, 0x0d, 0x18, 0x94, 0xcd, 0xbc, 0xa2, 0x06, 0xa2, 0xc9, 0x61, 0x47, 0xb2, 0x89,
	0x16, 0x17, 0x2f, 0xc1, 0xb8, 0x7e, 0xac, 0x49, 0x15, 0xb9, 0xa4, 0x6b, 0x75, 0xa9, 0x4e, 0x5e,
	0x36, 0x95, 0x3a, 0x31, 0x31, 0x0c, 0x8b, 0x63, 0xfa, 0xb1, 0xf6, 0x88, 0x72, 0x44, 0xc6, 0xc0,
	0xf7, 0x60, 0xca, 0x26, 0x5f, 0xdb, 0xd7, 0x54, 0x22, 0xa9, 0xcd, 0xc3, 0x5d, 0x52, 0xa7, 0x68,
	0x46, 0xc4, 0x58, 0xe7, 0x4c, 0xc1, 0x60, 0xe6, 0x28, 0x4f, 0x78, 0x15, 0x84, 0xb9, 0x13, 0x97,
	0xda, 0x51, 0xf4, 0x7d, 0xa3, 0x58, 0x6d, 0x79, 0x75, 0xc6, 0x1e, 0x50, 0xf1, 0xcc, 0xa7, 0xff,
	0x7b, 0xe4, 0x53, 0x8f, 0xad, 0x7f, 0x61, 0x5e, 0x35, 0x60, 0xde, 0x07, 0x95, 0x8f, 0x93, 0x5e,
	0xc2, 0x1b, 0x04, 0xfc, 0xea, 0x3e, 0x29, 0x1d, 0xd8, 0x4c, 0x1b, 0x57, 0xf3, 0x8d, 0xf8, 0x0b,
	0x97, 0xe8, 0x06, 0x68, 0x74, 0xef, 0x99, 0x66, 0xbc, 0x35, 0x9e, 0x2d, 0xae, 0xff, 0x08, 0x9e,
	0xdf, 0x22, 0x98, 0x76, 0x75, 0x84, 0x41, 0x79, 0x13, 0x38, 0xa5, 0x21, 0xc9, 0x36, 0xc8, 0xcd,
	0x71, 0x12, 0x16, 0x47, 0x95, 0x86, 0x3d, 0x12, 0xe5, 0xb3, 0x57, 0x6b, 0x27, 0x3c, 0x41, 0xbf,
	0xf0, 0x08, 0x7f, 0x04, 0x21, 0xb6, 0x5a, 0x27, 0xb2, 0x4e, 0x2c, 0x0d, 0x0c, 0x6f, 0xe7, 0xf0,
	0x42, 0xbe, 0xc3, 0x2b, 0xd0, 0x33, 0xbc, 0x3a, 0x5d, 0x3f, 0x68, 0xef, 0xfa, 0xf3, 0x30, 0xe4,
	0x68, 0x02, 0xb4, 0x48, 0xc4, 0x68, 0xad, 0x5b, 0xfb, 0x8e, 0xc1, 0xd0, 0xdf, 0x33, 0x18, 0x9e,
	0xb9, 0x84, 0x7a, 0x80, 0x86, 0x7a, 0x99, 0x85, 0xda, 0xe5, 0x1a, 0x1f, 0x52, 0xbc, 0x83, 0xbe,
	0xc5, 0x6b, 0x0d, 0xe6, 0xb0, 0xef, 0x60, 0x76, 0xd4, 0x78, 0xe4, 0x1c, 0x35, 0x0e, 0x17, 0x55,
	0xe3, 0x7b, 0x30, 0xd1, 0x03, 0xd8, 0x47, 0xaa, 0xeb, 0x0a, 0x8c, 0xad, 0x11, 0xbd, 0x27, 0xbb,
	0x6e, 0x01, 0x30, 0xbe, 0xd4, 0x59, 0x9d, 0x86, 0xdb, 0x6f, 0x67, 0x23, 0x4c, 0x2e, 0x9b, 0x16,
	0x23, 0x4c, 0x20, 0x5b, 0xc6, 0x57, 0x60, 0xd8, 0x92, 0x36, 0xf3, 0xca, 0xbc, 0xcd, 0x10, 0x23,
	0x66, 0x0c, 0x9a, 0xf0, 0x09, 0x60, 0xbb, 0x1d, 0x76, 0x1b, 0x9b, 0x9b, 0xc8, 0xd7, 0xcd, 0x9f,
	0x11, 0x4c, 0x6c, 0xab, 0xf6, 0x1a, 0xf4, 0xef, 0x3c, 0x9f, 0x79, 0x76, 0x9e, 0x3b, 0xa6, 0x05,
	0x57, 0x65, 0x17, 0xd8, 0x74, 0xe2, 0x30, 0xd9, 0xeb, 0x82, 0x89, 0x89, 0x70, 0x0c, 0x33, 0x66,
	0xe8, 0x7b, 0x57, 0x61, 0xeb, 0xc6, 0xd6, 0xde, 0x8c, 0xce, 0xb8, 0x37, 0x5f, 0x87, 0x51, 0x6a,
	0x57, 0xd2, 0x35, 0xe9, 0xc8, 0x10, 0x6b, 0x31, 0x77, 0x86, 0x29, 0xb9, 0xa8, 0xd1, 0xb3, 0x2d,
	0x81, 0x40, 0xc2, 0xcb, 0x30, 0x0b, 0xd7, 0x2a, 0x8c, 0x1d, 0xd9, 0x78, 0x12, 0x1d, 0xe7, 0x66,
	0xe0, 0x26, 0xdd, 0xdd, 0x10, 0xb9, 0xa3, 0x1e, 0x8a, 0xf0, 0x1e, 0xc1, 0x65, 0xda, 0x6e, 0xbd,
	0xee, 0x77, 0xf6, 0xed, 0x61, 0xd7, 0x73, 0x7b, 0xb8, 0x6f, 0x9b, 0x2f, 0x1e, 0x76, 0x2e, 0x30,
	0xd8, 0xcf, 0x61, 0xc6, 0xc3, 0x93, 0x73, 0xd6, 0x81, 0xbb, 0x0d, 0xe1, 0x16, 0xc4, 0x4c, 0xd5,
	0xa4, 0xfc, 0xd4, 0x20, 0xf8, 0x22, 0x29, 0xdc, 0x86, 0x89, 0x1e, 0x69, 0xe6, 0x85, 0xeb, 0x03,
	0x45, 0xb8, 0x0f, 0xb3, 0x66, 0x5a, 0x14, 0x58, 0xaf, 0x17, 0x49, 0x83, 0xe8, 0x66, 0xb7, 0xf1,
	0x7b, 0x47, 0x08, 0x0f, 0x60, 0xce, 0xfb, 0x60, 0xd7, 0xa4, 0x8b, 0x87, 0xff, 0x85, 0x04, 0xc5,
	0xcb, 0xd7, 0xa2, 0xcb, 0xb9, 0xef, 0x11, 0xcc, 0x7a, 0x1e, 0x64, 0x16, 0xcf, 0xd7, 0xdb, 0xee,
	0x40, 0xcc, 0x92, 0x76, 0x4c, 0x47, 0x13, 0x7e, 0xcc, 0x78, 0xb6, 0x05, 0xf9, 0x64, 0x37, 0x0c,
	0xba, 0x74, 0xc3, 0x32, 0x4c, 0x6c, 0xd7, 0xca, 0x0e, 0x68, 0xce, 0x9b, 0xfb, 0xf3, 0x30, 0xa4,
	0x92, 0x63, 0xa9, 0x33, 0x90, 0x4d, 0x33, 0x51, 0x95, 0x1c, 0x5b, 0x3a, 0x85, 0x55, 0x18, 0x5f,
	0xa9, 0x6a, 0xa5, 0x83, 0xbf, 0xd3, 0xdd, 0x85, 0x87, 0x10, 0x73, 0x2a, 0x39, 0x6f, 0xeb, 0x36,
	0x3a, 0x5d, 0xcf, 0x5d, 0x59, 0xa7, 0x5b, 0x83, 0xa9, 0x35, 0xa2, 0x6f, 0xc8, 0x0d, 0x9d, 0xee,
	0xb0, 0x59, 0xb5, 0xa2, 0x7d, 0x98, 0x8f, 0x3f, 0x22, 0x88, 0x9f, 0xd4, 0xc4, 0x1c, 0xb5, 0xcf,
	0x7a, 0x74, 0xca, 0xac, 0x9f, 0x01, 0xa8, 0x1a, 0x0a, 0x24, 0x5d, 0x61, 0x8b, 0x53, 0x48, 0x8c,
	0x50, 0x4a, 0x51, 0x39, 0x24, 0xce, 0x45, 0x24, 0xe8, 0xbb, 0x88, 0x38, 0x2f, 0x10, 0x3a, 0xe5,
	0x02, 0x5f, 0x06, 0x2c, 0x90, 0xba, 0x93, 0xdc, 0x37, 0x23, 0x3e, 0xf7, 0x9c, 0x6f, 0xff, 0x61,
	0xf3, 0xcd, 0x55, 0xdb, 0x19, 0x17, 0x2e, 0xfb, 0xca, 0x13, 0xbc, 0xa8, 0x95, 0xe7, 0x53, 0x98,
	0x3a, 0xe1, 0xf4, 0xb9, 0x96, 0x9e, 0xc5, 0x27, 0x56, 0x1b, 0x74, 0x8e, 0x41, 0x1c, 0x81, 0xfe,
	0xc2, 0xe3, 0x7c, 0x2e, 0xc3, 0xf5, 0x19, 0x3f, 0x33, 0x9b, 0xa9, 0xec, 0x06, 0x87, 0xf0, 0x28,
	0x44, 0x53, 0xab, 0xab, 0xf9, 0xed, 0x5c, 0x51, 0x4a, 0x3e, 0x4a, 0x71, 0x01, 0x8c, 0x61, 0xa4,
	0x90, 0xda, 0xda, 0xda, 0xc9, 0x8b, 0x69, 0x49, 0xcc, 0x6c, 0x65, 0x8a, 0x5c, 0x70, 0xf1, 0x1e,
	0x44, 0x6d, 0xdb, 0x23, 0x8e, 0xc2, 0xe0, 0x76, 0x6e, 0x3d, 0x97, 0xdf, 0xc9, 0x71, 0x7d, 0xc6,
	0x47, 0x21, 0x55, 0xcc, 0x66, 0x72, 0x45, 0x0e, 0xe1, 0x21, 0x08, 0x17, 0xc4, 0xfc, 0xd3, 0x6c,
	0x3a, 0x23, 0x72, 0x81, 0xc5, 0x87, 0x10, 0xb6, 0xb2, 0x0b, 0xc7, 0x80, 0x63, 0x67, 0xa4, 0xc2,
	0x46, 0xaa, 0xf8, 0x28, 0x2f, 0x6e, 0x72, 0x7d, 0x78, 0x10, 0x82, 0xd9, 0xfc, 0x16, 0x87, 0x0c,
	0x2d, 0xa9, 0x5c, 0x5a, 0xcc, 0x67, 0xd3, 0x5c, 0xc0, 0xa0, 0xee, 0x64, 0x56, 0xb8, 0xe0, 0xe2,
	0x06, 0x0c, 0x3b, 0xb0, 0xc6, 0x3c, 0x4c, 0x5a, 0x5a, 0x8a, 0xf9, 0xf5, 0x4c, 0x4e, 0x4a, 0x6f,
	0x8b, 0xa9, 0x62, 0x36, 0x9f, 0x33, 0x2f, 0xb5, 0xf5, 0x38, 0x2f, 0x1a, 0x6e, 0x00, 0x0c, 0x6c,
	0x66, 0xd2, 0xd9, 0xed, 0x4d, 0x2e, 0x80, 0xc3, 0x10, 0xda, 0xc8, 0xe7, 0xd6, 0xb8, 0x60, 0xf2,
	0x3b, 0x80, 0x90, 0x81, 0x16, 0x2e, 0xc2, 0xd8, 0x89, 0xa7, 0x23, 0x4e, 0xf8, 0xff, 0xe5, 0x86,
	0x9f, 0xf5, 0xe4, 0xb3, 0xf0, 0x54, 0x5d, 0xfe, 0xce, 0x61, 0x3d, 0x48, 0xf1, 0xf5, 0xb3, 0xbd,
	0xe3, 0xf9, 0x1b, 0xa7, 0xca, 0x31, 0x6b, 0xcf, 0x60, 0xdc, 0xe5, 0xb5, 0x86, 0xe7, 0x4e, 0x7b,
	0x51, 0xf2, 0xf3, 0x3e, 0x12, 0x4c, 0x77, 0x05, 0xa6, 0x3c, 0xe6, 0x07, 0xbe, 0x6a, 0x3b, 0xed,
	0x39, 0x97, 0xf8, 0x6b, 0xa7, 0x48, 0x31, 0x3b, 0x2f, 0x60, 0xc2, 0x75, 0x21, 0xc0, 0xc2, 0xe9,
	0x7b, 0x0b, 0x7f, 0xc5, 0x57, 0x86, 0x59, 0x78, 0x0c, 0xc3, 0x8e, 0x07, 0x04, 0xe6, 0xbd, 0x9f,
	0x61, 0xfc, 0xb4, 0x2b, 0x8f, 0x69, 0x52, 0x20, 0xee, 0x35, 0xc6, 0xf1, 0x35, 0xfb, 0x41, 0x6f,
	0x54, 0xae, 0x9f, 0x26, 0xc6, 0x4c, 0x95, 0x60, 0xd2, 0x7d, 0x03, 0xc5, 0x57, 0xec, 0x1a, 0xbc,
	0x80, 0xb9, 0xea, 0x2f, 0xc4, 0x8c, 0x3c, 0x04, 0xe8, 0xbe, 0x44, 0xf0, 0x94, 0x79, 0xe6, 0xc4,
	0x1b, 0x88, 0x8f, 0x9f, 0x64, 0x30, 0x05, 0xeb, 0x30, 0xe2, 0x5c, 0xdd, 0xf1, 0xb4, 0xcf, 0x9b,
	0x82, 0xbf, 0xec, 0xce, 0xb4, 0x29, 0x73, 0x4c, 0xc7, 0x8e, 0x32, 0xb7, 0xfd, 0xa0, 0xa3, 0xcc,
	0x75, 0xa0, 0xe2, 0x1c, 0x8c, 0xf6, 0xb4, 0x50, 0x7c, 0xd9, 0x6f, 0x1c, 0xf0, 0x33, 0x1e, 0xdc,
	0x6e, 0x12, 0x39, 0x36, 0x45, 0xec, 0x78, 0x6c, 0x38, 0x97, 0x4d, 0x2b, 0x89, 0xdc, 0x57, 0xcb,
	0x0c, 0x0c, 0xd9, 0xb7, 0x08, 0x7c, 0xc9, 0x14, 0x76, 0x59, 0x4f, 0x78, 0xde, 0x8d, 0xc5, 0xd4,
	0x3c, 0x01, 0xae, 0x77, 0xce, 0xe3, 0x99, 0x4e, 0xa0, 0xdc, 0x36, 0x09, 0x3e, 0xe1, 0xc5, 0x36,
	0x55, 0xae, 0xdc, 0x7a, 0xfd, 0x2e, 0x81, 0xde, 0xbc, 0x4b, 0xf4, 0xbd, 0x7f, 0x97, 0x40, 0xaf,
	0xda, 0x09, 0xf4, 0x43, 0x3b, 0x81, 0x7e, 0x6a, 0x27, 0xd0, 0xeb, 0x76, 0x02, 0xfd, 0xda, 0x4e,
	0xa0, 0xdf, 0xdb, 0x89, 0xbe, 0xf7, 0xed, 0x04, 0xfa, 0xfa, 0xb7, 0x44, 0xdf, 0xee, 0x00, 0xfd,
	0xcf, 0xc7, 0xdd, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xdf, 0xdb, 0x6b, 0x3b, 0x19, 0x00,
	0x00,
}
