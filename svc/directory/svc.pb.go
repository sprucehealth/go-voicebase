// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package directory is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		ExternalID
		Date
		EntityInfo
		Entity
		Profile
		ProfileSection
		ProfileSections
		SerializedClientEntityContact
		RequestedInformation
		ExternalIDsRequest
		ExternalIDsResponse
		IDList
		LookupEntitiesRequest
		LookupEntitiesResponse
		CreateEntityRequest
		CreateEntityResponse
		CreateMembershipRequest
		CreateMembershipResponse
		Contact
		LookupEntitiesByContactRequest
		LookupEntitiesByContactResponse
		CreateContactRequest
		CreateContactResponse
		LookupEntityDomainRequest
		LookupEntityDomainResponse
		CreateEntityDomainRequest
		CreateEntityDomainResponse
		UpdateEntityDomainRequest
		UpdateEntityDomainResponse
		CreateContactsRequest
		CreateContactsResponse
		UpdateEntityRequest
		UpdateEntityResponse
		UpdateContactsRequest
		UpdateContactsResponse
		DeleteContactsRequest
		DeleteContactsResponse
		SerializedEntityContactRequest
		SerializedEntityContactResponse
		DeleteEntityRequest
		DeleteEntityResponse
		CreateExternalIDsRequest
		CreateExternalIDsResponse
		ProfileRequest
		ProfileResponse
		UpdateProfileRequest
		UpdateProfileResponse
*/
package directory

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type EntityType int32

const (
	EntityType_ORGANIZATION EntityType = 0
	EntityType_INTERNAL     EntityType = 1
	EntityType_EXTERNAL     EntityType = 2
	EntityType_SYSTEM       EntityType = 3
	EntityType_PATIENT      EntityType = 4
)

var EntityType_name = map[int32]string{
	0: "ORGANIZATION",
	1: "INTERNAL",
	2: "EXTERNAL",
	3: "SYSTEM",
	4: "PATIENT",
}
var EntityType_value = map[string]int32{
	"ORGANIZATION": 0,
	"INTERNAL":     1,
	"EXTERNAL":     2,
	"SYSTEM":       3,
	"PATIENT":      4,
}

func (EntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type EntityInformation int32

const (
	EntityInformation_MEMBERSHIPS  EntityInformation = 0
	EntityInformation_MEMBERS      EntityInformation = 1
	EntityInformation_CONTACTS     EntityInformation = 2
	EntityInformation_EXTERNAL_IDS EntityInformation = 3
)

var EntityInformation_name = map[int32]string{
	0: "MEMBERSHIPS",
	1: "MEMBERS",
	2: "CONTACTS",
	3: "EXTERNAL_IDS",
}
var EntityInformation_value = map[string]int32{
	"MEMBERSHIPS":  0,
	"MEMBERS":      1,
	"CONTACTS":     2,
	"EXTERNAL_IDS": 3,
}

func (EntityInformation) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type EntityStatus int32

const (
	EntityStatus_UNKNOWN EntityStatus = 0
	EntityStatus_ACTIVE  EntityStatus = 1
	EntityStatus_DELETED EntityStatus = 2
)

var EntityStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACTIVE",
	2: "DELETED",
}
var EntityStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"ACTIVE":  1,
	"DELETED": 2,
}

func (EntityStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type Platform int32

const (
	Platform_IOS     Platform = 0
	Platform_ANDROID Platform = 1
)

var Platform_name = map[int32]string{
	0: "IOS",
	1: "ANDROID",
}
var Platform_value = map[string]int32{
	"IOS":     0,
	"ANDROID": 1,
}

func (Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type ContactType int32

const (
	ContactType_PHONE ContactType = 0
	ContactType_EMAIL ContactType = 1
)

var ContactType_name = map[int32]string{
	0: "PHONE",
	1: "EMAIL",
}
var ContactType_value = map[string]int32{
	"PHONE": 0,
	"EMAIL": 1,
}

func (ContactType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type EntityInfo_Gender int32

const (
	EntityInfo_UNKNOWN EntityInfo_Gender = 0
	EntityInfo_MALE    EntityInfo_Gender = 1
	EntityInfo_FEMALE  EntityInfo_Gender = 2
	EntityInfo_OTHER   EntityInfo_Gender = 3
)

var EntityInfo_Gender_name = map[int32]string{
	0: "UNKNOWN",
	1: "MALE",
	2: "FEMALE",
	3: "OTHER",
}
var EntityInfo_Gender_value = map[string]int32{
	"UNKNOWN": 0,
	"MALE":    1,
	"FEMALE":  2,
	"OTHER":   3,
}

func (EntityInfo_Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2, 0} }

type LookupEntitiesRequest_LookupKeyType int32

const (
	LookupEntitiesRequest_ENTITY_ID       LookupEntitiesRequest_LookupKeyType = 0
	LookupEntitiesRequest_EXTERNAL_ID     LookupEntitiesRequest_LookupKeyType = 1
	LookupEntitiesRequest_BATCH_ENTITY_ID LookupEntitiesRequest_LookupKeyType = 2
	LookupEntitiesRequest_ACCOUNT_ID      LookupEntitiesRequest_LookupKeyType = 3
)

var LookupEntitiesRequest_LookupKeyType_name = map[int32]string{
	0: "ENTITY_ID",
	1: "EXTERNAL_ID",
	2: "BATCH_ENTITY_ID",
	3: "ACCOUNT_ID",
}
var LookupEntitiesRequest_LookupKeyType_value = map[string]int32{
	"ENTITY_ID":       0,
	"EXTERNAL_ID":     1,
	"BATCH_ENTITY_ID": 2,
	"ACCOUNT_ID":      3,
}

func (LookupEntitiesRequest_LookupKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{12, 0}
}

type ProfileRequest_LookupKeyType int32

const (
	ProfileRequest_LOOKUP_KEY_TYPE_UNKNOWN ProfileRequest_LookupKeyType = 0
	ProfileRequest_PROFILE_ID              ProfileRequest_LookupKeyType = 1
	ProfileRequest_ENTITY_ID               ProfileRequest_LookupKeyType = 2
)

var ProfileRequest_LookupKeyType_name = map[int32]string{
	0: "LOOKUP_KEY_TYPE_UNKNOWN",
	1: "PROFILE_ID",
	2: "ENTITY_ID",
}
var ProfileRequest_LookupKeyType_value = map[string]int32{
	"LOOKUP_KEY_TYPE_UNKNOWN": 0,
	"PROFILE_ID":              1,
	"ENTITY_ID":               2,
}

func (ProfileRequest_LookupKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{43, 0}
}

type ExternalID struct {
	ID       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntityID string `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
}

func (m *ExternalID) Reset()                    { *m = ExternalID{} }
func (*ExternalID) ProtoMessage()               {}
func (*ExternalID) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type Date struct {
	Month uint32 `protobuf:"varint,1,opt,name=month,proto3" json:"month,omitempty"`
	Day   uint32 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Year  uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (m *Date) Reset()                    { *m = Date{} }
func (*Date) ProtoMessage()               {}
func (*Date) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type EntityInfo struct {
	FirstName     string            `protobuf:"bytes,1,opt,name=first_name,proto3" json:"first_name,omitempty"`
	MiddleInitial string            `protobuf:"bytes,2,opt,name=middle_initial,proto3" json:"middle_initial,omitempty"`
	LastName      string            `protobuf:"bytes,3,opt,name=last_name,proto3" json:"last_name,omitempty"`
	GroupName     string            `protobuf:"bytes,4,opt,name=group_name,proto3" json:"group_name,omitempty"`
	DisplayName   string            `protobuf:"bytes,5,opt,name=display_name,proto3" json:"display_name,omitempty"`
	Note          string            `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	ShortTitle    string            `protobuf:"bytes,7,opt,name=short_title,proto3" json:"short_title,omitempty"`
	LongTitle     string            `protobuf:"bytes,8,opt,name=long_title,proto3" json:"long_title,omitempty"`
	Gender        EntityInfo_Gender `protobuf:"varint,10,opt,name=gender,proto3,enum=directory.EntityInfo_Gender" json:"gender,omitempty"`
	DOB           *Date             `protobuf:"bytes,9,opt,name=dob" json:"dob,omitempty"`
}

func (m *EntityInfo) Reset()                    { *m = EntityInfo{} }
func (*EntityInfo) ProtoMessage()               {}
func (*EntityInfo) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

func (m *EntityInfo) GetDOB() *Date {
	if m != nil {
		return m.DOB
	}
	return nil
}

type Entity struct {
	ID                    string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                  EntityType          `protobuf:"varint,3,opt,name=type,proto3,enum=directory.EntityType" json:"type,omitempty"`
	Memberships           []*Entity           `protobuf:"bytes,4,rep,name=memberships" json:"memberships,omitempty"`
	Members               []*Entity           `protobuf:"bytes,5,rep,name=members" json:"members,omitempty"`
	ExternalIDs           []string            `protobuf:"bytes,6,rep,name=external_ids" json:"external_ids,omitempty"`
	Contacts              []*Contact          `protobuf:"bytes,7,rep,name=contacts" json:"contacts,omitempty"`
	IncludedInformation   []EntityInformation `protobuf:"varint,8,rep,name=included_information,enum=directory.EntityInformation" json:"included_information,omitempty"`
	Info                  *EntityInfo         `protobuf:"bytes,9,opt,name=info" json:"info,omitempty"`
	Status                EntityStatus        `protobuf:"varint,10,opt,name=status,proto3,enum=directory.EntityStatus" json:"status,omitempty"`
	CreatedTimestamp      uint64              `protobuf:"varint,11,opt,name=created_timestamp,proto3" json:"created_timestamp,omitempty"`
	LastModifiedTimestamp uint64              `protobuf:"varint,12,opt,name=last_modified_timestamp,proto3" json:"last_modified_timestamp,omitempty"`
	AccountID             string              `protobuf:"bytes,13,opt,name=account_id,proto3" json:"account_id,omitempty"`
	ImageMediaID          string              `protobuf:"bytes,14,opt,name=image_media_id,proto3" json:"image_media_id,omitempty"`
	HasProfile            bool                `protobuf:"varint,15,opt,name=has_profile,proto3" json:"has_profile,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

func (m *Entity) GetMemberships() []*Entity {
	if m != nil {
		return m.Memberships
	}
	return nil
}

func (m *Entity) GetMembers() []*Entity {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Entity) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Entity) GetInfo() *EntityInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type Profile struct {
	ID                    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EntityID              string            `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	DisplayName           string            `protobuf:"bytes,3,opt,name=display_name,proto3" json:"display_name,omitempty"`
	Sections              []*ProfileSection `protobuf:"bytes,4,rep,name=sections" json:"sections,omitempty"`
	LastModifiedTimestamp uint64            `protobuf:"varint,5,opt,name=last_modified_timestamp,proto3" json:"last_modified_timestamp,omitempty"`
	FirstName             string            `protobuf:"bytes,6,opt,name=first_name,proto3" json:"first_name,omitempty"`
	LastName              string            `protobuf:"bytes,7,opt,name=last_name,proto3" json:"last_name,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

func (m *Profile) GetSections() []*ProfileSection {
	if m != nil {
		return m.Sections
	}
	return nil
}

type ProfileSection struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body  string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *ProfileSection) Reset()                    { *m = ProfileSection{} }
func (*ProfileSection) ProtoMessage()               {}
func (*ProfileSection) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type ProfileSections struct {
	Sections []*ProfileSection `protobuf:"bytes,1,rep,name=sections" json:"sections,omitempty"`
}

func (m *ProfileSections) Reset()                    { *m = ProfileSections{} }
func (*ProfileSections) ProtoMessage()               {}
func (*ProfileSections) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

func (m *ProfileSections) GetSections() []*ProfileSection {
	if m != nil {
		return m.Sections
	}
	return nil
}

type SerializedClientEntityContact struct {
	EntityID                string   `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Platform                Platform `protobuf:"varint,2,opt,name=platform,proto3,enum=directory.Platform" json:"platform,omitempty"`
	SerializedEntityContact []byte   `protobuf:"bytes,3,opt,name=serialized_entity_contact,proto3" json:"serialized_entity_contact,omitempty"`
}

func (m *SerializedClientEntityContact) Reset()                    { *m = SerializedClientEntityContact{} }
func (*SerializedClientEntityContact) ProtoMessage()               {}
func (*SerializedClientEntityContact) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

type RequestedInformation struct {
	Depth             int64               `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	EntityInformation []EntityInformation `protobuf:"varint,2,rep,name=entity_information,enum=directory.EntityInformation" json:"entity_information,omitempty"`
}

func (m *RequestedInformation) Reset()                    { *m = RequestedInformation{} }
func (*RequestedInformation) ProtoMessage()               {}
func (*RequestedInformation) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

type ExternalIDsRequest struct {
	EntityIDs []string `protobuf:"bytes,1,rep,name=entity_ids" json:"entity_ids,omitempty"`
}

func (m *ExternalIDsRequest) Reset()                    { *m = ExternalIDsRequest{} }
func (*ExternalIDsRequest) ProtoMessage()               {}
func (*ExternalIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

type ExternalIDsResponse struct {
	ExternalIDs []*ExternalID `protobuf:"bytes,1,rep,name=external_ids" json:"external_ids,omitempty"`
}

func (m *ExternalIDsResponse) Reset()                    { *m = ExternalIDsResponse{} }
func (*ExternalIDsResponse) ProtoMessage()               {}
func (*ExternalIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

func (m *ExternalIDsResponse) GetExternalIDs() []*ExternalID {
	if m != nil {
		return m.ExternalIDs
	}
	return nil
}

type IDList struct {
	IDs []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *IDList) Reset()                    { *m = IDList{} }
func (*IDList) ProtoMessage()               {}
func (*IDList) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

type LookupEntitiesRequest struct {
	LookupKeyType LookupEntitiesRequest_LookupKeyType `protobuf:"varint,1,opt,name=lookup_key_type,proto3,enum=directory.LookupEntitiesRequest_LookupKeyType" json:"lookup_key_type,omitempty"`
	// Types that are valid to be assigned to LookupKeyOneof:
	//	*LookupEntitiesRequest_EntityID
	//	*LookupEntitiesRequest_ExternalID
	//	*LookupEntitiesRequest_BatchEntityID
	//	*LookupEntitiesRequest_AccountID
	LookupKeyOneof       isLookupEntitiesRequest_LookupKeyOneof `protobuf_oneof:"lookup_key_oneof"`
	RequestedInformation *RequestedInformation                  `protobuf:"bytes,4,opt,name=requested_information" json:"requested_information,omitempty"`
	Statuses             []EntityStatus                         `protobuf:"varint,5,rep,name=statuses,enum=directory.EntityStatus" json:"statuses,omitempty"`
	RootTypes            []EntityType                           `protobuf:"varint,7,rep,name=root_types,enum=directory.EntityType" json:"root_types,omitempty"`
	ChildTypes           []EntityType                           `protobuf:"varint,8,rep,name=child_types,enum=directory.EntityType" json:"child_types,omitempty"`
}

func (m *LookupEntitiesRequest) Reset()                    { *m = LookupEntitiesRequest{} }
func (*LookupEntitiesRequest) ProtoMessage()               {}
func (*LookupEntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

type isLookupEntitiesRequest_LookupKeyOneof interface {
	isLookupEntitiesRequest_LookupKeyOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LookupEntitiesRequest_EntityID struct {
	EntityID string `protobuf:"bytes,2,opt,name=entity_id,proto3,oneof"`
}
type LookupEntitiesRequest_ExternalID struct {
	ExternalID string `protobuf:"bytes,3,opt,name=external_id,proto3,oneof"`
}
type LookupEntitiesRequest_BatchEntityID struct {
	BatchEntityID *IDList `protobuf:"bytes,6,opt,name=batch_entity_id,oneof"`
}
type LookupEntitiesRequest_AccountID struct {
	AccountID string `protobuf:"bytes,9,opt,name=account_id,proto3,oneof"`
}

func (*LookupEntitiesRequest_EntityID) isLookupEntitiesRequest_LookupKeyOneof()      {}
func (*LookupEntitiesRequest_ExternalID) isLookupEntitiesRequest_LookupKeyOneof()    {}
func (*LookupEntitiesRequest_BatchEntityID) isLookupEntitiesRequest_LookupKeyOneof() {}
func (*LookupEntitiesRequest_AccountID) isLookupEntitiesRequest_LookupKeyOneof()     {}

func (m *LookupEntitiesRequest) GetLookupKeyOneof() isLookupEntitiesRequest_LookupKeyOneof {
	if m != nil {
		return m.LookupKeyOneof
	}
	return nil
}

func (m *LookupEntitiesRequest) GetEntityID() string {
	if x, ok := m.GetLookupKeyOneof().(*LookupEntitiesRequest_EntityID); ok {
		return x.EntityID
	}
	return ""
}

func (m *LookupEntitiesRequest) GetExternalID() string {
	if x, ok := m.GetLookupKeyOneof().(*LookupEntitiesRequest_ExternalID); ok {
		return x.ExternalID
	}
	return ""
}

func (m *LookupEntitiesRequest) GetBatchEntityID() *IDList {
	if x, ok := m.GetLookupKeyOneof().(*LookupEntitiesRequest_BatchEntityID); ok {
		return x.BatchEntityID
	}
	return nil
}

func (m *LookupEntitiesRequest) GetAccountID() string {
	if x, ok := m.GetLookupKeyOneof().(*LookupEntitiesRequest_AccountID); ok {
		return x.AccountID
	}
	return ""
}

func (m *LookupEntitiesRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LookupEntitiesRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LookupEntitiesRequest_OneofMarshaler, _LookupEntitiesRequest_OneofUnmarshaler, _LookupEntitiesRequest_OneofSizer, []interface{}{
		(*LookupEntitiesRequest_EntityID)(nil),
		(*LookupEntitiesRequest_ExternalID)(nil),
		(*LookupEntitiesRequest_BatchEntityID)(nil),
		(*LookupEntitiesRequest_AccountID)(nil),
	}
}

func _LookupEntitiesRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LookupEntitiesRequest)
	// lookup_key_oneof
	switch x := m.LookupKeyOneof.(type) {
	case *LookupEntitiesRequest_EntityID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EntityID)
	case *LookupEntitiesRequest_ExternalID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ExternalID)
	case *LookupEntitiesRequest_BatchEntityID:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchEntityID); err != nil {
			return err
		}
	case *LookupEntitiesRequest_AccountID:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.AccountID)
	case nil:
	default:
		return fmt.Errorf("LookupEntitiesRequest.LookupKeyOneof has unexpected type %T", x)
	}
	return nil
}

func _LookupEntitiesRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LookupEntitiesRequest)
	switch tag {
	case 2: // lookup_key_oneof.entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &LookupEntitiesRequest_EntityID{x}
		return true, err
	case 3: // lookup_key_oneof.external_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &LookupEntitiesRequest_ExternalID{x}
		return true, err
	case 6: // lookup_key_oneof.batch_entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IDList)
		err := b.DecodeMessage(msg)
		m.LookupKeyOneof = &LookupEntitiesRequest_BatchEntityID{msg}
		return true, err
	case 9: // lookup_key_oneof.account_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &LookupEntitiesRequest_AccountID{x}
		return true, err
	default:
		return false, nil
	}
}

func _LookupEntitiesRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LookupEntitiesRequest)
	// lookup_key_oneof
	switch x := m.LookupKeyOneof.(type) {
	case *LookupEntitiesRequest_EntityID:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EntityID)))
		n += len(x.EntityID)
	case *LookupEntitiesRequest_ExternalID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ExternalID)))
		n += len(x.ExternalID)
	case *LookupEntitiesRequest_BatchEntityID:
		s := proto.Size(x.BatchEntityID)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LookupEntitiesRequest_AccountID:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AccountID)))
		n += len(x.AccountID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LookupEntitiesResponse struct {
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
}

func (m *LookupEntitiesResponse) Reset()                    { *m = LookupEntitiesResponse{} }
func (*LookupEntitiesResponse) ProtoMessage()               {}
func (*LookupEntitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

func (m *LookupEntitiesResponse) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type CreateEntityRequest struct {
	Type                      EntityType            `protobuf:"varint,2,opt,name=type,proto3,enum=directory.EntityType" json:"type,omitempty"`
	ExternalID                string                `protobuf:"bytes,3,opt,name=external_id,proto3" json:"external_id,omitempty"`
	InitialMembershipEntityID string                `protobuf:"bytes,4,opt,name=initial_membership_entity_id,proto3" json:"initial_membership_entity_id,omitempty"`
	Contacts                  []*Contact            `protobuf:"bytes,5,rep,name=contacts" json:"contacts,omitempty"`
	RequestedInformation      *RequestedInformation `protobuf:"bytes,6,opt,name=requested_information" json:"requested_information,omitempty"`
	EntityInfo                *EntityInfo           `protobuf:"bytes,7,opt,name=entity_info" json:"entity_info,omitempty"`
	AccountID                 string                `protobuf:"bytes,8,opt,name=account_id,proto3" json:"account_id,omitempty"`
}

func (m *CreateEntityRequest) Reset()                    { *m = CreateEntityRequest{} }
func (*CreateEntityRequest) ProtoMessage()               {}
func (*CreateEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

func (m *CreateEntityRequest) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *CreateEntityRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

func (m *CreateEntityRequest) GetEntityInfo() *EntityInfo {
	if m != nil {
		return m.EntityInfo
	}
	return nil
}

type CreateEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateEntityResponse) Reset()                    { *m = CreateEntityResponse{} }
func (*CreateEntityResponse) ProtoMessage()               {}
func (*CreateEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

func (m *CreateEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateMembershipRequest struct {
	EntityID             string                `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	TargetEntityID       string                `protobuf:"bytes,2,opt,name=target_entity_id,proto3" json:"target_entity_id,omitempty"`
	RequestedInformation *RequestedInformation `protobuf:"bytes,3,opt,name=requested_information" json:"requested_information,omitempty"`
}

func (m *CreateMembershipRequest) Reset()                    { *m = CreateMembershipRequest{} }
func (*CreateMembershipRequest) ProtoMessage()               {}
func (*CreateMembershipRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

func (m *CreateMembershipRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

type CreateMembershipResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateMembershipResponse) Reset()                    { *m = CreateMembershipResponse{} }
func (*CreateMembershipResponse) ProtoMessage()               {}
func (*CreateMembershipResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

func (m *CreateMembershipResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Contact struct {
	ContactType ContactType `protobuf:"varint,1,opt,name=contact_type,proto3,enum=directory.ContactType" json:"contact_type,omitempty"`
	Value       string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Provisioned bool        `protobuf:"varint,3,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	ID          string      `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Label       string      `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{18} }

type LookupEntitiesByContactRequest struct {
	ContactValue         string                `protobuf:"bytes,1,opt,name=contact_value,proto3" json:"contact_value,omitempty"`
	RequestedInformation *RequestedInformation `protobuf:"bytes,4,opt,name=requested_information" json:"requested_information,omitempty"`
	Statuses             []EntityStatus        `protobuf:"varint,5,rep,name=statuses,enum=directory.EntityStatus" json:"statuses,omitempty"`
	RootTypes            []EntityType          `protobuf:"varint,6,rep,name=root_types,enum=directory.EntityType" json:"root_types,omitempty"`
	ChildTypes           []EntityType          `protobuf:"varint,7,rep,name=child_types,enum=directory.EntityType" json:"child_types,omitempty"`
}

func (m *LookupEntitiesByContactRequest) Reset()      { *m = LookupEntitiesByContactRequest{} }
func (*LookupEntitiesByContactRequest) ProtoMessage() {}
func (*LookupEntitiesByContactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{19}
}

func (m *LookupEntitiesByContactRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

type LookupEntitiesByContactResponse struct {
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
}

func (m *LookupEntitiesByContactResponse) Reset()      { *m = LookupEntitiesByContactResponse{} }
func (*LookupEntitiesByContactResponse) ProtoMessage() {}
func (*LookupEntitiesByContactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{20}
}

func (m *LookupEntitiesByContactResponse) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type CreateContactRequest struct {
	Contact              *Contact              `protobuf:"bytes,1,opt,name=contact" json:"contact,omitempty"`
	EntityID             string                `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	RequestedInformation *RequestedInformation `protobuf:"bytes,3,opt,name=requested_information" json:"requested_information,omitempty"`
}

func (m *CreateContactRequest) Reset()                    { *m = CreateContactRequest{} }
func (*CreateContactRequest) ProtoMessage()               {}
func (*CreateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

func (m *CreateContactRequest) GetContact() *Contact {
	if m != nil {
		return m.Contact
	}
	return nil
}

func (m *CreateContactRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

type CreateContactResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateContactResponse) Reset()                    { *m = CreateContactResponse{} }
func (*CreateContactResponse) ProtoMessage()               {}
func (*CreateContactResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{22} }

func (m *CreateContactResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type LookupEntityDomainRequest struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *LookupEntityDomainRequest) Reset()                    { *m = LookupEntityDomainRequest{} }
func (*LookupEntityDomainRequest) ProtoMessage()               {}
func (*LookupEntityDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

type LookupEntityDomainResponse struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *LookupEntityDomainResponse) Reset()                    { *m = LookupEntityDomainResponse{} }
func (*LookupEntityDomainResponse) ProtoMessage()               {}
func (*LookupEntityDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{24} }

type CreateEntityDomainRequest struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *CreateEntityDomainRequest) Reset()                    { *m = CreateEntityDomainRequest{} }
func (*CreateEntityDomainRequest) ProtoMessage()               {}
func (*CreateEntityDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

type CreateEntityDomainResponse struct {
}

func (m *CreateEntityDomainResponse) Reset()                    { *m = CreateEntityDomainResponse{} }
func (*CreateEntityDomainResponse) ProtoMessage()               {}
func (*CreateEntityDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

type UpdateEntityDomainRequest struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *UpdateEntityDomainRequest) Reset()                    { *m = UpdateEntityDomainRequest{} }
func (*UpdateEntityDomainRequest) ProtoMessage()               {}
func (*UpdateEntityDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

type UpdateEntityDomainResponse struct {
}

func (m *UpdateEntityDomainResponse) Reset()                    { *m = UpdateEntityDomainResponse{} }
func (*UpdateEntityDomainResponse) ProtoMessage()               {}
func (*UpdateEntityDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

type CreateContactsRequest struct {
	EntityID             string                `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Contacts             []*Contact            `protobuf:"bytes,2,rep,name=contacts" json:"contacts,omitempty"`
	RequestedInformation *RequestedInformation `protobuf:"bytes,3,opt,name=requested_information" json:"requested_information,omitempty"`
}

func (m *CreateContactsRequest) Reset()                    { *m = CreateContactsRequest{} }
func (*CreateContactsRequest) ProtoMessage()               {}
func (*CreateContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

func (m *CreateContactsRequest) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *CreateContactsRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

type CreateContactsResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *CreateContactsResponse) Reset()                    { *m = CreateContactsResponse{} }
func (*CreateContactsResponse) ProtoMessage()               {}
func (*CreateContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

func (m *CreateContactsResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateEntityRequest struct {
	EntityID                       string                           `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	RequestedInformation           *RequestedInformation            `protobuf:"bytes,3,opt,name=requested_information" json:"requested_information,omitempty"`
	UpdateEntityInfo               bool                             `protobuf:"varint,7,opt,name=update_entity_info,proto3" json:"update_entity_info,omitempty"`
	EntityInfo                     *EntityInfo                      `protobuf:"bytes,2,opt,name=entity_info" json:"entity_info,omitempty"`
	UpdateContacts                 bool                             `protobuf:"varint,8,opt,name=update_contacts,proto3" json:"update_contacts,omitempty"`
	Contacts                       []*Contact                       `protobuf:"bytes,4,rep,name=contacts" json:"contacts,omitempty"`
	UpdateSerializedEntityContacts bool                             `protobuf:"varint,9,opt,name=update_serialized_entity_contacts,proto3" json:"update_serialized_entity_contacts,omitempty"`
	SerializedEntityContacts       []*SerializedClientEntityContact `protobuf:"bytes,5,rep,name=serialized_entity_contacts" json:"serialized_entity_contacts,omitempty"`
	UpdateAccountID                bool                             `protobuf:"varint,10,opt,name=update_account_id,proto3" json:"update_account_id,omitempty"`
	AccountID                      string                           `protobuf:"bytes,6,opt,name=account_id,proto3" json:"account_id,omitempty"`
	UpdateImageMediaID             bool                             `protobuf:"varint,11,opt,name=update_image_media_id,proto3" json:"update_image_media_id,omitempty"`
	ImageMediaID                   string                           `protobuf:"bytes,12,opt,name=image_media_id,proto3" json:"image_media_id,omitempty"`
}

func (m *UpdateEntityRequest) Reset()                    { *m = UpdateEntityRequest{} }
func (*UpdateEntityRequest) ProtoMessage()               {}
func (*UpdateEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

func (m *UpdateEntityRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

func (m *UpdateEntityRequest) GetEntityInfo() *EntityInfo {
	if m != nil {
		return m.EntityInfo
	}
	return nil
}

func (m *UpdateEntityRequest) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *UpdateEntityRequest) GetSerializedEntityContacts() []*SerializedClientEntityContact {
	if m != nil {
		return m.SerializedEntityContacts
	}
	return nil
}

type UpdateEntityResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *UpdateEntityResponse) Reset()                    { *m = UpdateEntityResponse{} }
func (*UpdateEntityResponse) ProtoMessage()               {}
func (*UpdateEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

func (m *UpdateEntityResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateContactsRequest struct {
	EntityID             string                `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Contacts             []*Contact            `protobuf:"bytes,2,rep,name=contacts" json:"contacts,omitempty"`
	RequestedInformation *RequestedInformation `protobuf:"bytes,3,opt,name=requested_information" json:"requested_information,omitempty"`
}

func (m *UpdateContactsRequest) Reset()                    { *m = UpdateContactsRequest{} }
func (*UpdateContactsRequest) ProtoMessage()               {}
func (*UpdateContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{33} }

func (m *UpdateContactsRequest) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *UpdateContactsRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

type UpdateContactsResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *UpdateContactsResponse) Reset()                    { *m = UpdateContactsResponse{} }
func (*UpdateContactsResponse) ProtoMessage()               {}
func (*UpdateContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{34} }

func (m *UpdateContactsResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteContactsRequest struct {
	EntityID             string                `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	EntityContactIDs     []string              `protobuf:"bytes,2,rep,name=entity_contact_id" json:"entity_contact_id,omitempty"`
	RequestedInformation *RequestedInformation `protobuf:"bytes,3,opt,name=requested_information" json:"requested_information,omitempty"`
}

func (m *DeleteContactsRequest) Reset()                    { *m = DeleteContactsRequest{} }
func (*DeleteContactsRequest) ProtoMessage()               {}
func (*DeleteContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{35} }

func (m *DeleteContactsRequest) GetRequestedInformation() *RequestedInformation {
	if m != nil {
		return m.RequestedInformation
	}
	return nil
}

type DeleteContactsResponse struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
}

func (m *DeleteContactsResponse) Reset()                    { *m = DeleteContactsResponse{} }
func (*DeleteContactsResponse) ProtoMessage()               {}
func (*DeleteContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{36} }

func (m *DeleteContactsResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type SerializedEntityContactRequest struct {
	EntityID string   `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Platform Platform `protobuf:"varint,2,opt,name=platform,proto3,enum=directory.Platform" json:"platform,omitempty"`
}

func (m *SerializedEntityContactRequest) Reset()      { *m = SerializedEntityContactRequest{} }
func (*SerializedEntityContactRequest) ProtoMessage() {}
func (*SerializedEntityContactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{37}
}

type SerializedEntityContactResponse struct {
	SerializedEntityContact *SerializedClientEntityContact `protobuf:"bytes,1,opt,name=serialized_entity_contact" json:"serialized_entity_contact,omitempty"`
}

func (m *SerializedEntityContactResponse) Reset()      { *m = SerializedEntityContactResponse{} }
func (*SerializedEntityContactResponse) ProtoMessage() {}
func (*SerializedEntityContactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{38}
}

func (m *SerializedEntityContactResponse) GetSerializedEntityContact() *SerializedClientEntityContact {
	if m != nil {
		return m.SerializedEntityContact
	}
	return nil
}

type DeleteEntityRequest struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
}

func (m *DeleteEntityRequest) Reset()                    { *m = DeleteEntityRequest{} }
func (*DeleteEntityRequest) ProtoMessage()               {}
func (*DeleteEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{39} }

type DeleteEntityResponse struct {
}

func (m *DeleteEntityResponse) Reset()                    { *m = DeleteEntityResponse{} }
func (*DeleteEntityResponse) ProtoMessage()               {}
func (*DeleteEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{40} }

type CreateExternalIDsRequest struct {
	EntityID    string   `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	ExternalIDs []string `protobuf:"bytes,2,rep,name=external_ids" json:"external_ids,omitempty"`
}

func (m *CreateExternalIDsRequest) Reset()                    { *m = CreateExternalIDsRequest{} }
func (*CreateExternalIDsRequest) ProtoMessage()               {}
func (*CreateExternalIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{41} }

type CreateExternalIDsResponse struct {
}

func (m *CreateExternalIDsResponse) Reset()                    { *m = CreateExternalIDsResponse{} }
func (*CreateExternalIDsResponse) ProtoMessage()               {}
func (*CreateExternalIDsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{42} }

type ProfileRequest struct {
	LookupKeyType ProfileRequest_LookupKeyType `protobuf:"varint,1,opt,name=lookup_key_type,proto3,enum=directory.ProfileRequest_LookupKeyType" json:"lookup_key_type,omitempty"`
	// Types that are valid to be assigned to LookupKeyOneof:
	//	*ProfileRequest_EntityID
	//	*ProfileRequest_ProfileID
	LookupKeyOneof isProfileRequest_LookupKeyOneof `protobuf_oneof:"lookup_key_oneof"`
}

func (m *ProfileRequest) Reset()                    { *m = ProfileRequest{} }
func (*ProfileRequest) ProtoMessage()               {}
func (*ProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{43} }

type isProfileRequest_LookupKeyOneof interface {
	isProfileRequest_LookupKeyOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProfileRequest_EntityID struct {
	EntityID string `protobuf:"bytes,2,opt,name=entity_id,proto3,oneof"`
}
type ProfileRequest_ProfileID struct {
	ProfileID string `protobuf:"bytes,3,opt,name=profile_id,proto3,oneof"`
}

func (*ProfileRequest_EntityID) isProfileRequest_LookupKeyOneof()  {}
func (*ProfileRequest_ProfileID) isProfileRequest_LookupKeyOneof() {}

func (m *ProfileRequest) GetLookupKeyOneof() isProfileRequest_LookupKeyOneof {
	if m != nil {
		return m.LookupKeyOneof
	}
	return nil
}

func (m *ProfileRequest) GetEntityID() string {
	if x, ok := m.GetLookupKeyOneof().(*ProfileRequest_EntityID); ok {
		return x.EntityID
	}
	return ""
}

func (m *ProfileRequest) GetProfileID() string {
	if x, ok := m.GetLookupKeyOneof().(*ProfileRequest_ProfileID); ok {
		return x.ProfileID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProfileRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProfileRequest_OneofMarshaler, _ProfileRequest_OneofUnmarshaler, _ProfileRequest_OneofSizer, []interface{}{
		(*ProfileRequest_EntityID)(nil),
		(*ProfileRequest_ProfileID)(nil),
	}
}

func _ProfileRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProfileRequest)
	// lookup_key_oneof
	switch x := m.LookupKeyOneof.(type) {
	case *ProfileRequest_EntityID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EntityID)
	case *ProfileRequest_ProfileID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ProfileID)
	case nil:
	default:
		return fmt.Errorf("ProfileRequest.LookupKeyOneof has unexpected type %T", x)
	}
	return nil
}

func _ProfileRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProfileRequest)
	switch tag {
	case 2: // lookup_key_oneof.entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &ProfileRequest_EntityID{x}
		return true, err
	case 3: // lookup_key_oneof.profile_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &ProfileRequest_ProfileID{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProfileRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProfileRequest)
	// lookup_key_oneof
	switch x := m.LookupKeyOneof.(type) {
	case *ProfileRequest_EntityID:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EntityID)))
		n += len(x.EntityID)
	case *ProfileRequest_ProfileID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProfileID)))
		n += len(x.ProfileID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProfileResponse struct {
	Profile *Profile `protobuf:"bytes,1,opt,name=profile" json:"profile,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{44} }

func (m *ProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateProfileRequest struct {
	ProfileID    string   `protobuf:"bytes,1,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	ImageMediaID string   `protobuf:"bytes,2,opt,name=image_media_id,proto3" json:"image_media_id,omitempty"`
	Profile      *Profile `protobuf:"bytes,3,opt,name=profile" json:"profile,omitempty"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{45} }

func (m *UpdateProfileRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateProfileResponse struct {
	Entity  *Entity  `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	Profile *Profile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *UpdateProfileResponse) Reset()                    { *m = UpdateProfileResponse{} }
func (*UpdateProfileResponse) ProtoMessage()               {}
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{46} }

func (m *UpdateProfileResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *UpdateProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func init() {
	proto.RegisterType((*ExternalID)(nil), "directory.ExternalID")
	proto.RegisterType((*Date)(nil), "directory.Date")
	proto.RegisterType((*EntityInfo)(nil), "directory.EntityInfo")
	proto.RegisterType((*Entity)(nil), "directory.Entity")
	proto.RegisterType((*Profile)(nil), "directory.Profile")
	proto.RegisterType((*ProfileSection)(nil), "directory.ProfileSection")
	proto.RegisterType((*ProfileSections)(nil), "directory.ProfileSections")
	proto.RegisterType((*SerializedClientEntityContact)(nil), "directory.SerializedClientEntityContact")
	proto.RegisterType((*RequestedInformation)(nil), "directory.RequestedInformation")
	proto.RegisterType((*ExternalIDsRequest)(nil), "directory.ExternalIDsRequest")
	proto.RegisterType((*ExternalIDsResponse)(nil), "directory.ExternalIDsResponse")
	proto.RegisterType((*IDList)(nil), "directory.IDList")
	proto.RegisterType((*LookupEntitiesRequest)(nil), "directory.LookupEntitiesRequest")
	proto.RegisterType((*LookupEntitiesResponse)(nil), "directory.LookupEntitiesResponse")
	proto.RegisterType((*CreateEntityRequest)(nil), "directory.CreateEntityRequest")
	proto.RegisterType((*CreateEntityResponse)(nil), "directory.CreateEntityResponse")
	proto.RegisterType((*CreateMembershipRequest)(nil), "directory.CreateMembershipRequest")
	proto.RegisterType((*CreateMembershipResponse)(nil), "directory.CreateMembershipResponse")
	proto.RegisterType((*Contact)(nil), "directory.Contact")
	proto.RegisterType((*LookupEntitiesByContactRequest)(nil), "directory.LookupEntitiesByContactRequest")
	proto.RegisterType((*LookupEntitiesByContactResponse)(nil), "directory.LookupEntitiesByContactResponse")
	proto.RegisterType((*CreateContactRequest)(nil), "directory.CreateContactRequest")
	proto.RegisterType((*CreateContactResponse)(nil), "directory.CreateContactResponse")
	proto.RegisterType((*LookupEntityDomainRequest)(nil), "directory.LookupEntityDomainRequest")
	proto.RegisterType((*LookupEntityDomainResponse)(nil), "directory.LookupEntityDomainResponse")
	proto.RegisterType((*CreateEntityDomainRequest)(nil), "directory.CreateEntityDomainRequest")
	proto.RegisterType((*CreateEntityDomainResponse)(nil), "directory.CreateEntityDomainResponse")
	proto.RegisterType((*UpdateEntityDomainRequest)(nil), "directory.UpdateEntityDomainRequest")
	proto.RegisterType((*UpdateEntityDomainResponse)(nil), "directory.UpdateEntityDomainResponse")
	proto.RegisterType((*CreateContactsRequest)(nil), "directory.CreateContactsRequest")
	proto.RegisterType((*CreateContactsResponse)(nil), "directory.CreateContactsResponse")
	proto.RegisterType((*UpdateEntityRequest)(nil), "directory.UpdateEntityRequest")
	proto.RegisterType((*UpdateEntityResponse)(nil), "directory.UpdateEntityResponse")
	proto.RegisterType((*UpdateContactsRequest)(nil), "directory.UpdateContactsRequest")
	proto.RegisterType((*UpdateContactsResponse)(nil), "directory.UpdateContactsResponse")
	proto.RegisterType((*DeleteContactsRequest)(nil), "directory.DeleteContactsRequest")
	proto.RegisterType((*DeleteContactsResponse)(nil), "directory.DeleteContactsResponse")
	proto.RegisterType((*SerializedEntityContactRequest)(nil), "directory.SerializedEntityContactRequest")
	proto.RegisterType((*SerializedEntityContactResponse)(nil), "directory.SerializedEntityContactResponse")
	proto.RegisterType((*DeleteEntityRequest)(nil), "directory.DeleteEntityRequest")
	proto.RegisterType((*DeleteEntityResponse)(nil), "directory.DeleteEntityResponse")
	proto.RegisterType((*CreateExternalIDsRequest)(nil), "directory.CreateExternalIDsRequest")
	proto.RegisterType((*CreateExternalIDsResponse)(nil), "directory.CreateExternalIDsResponse")
	proto.RegisterType((*ProfileRequest)(nil), "directory.ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "directory.ProfileResponse")
	proto.RegisterType((*UpdateProfileRequest)(nil), "directory.UpdateProfileRequest")
	proto.RegisterType((*UpdateProfileResponse)(nil), "directory.UpdateProfileResponse")
	proto.RegisterEnum("directory.EntityType", EntityType_name, EntityType_value)
	proto.RegisterEnum("directory.EntityInformation", EntityInformation_name, EntityInformation_value)
	proto.RegisterEnum("directory.EntityStatus", EntityStatus_name, EntityStatus_value)
	proto.RegisterEnum("directory.Platform", Platform_name, Platform_value)
	proto.RegisterEnum("directory.ContactType", ContactType_name, ContactType_value)
	proto.RegisterEnum("directory.EntityInfo_Gender", EntityInfo_Gender_name, EntityInfo_Gender_value)
	proto.RegisterEnum("directory.LookupEntitiesRequest_LookupKeyType", LookupEntitiesRequest_LookupKeyType_name, LookupEntitiesRequest_LookupKeyType_value)
	proto.RegisterEnum("directory.ProfileRequest_LookupKeyType", ProfileRequest_LookupKeyType_name, ProfileRequest_LookupKeyType_value)
}
func (x EntityType) String() string {
	s, ok := EntityType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EntityInformation) String() string {
	s, ok := EntityInformation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EntityStatus) String() string {
	s, ok := EntityStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Platform) String() string {
	s, ok := Platform_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContactType) String() string {
	s, ok := ContactType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EntityInfo_Gender) String() string {
	s, ok := EntityInfo_Gender_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LookupEntitiesRequest_LookupKeyType) String() string {
	s, ok := LookupEntitiesRequest_LookupKeyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ProfileRequest_LookupKeyType) String() string {
	s, ok := ProfileRequest_LookupKeyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ExternalID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExternalID)
	if !ok {
		that2, ok := that.(ExternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *Date) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Date)
	if !ok {
		that2, ok := that.(Date)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	if this.Day != that1.Day {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	return true
}
func (this *EntityInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EntityInfo)
	if !ok {
		that2, ok := that.(EntityInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.MiddleInitial != that1.MiddleInitial {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.GroupName != that1.GroupName {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.Note != that1.Note {
		return false
	}
	if this.ShortTitle != that1.ShortTitle {
		return false
	}
	if this.LongTitle != that1.LongTitle {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if !this.DOB.Equal(that1.DOB) {
		return false
	}
	return true
}
func (this *Entity) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Entity)
	if !ok {
		that2, ok := that.(Entity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Memberships) != len(that1.Memberships) {
		return false
	}
	for i := range this.Memberships {
		if !this.Memberships[i].Equal(that1.Memberships[i]) {
			return false
		}
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if len(this.ExternalIDs) != len(that1.ExternalIDs) {
		return false
	}
	for i := range this.ExternalIDs {
		if this.ExternalIDs[i] != that1.ExternalIDs[i] {
			return false
		}
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	if len(this.IncludedInformation) != len(that1.IncludedInformation) {
		return false
	}
	for i := range this.IncludedInformation {
		if this.IncludedInformation[i] != that1.IncludedInformation[i] {
			return false
		}
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.LastModifiedTimestamp != that1.LastModifiedTimestamp {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	if this.ImageMediaID != that1.ImageMediaID {
		return false
	}
	if this.HasProfile != that1.HasProfile {
		return false
	}
	return true
}
func (this *Profile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Profile)
	if !ok {
		that2, ok := that.(Profile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	if this.LastModifiedTimestamp != that1.LastModifiedTimestamp {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	return true
}
func (this *ProfileSection) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileSection)
	if !ok {
		that2, ok := that.(ProfileSection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *ProfileSections) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileSections)
	if !ok {
		that2, ok := that.(ProfileSections)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	return true
}
func (this *SerializedClientEntityContact) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SerializedClientEntityContact)
	if !ok {
		that2, ok := that.(SerializedClientEntityContact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	if !bytes.Equal(this.SerializedEntityContact, that1.SerializedEntityContact) {
		return false
	}
	return true
}
func (this *RequestedInformation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RequestedInformation)
	if !ok {
		that2, ok := that.(RequestedInformation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Depth != that1.Depth {
		return false
	}
	if len(this.EntityInformation) != len(that1.EntityInformation) {
		return false
	}
	for i := range this.EntityInformation {
		if this.EntityInformation[i] != that1.EntityInformation[i] {
			return false
		}
	}
	return true
}
func (this *ExternalIDsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExternalIDsRequest)
	if !ok {
		that2, ok := that.(ExternalIDsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.EntityIDs) != len(that1.EntityIDs) {
		return false
	}
	for i := range this.EntityIDs {
		if this.EntityIDs[i] != that1.EntityIDs[i] {
			return false
		}
	}
	return true
}
func (this *ExternalIDsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExternalIDsResponse)
	if !ok {
		that2, ok := that.(ExternalIDsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ExternalIDs) != len(that1.ExternalIDs) {
		return false
	}
	for i := range this.ExternalIDs {
		if !this.ExternalIDs[i].Equal(that1.ExternalIDs[i]) {
			return false
		}
	}
	return true
}
func (this *IDList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IDList)
	if !ok {
		that2, ok := that.(IDList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	return true
}
func (this *LookupEntitiesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesRequest)
	if !ok {
		that2, ok := that.(LookupEntitiesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LookupKeyType != that1.LookupKeyType {
		return false
	}
	if that1.LookupKeyOneof == nil {
		if this.LookupKeyOneof != nil {
			return false
		}
	} else if this.LookupKeyOneof == nil {
		return false
	} else if !this.LookupKeyOneof.Equal(that1.LookupKeyOneof) {
		return false
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	if len(this.Statuses) != len(that1.Statuses) {
		return false
	}
	for i := range this.Statuses {
		if this.Statuses[i] != that1.Statuses[i] {
			return false
		}
	}
	if len(this.RootTypes) != len(that1.RootTypes) {
		return false
	}
	for i := range this.RootTypes {
		if this.RootTypes[i] != that1.RootTypes[i] {
			return false
		}
	}
	if len(this.ChildTypes) != len(that1.ChildTypes) {
		return false
	}
	for i := range this.ChildTypes {
		if this.ChildTypes[i] != that1.ChildTypes[i] {
			return false
		}
	}
	return true
}
func (this *LookupEntitiesRequest_EntityID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesRequest_EntityID)
	if !ok {
		that2, ok := that.(LookupEntitiesRequest_EntityID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *LookupEntitiesRequest_ExternalID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesRequest_ExternalID)
	if !ok {
		that2, ok := that.(LookupEntitiesRequest_ExternalID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	return true
}
func (this *LookupEntitiesRequest_BatchEntityID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesRequest_BatchEntityID)
	if !ok {
		that2, ok := that.(LookupEntitiesRequest_BatchEntityID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BatchEntityID.Equal(that1.BatchEntityID) {
		return false
	}
	return true
}
func (this *LookupEntitiesRequest_AccountID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesRequest_AccountID)
	if !ok {
		that2, ok := that.(LookupEntitiesRequest_AccountID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *LookupEntitiesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesResponse)
	if !ok {
		that2, ok := that.(LookupEntitiesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Entities) != len(that1.Entities) {
		return false
	}
	for i := range this.Entities {
		if !this.Entities[i].Equal(that1.Entities[i]) {
			return false
		}
	}
	return true
}
func (this *CreateEntityRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEntityRequest)
	if !ok {
		that2, ok := that.(CreateEntityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ExternalID != that1.ExternalID {
		return false
	}
	if this.InitialMembershipEntityID != that1.InitialMembershipEntityID {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	if !this.EntityInfo.Equal(that1.EntityInfo) {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *CreateEntityResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEntityResponse)
	if !ok {
		that2, ok := that.(CreateEntityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *CreateMembershipRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateMembershipRequest)
	if !ok {
		that2, ok := that.(CreateMembershipRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.TargetEntityID != that1.TargetEntityID {
		return false
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	return true
}
func (this *CreateMembershipResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateMembershipResponse)
	if !ok {
		that2, ok := that.(CreateMembershipResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *Contact) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Contact)
	if !ok {
		that2, ok := that.(Contact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContactType != that1.ContactType {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Provisioned != that1.Provisioned {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *LookupEntitiesByContactRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesByContactRequest)
	if !ok {
		that2, ok := that.(LookupEntitiesByContactRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContactValue != that1.ContactValue {
		return false
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	if len(this.Statuses) != len(that1.Statuses) {
		return false
	}
	for i := range this.Statuses {
		if this.Statuses[i] != that1.Statuses[i] {
			return false
		}
	}
	if len(this.RootTypes) != len(that1.RootTypes) {
		return false
	}
	for i := range this.RootTypes {
		if this.RootTypes[i] != that1.RootTypes[i] {
			return false
		}
	}
	if len(this.ChildTypes) != len(that1.ChildTypes) {
		return false
	}
	for i := range this.ChildTypes {
		if this.ChildTypes[i] != that1.ChildTypes[i] {
			return false
		}
	}
	return true
}
func (this *LookupEntitiesByContactResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntitiesByContactResponse)
	if !ok {
		that2, ok := that.(LookupEntitiesByContactResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Entities) != len(that1.Entities) {
		return false
	}
	for i := range this.Entities {
		if !this.Entities[i].Equal(that1.Entities[i]) {
			return false
		}
	}
	return true
}
func (this *CreateContactRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateContactRequest)
	if !ok {
		that2, ok := that.(CreateContactRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Contact.Equal(that1.Contact) {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	return true
}
func (this *CreateContactResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateContactResponse)
	if !ok {
		that2, ok := that.(CreateContactResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *LookupEntityDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntityDomainRequest)
	if !ok {
		that2, ok := that.(LookupEntityDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *LookupEntityDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupEntityDomainResponse)
	if !ok {
		that2, ok := that.(LookupEntityDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *CreateEntityDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEntityDomainRequest)
	if !ok {
		that2, ok := that.(CreateEntityDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *CreateEntityDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEntityDomainResponse)
	if !ok {
		that2, ok := that.(CreateEntityDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateEntityDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEntityDomainRequest)
	if !ok {
		that2, ok := that.(UpdateEntityDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *UpdateEntityDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEntityDomainResponse)
	if !ok {
		that2, ok := that.(UpdateEntityDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateContactsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateContactsRequest)
	if !ok {
		that2, ok := that.(CreateContactsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	return true
}
func (this *CreateContactsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateContactsResponse)
	if !ok {
		that2, ok := that.(CreateContactsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *UpdateEntityRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEntityRequest)
	if !ok {
		that2, ok := that.(UpdateEntityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	if this.UpdateEntityInfo != that1.UpdateEntityInfo {
		return false
	}
	if !this.EntityInfo.Equal(that1.EntityInfo) {
		return false
	}
	if this.UpdateContacts != that1.UpdateContacts {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	if this.UpdateSerializedEntityContacts != that1.UpdateSerializedEntityContacts {
		return false
	}
	if len(this.SerializedEntityContacts) != len(that1.SerializedEntityContacts) {
		return false
	}
	for i := range this.SerializedEntityContacts {
		if !this.SerializedEntityContacts[i].Equal(that1.SerializedEntityContacts[i]) {
			return false
		}
	}
	if this.UpdateAccountID != that1.UpdateAccountID {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	if this.UpdateImageMediaID != that1.UpdateImageMediaID {
		return false
	}
	if this.ImageMediaID != that1.ImageMediaID {
		return false
	}
	return true
}
func (this *UpdateEntityResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateEntityResponse)
	if !ok {
		that2, ok := that.(UpdateEntityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *UpdateContactsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateContactsRequest)
	if !ok {
		that2, ok := that.(UpdateContactsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if len(this.Contacts) != len(that1.Contacts) {
		return false
	}
	for i := range this.Contacts {
		if !this.Contacts[i].Equal(that1.Contacts[i]) {
			return false
		}
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	return true
}
func (this *UpdateContactsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateContactsResponse)
	if !ok {
		that2, ok := that.(UpdateContactsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *DeleteContactsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteContactsRequest)
	if !ok {
		that2, ok := that.(DeleteContactsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if len(this.EntityContactIDs) != len(that1.EntityContactIDs) {
		return false
	}
	for i := range this.EntityContactIDs {
		if this.EntityContactIDs[i] != that1.EntityContactIDs[i] {
			return false
		}
	}
	if !this.RequestedInformation.Equal(that1.RequestedInformation) {
		return false
	}
	return true
}
func (this *DeleteContactsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteContactsResponse)
	if !ok {
		that2, ok := that.(DeleteContactsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	return true
}
func (this *SerializedEntityContactRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SerializedEntityContactRequest)
	if !ok {
		that2, ok := that.(SerializedEntityContactRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	return true
}
func (this *SerializedEntityContactResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SerializedEntityContactResponse)
	if !ok {
		that2, ok := that.(SerializedEntityContactResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SerializedEntityContact.Equal(that1.SerializedEntityContact) {
		return false
	}
	return true
}
func (this *DeleteEntityRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteEntityRequest)
	if !ok {
		that2, ok := that.(DeleteEntityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *DeleteEntityResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteEntityResponse)
	if !ok {
		that2, ok := that.(DeleteEntityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateExternalIDsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateExternalIDsRequest)
	if !ok {
		that2, ok := that.(CreateExternalIDsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if len(this.ExternalIDs) != len(that1.ExternalIDs) {
		return false
	}
	for i := range this.ExternalIDs {
		if this.ExternalIDs[i] != that1.ExternalIDs[i] {
			return false
		}
	}
	return true
}
func (this *CreateExternalIDsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateExternalIDsResponse)
	if !ok {
		that2, ok := that.(CreateExternalIDsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileRequest)
	if !ok {
		that2, ok := that.(ProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LookupKeyType != that1.LookupKeyType {
		return false
	}
	if that1.LookupKeyOneof == nil {
		if this.LookupKeyOneof != nil {
			return false
		}
	} else if this.LookupKeyOneof == nil {
		return false
	} else if !this.LookupKeyOneof.Equal(that1.LookupKeyOneof) {
		return false
	}
	return true
}
func (this *ProfileRequest_EntityID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileRequest_EntityID)
	if !ok {
		that2, ok := that.(ProfileRequest_EntityID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *ProfileRequest_ProfileID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileRequest_ProfileID)
	if !ok {
		that2, ok := that.(ProfileRequest_ProfileID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProfileID != that1.ProfileID {
		return false
	}
	return true
}
func (this *ProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileResponse)
	if !ok {
		that2, ok := that.(ProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *UpdateProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateProfileRequest)
	if !ok {
		that2, ok := that.(UpdateProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProfileID != that1.ProfileID {
		return false
	}
	if this.ImageMediaID != that1.ImageMediaID {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *UpdateProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateProfileResponse)
	if !ok {
		that2, ok := that.(UpdateProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entity.Equal(that1.Entity) {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *ExternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.ExternalID{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Date) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.Date{")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EntityInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&directory.EntityInfo{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "MiddleInitial: "+fmt.Sprintf("%#v", this.MiddleInitial)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "GroupName: "+fmt.Sprintf("%#v", this.GroupName)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "Note: "+fmt.Sprintf("%#v", this.Note)+",\n")
	s = append(s, "ShortTitle: "+fmt.Sprintf("%#v", this.ShortTitle)+",\n")
	s = append(s, "LongTitle: "+fmt.Sprintf("%#v", this.LongTitle)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	if this.DOB != nil {
		s = append(s, "DOB: "+fmt.Sprintf("%#v", this.DOB)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Entity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&directory.Entity{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Memberships != nil {
		s = append(s, "Memberships: "+fmt.Sprintf("%#v", this.Memberships)+",\n")
	}
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "ExternalIDs: "+fmt.Sprintf("%#v", this.ExternalIDs)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	s = append(s, "IncludedInformation: "+fmt.Sprintf("%#v", this.IncludedInformation)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "LastModifiedTimestamp: "+fmt.Sprintf("%#v", this.LastModifiedTimestamp)+",\n")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "ImageMediaID: "+fmt.Sprintf("%#v", this.ImageMediaID)+",\n")
	s = append(s, "HasProfile: "+fmt.Sprintf("%#v", this.HasProfile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Profile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&directory.Profile{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	s = append(s, "LastModifiedTimestamp: "+fmt.Sprintf("%#v", this.LastModifiedTimestamp)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileSection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.ProfileSection{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileSections) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.ProfileSections{")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializedClientEntityContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.SerializedClientEntityContact{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "SerializedEntityContact: "+fmt.Sprintf("%#v", this.SerializedEntityContact)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestedInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.RequestedInformation{")
	s = append(s, "Depth: "+fmt.Sprintf("%#v", this.Depth)+",\n")
	s = append(s, "EntityInformation: "+fmt.Sprintf("%#v", this.EntityInformation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExternalIDsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.ExternalIDsRequest{")
	s = append(s, "EntityIDs: "+fmt.Sprintf("%#v", this.EntityIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExternalIDsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.ExternalIDsResponse{")
	if this.ExternalIDs != nil {
		s = append(s, "ExternalIDs: "+fmt.Sprintf("%#v", this.ExternalIDs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IDList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.IDList{")
	s = append(s, "IDs: "+fmt.Sprintf("%#v", this.IDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEntitiesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&directory.LookupEntitiesRequest{")
	s = append(s, "LookupKeyType: "+fmt.Sprintf("%#v", this.LookupKeyType)+",\n")
	if this.LookupKeyOneof != nil {
		s = append(s, "LookupKeyOneof: "+fmt.Sprintf("%#v", this.LookupKeyOneof)+",\n")
	}
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "Statuses: "+fmt.Sprintf("%#v", this.Statuses)+",\n")
	s = append(s, "RootTypes: "+fmt.Sprintf("%#v", this.RootTypes)+",\n")
	s = append(s, "ChildTypes: "+fmt.Sprintf("%#v", this.ChildTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEntitiesRequest_EntityID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&directory.LookupEntitiesRequest_EntityID{` +
		`EntityID:` + fmt.Sprintf("%#v", this.EntityID) + `}`}, ", ")
	return s
}
func (this *LookupEntitiesRequest_ExternalID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&directory.LookupEntitiesRequest_ExternalID{` +
		`ExternalID:` + fmt.Sprintf("%#v", this.ExternalID) + `}`}, ", ")
	return s
}
func (this *LookupEntitiesRequest_BatchEntityID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&directory.LookupEntitiesRequest_BatchEntityID{` +
		`BatchEntityID:` + fmt.Sprintf("%#v", this.BatchEntityID) + `}`}, ", ")
	return s
}
func (this *LookupEntitiesRequest_AccountID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&directory.LookupEntitiesRequest_AccountID{` +
		`AccountID:` + fmt.Sprintf("%#v", this.AccountID) + `}`}, ", ")
	return s
}
func (this *LookupEntitiesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.LookupEntitiesResponse{")
	if this.Entities != nil {
		s = append(s, "Entities: "+fmt.Sprintf("%#v", this.Entities)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEntityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&directory.CreateEntityRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ExternalID: "+fmt.Sprintf("%#v", this.ExternalID)+",\n")
	s = append(s, "InitialMembershipEntityID: "+fmt.Sprintf("%#v", this.InitialMembershipEntityID)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	if this.EntityInfo != nil {
		s = append(s, "EntityInfo: "+fmt.Sprintf("%#v", this.EntityInfo)+",\n")
	}
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEntityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.CreateEntityResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateMembershipRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.CreateMembershipRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "TargetEntityID: "+fmt.Sprintf("%#v", this.TargetEntityID)+",\n")
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateMembershipResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.CreateMembershipResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Contact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&directory.Contact{")
	s = append(s, "ContactType: "+fmt.Sprintf("%#v", this.ContactType)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Provisioned: "+fmt.Sprintf("%#v", this.Provisioned)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEntitiesByContactRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&directory.LookupEntitiesByContactRequest{")
	s = append(s, "ContactValue: "+fmt.Sprintf("%#v", this.ContactValue)+",\n")
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "Statuses: "+fmt.Sprintf("%#v", this.Statuses)+",\n")
	s = append(s, "RootTypes: "+fmt.Sprintf("%#v", this.RootTypes)+",\n")
	s = append(s, "ChildTypes: "+fmt.Sprintf("%#v", this.ChildTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEntitiesByContactResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.LookupEntitiesByContactResponse{")
	if this.Entities != nil {
		s = append(s, "Entities: "+fmt.Sprintf("%#v", this.Entities)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateContactRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.CreateContactRequest{")
	if this.Contact != nil {
		s = append(s, "Contact: "+fmt.Sprintf("%#v", this.Contact)+",\n")
	}
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateContactResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.CreateContactResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEntityDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.LookupEntityDomainRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupEntityDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.LookupEntityDomainResponse{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEntityDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.CreateEntityDomainRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEntityDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directory.CreateEntityDomainResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEntityDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.UpdateEntityDomainRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEntityDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directory.UpdateEntityDomainResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateContactsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.CreateContactsRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateContactsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.CreateContactsResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEntityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&directory.UpdateEntityRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "UpdateEntityInfo: "+fmt.Sprintf("%#v", this.UpdateEntityInfo)+",\n")
	if this.EntityInfo != nil {
		s = append(s, "EntityInfo: "+fmt.Sprintf("%#v", this.EntityInfo)+",\n")
	}
	s = append(s, "UpdateContacts: "+fmt.Sprintf("%#v", this.UpdateContacts)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	s = append(s, "UpdateSerializedEntityContacts: "+fmt.Sprintf("%#v", this.UpdateSerializedEntityContacts)+",\n")
	if this.SerializedEntityContacts != nil {
		s = append(s, "SerializedEntityContacts: "+fmt.Sprintf("%#v", this.SerializedEntityContacts)+",\n")
	}
	s = append(s, "UpdateAccountID: "+fmt.Sprintf("%#v", this.UpdateAccountID)+",\n")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "UpdateImageMediaID: "+fmt.Sprintf("%#v", this.UpdateImageMediaID)+",\n")
	s = append(s, "ImageMediaID: "+fmt.Sprintf("%#v", this.ImageMediaID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEntityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.UpdateEntityResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContactsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.UpdateContactsRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	if this.Contacts != nil {
		s = append(s, "Contacts: "+fmt.Sprintf("%#v", this.Contacts)+",\n")
	}
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContactsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.UpdateContactsResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteContactsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.DeleteContactsRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "EntityContactIDs: "+fmt.Sprintf("%#v", this.EntityContactIDs)+",\n")
	if this.RequestedInformation != nil {
		s = append(s, "RequestedInformation: "+fmt.Sprintf("%#v", this.RequestedInformation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteContactsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.DeleteContactsResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializedEntityContactRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.SerializedEntityContactRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SerializedEntityContactResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.SerializedEntityContactResponse{")
	if this.SerializedEntityContact != nil {
		s = append(s, "SerializedEntityContact: "+fmt.Sprintf("%#v", this.SerializedEntityContact)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteEntityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.DeleteEntityRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteEntityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directory.DeleteEntityResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateExternalIDsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.CreateExternalIDsRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "ExternalIDs: "+fmt.Sprintf("%#v", this.ExternalIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateExternalIDsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&directory.CreateExternalIDsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.ProfileRequest{")
	s = append(s, "LookupKeyType: "+fmt.Sprintf("%#v", this.LookupKeyType)+",\n")
	if this.LookupKeyOneof != nil {
		s = append(s, "LookupKeyOneof: "+fmt.Sprintf("%#v", this.LookupKeyOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileRequest_EntityID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&directory.ProfileRequest_EntityID{` +
		`EntityID:` + fmt.Sprintf("%#v", this.EntityID) + `}`}, ", ")
	return s
}
func (this *ProfileRequest_ProfileID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&directory.ProfileRequest_ProfileID{` +
		`ProfileID:` + fmt.Sprintf("%#v", this.ProfileID) + `}`}, ", ")
	return s
}
func (this *ProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&directory.ProfileResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&directory.UpdateProfileRequest{")
	s = append(s, "ProfileID: "+fmt.Sprintf("%#v", this.ProfileID)+",\n")
	s = append(s, "ImageMediaID: "+fmt.Sprintf("%#v", this.ImageMediaID)+",\n")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&directory.UpdateProfileResponse{")
	if this.Entity != nil {
		s = append(s, "Entity: "+fmt.Sprintf("%#v", this.Entity)+",\n")
	}
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Directory service

type DirectoryClient interface {
	// TODO: 1/22/16 - Remove the single version of this call once this code has been deployed and all callers have been changed and deployed
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	CreateContacts(ctx context.Context, in *CreateContactsRequest, opts ...grpc.CallOption) (*CreateContactsResponse, error)
	CreateEntityDomain(ctx context.Context, in *CreateEntityDomainRequest, opts ...grpc.CallOption) (*CreateEntityDomainResponse, error)
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error)
	CreateExternalIDs(ctx context.Context, in *CreateExternalIDsRequest, opts ...grpc.CallOption) (*CreateExternalIDsResponse, error)
	CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*CreateMembershipResponse, error)
	DeleteContacts(ctx context.Context, in *DeleteContactsRequest, opts ...grpc.CallOption) (*DeleteContactsResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
	ExternalIDs(ctx context.Context, in *ExternalIDsRequest, opts ...grpc.CallOption) (*ExternalIDsResponse, error)
	LookupEntities(ctx context.Context, in *LookupEntitiesRequest, opts ...grpc.CallOption) (*LookupEntitiesResponse, error)
	LookupEntitiesByContact(ctx context.Context, in *LookupEntitiesByContactRequest, opts ...grpc.CallOption) (*LookupEntitiesByContactResponse, error)
	LookupEntityDomain(ctx context.Context, in *LookupEntityDomainRequest, opts ...grpc.CallOption) (*LookupEntityDomainResponse, error)
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	SerializedEntityContact(ctx context.Context, in *SerializedEntityContactRequest, opts ...grpc.CallOption) (*SerializedEntityContactResponse, error)
	UpdateContacts(ctx context.Context, in *UpdateContactsRequest, opts ...grpc.CallOption) (*UpdateContactsResponse, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error)
	UpdateEntityDomain(ctx context.Context, in *UpdateEntityDomainRequest, opts ...grpc.CallOption) (*UpdateEntityDomainResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
}

type directoryClient struct {
	cc *grpc.ClientConn
}

func NewDirectoryClient(cc *grpc.ClientConn) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/CreateContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateContacts(ctx context.Context, in *CreateContactsRequest, opts ...grpc.CallOption) (*CreateContactsResponse, error) {
	out := new(CreateContactsResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/CreateContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateEntityDomain(ctx context.Context, in *CreateEntityDomainRequest, opts ...grpc.CallOption) (*CreateEntityDomainResponse, error) {
	out := new(CreateEntityDomainResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/CreateEntityDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*CreateEntityResponse, error) {
	out := new(CreateEntityResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/CreateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateExternalIDs(ctx context.Context, in *CreateExternalIDsRequest, opts ...grpc.CallOption) (*CreateExternalIDsResponse, error) {
	out := new(CreateExternalIDsResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/CreateExternalIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateMembership(ctx context.Context, in *CreateMembershipRequest, opts ...grpc.CallOption) (*CreateMembershipResponse, error) {
	out := new(CreateMembershipResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/CreateMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteContacts(ctx context.Context, in *DeleteContactsRequest, opts ...grpc.CallOption) (*DeleteContactsResponse, error) {
	out := new(DeleteContactsResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/DeleteContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	out := new(DeleteEntityResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ExternalIDs(ctx context.Context, in *ExternalIDsRequest, opts ...grpc.CallOption) (*ExternalIDsResponse, error) {
	out := new(ExternalIDsResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/ExternalIDs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) LookupEntities(ctx context.Context, in *LookupEntitiesRequest, opts ...grpc.CallOption) (*LookupEntitiesResponse, error) {
	out := new(LookupEntitiesResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/LookupEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) LookupEntitiesByContact(ctx context.Context, in *LookupEntitiesByContactRequest, opts ...grpc.CallOption) (*LookupEntitiesByContactResponse, error) {
	out := new(LookupEntitiesByContactResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/LookupEntitiesByContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) LookupEntityDomain(ctx context.Context, in *LookupEntityDomainRequest, opts ...grpc.CallOption) (*LookupEntityDomainResponse, error) {
	out := new(LookupEntityDomainResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/LookupEntityDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/Profile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SerializedEntityContact(ctx context.Context, in *SerializedEntityContactRequest, opts ...grpc.CallOption) (*SerializedEntityContactResponse, error) {
	out := new(SerializedEntityContactResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/SerializedEntityContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) UpdateContacts(ctx context.Context, in *UpdateContactsRequest, opts ...grpc.CallOption) (*UpdateContactsResponse, error) {
	out := new(UpdateContactsResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/UpdateContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*UpdateEntityResponse, error) {
	out := new(UpdateEntityResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/UpdateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) UpdateEntityDomain(ctx context.Context, in *UpdateEntityDomainRequest, opts ...grpc.CallOption) (*UpdateEntityDomainResponse, error) {
	out := new(UpdateEntityDomainResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/UpdateEntityDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := grpc.Invoke(ctx, "/directory.Directory/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Directory service

type DirectoryServer interface {
	// TODO: 1/22/16 - Remove the single version of this call once this code has been deployed and all callers have been changed and deployed
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	CreateContacts(context.Context, *CreateContactsRequest) (*CreateContactsResponse, error)
	CreateEntityDomain(context.Context, *CreateEntityDomainRequest) (*CreateEntityDomainResponse, error)
	CreateEntity(context.Context, *CreateEntityRequest) (*CreateEntityResponse, error)
	CreateExternalIDs(context.Context, *CreateExternalIDsRequest) (*CreateExternalIDsResponse, error)
	CreateMembership(context.Context, *CreateMembershipRequest) (*CreateMembershipResponse, error)
	DeleteContacts(context.Context, *DeleteContactsRequest) (*DeleteContactsResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	ExternalIDs(context.Context, *ExternalIDsRequest) (*ExternalIDsResponse, error)
	LookupEntities(context.Context, *LookupEntitiesRequest) (*LookupEntitiesResponse, error)
	LookupEntitiesByContact(context.Context, *LookupEntitiesByContactRequest) (*LookupEntitiesByContactResponse, error)
	LookupEntityDomain(context.Context, *LookupEntityDomainRequest) (*LookupEntityDomainResponse, error)
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	SerializedEntityContact(context.Context, *SerializedEntityContactRequest) (*SerializedEntityContactResponse, error)
	UpdateContacts(context.Context, *UpdateContactsRequest) (*UpdateContactsResponse, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*UpdateEntityResponse, error)
	UpdateEntityDomain(context.Context, *UpdateEntityDomainRequest) (*UpdateEntityDomainResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
}

func RegisterDirectoryServer(s *grpc.Server, srv DirectoryServer) {
	s.RegisterService(&_Directory_serviceDesc, srv)
}

func _Directory_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/CreateContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateContacts(ctx, req.(*CreateContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateEntityDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateEntityDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/CreateEntityDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateEntityDomain(ctx, req.(*CreateEntityDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateExternalIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateExternalIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/CreateExternalIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateExternalIDs(ctx, req.(*CreateExternalIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/CreateMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateMembership(ctx, req.(*CreateMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/DeleteContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteContacts(ctx, req.(*DeleteContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ExternalIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ExternalIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/ExternalIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ExternalIDs(ctx, req.(*ExternalIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_LookupEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).LookupEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/LookupEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).LookupEntities(ctx, req.(*LookupEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_LookupEntitiesByContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEntitiesByContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).LookupEntitiesByContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/LookupEntitiesByContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).LookupEntitiesByContact(ctx, req.(*LookupEntitiesByContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_LookupEntityDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupEntityDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).LookupEntityDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/LookupEntityDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).LookupEntityDomain(ctx, req.(*LookupEntityDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SerializedEntityContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerializedEntityContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SerializedEntityContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/SerializedEntityContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SerializedEntityContact(ctx, req.(*SerializedEntityContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_UpdateContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).UpdateContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/UpdateContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).UpdateContacts(ctx, req.(*UpdateContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_UpdateEntityDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).UpdateEntityDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/UpdateEntityDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).UpdateEntityDomain(ctx, req.(*UpdateEntityDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directory.Directory/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Directory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directory.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _Directory_CreateContact_Handler,
		},
		{
			MethodName: "CreateContacts",
			Handler:    _Directory_CreateContacts_Handler,
		},
		{
			MethodName: "CreateEntityDomain",
			Handler:    _Directory_CreateEntityDomain_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Directory_CreateEntity_Handler,
		},
		{
			MethodName: "CreateExternalIDs",
			Handler:    _Directory_CreateExternalIDs_Handler,
		},
		{
			MethodName: "CreateMembership",
			Handler:    _Directory_CreateMembership_Handler,
		},
		{
			MethodName: "DeleteContacts",
			Handler:    _Directory_DeleteContacts_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Directory_DeleteEntity_Handler,
		},
		{
			MethodName: "ExternalIDs",
			Handler:    _Directory_ExternalIDs_Handler,
		},
		{
			MethodName: "LookupEntities",
			Handler:    _Directory_LookupEntities_Handler,
		},
		{
			MethodName: "LookupEntitiesByContact",
			Handler:    _Directory_LookupEntitiesByContact_Handler,
		},
		{
			MethodName: "LookupEntityDomain",
			Handler:    _Directory_LookupEntityDomain_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _Directory_Profile_Handler,
		},
		{
			MethodName: "SerializedEntityContact",
			Handler:    _Directory_SerializedEntityContact_Handler,
		},
		{
			MethodName: "UpdateContacts",
			Handler:    _Directory_UpdateContacts_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _Directory_UpdateEntity_Handler,
		},
		{
			MethodName: "UpdateEntityDomain",
			Handler:    _Directory_UpdateEntityDomain_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Directory_UpdateProfile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *ExternalID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExternalID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	return i, nil
}

func (m *Date) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Date) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Month != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Month))
	}
	if m.Day != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Day))
	}
	if m.Year != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Year))
	}
	return i, nil
}

func (m *EntityInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EntityInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FirstName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.MiddleInitial) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MiddleInitial)))
		i += copy(data[i:], m.MiddleInitial)
	}
	if len(m.LastName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LastName)))
		i += copy(data[i:], m.LastName)
	}
	if len(m.GroupName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GroupName)))
		i += copy(data[i:], m.GroupName)
	}
	if len(m.DisplayName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DisplayName)))
		i += copy(data[i:], m.DisplayName)
	}
	if len(m.Note) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Note)))
		i += copy(data[i:], m.Note)
	}
	if len(m.ShortTitle) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ShortTitle)))
		i += copy(data[i:], m.ShortTitle)
	}
	if len(m.LongTitle) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LongTitle)))
		i += copy(data[i:], m.LongTitle)
	}
	if m.DOB != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(m.DOB.Size()))
		n1, err := m.DOB.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Gender != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.Gender))
	}
	return i, nil
}

func (m *Entity) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Entity) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if m.Type != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.Memberships) > 0 {
		for _, msg := range m.Memberships {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ExternalIDs) > 0 {
		for _, s := range m.ExternalIDs {
			data[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			data[i] = 0x3a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IncludedInformation) > 0 {
		for _, num := range m.IncludedInformation {
			data[i] = 0x40
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	if m.Info != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Status != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.Status))
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if m.LastModifiedTimestamp != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintSvc(data, i, uint64(m.LastModifiedTimestamp))
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	if len(m.ImageMediaID) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ImageMediaID)))
		i += copy(data[i:], m.ImageMediaID)
	}
	if m.HasProfile {
		data[i] = 0x78
		i++
		if m.HasProfile {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Profile) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Profile) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.DisplayName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DisplayName)))
		i += copy(data[i:], m.DisplayName)
	}
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastModifiedTimestamp != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.LastModifiedTimestamp))
	}
	if len(m.FirstName) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LastName)))
		i += copy(data[i:], m.LastName)
	}
	return i, nil
}

func (m *ProfileSection) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProfileSection) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Body) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	return i, nil
}

func (m *ProfileSections) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProfileSections) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SerializedClientEntityContact) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SerializedClientEntityContact) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Platform != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Platform))
	}
	if len(m.SerializedEntityContact) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SerializedEntityContact)))
		i += copy(data[i:], m.SerializedEntityContact)
	}
	return i, nil
}

func (m *RequestedInformation) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestedInformation) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Depth != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Depth))
	}
	if len(m.EntityInformation) > 0 {
		for _, num := range m.EntityInformation {
			data[i] = 0x10
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ExternalIDsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExternalIDsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityIDs) > 0 {
		for _, s := range m.EntityIDs {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *ExternalIDsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ExternalIDsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ExternalIDs) > 0 {
		for _, msg := range m.ExternalIDs {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IDList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IDList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *LookupEntitiesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupEntitiesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LookupKeyType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.LookupKeyType))
	}
	if m.LookupKeyOneof != nil {
		nn3, err := m.LookupKeyOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.RequestedInformation != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n4, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Statuses) > 0 {
		for _, num := range m.Statuses {
			data[i] = 0x28
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	if len(m.RootTypes) > 0 {
		for _, num := range m.RootTypes {
			data[i] = 0x38
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	if len(m.ChildTypes) > 0 {
		for _, num := range m.ChildTypes {
			data[i] = 0x40
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *LookupEntitiesRequest_EntityID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
	i += copy(data[i:], m.EntityID)
	return i, nil
}
func (m *LookupEntitiesRequest_ExternalID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.ExternalID)))
	i += copy(data[i:], m.ExternalID)
	return i, nil
}
func (m *LookupEntitiesRequest_BatchEntityID) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.BatchEntityID != nil {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(m.BatchEntityID.Size()))
		n5, err := m.BatchEntityID.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *LookupEntitiesRequest_AccountID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x4a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
	i += copy(data[i:], m.AccountID)
	return i, nil
}
func (m *LookupEntitiesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupEntitiesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, msg := range m.Entities {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateEntityRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEntityRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.ExternalID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ExternalID)))
		i += copy(data[i:], m.ExternalID)
	}
	if len(m.InitialMembershipEntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InitialMembershipEntityID)))
		i += copy(data[i:], m.InitialMembershipEntityID)
	}
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RequestedInformation != nil {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n6, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.EntityInfo != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(m.EntityInfo.Size()))
		n7, err := m.EntityInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *CreateEntityResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEntityResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n8, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *CreateMembershipRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateMembershipRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.TargetEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.TargetEntityID)))
		i += copy(data[i:], m.TargetEntityID)
	}
	if m.RequestedInformation != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n9, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *CreateMembershipResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateMembershipResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n10, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *Contact) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Contact) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContactType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.ContactType))
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.Provisioned {
		data[i] = 0x18
		i++
		if m.Provisioned {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.ID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Label) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Label)))
		i += copy(data[i:], m.Label)
	}
	return i, nil
}

func (m *LookupEntitiesByContactRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupEntitiesByContactRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContactValue) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ContactValue)))
		i += copy(data[i:], m.ContactValue)
	}
	if m.RequestedInformation != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n11, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Statuses) > 0 {
		for _, num := range m.Statuses {
			data[i] = 0x28
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	if len(m.RootTypes) > 0 {
		for _, num := range m.RootTypes {
			data[i] = 0x30
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	if len(m.ChildTypes) > 0 {
		for _, num := range m.ChildTypes {
			data[i] = 0x38
			i++
			i = encodeVarintSvc(data, i, uint64(num))
		}
	}
	return i, nil
}

func (m *LookupEntitiesByContactResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupEntitiesByContactResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, msg := range m.Entities {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateContactRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateContactRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contact != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Contact.Size()))
		n12, err := m.Contact.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.RequestedInformation != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n13, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *CreateContactResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateContactResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n14, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *LookupEntityDomainRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupEntityDomainRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Domain) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Domain)))
		i += copy(data[i:], m.Domain)
	}
	return i, nil
}

func (m *LookupEntityDomainResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupEntityDomainResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Domain) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Domain)))
		i += copy(data[i:], m.Domain)
	}
	return i, nil
}

func (m *CreateEntityDomainRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEntityDomainRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Domain) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Domain)))
		i += copy(data[i:], m.Domain)
	}
	return i, nil
}

func (m *CreateEntityDomainResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEntityDomainResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateEntityDomainRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateEntityDomainRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Domain) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Domain)))
		i += copy(data[i:], m.Domain)
	}
	return i, nil
}

func (m *UpdateEntityDomainResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateEntityDomainResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateContactsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateContactsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RequestedInformation != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n15, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *CreateContactsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateContactsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n16, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *UpdateEntityRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateEntityRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.EntityInfo != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.EntityInfo.Size()))
		n17, err := m.EntityInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.RequestedInformation != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n18, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SerializedEntityContacts) > 0 {
		for _, msg := range m.SerializedEntityContacts {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	if m.UpdateEntityInfo {
		data[i] = 0x38
		i++
		if m.UpdateEntityInfo {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UpdateContacts {
		data[i] = 0x40
		i++
		if m.UpdateContacts {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UpdateSerializedEntityContacts {
		data[i] = 0x48
		i++
		if m.UpdateSerializedEntityContacts {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UpdateAccountID {
		data[i] = 0x50
		i++
		if m.UpdateAccountID {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UpdateImageMediaID {
		data[i] = 0x58
		i++
		if m.UpdateImageMediaID {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.ImageMediaID) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ImageMediaID)))
		i += copy(data[i:], m.ImageMediaID)
	}
	return i, nil
}

func (m *UpdateEntityResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateEntityResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n19, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *UpdateContactsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateContactsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Contacts) > 0 {
		for _, msg := range m.Contacts {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RequestedInformation != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n20, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *UpdateContactsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateContactsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n21, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *DeleteContactsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteContactsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.EntityContactIDs) > 0 {
		for _, s := range m.EntityContactIDs {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.RequestedInformation != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.RequestedInformation.Size()))
		n22, err := m.RequestedInformation.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *DeleteContactsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteContactsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n23, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *SerializedEntityContactRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SerializedEntityContactRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Platform != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Platform))
	}
	return i, nil
}

func (m *SerializedEntityContactResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SerializedEntityContactResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SerializedEntityContact != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.SerializedEntityContact.Size()))
		n24, err := m.SerializedEntityContact.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *DeleteEntityRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteEntityRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	return i, nil
}

func (m *DeleteEntityResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteEntityResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateExternalIDsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateExternalIDsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.ExternalIDs) > 0 {
		for _, s := range m.ExternalIDs {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CreateExternalIDsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateExternalIDsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProfileRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProfileRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LookupKeyType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.LookupKeyType))
	}
	if m.LookupKeyOneof != nil {
		nn25, err := m.LookupKeyOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn25
	}
	return i, nil
}

func (m *ProfileRequest_EntityID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
	i += copy(data[i:], m.EntityID)
	return i, nil
}
func (m *ProfileRequest_ProfileID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.ProfileID)))
	i += copy(data[i:], m.ProfileID)
	return i, nil
}
func (m *ProfileResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProfileResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Profile.Size()))
		n26, err := m.Profile.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *UpdateProfileRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateProfileRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProfileID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ProfileID)))
		i += copy(data[i:], m.ProfileID)
	}
	if len(m.ImageMediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ImageMediaID)))
		i += copy(data[i:], m.ImageMediaID)
	}
	if m.Profile != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Profile.Size()))
		n27, err := m.Profile.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *UpdateProfileResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateProfileResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entity != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Entity.Size()))
		n28, err := m.Entity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Profile != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Profile.Size()))
		n29, err := m.Profile.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ExternalID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Date) Size() (n int) {
	var l int
	_ = l
	if m.Month != 0 {
		n += 1 + sovSvc(uint64(m.Month))
	}
	if m.Day != 0 {
		n += 1 + sovSvc(uint64(m.Day))
	}
	if m.Year != 0 {
		n += 1 + sovSvc(uint64(m.Year))
	}
	return n
}

func (m *EntityInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MiddleInitial)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ShortTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LongTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DOB != nil {
		l = m.DOB.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovSvc(uint64(m.Gender))
	}
	return n
}

func (m *Entity) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if len(m.Memberships) > 0 {
		for _, e := range m.Memberships {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.ExternalIDs) > 0 {
		for _, s := range m.ExternalIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.IncludedInformation) > 0 {
		for _, e := range m.IncludedInformation {
			n += 1 + sovSvc(uint64(e))
		}
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSvc(uint64(m.Status))
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	if m.LastModifiedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.LastModifiedTimestamp))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ImageMediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.HasProfile {
		n += 2
	}
	return n
}

func (m *Profile) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.LastModifiedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.LastModifiedTimestamp))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProfileSection) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ProfileSections) Size() (n int) {
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SerializedClientEntityContact) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovSvc(uint64(m.Platform))
	}
	l = len(m.SerializedEntityContact)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *RequestedInformation) Size() (n int) {
	var l int
	_ = l
	if m.Depth != 0 {
		n += 1 + sovSvc(uint64(m.Depth))
	}
	if len(m.EntityInformation) > 0 {
		for _, e := range m.EntityInformation {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *ExternalIDsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.EntityIDs) > 0 {
		for _, s := range m.EntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ExternalIDsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ExternalIDs) > 0 {
		for _, e := range m.ExternalIDs {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *IDList) Size() (n int) {
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *LookupEntitiesRequest) Size() (n int) {
	var l int
	_ = l
	if m.LookupKeyType != 0 {
		n += 1 + sovSvc(uint64(m.LookupKeyType))
	}
	if m.LookupKeyOneof != nil {
		n += m.LookupKeyOneof.Size()
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			n += 1 + sovSvc(uint64(e))
		}
	}
	if len(m.RootTypes) > 0 {
		for _, e := range m.RootTypes {
			n += 1 + sovSvc(uint64(e))
		}
	}
	if len(m.ChildTypes) > 0 {
		for _, e := range m.ChildTypes {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *LookupEntitiesRequest_EntityID) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *LookupEntitiesRequest_ExternalID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ExternalID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *LookupEntitiesRequest_BatchEntityID) Size() (n int) {
	var l int
	_ = l
	if m.BatchEntityID != nil {
		l = m.BatchEntityID.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *LookupEntitiesRequest_AccountID) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *LookupEntitiesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateEntityRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InitialMembershipEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.EntityInfo != nil {
		l = m.EntityInfo.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEntityResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateMembershipRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.TargetEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateMembershipResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Contact) Size() (n int) {
	var l int
	_ = l
	if m.ContactType != 0 {
		n += 1 + sovSvc(uint64(m.ContactType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Provisioned {
		n += 2
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LookupEntitiesByContactRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContactValue)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			n += 1 + sovSvc(uint64(e))
		}
	}
	if len(m.RootTypes) > 0 {
		for _, e := range m.RootTypes {
			n += 1 + sovSvc(uint64(e))
		}
	}
	if len(m.ChildTypes) > 0 {
		for _, e := range m.ChildTypes {
			n += 1 + sovSvc(uint64(e))
		}
	}
	return n
}

func (m *LookupEntitiesByContactResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateContactRequest) Size() (n int) {
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateContactResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LookupEntityDomainRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LookupEntityDomainResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEntityDomainRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEntityDomainResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateEntityDomainRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateEntityDomainResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateContactsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateContactsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateEntityRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.EntityInfo != nil {
		l = m.EntityInfo.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.SerializedEntityContacts) > 0 {
		for _, e := range m.SerializedEntityContacts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UpdateEntityInfo {
		n += 2
	}
	if m.UpdateContacts {
		n += 2
	}
	if m.UpdateSerializedEntityContacts {
		n += 2
	}
	if m.UpdateAccountID {
		n += 2
	}
	if m.UpdateImageMediaID {
		n += 2
	}
	l = len(m.ImageMediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateEntityResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateContactsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateContactsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteContactsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.EntityContactIDs) > 0 {
		for _, s := range m.EntityContactIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.RequestedInformation != nil {
		l = m.RequestedInformation.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteContactsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SerializedEntityContactRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovSvc(uint64(m.Platform))
	}
	return n
}

func (m *SerializedEntityContactResponse) Size() (n int) {
	var l int
	_ = l
	if m.SerializedEntityContact != nil {
		l = m.SerializedEntityContact.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteEntityRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteEntityResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateExternalIDsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.ExternalIDs) > 0 {
		for _, s := range m.ExternalIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateExternalIDsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.LookupKeyType != 0 {
		n += 1 + sovSvc(uint64(m.LookupKeyType))
	}
	if m.LookupKeyOneof != nil {
		n += m.LookupKeyOneof.Size()
	}
	return n
}

func (m *ProfileRequest_EntityID) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProfileRequest_ProfileID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateProfileRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProfileID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ImageMediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.Entity != nil {
		l = m.Entity.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExternalID{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Date) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Date{`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`Day:` + fmt.Sprintf("%v", this.Day) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EntityInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EntityInfo{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`MiddleInitial:` + fmt.Sprintf("%v", this.MiddleInitial) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`GroupName:` + fmt.Sprintf("%v", this.GroupName) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Note:` + fmt.Sprintf("%v", this.Note) + `,`,
		`ShortTitle:` + fmt.Sprintf("%v", this.ShortTitle) + `,`,
		`LongTitle:` + fmt.Sprintf("%v", this.LongTitle) + `,`,
		`DOB:` + strings.Replace(fmt.Sprintf("%v", this.DOB), "Date", "Date", 1) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Entity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Entity{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Memberships:` + strings.Replace(fmt.Sprintf("%v", this.Memberships), "Entity", "Entity", 1) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Entity", "Entity", 1) + `,`,
		`ExternalIDs:` + fmt.Sprintf("%v", this.ExternalIDs) + `,`,
		`Contacts:` + strings.Replace(fmt.Sprintf("%v", this.Contacts), "Contact", "Contact", 1) + `,`,
		`IncludedInformation:` + fmt.Sprintf("%v", this.IncludedInformation) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "EntityInfo", "EntityInfo", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`LastModifiedTimestamp:` + fmt.Sprintf("%v", this.LastModifiedTimestamp) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`ImageMediaID:` + fmt.Sprintf("%v", this.ImageMediaID) + `,`,
		`HasProfile:` + fmt.Sprintf("%v", this.HasProfile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Profile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Profile{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Sections:` + strings.Replace(fmt.Sprintf("%v", this.Sections), "ProfileSection", "ProfileSection", 1) + `,`,
		`LastModifiedTimestamp:` + fmt.Sprintf("%v", this.LastModifiedTimestamp) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileSection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileSection{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileSections) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileSections{`,
		`Sections:` + strings.Replace(fmt.Sprintf("%v", this.Sections), "ProfileSection", "ProfileSection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializedClientEntityContact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializedClientEntityContact{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`SerializedEntityContact:` + fmt.Sprintf("%v", this.SerializedEntityContact) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestedInformation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestedInformation{`,
		`Depth:` + fmt.Sprintf("%v", this.Depth) + `,`,
		`EntityInformation:` + fmt.Sprintf("%v", this.EntityInformation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExternalIDsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExternalIDsRequest{`,
		`EntityIDs:` + fmt.Sprintf("%v", this.EntityIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExternalIDsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExternalIDsResponse{`,
		`ExternalIDs:` + strings.Replace(fmt.Sprintf("%v", this.ExternalIDs), "ExternalID", "ExternalID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IDList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IDList{`,
		`IDs:` + fmt.Sprintf("%v", this.IDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesRequest{`,
		`LookupKeyType:` + fmt.Sprintf("%v", this.LookupKeyType) + `,`,
		`LookupKeyOneof:` + fmt.Sprintf("%v", this.LookupKeyOneof) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`Statuses:` + fmt.Sprintf("%v", this.Statuses) + `,`,
		`RootTypes:` + fmt.Sprintf("%v", this.RootTypes) + `,`,
		`ChildTypes:` + fmt.Sprintf("%v", this.ChildTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesRequest_EntityID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesRequest_EntityID{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesRequest_ExternalID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesRequest_ExternalID{`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesRequest_BatchEntityID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesRequest_BatchEntityID{`,
		`BatchEntityID:` + strings.Replace(fmt.Sprintf("%v", this.BatchEntityID), "IDList", "IDList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesRequest_AccountID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesRequest_AccountID{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesResponse{`,
		`Entities:` + strings.Replace(fmt.Sprintf("%v", this.Entities), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEntityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEntityRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`InitialMembershipEntityID:` + fmt.Sprintf("%v", this.InitialMembershipEntityID) + `,`,
		`Contacts:` + strings.Replace(fmt.Sprintf("%v", this.Contacts), "Contact", "Contact", 1) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`EntityInfo:` + strings.Replace(fmt.Sprintf("%v", this.EntityInfo), "EntityInfo", "EntityInfo", 1) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEntityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEntityResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateMembershipRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMembershipRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`TargetEntityID:` + fmt.Sprintf("%v", this.TargetEntityID) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateMembershipResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateMembershipResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Contact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Contact{`,
		`ContactType:` + fmt.Sprintf("%v", this.ContactType) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Provisioned:` + fmt.Sprintf("%v", this.Provisioned) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesByContactRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesByContactRequest{`,
		`ContactValue:` + fmt.Sprintf("%v", this.ContactValue) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`Statuses:` + fmt.Sprintf("%v", this.Statuses) + `,`,
		`RootTypes:` + fmt.Sprintf("%v", this.RootTypes) + `,`,
		`ChildTypes:` + fmt.Sprintf("%v", this.ChildTypes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntitiesByContactResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntitiesByContactResponse{`,
		`Entities:` + strings.Replace(fmt.Sprintf("%v", this.Entities), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateContactRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateContactRequest{`,
		`Contact:` + strings.Replace(fmt.Sprintf("%v", this.Contact), "Contact", "Contact", 1) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateContactResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateContactResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntityDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntityDomainRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupEntityDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupEntityDomainResponse{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEntityDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEntityDomainRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEntityDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEntityDomainResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEntityDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEntityDomainRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEntityDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEntityDomainResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateContactsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateContactsRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Contacts:` + strings.Replace(fmt.Sprintf("%v", this.Contacts), "Contact", "Contact", 1) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateContactsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateContactsResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEntityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEntityRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`EntityInfo:` + strings.Replace(fmt.Sprintf("%v", this.EntityInfo), "EntityInfo", "EntityInfo", 1) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`Contacts:` + strings.Replace(fmt.Sprintf("%v", this.Contacts), "Contact", "Contact", 1) + `,`,
		`SerializedEntityContacts:` + strings.Replace(fmt.Sprintf("%v", this.SerializedEntityContacts), "SerializedClientEntityContact", "SerializedClientEntityContact", 1) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`UpdateEntityInfo:` + fmt.Sprintf("%v", this.UpdateEntityInfo) + `,`,
		`UpdateContacts:` + fmt.Sprintf("%v", this.UpdateContacts) + `,`,
		`UpdateSerializedEntityContacts:` + fmt.Sprintf("%v", this.UpdateSerializedEntityContacts) + `,`,
		`UpdateAccountID:` + fmt.Sprintf("%v", this.UpdateAccountID) + `,`,
		`UpdateImageMediaID:` + fmt.Sprintf("%v", this.UpdateImageMediaID) + `,`,
		`ImageMediaID:` + fmt.Sprintf("%v", this.ImageMediaID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEntityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEntityResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContactsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContactsRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Contacts:` + strings.Replace(fmt.Sprintf("%v", this.Contacts), "Contact", "Contact", 1) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContactsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContactsResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteContactsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteContactsRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`EntityContactIDs:` + fmt.Sprintf("%v", this.EntityContactIDs) + `,`,
		`RequestedInformation:` + strings.Replace(fmt.Sprintf("%v", this.RequestedInformation), "RequestedInformation", "RequestedInformation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteContactsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteContactsResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializedEntityContactRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializedEntityContactRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerializedEntityContactResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerializedEntityContactResponse{`,
		`SerializedEntityContact:` + strings.Replace(fmt.Sprintf("%v", this.SerializedEntityContact), "SerializedClientEntityContact", "SerializedClientEntityContact", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteEntityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteEntityRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteEntityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteEntityResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateExternalIDsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateExternalIDsRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`ExternalIDs:` + fmt.Sprintf("%v", this.ExternalIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateExternalIDsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateExternalIDsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileRequest{`,
		`LookupKeyType:` + fmt.Sprintf("%v", this.LookupKeyType) + `,`,
		`LookupKeyOneof:` + fmt.Sprintf("%v", this.LookupKeyOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileRequest_EntityID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileRequest_EntityID{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileRequest_ProfileID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileRequest_ProfileID{`,
		`ProfileID:` + fmt.Sprintf("%v", this.ProfileID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileResponse{`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Profile", "Profile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateProfileRequest{`,
		`ProfileID:` + fmt.Sprintf("%v", this.ProfileID) + `,`,
		`ImageMediaID:` + fmt.Sprintf("%v", this.ImageMediaID) + `,`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Profile", "Profile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateProfileResponse{`,
		`Entity:` + strings.Replace(fmt.Sprintf("%v", this.Entity), "Entity", "Entity", 1) + `,`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "Profile", "Profile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExternalID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Date) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Date: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Date: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Month |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Day |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Year |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddleInitial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddleInitial = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DOB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DOB == nil {
				m.DOB = &Date{}
			}
			if err := m.DOB.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Gender |= (EntityInfo_Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memberships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memberships = append(m.Memberships, &Entity{})
			if err := m.Memberships[len(m.Memberships)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Entity{})
			if err := m.Members[len(m.Members)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedInformation", wireType)
			}
			var v EntityInformation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityInformation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludedInformation = append(m.IncludedInformation, v)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &EntityInfo{}
			}
			if err := m.Info.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (EntityStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedTimestamp", wireType)
			}
			m.LastModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastModifiedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageMediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasProfile", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasProfile = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &ProfileSection{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedTimestamp", wireType)
			}
			m.LastModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastModifiedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileSection) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileSections) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileSections: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileSections: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &ProfileSection{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializedClientEntityContact) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedClientEntityContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedClientEntityContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Platform |= (Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedEntityContact", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedEntityContact = append(m.SerializedEntityContact[:0], data[iNdEx:postIndex]...)
			if m.SerializedEntityContact == nil {
				m.SerializedEntityContact = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestedInformation) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestedInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestedInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Depth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityInformation", wireType)
			}
			var v EntityInformation
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityInformation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EntityInformation = append(m.EntityInformation, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalIDsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityIDs = append(m.EntityIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalIDsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, &ExternalID{})
			if err := m.ExternalIDs[len(m.ExternalIDs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEntitiesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEntitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEntitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupKeyType", wireType)
			}
			m.LookupKeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LookupKeyType |= (LookupEntitiesRequest_LookupKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &LookupEntitiesRequest_EntityID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &LookupEntitiesRequest_ExternalID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var v EntityStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Statuses = append(m.Statuses, v)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchEntityID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IDList{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LookupKeyOneof = &LookupEntitiesRequest_BatchEntityID{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootTypes", wireType)
			}
			var v EntityType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RootTypes = append(m.RootTypes, v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildTypes", wireType)
			}
			var v EntityType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildTypes = append(m.ChildTypes, v)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &LookupEntitiesRequest_AccountID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEntitiesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEntitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEntitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &Entity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEntityRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEntityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEntityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMembershipEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialMembershipEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntityInfo == nil {
				m.EntityInfo = &EntityInfo{}
			}
			if err := m.EntityInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEntityResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEntityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEntityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMembershipRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMembershipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMembershipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMembershipResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMembershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMembershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contact) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactType", wireType)
			}
			m.ContactType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ContactType |= (ContactType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Provisioned = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEntitiesByContactRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEntitiesByContactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEntitiesByContactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactValue = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var v EntityStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Statuses = append(m.Statuses, v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootTypes", wireType)
			}
			var v EntityType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RootTypes = append(m.RootTypes, v)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildTypes", wireType)
			}
			var v EntityType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (EntityType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChildTypes = append(m.ChildTypes, v)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEntitiesByContactResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEntitiesByContactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEntitiesByContactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &Entity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateContactRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateContactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateContactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contact == nil {
				m.Contact = &Contact{}
			}
			if err := m.Contact.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateContactResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateContactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateContactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEntityDomainRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEntityDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEntityDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupEntityDomainResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupEntityDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupEntityDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEntityDomainRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEntityDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEntityDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEntityDomainResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEntityDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEntityDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEntityDomainRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEntityDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEntityDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEntityDomainResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEntityDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEntityDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateContactsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateContactsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateContactsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateContactsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateContactsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateContactsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEntityRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEntityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEntityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntityInfo == nil {
				m.EntityInfo = &EntityInfo{}
			}
			if err := m.EntityInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedEntityContacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedEntityContacts = append(m.SerializedEntityContacts, &SerializedClientEntityContact{})
			if err := m.SerializedEntityContacts[len(m.SerializedEntityContacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEntityInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateEntityInfo = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContacts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateContacts = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSerializedEntityContacts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateSerializedEntityContacts = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAccountID", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateAccountID = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateImageMediaID", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateImageMediaID = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageMediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEntityResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEntityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEntityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContactsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContactsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContactsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &Contact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContactsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContactsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContactsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteContactsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteContactsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteContactsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityContactIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityContactIDs = append(m.EntityContactIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestedInformation == nil {
				m.RequestedInformation = &RequestedInformation{}
			}
			if err := m.RequestedInformation.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteContactsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteContactsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteContactsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializedEntityContactRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedEntityContactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedEntityContactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Platform |= (Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializedEntityContactResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedEntityContactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedEntityContactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedEntityContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SerializedEntityContact == nil {
				m.SerializedEntityContact = &SerializedClientEntityContact{}
			}
			if err := m.SerializedEntityContact.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteEntityRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteEntityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteEntityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteEntityResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteEntityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteEntityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateExternalIDsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExternalIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExternalIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateExternalIDsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExternalIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExternalIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupKeyType", wireType)
			}
			m.LookupKeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LookupKeyType |= (ProfileRequest_LookupKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &ProfileRequest_EntityID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &ProfileRequest_ProfileID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageMediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entity == nil {
				m.Entity = &Entity{}
			}
			if err := m.Entity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSvc = []byte{
	// 2302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x23, 0x49,
	0x15, 0x1f, 0x7f, 0xc4, 0xb1, 0x9f, 0x3f, 0x53, 0xf9, 0xf6, 0xce, 0x24, 0x93, 0xce, 0x0c, 0x3b,
	0x13, 0x66, 0x33, 0x28, 0xc0, 0x00, 0x0b, 0x2c, 0x6b, 0xc7, 0x3d, 0x13, 0x2b, 0x89, 0x1d, 0x62,
	0x07, 0x18, 0x90, 0x68, 0x75, 0xdc, 0x9d, 0xa4, 0xb5, 0xb6, 0xdb, 0xb8, 0xdb, 0x23, 0xc2, 0x01,
	0x21, 0x4e, 0x88, 0x13, 0x7f, 0x00, 0xe2, 0xbc, 0xf0, 0x1f, 0x20, 0xf1, 0x07, 0xc0, 0x6d, 0x8f,
	0x20, 0x21, 0xc4, 0x0e, 0x17, 0x8e, 0x5c, 0x11, 0x17, 0x5e, 0x57, 0x55, 0xdb, 0x5d, 0xfd, 0xe1,
	0x38, 0x33, 0x2b, 0xc4, 0xc1, 0x1a, 0xbb, 0xea, 0xbd, 0xaa, 0xf7, 0x7e, 0xef, 0xab, 0xde, 0xcb,
	0x40, 0xc6, 0x7a, 0xd5, 0xd9, 0x1d, 0x0c, 0x4d, 0xdb, 0x24, 0x19, 0xcd, 0x18, 0xea, 0x1d, 0xdb,
	0x1c, 0x5e, 0x97, 0xdf, 0xbb, 0x34, 0xec, 0xab, 0xd1, 0xf9, 0x6e, 0xc7, 0xec, 0x3d, 0xbd, 0x34,
	0x2f, 0xcd, 0xa7, 0x94, 0xe2, 0x7c, 0x74, 0x41, 0x7f, 0xd1, 0x1f, 0xf4, 0x1b, 0xe3, 0x94, 0x2a,
	0x00, 0xf2, 0x8f, 0x6d, 0x7d, 0xd8, 0x57, 0xbb, 0xf5, 0x1a, 0x21, 0x10, 0x37, 0xb4, 0xb5, 0xd8,
	0xfd, 0xd8, 0xa3, 0x4c, 0x35, 0xf5, 0xfa, 0x6f, 0x9b, 0x71, 0x5c, 0xdb, 0x84, 0x8c, 0xde, 0xb7,
	0x0d, 0xfb, 0x5a, 0xc1, 0xad, 0x38, 0xdd, 0xca, 0xe1, 0x56, 0x5a, 0xa6, 0x8b, 0xf5, 0x9a, 0xf4,
	0x05, 0x48, 0xd6, 0x54, 0x5b, 0x27, 0x79, 0x98, 0xeb, 0x99, 0x7d, 0xfb, 0x8a, 0xf2, 0xe7, 0x49,
	0x16, 0x12, 0x9a, 0x7a, 0x4d, 0x39, 0xf2, 0x24, 0x07, 0xc9, 0x6b, 0x5d, 0x1d, 0xae, 0x25, 0x9c,
	0x5f, 0xd2, 0xef, 0xe3, 0x78, 0x2b, 0x63, 0xef, 0x5f, 0x98, 0x78, 0x2b, 0x5c, 0x18, 0x43, 0xcb,
	0x56, 0xfa, 0x6a, 0x4f, 0x67, 0xb7, 0x93, 0x15, 0x28, 0xf4, 0x0c, 0x4d, 0xeb, 0xea, 0x8a, 0xd1,
	0x37, 0x6c, 0x43, 0xed, 0xb2, 0xab, 0xc9, 0x02, 0x64, 0xba, 0xaa, 0x4b, 0x9a, 0xa0, 0x4b, 0xc8,
	0x7e, 0x39, 0x34, 0x47, 0x03, 0xb6, 0x96, 0xa4, 0x6b, 0x4b, 0x90, 0xd3, 0x0c, 0x6b, 0xd0, 0x55,
	0xaf, 0xd9, 0xea, 0x1c, 0x5d, 0x45, 0x29, 0xfa, 0xa6, 0xad, 0xaf, 0xa5, 0xe8, 0xaf, 0x45, 0xc8,
	0x5a, 0x57, 0xe6, 0xd0, 0x56, 0x50, 0x90, 0xae, 0xbe, 0x36, 0xef, 0x1e, 0xd6, 0x35, 0xfb, 0x97,
	0x7c, 0x2d, 0x4d, 0xd7, 0x1e, 0xa2, 0x26, 0xe6, 0xf9, 0x5a, 0x06, 0x7f, 0x64, 0xf7, 0x8a, 0xbb,
	0x63, 0xac, 0x77, 0x1d, 0xb5, 0xab, 0xf3, 0x08, 0x46, 0xa2, 0xd6, 0xac, 0x92, 0x27, 0x90, 0xba,
	0xd4, 0xfb, 0x9a, 0x3e, 0x5c, 0x03, 0xa4, 0x2c, 0xec, 0xdd, 0xf5, 0x50, 0x4e, 0xb4, 0xdd, 0x7d,
	0x41, 0x69, 0xa4, 0x67, 0x90, 0x62, 0xdf, 0x10, 0xa8, 0xf9, 0xb3, 0xc6, 0x61, 0xa3, 0xf9, 0xdd,
	0x46, 0xe9, 0x0e, 0x49, 0x43, 0xf2, 0xb8, 0x72, 0x24, 0x97, 0x62, 0x28, 0x48, 0xea, 0xb9, 0x4c,
	0xbf, 0xc7, 0x49, 0x06, 0xe6, 0x9a, 0xed, 0x03, 0xf9, 0xb4, 0x94, 0x90, 0x7e, 0x9e, 0x84, 0x14,
	0x3b, 0x2d, 0xd4, 0x5a, 0xdb, 0x90, 0xb4, 0xaf, 0x07, 0x0c, 0x9a, 0xc2, 0xde, 0x72, 0x40, 0x84,
	0x36, 0x6e, 0x92, 0xcf, 0x41, 0xb6, 0xa7, 0xf7, 0xce, 0xf5, 0xa1, 0x75, 0x65, 0x0c, 0x2c, 0x84,
	0x2c, 0x81, 0x8a, 0x2d, 0x04, 0x68, 0x89, 0x04, 0xf3, 0x9c, 0x0e, 0x01, 0x8c, 0xa0, 0x79, 0x08,
	0x39, 0x9d, 0x3b, 0x10, 0x3a, 0x88, 0x85, 0xd8, 0x26, 0x50, 0x9c, 0x22, 0x8a, 0x93, 0x9d, 0x38,
	0x96, 0x45, 0x1e, 0x40, 0xba, 0x83, 0xce, 0xa1, 0x76, 0x6c, 0x0b, 0x91, 0x76, 0xce, 0x22, 0x9e,
	0xb3, 0xf6, 0xd9, 0x16, 0x79, 0x1f, 0x96, 0x8c, 0x7e, 0xa7, 0x3b, 0xd2, 0x74, 0x0d, 0xed, 0x7e,
	0x61, 0x0e, 0x7b, 0xaa, 0x6d, 0x98, 0x7d, 0xb4, 0x43, 0x22, 0x12, 0x50, 0x4e, 0xe3, 0x68, 0xee,
	0xb0, 0x70, 0x33, 0x2d, 0x87, 0xd2, 0x92, 0x77, 0x21, 0x65, 0xd9, 0xaa, 0x3d, 0xb2, 0xb8, 0x8d,
	0x56, 0x03, 0x64, 0x2d, 0xba, 0x4d, 0xd6, 0x61, 0xa1, 0x33, 0xd4, 0xd1, 0xbe, 0x1a, 0xba, 0x42,
	0x4f, 0x47, 0xa6, 0xde, 0x60, 0x2d, 0x8b, 0x3c, 0x49, 0x0c, 0x88, 0x55, 0xea, 0x82, 0x3d, 0x53,
	0x33, 0x2e, 0x0c, 0x81, 0x20, 0x47, 0x09, 0xb6, 0x00, 0xd4, 0x4e, 0xc7, 0x1c, 0xf5, 0x6d, 0x27,
	0x64, 0xf2, 0xd4, 0x3e, 0x79, 0x04, 0x24, 0x53, 0x61, 0xab, 0x68, 0xa6, 0x47, 0x50, 0x30, 0x7a,
	0xea, 0xa5, 0xae, 0xf4, 0x74, 0xcd, 0x50, 0x1d, 0xb2, 0x02, 0x25, 0x2b, 0x21, 0x59, 0xae, 0xee,
	0xec, 0x1c, 0x3b, 0x1b, 0x48, 0x89, 0x5e, 0x7a, 0xa5, 0x5a, 0x0a, 0x46, 0xeb, 0x85, 0x81, 0x1e,
	0x59, 0x44, 0xb2, 0xb4, 0xf4, 0xa7, 0x18, 0xcc, 0x9f, 0xb0, 0x95, 0x37, 0x8a, 0xd9, 0x40, 0x7c,
	0xb0, 0x48, 0xfa, 0x3c, 0xa4, 0x2d, 0x04, 0x03, 0xd1, 0x74, 0x9d, 0x62, 0xdd, 0x83, 0x0f, 0xbf,
	0xb0, 0xc5, 0x28, 0xa6, 0xc1, 0x30, 0x47, 0x61, 0x10, 0xc3, 0x3a, 0x15, 0x0c, 0x5f, 0x1a, 0x71,
	0xd2, 0x7b, 0x50, 0xf0, 0x9d, 0x8c, 0x89, 0x84, 0x85, 0x5f, 0xcc, 0x8d, 0xda, 0x73, 0x53, 0x63,
	0x99, 0x24, 0x23, 0x7d, 0x00, 0x45, 0x91, 0xdc, 0x12, 0xc4, 0x8e, 0xdd, 0x20, 0xb6, 0xf4, 0xcb,
	0x18, 0xdc, 0x6b, 0xe9, 0x43, 0xcc, 0x28, 0xc6, 0x4f, 0x74, 0x6d, 0xbf, 0x6b, 0x20, 0x50, 0x0c,
	0x16, 0xd7, 0x09, 0x05, 0xf0, 0x62, 0x21, 0xe0, 0x3d, 0x84, 0x34, 0x22, 0x67, 0x3b, 0xae, 0x47,
	0x85, 0x2a, 0xec, 0x2d, 0x7a, 0xef, 0xe3, 0x5b, 0xe8, 0x06, 0xeb, 0xd6, 0xf8, 0x22, 0x85, 0x1f,
	0xc9, 0x83, 0x80, 0x02, 0x9e, 0x93, 0x14, 0x58, 0x3a, 0xd5, 0x7f, 0x34, 0x42, 0xd8, 0x74, 0xcd,
	0xeb, 0xcb, 0x88, 0x80, 0xa6, 0x0f, 0x78, 0x2a, 0x4d, 0x90, 0xaf, 0x02, 0x71, 0x25, 0xf2, 0x04,
	0x45, 0xfc, 0xe6, 0xa0, 0x90, 0xbe, 0x02, 0xc4, 0x13, 0x85, 0xfc, 0x2e, 0xc7, 0x41, 0xc7, 0x1a,
	0x32, 0xc8, 0xb8, 0x83, 0xba, 0x2a, 0x5a, 0x52, 0x0b, 0x16, 0x05, 0x46, 0x6b, 0x80, 0xe8, 0xea,
	0xe4, 0x1b, 0xbe, 0x68, 0x67, 0x70, 0x0b, 0xc1, 0x36, 0xe6, 0x0a, 0x24, 0x01, 0x69, 0x03, 0x52,
	0xf5, 0xda, 0x91, 0x81, 0x12, 0x2c, 0x41, 0x62, 0x72, 0x35, 0xcd, 0xa0, 0xce, 0xfe, 0x1f, 0x92,
	0xb0, 0x7c, 0x64, 0x9a, 0x1f, 0x8d, 0x06, 0x54, 0x10, 0x43, 0x1f, 0x4b, 0xfc, 0x02, 0x8a, 0x5d,
	0xba, 0xa1, 0x7c, 0xa4, 0x5f, 0x2b, 0x34, 0xc3, 0xc5, 0x28, 0xf2, 0xbb, 0x9e, 0xab, 0x43, 0x59,
	0xf9, 0xea, 0xa1, 0xce, 0x52, 0xdf, 0xd6, 0x0d, 0x91, 0x71, 0x70, 0x07, 0xcd, 0x9b, 0xf5, 0xe8,
	0xc8, 0x42, 0xa3, 0x5a, 0x40, 0x22, 0x4f, 0xa5, 0x44, 0xb2, 0x0f, 0x60, 0x79, 0xe8, 0xda, 0x4e,
	0xb0, 0x4b, 0x92, 0x26, 0xa0, 0x4d, 0x8f, 0x60, 0xa1, 0x36, 0x7e, 0x8c, 0x5e, 0x4b, 0x73, 0x8d,
	0xce, 0xb2, 0xeb, 0x94, 0x64, 0xf4, 0x2d, 0x28, 0x9e, 0xab, 0x76, 0xe7, 0x4a, 0x99, 0x88, 0x9e,
	0xa2, 0x97, 0x78, 0xf3, 0x31, 0x43, 0xb6, 0xba, 0x80, 0x82, 0xe6, 0xab, 0x0e, 0xb5, 0x47, 0xa5,
	0xc7, 0x00, 0x43, 0xd3, 0xb4, 0x29, 0x70, 0x2c, 0xff, 0x46, 0xd6, 0x86, 0x1d, 0xc8, 0x76, 0xae,
	0x8c, 0xae, 0xc6, 0x69, 0xd3, 0xd3, 0x68, 0xb7, 0x85, 0x44, 0x97, 0x09, 0x49, 0x74, 0x07, 0x77,
	0xa4, 0x36, 0xe4, 0x45, 0x13, 0xe4, 0x21, 0x23, 0x37, 0xda, 0xf5, 0xf6, 0x4b, 0xa5, 0x5e, 0xc3,
	0x8a, 0x57, 0x84, 0xac, 0xfc, 0xbd, 0xb6, 0x7c, 0xda, 0xa8, 0x1c, 0x39, 0x0b, 0x31, 0xcc, 0x78,
	0xc5, 0x6a, 0xa5, 0xbd, 0x7f, 0xa0, 0x4c, 0xa8, 0xe2, 0xa4, 0x00, 0x50, 0xd9, 0xdf, 0x6f, 0x9e,
	0x35, 0xda, 0xce, 0xef, 0x44, 0x95, 0x40, 0xc9, 0xe3, 0x10, 0x66, 0x5f, 0x37, 0x2f, 0xa4, 0x6f,
	0xc2, 0x8a, 0xdf, 0x05, 0xb8, 0xdb, 0x6e, 0x43, 0x5a, 0xe7, 0x6b, 0xdc, 0x65, 0x83, 0x95, 0x4c,
	0xfa, 0x4b, 0x1c, 0x16, 0xf7, 0x69, 0xce, 0x67, 0x0b, 0xae, 0xef, 0xb9, 0x25, 0x35, 0x3e, 0xad,
	0xa4, 0x6e, 0xcf, 0xe0, 0x34, 0x64, 0x1f, 0xee, 0xf2, 0xd7, 0x8c, 0x32, 0xa9, 0xbf, 0x1e, 0xa3,
	0xd2, 0xb7, 0x4b, 0xf5, 0x1e, 0x72, 0xad, 0xd7, 0x19, 0xdd, 0xf1, 0x98, 0x6c, 0x9c, 0x7d, 0xbc,
	0x95, 0x74, 0x2e, 0xb2, 0x92, 0x46, 0x7a, 0x67, 0x6a, 0x36, 0xef, 0x44, 0x37, 0xf0, 0xa4, 0x1c,
	0x9a, 0xaa, 0x23, 0x8b, 0xaa, 0x58, 0xef, 0xd2, 0x21, 0x6e, 0x20, 0x7d, 0x0d, 0x96, 0x44, 0x68,
	0xb9, 0x61, 0xb6, 0x20, 0xc5, 0xae, 0xa1, 0xe1, 0x1c, 0x6a, 0x96, 0x8f, 0x63, 0xb0, 0xca, 0x78,
	0x27, 0x60, 0xb8, 0xa6, 0xb9, 0x31, 0x55, 0x3f, 0x81, 0x92, 0xad, 0x0e, 0x2f, 0x75, 0x5b, 0xf1,
	0x47, 0x3d, 0x41, 0xba, 0x42, 0x9b, 0xee, 0x8d, 0xa9, 0x23, 0x41, 0x4b, 0xcc, 0x04, 0x1a, 0x3a,
	0xe0, 0x5a, 0x50, 0xd2, 0xd9, 0x35, 0xfd, 0x29, 0xcc, 0xbb, 0xe6, 0x7b, 0x02, 0x39, 0x6e, 0x64,
	0x6f, 0xb2, 0x5b, 0x09, 0x1a, 0x9a, 0x47, 0xd4, 0xdc, 0x2b, 0xb5, 0x3b, 0xd2, 0xf9, 0x1b, 0x19,
	0x9f, 0x0c, 0xf8, 0x5c, 0x78, 0x65, 0x58, 0x28, 0x93, 0xce, 0x7c, 0x31, 0xcd, 0x9f, 0x09, 0x49,
	0xe1, 0x99, 0x80, 0x7c, 0x5d, 0xf5, 0x5c, 0xef, 0xb2, 0xe7, 0xb1, 0xf4, 0xef, 0x18, 0x6c, 0x88,
	0x01, 0x54, 0x75, 0x8b, 0xa2, 0x0b, 0xf8, 0x32, 0xe4, 0x5d, 0xb9, 0xd8, 0x8d, 0xac, 0x44, 0xff,
	0x0f, 0x73, 0xa1, 0x98, 0xca, 0x52, 0xb7, 0x48, 0x65, 0xd3, 0xd2, 0x9e, 0xf4, 0x1c, 0x36, 0x23,
	0x55, 0xbf, 0x4d, 0x12, 0xf9, 0x75, 0xcc, 0xf5, 0x74, 0x1f, 0x72, 0xdb, 0x30, 0xef, 0xd6, 0x7e,
	0xe6, 0x00, 0x61, 0x51, 0x7b, 0xe3, 0xbb, 0xed, 0x6d, 0x3d, 0xf4, 0x7d, 0x58, 0xf6, 0x49, 0x37,
	0xbb, 0x7b, 0x1e, 0xc1, 0xba, 0x07, 0xa2, 0xeb, 0x9a, 0xd9, 0x53, 0x8d, 0xfe, 0xcc, 0x91, 0x58,
	0x80, 0x94, 0x46, 0x39, 0xf8, 0x3b, 0xee, 0x18, 0xca, 0x61, 0xa7, 0x71, 0x71, 0x6e, 0x7d, 0x1c,
	0x0a, 0xe7, 0x4d, 0x30, 0x6f, 0x29, 0xdc, 0x5d, 0x28, 0x87, 0x9d, 0xc6, 0x84, 0x73, 0xee, 0x3a,
	0x1b, 0x68, 0x9f, 0xe1, 0x5d, 0x61, 0xa7, 0xf1, 0xbb, 0x7e, 0x13, 0xf3, 0x59, 0xcc, 0x9a, 0xf9,
	0x22, 0x6f, 0xa1, 0x88, 0xdf, 0xbe, 0x50, 0xcc, 0xe8, 0x51, 0x5f, 0x87, 0x15, 0xbf, 0x7c, 0xb3,
	0xbb, 0xd4, 0xef, 0x92, 0xb0, 0xe8, 0x55, 0x7e, 0x66, 0xdd, 0x7c, 0xe5, 0x29, 0x3e, 0xad, 0x3c,
	0xbd, 0xa5, 0x86, 0x02, 0x8e, 0xc9, 0x48, 0x1c, 0x8f, 0xa0, 0x1c, 0xf9, 0xda, 0x77, 0x0b, 0xf5,
	0x23, 0x0f, 0xdf, 0xf4, 0x1e, 0x44, 0x2c, 0xa9, 0xa9, 0xb0, 0x16, 0xb2, 0x0c, 0x64, 0x44, 0xa1,
	0x53, 0xfc, 0x85, 0x3a, 0x4d, 0x56, 0xa1, 0xc8, 0xf7, 0xc6, 0x12, 0xa4, 0xe9, 0xc6, 0x63, 0xd8,
	0xe2, 0x1b, 0x53, 0x84, 0xcd, 0x50, 0xd2, 0x5d, 0x58, 0xe0, 0xa4, 0x1e, 0x49, 0x9c, 0xae, 0x39,
	0x5d, 0x5d, 0x44, 0x49, 0x8a, 0xcc, 0x6e, 0x13, 0x79, 0xbe, 0x0c, 0xcb, 0x9c, 0xde, 0xd7, 0xd9,
	0x66, 0x29, 0xcf, 0x0a, 0xf2, 0x10, 0xc6, 0x23, 0xf4, 0xb7, 0xc1, 0x4e, 0x38, 0x17, 0xde, 0x09,
	0x3b, 0x6f, 0x08, 0xd1, 0x57, 0x66, 0xf7, 0x33, 0x27, 0x8a, 0x18, 0xef, 0xff, 0x6f, 0x14, 0xf9,
	0xe5, 0x9b, 0x5d, 0xbb, 0xdf, 0xa2, 0x76, 0x35, 0xbd, 0xab, 0xbf, 0x81, 0x76, 0x4f, 0x61, 0x41,
	0xb4, 0x3e, 0x2b, 0x3c, 0x4e, 0x57, 0xb6, 0x84, 0x84, 0x25, 0xc1, 0x2b, 0x9d, 0x39, 0xce, 0x67,
	0xa0, 0xa8, 0x5f, 0xd4, 0xd9, 0x15, 0xbd, 0x82, 0x8d, 0x49, 0xd8, 0x08, 0xa2, 0xcd, 0xac, 0xf0,
	0x6c, 0xbd, 0xbb, 0xd4, 0x87, 0xcd, 0xc8, 0x9b, 0xb8, 0xbc, 0x87, 0xd3, 0xda, 0x7b, 0xa6, 0xc2,
	0xcc, 0xf1, 0x2e, 0x3d, 0x83, 0x45, 0x06, 0xcb, 0xed, 0xf2, 0xa0, 0xb4, 0x02, 0x4b, 0x22, 0x1f,
	0x2f, 0x1b, 0xe7, 0xee, 0x4b, 0x34, 0xa4, 0xfb, 0x9f, 0x01, 0x23, 0xb1, 0xc9, 0x8f, 0x87, 0x8e,
	0xf4, 0xa4, 0x77, 0xc6, 0x25, 0x37, 0x38, 0x28, 0x90, 0xfe, 0x13, 0x1b, 0x8f, 0x75, 0xdc, 0x7b,
	0x3f, 0x8c, 0xea, 0xe1, 0xdf, 0x0d, 0x4e, 0x6b, 0xde, 0xb8, 0x79, 0xc7, 0x96, 0x94, 0x8f, 0xca,
	0x26, 0x6d, 0x18, 0x4d, 0x9c, 0xfc, 0x60, 0xda, 0x92, 0x1e, 0xfa, 0x5b, 0xd2, 0x77, 0x60, 0xf5,
	0xa8, 0xd9, 0x3c, 0x3c, 0x3b, 0x51, 0x0e, 0xe5, 0x97, 0x4a, 0xfb, 0xe5, 0x89, 0xac, 0x4c, 0x46,
	0xb2, 0xd8, 0x7a, 0x9e, 0x9c, 0x36, 0x9f, 0xd7, 0x8f, 0x64, 0xd6, 0x9f, 0x0a, 0xfd, 0x6b, 0x3c,
	0xb4, 0x13, 0x7d, 0x36, 0x1e, 0x52, 0x79, 0x5e, 0x8f, 0xf3, 0xee, 0x0c, 0x2f, 0xf8, 0xfe, 0xe3,
	0xc4, 0xd2, 0x2f, 0x62, 0x6e, 0x8e, 0xf3, 0x61, 0xb7, 0x25, 0xa8, 0x15, 0x0b, 0x51, 0x2b, 0x24,
	0x91, 0xc6, 0x23, 0x46, 0x8a, 0x1e, 0x51, 0x12, 0x91, 0xa2, 0x28, 0x6e, 0xc6, 0xf4, 0x2b, 0x72,
	0x73, 0x9c, 0x7a, 0x2f, 0x88, 0x47, 0x5d, 0xb0, 0xd3, 0x72, 0xff, 0x06, 0x40, 0x2d, 0x50, 0x82,
	0x5c, 0xf3, 0xf4, 0x45, 0xa5, 0x51, 0xff, 0x7e, 0xa5, 0x5d, 0x6f, 0x3a, 0xb0, 0xe7, 0x20, 0x5d,
	0x6f, 0xb0, 0xb9, 0x00, 0x82, 0x8e, 0xbf, 0xdc, 0x29, 0x41, 0x29, 0xee, 0xcc, 0xc6, 0x5b, 0x2f,
	0x5b, 0x6d, 0xf9, 0xb8, 0x94, 0x70, 0xc6, 0xe7, 0x27, 0xc8, 0x83, 0x26, 0x29, 0x25, 0x77, 0xbe,
	0x0d, 0x0b, 0xc1, 0xc9, 0x70, 0x11, 0xb2, 0xc7, 0xf2, 0x71, 0x55, 0x3e, 0x6d, 0x1d, 0xd4, 0x4f,
	0x5a, 0x78, 0x34, 0xb2, 0xf0, 0x05, 0x76, 0xf2, 0x7e, 0xb3, 0xd1, 0xae, 0xec, 0xb7, 0x5b, 0x78,
	0x32, 0xca, 0xe1, 0x99, 0x46, 0xb4, 0x4a, 0x89, 0x9d, 0x2f, 0xe1, 0x8a, 0xb7, 0x01, 0x11, 0xc6,
	0xf5, 0x28, 0x08, 0x32, 0xd6, 0xbf, 0xe3, 0x0c, 0xec, 0x71, 0xa3, 0x26, 0x1f, 0xc9, 0x6d, 0x19,
	0xbd, 0x62, 0xe7, 0x3e, 0xa4, 0xc7, 0x83, 0xc0, 0x79, 0x48, 0xd4, 0x9b, 0xfc, 0xde, 0x4a, 0xa3,
	0x76, 0xda, 0x74, 0xdc, 0x68, 0x67, 0x1b, 0xb2, 0xde, 0x1e, 0x2e, 0x03, 0x73, 0x27, 0x07, 0xcd,
	0x86, 0x8c, 0x64, 0xf8, 0x55, 0x3e, 0xae, 0xd4, 0x51, 0xed, 0xbd, 0xbf, 0xe6, 0x20, 0x53, 0x73,
	0xa1, 0x23, 0xa7, 0x90, 0x17, 0xde, 0x5a, 0xc4, 0x9b, 0x6e, 0xc3, 0xba, 0x8e, 0xf2, 0xfd, 0x68,
	0x02, 0x6e, 0xce, 0x33, 0x28, 0x88, 0xef, 0x37, 0x12, 0xc9, 0xe3, 0x66, 0x90, 0xf2, 0xd6, 0x14,
	0x0a, 0x7e, 0xac, 0x0a, 0x24, 0xf8, 0x82, 0x26, 0x0f, 0x02, 0x8c, 0x21, 0x4f, 0xe8, 0xf2, 0xc3,
	0x1b, 0xa8, 0xf8, 0x15, 0x4d, 0xc8, 0x79, 0x77, 0xc9, 0x46, 0x04, 0x9b, 0x7b, 0xec, 0x66, 0xe4,
	0x3e, 0x3f, 0xf0, 0x87, 0xb0, 0x10, 0x48, 0x68, 0x64, 0x3b, 0xc8, 0x15, 0x48, 0xa9, 0xe5, 0x07,
	0xd3, 0x89, 0xf8, 0xf9, 0x3f, 0x80, 0x92, 0x7f, 0x3c, 0x40, 0xa4, 0x00, 0x67, 0x60, 0xca, 0x51,
	0xde, 0x9e, 0x4a, 0x33, 0xb1, 0xa3, 0x58, 0x58, 0x05, 0x3b, 0x86, 0x3e, 0x0f, 0x04, 0x3b, 0x46,
	0x54, 0x65, 0x04, 0xd9, 0x5b, 0x60, 0x04, 0x90, 0x43, 0x2a, 0x96, 0x00, 0x72, 0x58, 0x65, 0xc2,
	0x77, 0xb2, 0xf0, 0x77, 0xa1, 0x7b, 0xa1, 0xa3, 0xe3, 0xb1, 0x84, 0x1b, 0x51, 0xdb, 0x13, 0xad,
	0xc5, 0xb6, 0x5d, 0xd0, 0x3a, 0x74, 0x20, 0x2c, 0x68, 0x1d, 0x31, 0x2f, 0x1c, 0x60, 0x3d, 0x08,
	0x9f, 0x06, 0x90, 0xc7, 0x91, 0xdc, 0xfe, 0x61, 0x49, 0x79, 0x67, 0x16, 0xd2, 0x49, 0xbc, 0x04,
	0xdb, 0x61, 0x21, 0x5e, 0x22, 0x7b, 0x6f, 0x21, 0x5e, 0xa6, 0xf4, 0xd4, 0x1f, 0x4e, 0xfe, 0x66,
	0xb4, 0x1e, 0x59, 0x71, 0xcb, 0xe5, 0xb0, 0xad, 0x09, 0x2c, 0x11, 0xaf, 0x22, 0x01, 0x96, 0xe9,
	0x6f, 0x34, 0x01, 0x96, 0x9b, 0x1e, 0x59, 0x68, 0x5f, 0xf1, 0x5d, 0x2c, 0xd8, 0x37, 0xf4, 0x49,
	0x2f, 0xd8, 0x37, 0xe2, 0x51, 0x8d, 0x5e, 0xed, 0x6d, 0x25, 0x04, 0xaf, 0x0e, 0xe9, 0x47, 0x05,
	0xaf, 0x0e, 0xed, 0x41, 0xd0, 0x7c, 0xc1, 0x26, 0x5e, 0x30, 0x5f, 0xe4, 0xc4, 0x40, 0x30, 0x5f,
	0xf4, 0x24, 0xc0, 0x49, 0xfe, 0x42, 0x41, 0x26, 0x41, 0xa1, 0x7c, 0xa6, 0xbc, 0x1f, 0x4d, 0xc0,
	0xce, 0xac, 0x3e, 0xf9, 0xe4, 0xd3, 0x8d, 0xd8, 0x9f, 0x3f, 0xdd, 0xb8, 0xf3, 0x2f, 0xfc, 0xf7,
	0x67, 0xaf, 0x37, 0x62, 0x1f, 0xe3, 0xe7, 0x8f, 0xf8, 0xf9, 0x04, 0x3f, 0x7f, 0xc7, 0xcf, 0x3f,
	0x5f, 0xe3, 0x1e, 0xfe, 0xfb, 0xab, 0x7f, 0x6c, 0xdc, 0x39, 0x4f, 0xd1, 0xff, 0x32, 0xf0, 0xc5,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x29, 0x41, 0xe7, 0xa1, 0x79, 0x20, 0x00, 0x00,
}
