// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/directory (interfaces: DirectoryClient)

package directorymock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	directory "github.com/sprucehealth/backend/svc/directory"
	grpc "google.golang.org/grpc"
)

// Mock of DirectoryClient interface
type MockDirectoryClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDirectoryClientRecorder
}

// Recorder for MockDirectoryClient (not exported)
type _MockDirectoryClientRecorder struct {
	mock *MockDirectoryClient
}

func NewMockDirectoryClient(ctrl *gomock.Controller) *MockDirectoryClient {
	mock := &MockDirectoryClient{ctrl: ctrl}
	mock.recorder = &_MockDirectoryClientRecorder{mock}
	return mock
}

func (_m *MockDirectoryClient) EXPECT() *_MockDirectoryClientRecorder {
	return _m.recorder
}

func (_m *MockDirectoryClient) CreateContact(_param0 context.Context, _param1 *directory.CreateContactRequest, _param2 ...grpc.CallOption) (*directory.CreateContactResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateContact", _s...)
	ret0, _ := ret[0].(*directory.CreateContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateContact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateContact", _s...)
}

func (_m *MockDirectoryClient) CreateContacts(_param0 context.Context, _param1 *directory.CreateContactsRequest, _param2 ...grpc.CallOption) (*directory.CreateContactsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateContacts", _s...)
	ret0, _ := ret[0].(*directory.CreateContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateContacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateContacts", _s...)
}

func (_m *MockDirectoryClient) CreateEntity(_param0 context.Context, _param1 *directory.CreateEntityRequest, _param2 ...grpc.CallOption) (*directory.CreateEntityResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateEntity", _s...)
	ret0, _ := ret[0].(*directory.CreateEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateEntity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEntity", _s...)
}

func (_m *MockDirectoryClient) CreateEntityDomain(_param0 context.Context, _param1 *directory.CreateEntityDomainRequest, _param2 ...grpc.CallOption) (*directory.CreateEntityDomainResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateEntityDomain", _s...)
	ret0, _ := ret[0].(*directory.CreateEntityDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateEntityDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEntityDomain", _s...)
}

func (_m *MockDirectoryClient) CreateExternalIDs(_param0 context.Context, _param1 *directory.CreateExternalIDsRequest, _param2 ...grpc.CallOption) (*directory.CreateExternalIDsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateExternalIDs", _s...)
	ret0, _ := ret[0].(*directory.CreateExternalIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateExternalIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateExternalIDs", _s...)
}

func (_m *MockDirectoryClient) CreateExternalLink(_param0 context.Context, _param1 *directory.CreateExternalLinkRequest, _param2 ...grpc.CallOption) (*directory.CreateExternalLinkResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateExternalLink", _s...)
	ret0, _ := ret[0].(*directory.CreateExternalLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateExternalLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateExternalLink", _s...)
}

func (_m *MockDirectoryClient) CreateMembership(_param0 context.Context, _param1 *directory.CreateMembershipRequest, _param2 ...grpc.CallOption) (*directory.CreateMembershipResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateMembership", _s...)
	ret0, _ := ret[0].(*directory.CreateMembershipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) CreateMembership(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMembership", _s...)
}

func (_m *MockDirectoryClient) DeleteContacts(_param0 context.Context, _param1 *directory.DeleteContactsRequest, _param2 ...grpc.CallOption) (*directory.DeleteContactsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteContacts", _s...)
	ret0, _ := ret[0].(*directory.DeleteContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) DeleteContacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteContacts", _s...)
}

func (_m *MockDirectoryClient) DeleteEntity(_param0 context.Context, _param1 *directory.DeleteEntityRequest, _param2 ...grpc.CallOption) (*directory.DeleteEntityResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteEntity", _s...)
	ret0, _ := ret[0].(*directory.DeleteEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) DeleteEntity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEntity", _s...)
}

func (_m *MockDirectoryClient) DeleteExternalLink(_param0 context.Context, _param1 *directory.DeleteExternalLinkRequest, _param2 ...grpc.CallOption) (*directory.DeleteExternalLinkResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteExternalLink", _s...)
	ret0, _ := ret[0].(*directory.DeleteExternalLinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) DeleteExternalLink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteExternalLink", _s...)
}

func (_m *MockDirectoryClient) ExternalIDs(_param0 context.Context, _param1 *directory.ExternalIDsRequest, _param2 ...grpc.CallOption) (*directory.ExternalIDsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ExternalIDs", _s...)
	ret0, _ := ret[0].(*directory.ExternalIDsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) ExternalIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExternalIDs", _s...)
}

func (_m *MockDirectoryClient) LookupEntities(_param0 context.Context, _param1 *directory.LookupEntitiesRequest, _param2 ...grpc.CallOption) (*directory.LookupEntitiesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupEntities", _s...)
	ret0, _ := ret[0].(*directory.LookupEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) LookupEntities(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupEntities", _s...)
}

func (_m *MockDirectoryClient) LookupEntitiesByContact(_param0 context.Context, _param1 *directory.LookupEntitiesByContactRequest, _param2 ...grpc.CallOption) (*directory.LookupEntitiesByContactResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupEntitiesByContact", _s...)
	ret0, _ := ret[0].(*directory.LookupEntitiesByContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) LookupEntitiesByContact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupEntitiesByContact", _s...)
}

func (_m *MockDirectoryClient) LookupEntityDomain(_param0 context.Context, _param1 *directory.LookupEntityDomainRequest, _param2 ...grpc.CallOption) (*directory.LookupEntityDomainResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupEntityDomain", _s...)
	ret0, _ := ret[0].(*directory.LookupEntityDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) LookupEntityDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupEntityDomain", _s...)
}

func (_m *MockDirectoryClient) LookupExternalLinksForEntity(_param0 context.Context, _param1 *directory.LookupExternalLinksForEntityRequest, _param2 ...grpc.CallOption) (*directory.LookupExternalLinksforEntityResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupExternalLinksForEntity", _s...)
	ret0, _ := ret[0].(*directory.LookupExternalLinksforEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) LookupExternalLinksForEntity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupExternalLinksForEntity", _s...)
}

func (_m *MockDirectoryClient) Profile(_param0 context.Context, _param1 *directory.ProfileRequest, _param2 ...grpc.CallOption) (*directory.ProfileResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Profile", _s...)
	ret0, _ := ret[0].(*directory.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) Profile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Profile", _s...)
}

func (_m *MockDirectoryClient) SerializedEntityContact(_param0 context.Context, _param1 *directory.SerializedEntityContactRequest, _param2 ...grpc.CallOption) (*directory.SerializedEntityContactResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SerializedEntityContact", _s...)
	ret0, _ := ret[0].(*directory.SerializedEntityContactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) SerializedEntityContact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SerializedEntityContact", _s...)
}

func (_m *MockDirectoryClient) UpdateContacts(_param0 context.Context, _param1 *directory.UpdateContactsRequest, _param2 ...grpc.CallOption) (*directory.UpdateContactsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateContacts", _s...)
	ret0, _ := ret[0].(*directory.UpdateContactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) UpdateContacts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateContacts", _s...)
}

func (_m *MockDirectoryClient) UpdateEntity(_param0 context.Context, _param1 *directory.UpdateEntityRequest, _param2 ...grpc.CallOption) (*directory.UpdateEntityResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateEntity", _s...)
	ret0, _ := ret[0].(*directory.UpdateEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) UpdateEntity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateEntity", _s...)
}

func (_m *MockDirectoryClient) UpdateEntityDomain(_param0 context.Context, _param1 *directory.UpdateEntityDomainRequest, _param2 ...grpc.CallOption) (*directory.UpdateEntityDomainResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateEntityDomain", _s...)
	ret0, _ := ret[0].(*directory.UpdateEntityDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) UpdateEntityDomain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateEntityDomain", _s...)
}

func (_m *MockDirectoryClient) UpdateProfile(_param0 context.Context, _param1 *directory.UpdateProfileRequest, _param2 ...grpc.CallOption) (*directory.UpdateProfileResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateProfile", _s...)
	ret0, _ := ret[0].(*directory.UpdateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirectoryClientRecorder) UpdateProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateProfile", _s...)
}
