syntax = "proto3";

package media;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

message MIME {
	string type = 1;
	string subtype = 2;
}

// MediaOwnerType represents the list of possible owners for media objects.
enum MediaOwnerType {
	OWNER_TYPE_UNKNOWN = 0;
	ENTITY = 1;
	ORGANIZATION = 2;
	THREAD = 3;
	ACCOUNT = 4;
	VISIT = 5;
}

message MediaInfo {
	string id = 1 [(gogoproto.customname) = "ID"];
	string url = 2 [(gogoproto.customname) = "URL"];
	string thumb_url = 3 [(gogoproto.customname) = "ThumbURL"];
	string owner_id = 4 [(gogoproto.customname) = "OwnerID"];
	MediaOwnerType owner_type = 5 [(gogoproto.customname) = "OwnerType"];
	uint64 size_bytes = 6;
	uint64 duration_ns = 7 [(gogoproto.customname) = "DurationNS"];
	MIME mime = 8 [(gogoproto.customname) = "MIME"];
	bool public = 9;
}

message MediaInfosRequest {
	repeated string media_ids = 1 [(gogoproto.customname) = "MediaIDs"];
}

message MediaInfosResponse {
	map<string,MediaInfo> media_infos = 1;
}

message ClaimMediaRequest {
	repeated string media_ids = 1 [(gogoproto.customname) = "MediaIDs"];
	MediaOwnerType owner_type = 2;
	string owner_id = 3 [(gogoproto.customname) = "OwnerID"];
}

message ClaimMediaResponse {}

message UpdateMediaRequest {
	string media_id = 1 [(gogoproto.customname) = "MediaID"];
	bool public = 2;
}

message UpdateMediaResponse {
	MediaInfo media_info = 1;
}

service Media {
	rpc ClaimMedia (ClaimMediaRequest) returns (ClaimMediaResponse);
	rpc MediaInfos (MediaInfosRequest) returns (MediaInfosResponse);
	rpc UpdateMedia (UpdateMediaRequest) returns (UpdateMediaResponse);
}
