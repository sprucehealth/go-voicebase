// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package media is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		MIME
		MediaInfo
		MediaInfosRequest
		MediaInfosResponse
		ClaimMediaRequest
		ClaimMediaResponse
		CloneMediaRequest
		CloneMediaResponse
		UpdateMediaRequest
		UpdateMediaResponse
		CanAccessRequest
		CanAccessResponse
*/
package media

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// MediaOwnerType represents the list of possible owners for media objects.
type MediaOwnerType int32

const (
	MediaOwnerType_OWNER_TYPE_UNKNOWN MediaOwnerType = 0
	MediaOwnerType_ENTITY             MediaOwnerType = 1
	MediaOwnerType_ORGANIZATION       MediaOwnerType = 2
	MediaOwnerType_THREAD             MediaOwnerType = 3
	MediaOwnerType_ACCOUNT            MediaOwnerType = 4
	MediaOwnerType_VISIT              MediaOwnerType = 5
	MediaOwnerType_SAVED_MESSAGE      MediaOwnerType = 6
	MediaOwnerType_LEGACY             MediaOwnerType = 7
	MediaOwnerType_TRIGGERED_MESSAGE  MediaOwnerType = 8
)

var MediaOwnerType_name = map[int32]string{
	0: "OWNER_TYPE_UNKNOWN",
	1: "ENTITY",
	2: "ORGANIZATION",
	3: "THREAD",
	4: "ACCOUNT",
	5: "VISIT",
	6: "SAVED_MESSAGE",
	7: "LEGACY",
	8: "TRIGGERED_MESSAGE",
}
var MediaOwnerType_value = map[string]int32{
	"OWNER_TYPE_UNKNOWN": 0,
	"ENTITY":             1,
	"ORGANIZATION":       2,
	"THREAD":             3,
	"ACCOUNT":            4,
	"VISIT":              5,
	"SAVED_MESSAGE":      6,
	"LEGACY":             7,
	"TRIGGERED_MESSAGE":  8,
}

func (MediaOwnerType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type MIME struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Subtype string `protobuf:"bytes,2,opt,name=subtype,proto3" json:"subtype,omitempty"`
}

func (m *MIME) Reset()                    { *m = MIME{} }
func (*MIME) ProtoMessage()               {}
func (*MIME) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type MediaInfo struct {
	ID         string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	URL        string         `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ThumbURL   string         `protobuf:"bytes,3,opt,name=thumb_url,proto3" json:"thumb_url,omitempty"`
	OwnerID    string         `protobuf:"bytes,4,opt,name=owner_id,proto3" json:"owner_id,omitempty"`
	OwnerType  MediaOwnerType `protobuf:"varint,5,opt,name=owner_type,proto3,enum=media.MediaOwnerType" json:"owner_type,omitempty"`
	SizeBytes  uint64         `protobuf:"varint,6,opt,name=size_bytes,proto3" json:"size_bytes,omitempty"`
	DurationNS uint64         `protobuf:"varint,7,opt,name=duration_ns,proto3" json:"duration_ns,omitempty"`
	MIME       *MIME          `protobuf:"bytes,8,opt,name=mime" json:"mime,omitempty"`
	Public     bool           `protobuf:"varint,9,opt,name=public,proto3" json:"public,omitempty"`
	Name       string         `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MediaInfo) Reset()                    { *m = MediaInfo{} }
func (*MediaInfo) ProtoMessage()               {}
func (*MediaInfo) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

func (m *MediaInfo) GetMIME() *MIME {
	if m != nil {
		return m.MIME
	}
	return nil
}

type MediaInfosRequest struct {
	MediaIDs []string `protobuf:"bytes,1,rep,name=media_ids" json:"media_ids,omitempty"`
}

func (m *MediaInfosRequest) Reset()                    { *m = MediaInfosRequest{} }
func (*MediaInfosRequest) ProtoMessage()               {}
func (*MediaInfosRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type MediaInfosResponse struct {
	MediaInfos map[string]*MediaInfo `protobuf:"bytes,1,rep,name=media_infos" json:"media_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MediaInfosResponse) Reset()                    { *m = MediaInfosResponse{} }
func (*MediaInfosResponse) ProtoMessage()               {}
func (*MediaInfosResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

func (m *MediaInfosResponse) GetMediaInfos() map[string]*MediaInfo {
	if m != nil {
		return m.MediaInfos
	}
	return nil
}

type ClaimMediaRequest struct {
	MediaIDs  []string       `protobuf:"bytes,1,rep,name=media_ids" json:"media_ids,omitempty"`
	OwnerType MediaOwnerType `protobuf:"varint,2,opt,name=owner_type,proto3,enum=media.MediaOwnerType" json:"owner_type,omitempty"`
	OwnerID   string         `protobuf:"bytes,3,opt,name=owner_id,proto3" json:"owner_id,omitempty"`
}

func (m *ClaimMediaRequest) Reset()                    { *m = ClaimMediaRequest{} }
func (*ClaimMediaRequest) ProtoMessage()               {}
func (*ClaimMediaRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type ClaimMediaResponse struct {
}

func (m *ClaimMediaResponse) Reset()                    { *m = ClaimMediaResponse{} }
func (*ClaimMediaResponse) ProtoMessage()               {}
func (*ClaimMediaResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type CloneMediaRequest struct {
	MediaID   string         `protobuf:"bytes,1,opt,name=media_id,proto3" json:"media_id,omitempty"`
	OwnerType MediaOwnerType `protobuf:"varint,2,opt,name=owner_type,proto3,enum=media.MediaOwnerType" json:"owner_type,omitempty"`
	OwnerID   string         `protobuf:"bytes,3,opt,name=owner_id,proto3" json:"owner_id,omitempty"`
}

func (m *CloneMediaRequest) Reset()                    { *m = CloneMediaRequest{} }
func (*CloneMediaRequest) ProtoMessage()               {}
func (*CloneMediaRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

type CloneMediaResponse struct {
	MediaInfo *MediaInfo `protobuf:"bytes,1,opt,name=media_info" json:"media_info,omitempty"`
}

func (m *CloneMediaResponse) Reset()                    { *m = CloneMediaResponse{} }
func (*CloneMediaResponse) ProtoMessage()               {}
func (*CloneMediaResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

func (m *CloneMediaResponse) GetMediaInfo() *MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

type UpdateMediaRequest struct {
	MediaID string `protobuf:"bytes,1,opt,name=media_id,proto3" json:"media_id,omitempty"`
	Public  bool   `protobuf:"varint,2,opt,name=public,proto3" json:"public,omitempty"`
}

func (m *UpdateMediaRequest) Reset()                    { *m = UpdateMediaRequest{} }
func (*UpdateMediaRequest) ProtoMessage()               {}
func (*UpdateMediaRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

type UpdateMediaResponse struct {
	MediaInfo *MediaInfo `protobuf:"bytes,1,opt,name=media_info" json:"media_info,omitempty"`
}

func (m *UpdateMediaResponse) Reset()                    { *m = UpdateMediaResponse{} }
func (*UpdateMediaResponse) ProtoMessage()               {}
func (*UpdateMediaResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

func (m *UpdateMediaResponse) GetMediaInfo() *MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

type CanAccessRequest struct {
	MediaIDs  []string `protobuf:"bytes,1,rep,name=media_id" json:"media_id,omitempty"`
	AccountID string   `protobuf:"bytes,2,opt,name=account_id,proto3" json:"account_id,omitempty"`
}

func (m *CanAccessRequest) Reset()                    { *m = CanAccessRequest{} }
func (*CanAccessRequest) ProtoMessage()               {}
func (*CanAccessRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

type CanAccessResponse struct {
	CanAccess bool `protobuf:"varint,1,opt,name=can_access,proto3" json:"can_access,omitempty"`
}

func (m *CanAccessResponse) Reset()                    { *m = CanAccessResponse{} }
func (*CanAccessResponse) ProtoMessage()               {}
func (*CanAccessResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

func init() {
	proto.RegisterType((*MIME)(nil), "media.MIME")
	proto.RegisterType((*MediaInfo)(nil), "media.MediaInfo")
	proto.RegisterType((*MediaInfosRequest)(nil), "media.MediaInfosRequest")
	proto.RegisterType((*MediaInfosResponse)(nil), "media.MediaInfosResponse")
	proto.RegisterType((*ClaimMediaRequest)(nil), "media.ClaimMediaRequest")
	proto.RegisterType((*ClaimMediaResponse)(nil), "media.ClaimMediaResponse")
	proto.RegisterType((*CloneMediaRequest)(nil), "media.CloneMediaRequest")
	proto.RegisterType((*CloneMediaResponse)(nil), "media.CloneMediaResponse")
	proto.RegisterType((*UpdateMediaRequest)(nil), "media.UpdateMediaRequest")
	proto.RegisterType((*UpdateMediaResponse)(nil), "media.UpdateMediaResponse")
	proto.RegisterType((*CanAccessRequest)(nil), "media.CanAccessRequest")
	proto.RegisterType((*CanAccessResponse)(nil), "media.CanAccessResponse")
	proto.RegisterEnum("media.MediaOwnerType", MediaOwnerType_name, MediaOwnerType_value)
}
func (x MediaOwnerType) String() string {
	s, ok := MediaOwnerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MIME) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MIME)
	if !ok {
		that2, ok := that.(MIME)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Subtype != that1.Subtype {
		return false
	}
	return true
}
func (this *MediaInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MediaInfo)
	if !ok {
		that2, ok := that.(MediaInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.ThumbURL != that1.ThumbURL {
		return false
	}
	if this.OwnerID != that1.OwnerID {
		return false
	}
	if this.OwnerType != that1.OwnerType {
		return false
	}
	if this.SizeBytes != that1.SizeBytes {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	if !this.MIME.Equal(that1.MIME) {
		return false
	}
	if this.Public != that1.Public {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *MediaInfosRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MediaInfosRequest)
	if !ok {
		that2, ok := that.(MediaInfosRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.MediaIDs) != len(that1.MediaIDs) {
		return false
	}
	for i := range this.MediaIDs {
		if this.MediaIDs[i] != that1.MediaIDs[i] {
			return false
		}
	}
	return true
}
func (this *MediaInfosResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MediaInfosResponse)
	if !ok {
		that2, ok := that.(MediaInfosResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.MediaInfos) != len(that1.MediaInfos) {
		return false
	}
	for i := range this.MediaInfos {
		if !this.MediaInfos[i].Equal(that1.MediaInfos[i]) {
			return false
		}
	}
	return true
}
func (this *ClaimMediaRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClaimMediaRequest)
	if !ok {
		that2, ok := that.(ClaimMediaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.MediaIDs) != len(that1.MediaIDs) {
		return false
	}
	for i := range this.MediaIDs {
		if this.MediaIDs[i] != that1.MediaIDs[i] {
			return false
		}
	}
	if this.OwnerType != that1.OwnerType {
		return false
	}
	if this.OwnerID != that1.OwnerID {
		return false
	}
	return true
}
func (this *ClaimMediaResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClaimMediaResponse)
	if !ok {
		that2, ok := that.(ClaimMediaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CloneMediaRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloneMediaRequest)
	if !ok {
		that2, ok := that.(CloneMediaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.OwnerType != that1.OwnerType {
		return false
	}
	if this.OwnerID != that1.OwnerID {
		return false
	}
	return true
}
func (this *CloneMediaResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloneMediaResponse)
	if !ok {
		that2, ok := that.(CloneMediaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MediaInfo.Equal(that1.MediaInfo) {
		return false
	}
	return true
}
func (this *UpdateMediaRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMediaRequest)
	if !ok {
		that2, ok := that.(UpdateMediaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.Public != that1.Public {
		return false
	}
	return true
}
func (this *UpdateMediaResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMediaResponse)
	if !ok {
		that2, ok := that.(UpdateMediaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MediaInfo.Equal(that1.MediaInfo) {
		return false
	}
	return true
}
func (this *CanAccessRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CanAccessRequest)
	if !ok {
		that2, ok := that.(CanAccessRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.MediaIDs) != len(that1.MediaIDs) {
		return false
	}
	for i := range this.MediaIDs {
		if this.MediaIDs[i] != that1.MediaIDs[i] {
			return false
		}
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *CanAccessResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CanAccessResponse)
	if !ok {
		that2, ok := that.(CanAccessResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CanAccess != that1.CanAccess {
		return false
	}
	return true
}
func (this *MIME) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&media.MIME{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Subtype: "+fmt.Sprintf("%#v", this.Subtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&media.MediaInfo{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "ThumbURL: "+fmt.Sprintf("%#v", this.ThumbURL)+",\n")
	s = append(s, "OwnerID: "+fmt.Sprintf("%#v", this.OwnerID)+",\n")
	s = append(s, "OwnerType: "+fmt.Sprintf("%#v", this.OwnerType)+",\n")
	s = append(s, "SizeBytes: "+fmt.Sprintf("%#v", this.SizeBytes)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	if this.MIME != nil {
		s = append(s, "MIME: "+fmt.Sprintf("%#v", this.MIME)+",\n")
	}
	s = append(s, "Public: "+fmt.Sprintf("%#v", this.Public)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaInfosRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&media.MediaInfosRequest{")
	s = append(s, "MediaIDs: "+fmt.Sprintf("%#v", this.MediaIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaInfosResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&media.MediaInfosResponse{")
	keysForMediaInfos := make([]string, 0, len(this.MediaInfos))
	for k, _ := range this.MediaInfos {
		keysForMediaInfos = append(keysForMediaInfos, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMediaInfos)
	mapStringForMediaInfos := "map[string]*MediaInfo{"
	for _, k := range keysForMediaInfos {
		mapStringForMediaInfos += fmt.Sprintf("%#v: %#v,", k, this.MediaInfos[k])
	}
	mapStringForMediaInfos += "}"
	if this.MediaInfos != nil {
		s = append(s, "MediaInfos: "+mapStringForMediaInfos+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClaimMediaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&media.ClaimMediaRequest{")
	s = append(s, "MediaIDs: "+fmt.Sprintf("%#v", this.MediaIDs)+",\n")
	s = append(s, "OwnerType: "+fmt.Sprintf("%#v", this.OwnerType)+",\n")
	s = append(s, "OwnerID: "+fmt.Sprintf("%#v", this.OwnerID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClaimMediaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&media.ClaimMediaResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloneMediaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&media.CloneMediaRequest{")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "OwnerType: "+fmt.Sprintf("%#v", this.OwnerType)+",\n")
	s = append(s, "OwnerID: "+fmt.Sprintf("%#v", this.OwnerID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloneMediaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&media.CloneMediaResponse{")
	if this.MediaInfo != nil {
		s = append(s, "MediaInfo: "+fmt.Sprintf("%#v", this.MediaInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMediaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&media.UpdateMediaRequest{")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "Public: "+fmt.Sprintf("%#v", this.Public)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMediaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&media.UpdateMediaResponse{")
	if this.MediaInfo != nil {
		s = append(s, "MediaInfo: "+fmt.Sprintf("%#v", this.MediaInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CanAccessRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&media.CanAccessRequest{")
	s = append(s, "MediaIDs: "+fmt.Sprintf("%#v", this.MediaIDs)+",\n")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CanAccessResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&media.CanAccessResponse{")
	s = append(s, "CanAccess: "+fmt.Sprintf("%#v", this.CanAccess)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Media service

type MediaClient interface {
	CanAccess(ctx context.Context, in *CanAccessRequest, opts ...grpc.CallOption) (*CanAccessResponse, error)
	ClaimMedia(ctx context.Context, in *ClaimMediaRequest, opts ...grpc.CallOption) (*ClaimMediaResponse, error)
	CloneMedia(ctx context.Context, in *CloneMediaRequest, opts ...grpc.CallOption) (*CloneMediaResponse, error)
	MediaInfos(ctx context.Context, in *MediaInfosRequest, opts ...grpc.CallOption) (*MediaInfosResponse, error)
	UpdateMedia(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*UpdateMediaResponse, error)
}

type mediaClient struct {
	cc *grpc.ClientConn
}

func NewMediaClient(cc *grpc.ClientConn) MediaClient {
	return &mediaClient{cc}
}

func (c *mediaClient) CanAccess(ctx context.Context, in *CanAccessRequest, opts ...grpc.CallOption) (*CanAccessResponse, error) {
	out := new(CanAccessResponse)
	err := grpc.Invoke(ctx, "/media.Media/CanAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) ClaimMedia(ctx context.Context, in *ClaimMediaRequest, opts ...grpc.CallOption) (*ClaimMediaResponse, error) {
	out := new(ClaimMediaResponse)
	err := grpc.Invoke(ctx, "/media.Media/ClaimMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) CloneMedia(ctx context.Context, in *CloneMediaRequest, opts ...grpc.CallOption) (*CloneMediaResponse, error) {
	out := new(CloneMediaResponse)
	err := grpc.Invoke(ctx, "/media.Media/CloneMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) MediaInfos(ctx context.Context, in *MediaInfosRequest, opts ...grpc.CallOption) (*MediaInfosResponse, error) {
	out := new(MediaInfosResponse)
	err := grpc.Invoke(ctx, "/media.Media/MediaInfos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) UpdateMedia(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*UpdateMediaResponse, error) {
	out := new(UpdateMediaResponse)
	err := grpc.Invoke(ctx, "/media.Media/UpdateMedia", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Media service

type MediaServer interface {
	CanAccess(context.Context, *CanAccessRequest) (*CanAccessResponse, error)
	ClaimMedia(context.Context, *ClaimMediaRequest) (*ClaimMediaResponse, error)
	CloneMedia(context.Context, *CloneMediaRequest) (*CloneMediaResponse, error)
	MediaInfos(context.Context, *MediaInfosRequest) (*MediaInfosResponse, error)
	UpdateMedia(context.Context, *UpdateMediaRequest) (*UpdateMediaResponse, error)
}

func RegisterMediaServer(s *grpc.Server, srv MediaServer) {
	s.RegisterService(&_Media_serviceDesc, srv)
}

func _Media_CanAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).CanAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.Media/CanAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).CanAccess(ctx, req.(*CanAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_ClaimMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).ClaimMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.Media/ClaimMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).ClaimMedia(ctx, req.(*ClaimMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_CloneMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).CloneMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.Media/CloneMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).CloneMedia(ctx, req.(*CloneMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_MediaInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).MediaInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.Media/MediaInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).MediaInfos(ctx, req.(*MediaInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_UpdateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).UpdateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.Media/UpdateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).UpdateMedia(ctx, req.(*UpdateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Media_serviceDesc = grpc.ServiceDesc{
	ServiceName: "media.Media",
	HandlerType: (*MediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanAccess",
			Handler:    _Media_CanAccess_Handler,
		},
		{
			MethodName: "ClaimMedia",
			Handler:    _Media_ClaimMedia_Handler,
		},
		{
			MethodName: "CloneMedia",
			Handler:    _Media_CloneMedia_Handler,
		},
		{
			MethodName: "MediaInfos",
			Handler:    _Media_MediaInfos_Handler,
		},
		{
			MethodName: "UpdateMedia",
			Handler:    _Media_UpdateMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorSvc,
}

func (m *MIME) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MIME) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Type)))
		i += copy(data[i:], m.Type)
	}
	if len(m.Subtype) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Subtype)))
		i += copy(data[i:], m.Subtype)
	}
	return i, nil
}

func (m *MediaInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MediaInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.URL) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	if len(m.ThumbURL) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThumbURL)))
		i += copy(data[i:], m.ThumbURL)
	}
	if len(m.OwnerID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OwnerID)))
		i += copy(data[i:], m.OwnerID)
	}
	if m.OwnerType != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.OwnerType))
	}
	if m.SizeBytes != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.SizeBytes))
	}
	if m.DurationNS != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationNS))
	}
	if m.MIME != nil {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(m.MIME.Size()))
		n1, err := m.MIME.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Public {
		data[i] = 0x48
		i++
		if m.Public {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *MediaInfosRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MediaInfosRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *MediaInfosResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MediaInfosResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaInfos) > 0 {
		for k, _ := range m.MediaInfos {
			data[i] = 0xa
			i++
			v := m.MediaInfos[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + msgSize + sovSvc(uint64(msgSize))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(v.Size()))
			n2, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	return i, nil
}

func (m *ClaimMediaRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClaimMediaRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.OwnerType != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.OwnerType))
	}
	if len(m.OwnerID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OwnerID)))
		i += copy(data[i:], m.OwnerID)
	}
	return i, nil
}

func (m *ClaimMediaResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClaimMediaResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CloneMediaRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CloneMediaRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.OwnerType != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.OwnerType))
	}
	if len(m.OwnerID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OwnerID)))
		i += copy(data[i:], m.OwnerID)
	}
	return i, nil
}

func (m *CloneMediaResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CloneMediaResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MediaInfo != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.MediaInfo.Size()))
		n3, err := m.MediaInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *UpdateMediaRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateMediaRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.Public {
		data[i] = 0x10
		i++
		if m.Public {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateMediaResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateMediaResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MediaInfo != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.MediaInfo.Size()))
		n4, err := m.MediaInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CanAccessRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CanAccessRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.AccountID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AccountID)))
		i += copy(data[i:], m.AccountID)
	}
	return i, nil
}

func (m *CanAccessResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CanAccessResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CanAccess {
		data[i] = 0x8
		i++
		if m.CanAccess {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *MIME) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Subtype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MediaInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThumbURL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OwnerID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.OwnerType != 0 {
		n += 1 + sovSvc(uint64(m.OwnerType))
	}
	if m.SizeBytes != 0 {
		n += 1 + sovSvc(uint64(m.SizeBytes))
	}
	if m.DurationNS != 0 {
		n += 1 + sovSvc(uint64(m.DurationNS))
	}
	if m.MIME != nil {
		l = m.MIME.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Public {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MediaInfosRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *MediaInfosResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.MediaInfos) > 0 {
		for k, v := range m.MediaInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + l + sovSvc(uint64(l))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClaimMediaRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.OwnerType != 0 {
		n += 1 + sovSvc(uint64(m.OwnerType))
	}
	l = len(m.OwnerID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ClaimMediaResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CloneMediaRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.OwnerType != 0 {
		n += 1 + sovSvc(uint64(m.OwnerType))
	}
	l = len(m.OwnerID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CloneMediaResponse) Size() (n int) {
	var l int
	_ = l
	if m.MediaInfo != nil {
		l = m.MediaInfo.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateMediaRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Public {
		n += 2
	}
	return n
}

func (m *UpdateMediaResponse) Size() (n int) {
	var l int
	_ = l
	if m.MediaInfo != nil {
		l = m.MediaInfo.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CanAccessRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MediaIDs) > 0 {
		for _, s := range m.MediaIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CanAccessResponse) Size() (n int) {
	var l int
	_ = l
	if m.CanAccess {
		n += 2
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MIME) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MIME{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Subtype:` + fmt.Sprintf("%v", this.Subtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaInfo{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`ThumbURL:` + fmt.Sprintf("%v", this.ThumbURL) + `,`,
		`OwnerID:` + fmt.Sprintf("%v", this.OwnerID) + `,`,
		`OwnerType:` + fmt.Sprintf("%v", this.OwnerType) + `,`,
		`SizeBytes:` + fmt.Sprintf("%v", this.SizeBytes) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`MIME:` + strings.Replace(fmt.Sprintf("%v", this.MIME), "MIME", "MIME", 1) + `,`,
		`Public:` + fmt.Sprintf("%v", this.Public) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaInfosRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaInfosRequest{`,
		`MediaIDs:` + fmt.Sprintf("%v", this.MediaIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaInfosResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForMediaInfos := make([]string, 0, len(this.MediaInfos))
	for k, _ := range this.MediaInfos {
		keysForMediaInfos = append(keysForMediaInfos, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMediaInfos)
	mapStringForMediaInfos := "map[string]*MediaInfo{"
	for _, k := range keysForMediaInfos {
		mapStringForMediaInfos += fmt.Sprintf("%v: %v,", k, this.MediaInfos[k])
	}
	mapStringForMediaInfos += "}"
	s := strings.Join([]string{`&MediaInfosResponse{`,
		`MediaInfos:` + mapStringForMediaInfos + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimMediaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimMediaRequest{`,
		`MediaIDs:` + fmt.Sprintf("%v", this.MediaIDs) + `,`,
		`OwnerType:` + fmt.Sprintf("%v", this.OwnerType) + `,`,
		`OwnerID:` + fmt.Sprintf("%v", this.OwnerID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimMediaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimMediaResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CloneMediaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloneMediaRequest{`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`OwnerType:` + fmt.Sprintf("%v", this.OwnerType) + `,`,
		`OwnerID:` + fmt.Sprintf("%v", this.OwnerID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloneMediaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloneMediaResponse{`,
		`MediaInfo:` + strings.Replace(fmt.Sprintf("%v", this.MediaInfo), "MediaInfo", "MediaInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMediaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMediaRequest{`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`Public:` + fmt.Sprintf("%v", this.Public) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMediaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMediaResponse{`,
		`MediaInfo:` + strings.Replace(fmt.Sprintf("%v", this.MediaInfo), "MediaInfo", "MediaInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CanAccessRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanAccessRequest{`,
		`MediaIDs:` + fmt.Sprintf("%v", this.MediaIDs) + `,`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CanAccessResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CanAccessResponse{`,
		`CanAccess:` + fmt.Sprintf("%v", this.CanAccess) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MIME) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MIME: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MIME: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbURL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerType", wireType)
			}
			m.OwnerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OwnerType |= (MediaOwnerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SizeBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIME", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MIME == nil {
				m.MIME = &MIME{}
			}
			if err := m.MIME.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaInfosRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIDs = append(m.MediaIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaInfosResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &MediaInfo{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.MediaInfos == nil {
				m.MediaInfos = make(map[string]*MediaInfo)
			}
			m.MediaInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimMediaRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIDs = append(m.MediaIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerType", wireType)
			}
			m.OwnerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OwnerType |= (MediaOwnerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimMediaResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimMediaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimMediaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneMediaRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerType", wireType)
			}
			m.OwnerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.OwnerType |= (MediaOwnerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneMediaResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneMediaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneMediaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MediaInfo == nil {
				m.MediaInfo = &MediaInfo{}
			}
			if err := m.MediaInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMediaRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMediaResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMediaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMediaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MediaInfo == nil {
				m.MediaInfo = &MediaInfo{}
			}
			if err := m.MediaInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanAccessRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanAccessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanAccessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIDs = append(m.MediaIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanAccessResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanAccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanAccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanAccess", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanAccess = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc.proto", fileDescriptorSvc) }

var fileDescriptorSvc = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x4d, 0xaf, 0xdb, 0x44,
	0x14, 0x7d, 0xe3, 0x7c, 0xd9, 0xd7, 0xaf, 0xaf, 0xce, 0xd0, 0x82, 0x89, 0x54, 0x3b, 0xb8, 0x20,
	0x52, 0x04, 0xaf, 0x52, 0x60, 0x51, 0x15, 0xa9, 0x92, 0x13, 0x5b, 0xc1, 0xa2, 0x71, 0x50, 0xe2,
	0xb4, 0x7a, 0x6c, 0x2c, 0xc7, 0x71, 0x5f, 0x2d, 0x5e, 0xec, 0x10, 0xdb, 0x45, 0x41, 0x08, 0xf1,
	0x13, 0xd8, 0xb2, 0x63, 0x89, 0xc4, 0x1f, 0x61, 0xd9, 0x15, 0x62, 0x15, 0xf1, 0xcc, 0x86, 0x65,
	0x7f, 0x02, 0x9a, 0xb1, 0x93, 0x38, 0x1f, 0x42, 0x54, 0x62, 0x17, 0x9f, 0x7b, 0xe7, 0xcc, 0x99,
	0x73, 0xcf, 0x4c, 0x80, 0x8b, 0x5e, 0xb8, 0xe7, 0xf3, 0x45, 0x18, 0x87, 0xb8, 0x32, 0xf3, 0xa6,
	0xbe, 0xd3, 0xf8, 0xe8, 0xd2, 0x8f, 0x9f, 0x27, 0x93, 0x73, 0x37, 0x9c, 0xdd, 0xbf, 0x0c, 0x2f,
	0xc3, 0xfb, 0xb4, 0x3a, 0x49, 0x9e, 0xd1, 0x2f, 0xfa, 0x41, 0x7f, 0x65, 0xab, 0x94, 0xf7, 0xa0,
	0xdc, 0x37, 0xfa, 0x3a, 0x3e, 0x85, 0x72, 0xbc, 0x9c, 0x7b, 0x22, 0x6a, 0xa2, 0x16, 0x87, 0x6f,
	0x42, 0x2d, 0x4a, 0x26, 0x14, 0x60, 0x08, 0xa0, 0xfc, 0xca, 0x00, 0xd7, 0x27, 0xfc, 0x46, 0xf0,
	0x2c, 0xc4, 0x18, 0x18, 0x7f, 0x9a, 0xb5, 0x76, 0xaa, 0xe9, 0x4a, 0x66, 0x0c, 0x0d, 0xdf, 0x82,
	0x52, 0xb2, 0xb8, 0xca, 0xda, 0x3b, 0xb5, 0x74, 0x25, 0x97, 0xc6, 0xc3, 0xc7, 0x58, 0x06, 0x2e,
	0x7e, 0x9e, 0xcc, 0x26, 0x36, 0xa9, 0x95, 0x68, 0xed, 0x34, 0x5d, 0xc9, 0xac, 0x45, 0x40, 0xd2,
	0x70, 0x07, 0xd8, 0xf0, 0x9b, 0xc0, 0x5b, 0xd8, 0xfe, 0x54, 0x2c, 0xd3, 0x3a, 0x9f, 0xae, 0xe4,
	0xda, 0x80, 0x60, 0x86, 0x86, 0x1f, 0x00, 0x64, 0x65, 0xaa, 0xa5, 0xd2, 0x44, 0xad, 0xb3, 0xf6,
	0xed, 0x73, 0x7a, 0xd2, 0x73, 0xaa, 0x87, 0x36, 0x5a, 0xcb, 0xb9, 0xd7, 0xb9, 0x91, 0xae, 0x64,
	0x6e, 0xf3, 0x89, 0x31, 0x40, 0xe4, 0x7f, 0xeb, 0xd9, 0x93, 0x65, 0xec, 0x45, 0x62, 0xb5, 0x89,
	0x5a, 0x65, 0x7c, 0x17, 0xf8, 0x69, 0xb2, 0x70, 0x62, 0x3f, 0x0c, 0xec, 0x20, 0x12, 0x6b, 0x04,
	0xec, 0x9c, 0xa5, 0x2b, 0x19, 0xb4, 0x1c, 0x36, 0x47, 0xf8, 0x2e, 0x94, 0x67, 0xfe, 0xcc, 0x13,
	0xd9, 0x26, 0x6a, 0xf1, 0x6d, 0x7e, 0xbd, 0x99, 0xd1, 0xd7, 0x3b, 0x6c, 0xba, 0x92, 0x33, 0xbb,
	0xce, 0xa0, 0x3a, 0x4f, 0x26, 0x57, 0xbe, 0x2b, 0x72, 0x4d, 0xd4, 0x62, 0x89, 0x7d, 0x81, 0x33,
	0xf3, 0x44, 0xa0, 0x6e, 0x7d, 0x02, 0xf5, 0x8d, 0x59, 0xd1, 0xd0, 0xfb, 0x3a, 0xf1, 0xa2, 0x98,
	0x58, 0x41, 0xa9, 0x6c, 0x7f, 0x1a, 0x89, 0xa8, 0x59, 0x5a, 0x5b, 0x91, 0x75, 0x6a, 0x91, 0xf2,
	0x13, 0x02, 0x5c, 0x5c, 0x16, 0xcd, 0xc3, 0x20, 0xf2, 0xf0, 0x23, 0xe0, 0xf3, 0x75, 0x04, 0xa6,
	0x2b, 0xf9, 0xf6, 0xbd, 0xa2, 0x07, 0x3b, 0xfd, 0x05, 0x48, 0x0f, 0xe2, 0xc5, 0xb2, 0xd1, 0x85,
	0x9b, 0x7b, 0x10, 0xe6, 0xa1, 0xf4, 0x95, 0xb7, 0xcc, 0x67, 0x2d, 0x43, 0xe5, 0x85, 0x73, 0x95,
	0x64, 0x93, 0xe6, 0xdb, 0xc2, 0x3e, 0xf3, 0x43, 0xe6, 0x01, 0x52, 0xbe, 0x87, 0x7a, 0xf7, 0xca,
	0xf1, 0x67, 0x14, 0xfd, 0xaf, 0x27, 0xc2, 0xf7, 0x76, 0xa6, 0xc7, 0xfc, 0xcb, 0xf4, 0x76, 0x72,
	0x50, 0x3a, 0xc8, 0x81, 0x72, 0x0b, 0x70, 0x71, 0xff, 0xec, 0xa8, 0xca, 0x77, 0x44, 0x55, 0x18,
	0x78, 0x3b, 0xaa, 0xee, 0x00, 0xbb, 0x56, 0x95, 0x47, 0x94, 0x32, 0xe5, 0xa2, 0xfe, 0x47, 0x4d,
	0x0f, 0x89, 0xa6, 0xed, 0xee, 0xf9, 0xb8, 0xde, 0x05, 0xd8, 0x8e, 0x8b, 0x0a, 0x38, 0xe2, 0xa9,
	0xd2, 0x05, 0x3c, 0x9e, 0x4f, 0x9d, 0xf8, 0xb5, 0xa4, 0x6f, 0x43, 0x47, 0x64, 0xb3, 0xca, 0xa7,
	0xf0, 0xc6, 0x0e, 0xc9, 0x6b, 0x29, 0x18, 0x83, 0xd0, 0x75, 0x02, 0xd5, 0x75, 0xbd, 0x68, 0x13,
	0x51, 0x69, 0x67, 0xff, 0xc3, 0x79, 0xbe, 0x03, 0xe0, 0xb8, 0x6e, 0x98, 0x04, 0x31, 0xe9, 0xc8,
	0xae, 0x3a, 0xbd, 0x76, 0x6a, 0x86, 0x1a, 0x9a, 0xf2, 0x3e, 0xd4, 0x0b, 0xb4, 0xb9, 0x22, 0x0c,
	0xe0, 0x3a, 0x81, 0xed, 0x50, 0x94, 0x2a, 0x62, 0x3f, 0xf8, 0x19, 0xc1, 0xd9, 0x9e, 0xdf, 0x6f,
	0x02, 0x1e, 0x3c, 0x35, 0xf5, 0xa1, 0x6d, 0x5d, 0x7c, 0xa1, 0xdb, 0x63, 0xf3, 0x73, 0x73, 0xf0,
	0xd4, 0x14, 0x4e, 0x30, 0x40, 0x55, 0x37, 0x2d, 0xc3, 0xba, 0x10, 0x10, 0x16, 0xe0, 0x74, 0x30,
	0xec, 0xa9, 0xa6, 0xf1, 0xa5, 0x6a, 0x19, 0x03, 0x53, 0x60, 0x48, 0xd5, 0xfa, 0x6c, 0xa8, 0xab,
	0x9a, 0x50, 0xc2, 0x3c, 0xd4, 0xd4, 0x6e, 0x77, 0x30, 0x36, 0x2d, 0xa1, 0x8c, 0x39, 0xa8, 0x3c,
	0x31, 0x46, 0x86, 0x25, 0x54, 0x70, 0x1d, 0x6e, 0x8c, 0xd4, 0x27, 0xba, 0x66, 0xf7, 0xf5, 0xd1,
	0x48, 0xed, 0xe9, 0x42, 0x95, 0x2c, 0x7b, 0xac, 0xf7, 0xd4, 0xee, 0x85, 0x50, 0xc3, 0xb7, 0xa1,
	0x6e, 0x0d, 0x8d, 0x5e, 0x4f, 0x1f, 0x16, 0x5a, 0xd8, 0xf6, 0xef, 0x0c, 0x54, 0xa8, 0x44, 0xfc,
	0x08, 0xb8, 0xcd, 0xa9, 0xf0, 0x5b, 0xb9, 0x97, 0xfb, 0xf6, 0x35, 0xc4, 0xc3, 0x42, 0x6e, 0x80,
	0x0a, 0xb0, 0x8d, 0x2f, 0xde, 0xf4, 0xed, 0xdf, 0xa8, 0xc6, 0xdb, 0x47, 0x2a, 0x45, 0x8a, 0x75,
	0xda, 0x0a, 0x14, 0x7b, 0xf1, 0x2f, 0x50, 0x1c, 0x44, 0x53, 0x05, 0xd8, 0xbe, 0x04, 0x1b, 0x8a,
	0x83, 0x97, 0x6a, 0x43, 0x71, 0xe4, 0x31, 0xd2, 0x80, 0x2f, 0x44, 0x0e, 0xaf, 0x3b, 0x0f, 0xb3,
	0xdc, 0x68, 0x1c, 0x2b, 0x65, 0x2c, 0x9d, 0x0f, 0x5f, 0x5e, 0x4b, 0xe8, 0x8f, 0x6b, 0xe9, 0xe4,
	0xd5, 0xb5, 0x84, 0x7e, 0x48, 0x25, 0xf4, 0x4b, 0x2a, 0xa1, 0xdf, 0x52, 0x09, 0xbd, 0x4c, 0x25,
	0xf4, 0x67, 0x2a, 0xa1, 0xbf, 0x53, 0xe9, 0xe4, 0x55, 0x2a, 0xa1, 0x1f, 0xff, 0x92, 0x4e, 0x26,
	0x55, 0xfa, 0x4f, 0xf5, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x0b, 0xe3, 0x51, 0xec,
	0x06, 0x00, 0x00,
}
