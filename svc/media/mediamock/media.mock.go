// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/media (interfaces: MediaClient)

package mediamock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	media "github.com/sprucehealth/backend/svc/media"
	grpc "google.golang.org/grpc"
)

// Mock of MediaClient interface
type MockMediaClient struct {
	ctrl     *gomock.Controller
	recorder *_MockMediaClientRecorder
}

// Recorder for MockMediaClient (not exported)
type _MockMediaClientRecorder struct {
	mock *MockMediaClient
}

func NewMockMediaClient(ctrl *gomock.Controller) *MockMediaClient {
	mock := &MockMediaClient{ctrl: ctrl}
	mock.recorder = &_MockMediaClientRecorder{mock}
	return mock
}

func (_m *MockMediaClient) EXPECT() *_MockMediaClientRecorder {
	return _m.recorder
}

func (_m *MockMediaClient) CanAccess(_param0 context.Context, _param1 *media.CanAccessRequest, _param2 ...grpc.CallOption) (*media.CanAccessResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CanAccess", _s...)
	ret0, _ := ret[0].(*media.CanAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMediaClientRecorder) CanAccess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CanAccess", _s...)
}

func (_m *MockMediaClient) ClaimMedia(_param0 context.Context, _param1 *media.ClaimMediaRequest, _param2 ...grpc.CallOption) (*media.ClaimMediaResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ClaimMedia", _s...)
	ret0, _ := ret[0].(*media.ClaimMediaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMediaClientRecorder) ClaimMedia(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClaimMedia", _s...)
}

func (_m *MockMediaClient) CloneMedia(_param0 context.Context, _param1 *media.CloneMediaRequest, _param2 ...grpc.CallOption) (*media.CloneMediaResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CloneMedia", _s...)
	ret0, _ := ret[0].(*media.CloneMediaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMediaClientRecorder) CloneMedia(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloneMedia", _s...)
}

func (_m *MockMediaClient) MediaInfos(_param0 context.Context, _param1 *media.MediaInfosRequest, _param2 ...grpc.CallOption) (*media.MediaInfosResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "MediaInfos", _s...)
	ret0, _ := ret[0].(*media.MediaInfosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMediaClientRecorder) MediaInfos(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MediaInfos", _s...)
}

func (_m *MockMediaClient) UpdateMedia(_param0 context.Context, _param1 *media.UpdateMediaRequest, _param2 ...grpc.CallOption) (*media.UpdateMediaResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateMedia", _s...)
	ret0, _ := ret[0].(*media.UpdateMediaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMediaClientRecorder) UpdateMedia(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMedia", _s...)
}
