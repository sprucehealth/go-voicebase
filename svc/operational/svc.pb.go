// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package operational is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		BlockAccountRequest
		NewOrgCreatedEvent
*/
package operational

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BlockAccountRequest struct {
	AccountID string `protobuf:"bytes,1,opt,name=account_id,proto3" json:"account_id,omitempty"`
}

func (m *BlockAccountRequest) Reset()                    { *m = BlockAccountRequest{} }
func (*BlockAccountRequest) ProtoMessage()               {}
func (*BlockAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type NewOrgCreatedEvent struct {
	InitialProviderEntityID string `protobuf:"bytes,1,opt,name=initial_provider_entity_id,proto3" json:"initial_provider_entity_id,omitempty"`
	OrgSupportThreadID      string `protobuf:"bytes,2,opt,name=org_support_thread_id,proto3" json:"org_support_thread_id,omitempty"`
	SpruceSupportThreadID   string `protobuf:"bytes,3,opt,name=spruce_support_thread_id,proto3" json:"spruce_support_thread_id,omitempty"`
	OrgCreated              int64  `protobuf:"varint,4,opt,name=org_created,proto3" json:"org_created,omitempty"`
}

func (m *NewOrgCreatedEvent) Reset()                    { *m = NewOrgCreatedEvent{} }
func (*NewOrgCreatedEvent) ProtoMessage()               {}
func (*NewOrgCreatedEvent) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

func init() {
	proto.RegisterType((*BlockAccountRequest)(nil), "operational.BlockAccountRequest")
	proto.RegisterType((*NewOrgCreatedEvent)(nil), "operational.NewOrgCreatedEvent")
}
func (this *BlockAccountRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BlockAccountRequest)
	if !ok {
		that2, ok := that.(BlockAccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AccountID != that1.AccountID {
		return false
	}
	return true
}
func (this *NewOrgCreatedEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewOrgCreatedEvent)
	if !ok {
		that2, ok := that.(NewOrgCreatedEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.InitialProviderEntityID != that1.InitialProviderEntityID {
		return false
	}
	if this.OrgSupportThreadID != that1.OrgSupportThreadID {
		return false
	}
	if this.SpruceSupportThreadID != that1.SpruceSupportThreadID {
		return false
	}
	if this.OrgCreated != that1.OrgCreated {
		return false
	}
	return true
}
func (this *BlockAccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&operational.BlockAccountRequest{")
	s = append(s, "AccountID: "+fmt.Sprintf("%#v", this.AccountID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewOrgCreatedEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&operational.NewOrgCreatedEvent{")
	s = append(s, "InitialProviderEntityID: "+fmt.Sprintf("%#v", this.InitialProviderEntityID)+",\n")
	s = append(s, "OrgSupportThreadID: "+fmt.Sprintf("%#v", this.OrgSupportThreadID)+",\n")
	s = append(s, "SpruceSupportThreadID: "+fmt.Sprintf("%#v", this.SpruceSupportThreadID)+",\n")
	s = append(s, "OrgCreated: "+fmt.Sprintf("%#v", this.OrgCreated)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *BlockAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.AccountID)))
		i += copy(dAtA[i:], m.AccountID)
	}
	return i, nil
}

func (m *NewOrgCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewOrgCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InitialProviderEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.InitialProviderEntityID)))
		i += copy(dAtA[i:], m.InitialProviderEntityID)
	}
	if len(m.OrgSupportThreadID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrgSupportThreadID)))
		i += copy(dAtA[i:], m.OrgSupportThreadID)
	}
	if len(m.SpruceSupportThreadID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SpruceSupportThreadID)))
		i += copy(dAtA[i:], m.SpruceSupportThreadID)
	}
	if m.OrgCreated != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.OrgCreated))
	}
	return i, nil
}

func encodeFixed64Svc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BlockAccountRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *NewOrgCreatedEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.InitialProviderEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrgSupportThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SpruceSupportThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.OrgCreated != 0 {
		n += 1 + sovSvc(uint64(m.OrgCreated))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BlockAccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockAccountRequest{`,
		`AccountID:` + fmt.Sprintf("%v", this.AccountID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewOrgCreatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewOrgCreatedEvent{`,
		`InitialProviderEntityID:` + fmt.Sprintf("%v", this.InitialProviderEntityID) + `,`,
		`OrgSupportThreadID:` + fmt.Sprintf("%v", this.OrgSupportThreadID) + `,`,
		`SpruceSupportThreadID:` + fmt.Sprintf("%v", this.SpruceSupportThreadID) + `,`,
		`OrgCreated:` + fmt.Sprintf("%v", this.OrgCreated) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BlockAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewOrgCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewOrgCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewOrgCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialProviderEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialProviderEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgSupportThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgSupportThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpruceSupportThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpruceSupportThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgCreated", wireType)
			}
			m.OrgCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgCreated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc.proto", fileDescriptorSvc) }

var fileDescriptorSvc = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0x02, 0x31,
	0x18, 0xc7, 0xa9, 0x18, 0x13, 0x4a, 0x5c, 0x4a, 0x50, 0xc4, 0xa4, 0x87, 0x4c, 0x0c, 0x0a, 0x83,
	0x31, 0x31, 0x71, 0x30, 0x22, 0x0c, 0xb7, 0x88, 0x11, 0xf7, 0xcb, 0xd1, 0xab, 0x47, 0x23, 0xde,
	0x77, 0xf6, 0xbe, 0xc3, 0xb8, 0xf9, 0x08, 0x3e, 0x86, 0x8f, 0xe2, 0xc8, 0xe8, 0x74, 0xf1, 0xea,
	0xe2, 0xc8, 0x23, 0x18, 0x7a, 0x24, 0x26, 0xc6, 0xad, 0xff, 0xfe, 0x7f, 0xbf, 0x36, 0xdf, 0x47,
	0x2b, 0xc9, 0x5c, 0x74, 0x63, 0x0d, 0x08, 0xac, 0x0a, 0xb1, 0xd4, 0x3e, 0x2a, 0x88, 0xfc, 0x59,
	0xf3, 0x28, 0x54, 0x38, 0x4d, 0x27, 0x5d, 0x01, 0x0f, 0xbd, 0x10, 0x42, 0xe8, 0x59, 0x66, 0x92,
	0xde, 0xd9, 0x64, 0x83, 0x3d, 0x15, 0x6e, 0xfb, 0x94, 0xd6, 0xfa, 0x33, 0x10, 0xf7, 0x17, 0x42,
	0x40, 0x1a, 0xe1, 0x8d, 0x7c, 0x4c, 0x65, 0x82, 0xec, 0x80, 0x52, 0xbf, 0xb8, 0xf1, 0x54, 0xd0,
	0x20, 0x2d, 0xd2, 0xa9, 0xf4, 0xb7, 0x4d, 0xe6, 0x54, 0xd6, 0x9c, 0x3b, 0x68, 0x67, 0x84, 0xb2,
	0x2b, 0xf9, 0x34, 0xd2, 0xe1, 0xa5, 0x96, 0x3e, 0xca, 0x60, 0x38, 0x97, 0x11, 0xb2, 0x73, 0xda,
	0x54, 0x91, 0x42, 0xe5, 0xcf, 0xbc, 0x58, 0xc3, 0x5c, 0x05, 0x52, 0x7b, 0x32, 0x42, 0x85, 0xcf,
	0xbf, 0x2f, 0xed, 0x9b, 0xcc, 0xd9, 0x75, 0x0b, 0xea, 0x7a, 0x0d, 0x0d, 0x2d, 0xe3, 0x0e, 0xd8,
	0x09, 0xad, 0x83, 0x0e, 0xbd, 0x24, 0x8d, 0x63, 0xd0, 0xe8, 0xe1, 0x54, 0x4b, 0x3f, 0x58, 0xb9,
	0x1b, 0xd6, 0xdd, 0x31, 0x99, 0xc3, 0x46, 0x3a, 0x1c, 0x17, 0xfd, 0xad, 0xad, 0xdd, 0x01, 0x3b,
	0xa3, 0x8d, 0x24, 0xd6, 0xa9, 0x90, 0xff, 0x98, 0x65, 0x6b, 0xee, 0x99, 0xcc, 0xa9, 0x8f, 0x2d,
	0xf3, 0x57, 0xae, 0xd1, 0xea, 0xea, 0x4f, 0x51, 0x0c, 0xd2, 0xd8, 0x6c, 0x91, 0x4e, 0xb9, 0x7f,
	0xb8, 0xc8, 0x39, 0xf9, 0xc8, 0x79, 0x69, 0x99, 0x73, 0xf2, 0x62, 0x38, 0x79, 0x33, 0x9c, 0xbc,
	0x1b, 0x4e, 0x16, 0x86, 0x93, 0x4f, 0xc3, 0xc9, 0xb7, 0xe1, 0xa5, 0xa5, 0xe1, 0xe4, 0xf5, 0x8b,
	0x97, 0x26, 0x5b, 0x76, 0x9f, 0xc7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33, 0x28, 0x0a, 0xac,
	0x98, 0x01, 0x00, 0x00,
}
