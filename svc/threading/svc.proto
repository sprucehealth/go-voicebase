syntax = "proto3";

package threading;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Models

message Iterator {
	string start_cursor = 1;
	string end_cursor = 2;
	enum Direction {
		ITERATOR_DIRECTION_FROM_START = 0;
		ITERATOR_DIRECTION_FROM_END = 1;
	}
	Direction direction = 3;
	uint32 count = 4;
}

enum ThreadType {
	THREAD_TYPE_INVALID = 0;
	THREAD_TYPE_EXTERNAL = 1;
	THREAD_TYPE_TEAM = 2;
	THREAD_TYPE_SETUP = 3;
	THREAD_TYPE_SUPPORT = 4;
	THREAD_TYPE_LEGACY_TEAM = 5;
	THREAD_TYPE_SECURE_EXTERNAL = 6;
}

enum ThreadOrigin {
	THREAD_ORIGIN_UNKNOWN = 0;
	THREAD_ORIGIN_PATIENT_INVITE = 1;
	THREAD_ORIGIN_ORGANIZATION_CODE = 2;
	THREAD_ORIGIN_SYNC = 3;
}

message Thread {
	string id = 1 [(gogoproto.customname) = "ID"];
	string organization_id = 2 [(gogoproto.customname) = "OrganizationID"];
	string primary_entity_id = 3 [(gogoproto.customname) = "PrimaryEntityID"];
	uint64 last_message_timestamp = 5;
	string last_message_summary = 6;
    bool unread = 7;
	repeated Endpoint last_primary_entity_endpoints = 8;
	uint64 created_timestamp = 9;
	int32 message_count = 10;
	ThreadType type = 11;
	string system_title = 12;
	string user_title = 13;
	bool unread_reference = 14;
	ThreadOrigin origin = 15;
}

message Member {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
}

message ThreadItem {
	string id = 1 [(gogoproto.customname) = "ID"];
	uint64 timestamp = 2;
	string actor_entity_id = 3 [(gogoproto.customname) = "ActorEntityID"];
	bool internal = 4; // item is internal to the organization (not seen by external entities)
	enum Type {
		THREAD_ITEM_TYPE_MESSAGE = 0;
		THREAD_ITEM_TYPE_MESSAGE_UPDATED = 1;
		THREAD_ITEM_TYPE_FOLLOWER_UPDATED = 2;
	}
	Type type = 5;
	oneof item {
		Message message = 10;
		MessageUpdated message_updated = 11;
		FollowerUpdated follower_updated = 12;
	}
	string thread_id = 6 [(gogoproto.customname) = "ThreadID"];
	string organization_id = 7 [(gogoproto.customname) = "OrganizationID"];
}

message ThreadItemViewDetails {
    string thread_item_id = 1 [(gogoproto.customname) = "ThreadItemID"];
    string entity_id = 2 [(gogoproto.customname) = "EntityID"];
    uint64 view_time = 3;
}

message Reference {
	enum Type {
		REFERENCE_TYPE_ENTITY = 0;
	}
	Type type = 1;
	string id = 2 [(gogoproto.customname) = "ID"];
}

message Message {
	string text = 1;
	repeated Attachment attachments = 2;
	enum Status {
		MESSAGE_STATUS_NORMAL = 0;
		MESSAGE_STATUS_DELETED = 1;
	}
	Status status = 3;
	Endpoint source = 4;
	repeated Endpoint destinations = 5;
	uint64 edited_timestamp = 6;
	string editor_entity_id = 7 [(gogoproto.customname) = "EditorEntityID"];
	string title = 8;
	repeated Reference text_refs = 9; // References from the message body text
	string summary = 10;
}

message Endpoint {
	enum Channel {
		ENDPOINT_CHANNEL_APP = 0;
		ENDPOINT_CHANNEL_SMS = 1;
		ENDPOINT_CHANNEL_VOICE = 2;
		ENDPOINT_CHANNEL_EMAIL = 3;
	}
	Channel channel = 1;
	string id = 2 [(gogoproto.customname) = "ID"];
}

message MessageUpdated {
	string thread_item_id = 1 [(gogoproto.customname) = "ThreadItemID"];
	string actor_entity_id = 2 [(gogoproto.customname) = "ActorEntityID"];
	Message message = 3;
}

message FollowerUpdated {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
}

message SavedQuery {
	string id = 1 [(gogoproto.customname) = "ID"];
	Query query = 3;
	string title = 4;
	uint32 unread = 5;
	uint32 total = 6;
	int32 ordinal = 7;
	string entity_id = 8 [(gogoproto.customname) = "EntityID"];
	bool notifications_enabled = 9;
}

message Query {
	// All expressions are required to match (i.e. AND)
	repeated Expr expressions = 1;
}

message Expr {
	enum Flag {
		EXPR_FLAG_INVALID = 0;
		EXPR_FLAG_UNREAD = 1;
		EXPR_FLAG_UNREAD_REFERENCE = 2;
		EXPR_FLAG_FOLLOWING = 3;
	}
	// This is separate from the top-level thread type to handle logical types like "patient"
	enum ThreadType {
		EXPR_THREAD_TYPE_INVALID = 0;
		EXPR_THREAD_TYPE_PATIENT = 1;
		EXPR_THREAD_TYPE_TEAM = 2;
	}

	bool not = 1;
	oneof value {
		string token = 2;
		Flag flag = 3;
		ThreadType thread_type = 4;
	}
}

message Attachment {
	enum Type {
		ATTACHMENT_TYPE_IMAGE = 0;
		ATTACHMENT_TYPE_AUDIO = 1;
		ATTACHMENT_TYPE_GENERIC_URL = 2;
		ATTACHMENT_TYPE_VISIT = 3;
		ATTACHMENT_TYPE_CARE_PLAN = 4;
		ATTACHMENT_TYPE_VIDEO = 5;
		ATTACHMENT_TYPE_PAYMENT_REQUEST = 6;
	}
	Type type = 1;
	string title = 2;
	string mediaID = 3 [(gogoproto.customname) = "URL"];
	oneof data {
		ImageAttachment image = 10;
		AudioAttachment audio = 11;
		GenericURLAttachment generic_url = 12 [(gogoproto.customname) = "GenericURL"];
		VisitAttachment visit = 13;
		CarePlanAttachment care_plan = 14;
		VideoAttachment video = 15;
		PaymentRequestAttachment payment_request = 16;
	}
}

message ImageAttachment {
	string mimetype = 1;
	string media_id = 2 [(gogoproto.customname) = "MediaID"];
	uint32 width = 3;
	uint32 height = 4;
}

message VideoAttachment {
	string mimetype = 1;
	string mediaID = 2 [(gogoproto.customname) = "MediaID"];
	uint64 duration_ns = 4 [(gogoproto.customname) = "DurationNS"];
}

message AudioAttachment {
	string mimetype = 1;
	string media_id = 2 [(gogoproto.customname) = "MediaID"];
	uint64 duration_ns = 4 [(gogoproto.customname) = "DurationNS"];
}

message GenericURLAttachment {
	string mimetype = 1;
	string url = 2 [(gogoproto.customname) = "URL"];
}

message VisitAttachment {
	string visit_id = 1 [(gogoproto.customname) = "VisitID"];
	string visit_name = 2;
}

message CarePlanAttachment {
	string care_plan_id = 1 [(gogoproto.customname) = "CarePlanID"];
	string care_plan_name = 2;
}

message PaymentRequestAttachment {
	string payment_id = 1 [(gogoproto.customname) = "PaymentID"];
}

// pub-sub

message PublishedThreadItem {
	string uuid = 1 [(gogoproto.customname) = "UUID"];
	string organization_id = 2 [(gogoproto.customname) = "OrganizationID"];
	string thread_id = 3 [(gogoproto.customname) = "ThreadID"];
	string primary_entity_id = 4 [(gogoproto.customname) = "PrimaryEntityID"];
	ThreadItem item = 5;
}

// RPC

message PostMessageRequest {
	string uuid = 1 [(gogoproto.customname) = "UUID"];
	string thread_id = 2 [(gogoproto.customname) = "ThreadID"];
	string from_entity_id = 3 [(gogoproto.customname) = "FromEntityID"];
	Endpoint source = 4;
	repeated Endpoint destinations = 5;
	bool internal = 6;
	string text = 7;
	repeated Attachment attachments = 8;
	string title = 9;
	string summary = 10;
	bool dont_notify = 11;
}

message PostMessageResponse {
	ThreadItem item = 1;
	Thread thread = 2;
}

message MarkThreadsAsReadRequest {
	message ThreadWatermark {
		string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
		uint64 last_message_timestamp = 2; // the timestamp of the last message that the client has for the thread. If not provided, then current timestamp is used.
	}

	repeated ThreadWatermark thread_watermarks = 1;
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
	uint64 timestamp = 3; // optional, if not provided then defaults to current timestamp
	bool seen = 4; // indicates whether or not the user actually saw the threads being marked as read
}

message MarkThreadsAsReadResponse {
}

message ThreadItemsRequest {
	string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
	string viewer_entity_id = 2 [(gogoproto.customname) = "ViewerEntityID"];
	Iterator iterator = 3;
}

message ThreadItemEdge {
	ThreadItem item = 1;
	string cursor = 2;
}

message ThreadItemsResponse {
	repeated ThreadItemEdge edges = 1;
	bool has_more = 2;
}

message QueryThreadsRequest {
	// organization_id is deprecated and should no longer be sent. viewer_entity_id is now used for all queries.
	string deprecated_organization_id = 1 [(gogoproto.customname) = "DeprecatedOrganizationID"];
	Iterator iterator = 2;
	enum Type {
		QUERY_THREADS_TYPE_ADHOC = 0;
		QUERY_THREADS_TYPE_SAVED = 1;
		QUERY_THREADS_TYPE_ALL_FOR_VIEWER = 2;
	}
	Type type = 3;
	oneof query_type {
		Query query = 10;
		string saved_query_id = 11 [(gogoproto.customname) = "SavedQueryID"];
	}
    string viewer_entity_id = 4 [(gogoproto.customname) = "ViewerEntityID"];
}

message ThreadEdge {
	Thread thread = 1;
	string cursor = 2;
}

enum ValueType {
	VALUE_TYPE_UNKNOWN = 0;
	VALUE_TYPE_EXACT = 1;
	VALUE_TYPE_MANY = 2;
}

message QueryThreadsResponse {
	repeated ThreadEdge edges = 1;
	bool has_more = 2;
	ValueType total_type = 3;
	uint32 total = 4;
}

message SavedQueriesRequest {
	// entity ID of the person who's saved queries to return
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
}

message SavedQueriesResponse {
	repeated SavedQuery saved_queries = 1;
}

message ThreadRequest {
	string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
    string viewer_entity_id = 2 [(gogoproto.customname) = "ViewerEntityID"];
}

message ThreadResponse {
	Thread thread = 1;
}

message ThreadsRequest {
	repeated string thread_ids = 1 [(gogoproto.customname) = "ThreadIDs"];
	string viewer_entity_id = 2 [(gogoproto.customname) = "ViewerEntityID"];
}

message ThreadsResponse {
	repeated Thread threads = 1;
}

message CreateSavedQueryRequest {
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
	Query query = 3;
	string title = 4;
	int32 ordinal = 5;
	bool notifications_enabled = 6;
}

message CreateSavedQueryResponse {
	SavedQuery saved_query = 1;
}

// Unfortunate artifact of go defaults and no grpc/protobuf ptr support
enum NotificationsEnabledUpdate {
	NOTIFICATIONS_ENABLED_UPDATE_NONE = 0;
	NOTIFICATIONS_ENABLED_UPDATE_TRUE = 1;
	NOTIFICATIONS_ENABLED_UPDATE_FALSE = 2;
}

message UpdateSavedQueryRequest {
	string saved_query_id = 1 [(gogoproto.customname) = "SavedQueryID"];
	Query query = 2;
	string title = 3;
	int32 ordinal = 4;
	bool force_rebuild = 5; // If true then force rebuilding the saved query index even if the query doesn't change
	NotificationsEnabledUpdate notifications_enabled = 6;
}

message UpdateSavedQueryResponse {
	SavedQuery query = 1;
}

message DeleteMessageRequest {
	string actor_entity_id = 1 [(gogoproto.customname) = "ActorEntityID"];
	string thread_item_id = 2 [(gogoproto.customname) = "ThreadItemID"];
}

message DeleteMessageResponse {
}

message DeleteThreadRequest {
	string actor_entity_id = 1 [(gogoproto.customname) = "ActorEntityID"];
	string thread_id = 2 [(gogoproto.customname) = "ThreadID"];
}

message DeleteThreadResponse {
}

message UpdateThreadRequest {
	string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
	// The entity ID of the entity performing the update (used for authorization check)
	string actor_entity_id = 2 [(gogoproto.customname) = "ActorEntityID"];
	string user_title = 3;
	repeated string add_member_entity_ids = 4 [(gogoproto.customname) = "AddMemberEntityIDs"];
	repeated string remove_member_entity_ids = 5 [(gogoproto.customname) = "RemoveMemberEntityIDs"];
	string system_title = 6;
	repeated string add_follower_entity_ids = 7 [(gogoproto.customname) = "AddFollowerEntityIDs"];
	repeated string remove_follower_entity_ids = 8 [(gogoproto.customname) = "RemoveFollowerEntityIDs"];
}

message UpdateThreadResponse {
	Thread thread = 1;
}

message CreateThreadRequest {
	string uuid = 1 [(gogoproto.customname) = "UUID"];
	string organization_id = 2 [(gogoproto.customname) = "OrganizationID"];
	string from_entity_id = 3 [(gogoproto.customname) = "FromEntityID"];
	Endpoint source = 4;
	repeated Endpoint destinations = 5;
	bool internal = 6;
	string text = 7;
	repeated Attachment attachments = 8;
	string message_title = 9;
	string summary = 10;
	string user_title = 12;
	ThreadType type = 13;
	repeated string member_entity_ids = 14 [(gogoproto.customname) = "MemberEntityIDs"];
	string system_title = 15;
	ThreadOrigin origin = 16;
	bool dont_notify = 17;
}

message CreateThreadResponse {
	string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
	ThreadItem thread_item = 2;
	Thread thread = 3;
}

message CreateEmptyThreadRequest {
	string uuid = 1 [(gogoproto.customname) = "UUID"];
	string organization_id = 2 [(gogoproto.customname) = "OrganizationID"];
	string from_entity_id = 3 [(gogoproto.customname) = "FromEntityID"];
	string primary_entity_id = 5 [(gogoproto.customname) = "PrimaryEntityID"];
	string summary = 6;
	string user_title = 8;
	ThreadType type = 9;
	repeated string member_entity_ids = 10 [(gogoproto.customname) = "MemberEntityIDs"];
	string system_title = 11;
	ThreadOrigin origin = 12;
}

message CreateEmptyThreadResponse {
	Thread thread = 1;
}

message ThreadMembersRequest {
	string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
}

message ThreadMembersResponse {
	repeated Member members = 1;
	repeated string follower_entity_ids = 2 [(gogoproto.customname) = "FollowerEntityIDs"];
}

message ThreadsForMemberRequest {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
	bool primary_only = 2;
}

message ThreadsForMemberResponse {
	repeated Thread threads = 1;
}

message SavedQueryRequest {
	string saved_query_id = 1 [(gogoproto.customname) = "SavedQueryID"];
}

message SavedQueryResponse {
	SavedQuery saved_query = 1;
}

message ThreadItemRequest {
	string item_id = 1 [(gogoproto.customname) = "ItemID"];
	string viewer_entity_id = 2 [(gogoproto.customname) = "ViewerEntityID"];
}

message ThreadItemResponse {
	ThreadItem item = 1;
}

message ThreadItemViewDetailsRequest {
    string item_id = 1 [(gogoproto.customname) = "ItemID"];
}

message ThreadItemViewDetailsResponse {
    repeated ThreadItemViewDetails item_view_details = 1;
}

message CreateLinkedThreadsRequest {
	string organization1_id = 1 [(gogoproto.customname) = "Organization1ID"];
	string organization2_id = 2 [(gogoproto.customname) = "Organization2ID"];
	string primary_entity1_id = 3 [(gogoproto.customname) = "PrimaryEntity1ID"];
	string primary_entity2_id = 4 [(gogoproto.customname) = "PrimaryEntity2ID"];
	string text = 5;
	string message_title = 6;
	string summary = 7;
	bool prepend_sender_thread1 = 8;
	bool prepend_sender_thread2 = 9;
	ThreadType type = 10;
	string system_title1 = 11;
	string system_title2 = 13;
}

message CreateLinkedThreadsResponse {
	Thread thread1 = 1;
	Thread thread2 = 2;
}

message CreateOnboardingThreadRequest {
	string organization_id = 1 [(gogoproto.customname) = "OrganizationID"];
	string primary_entity_id = 2 [(gogoproto.customname) = "PrimaryEntityID"];
	string user_title = 4;
}

message CreateOnboardingThreadResponse {
	Thread thread = 1;
}

message LinkedThreadRequest {
	string thread_id = 1 [(gogoproto.customname) = "ThreadID"];
}

message LinkedThreadResponse {
	Thread thread = 1;
	bool prependSender = 2;
}

message KeyValue {
	string key = 1;
	string value = 2;
}

message GenericSetupEvent {
	string name = 1;
	repeated KeyValue attributes = 2;
}

message ProvisionedPhoneEvent {
	string phone_number = 1;
}

message OnboardingThreadEventRequest {
	enum LookupByType {
		ONBOARDING_THREAD_LOOKUP_BY_INVALID = 0;
		ONBOARDING_THREAD_LOOKUP_BY_THREAD_ID = 1;
		ONBOARDING_THREAD_LOOKUP_BY_ENTITY_ID = 2;
	}
	LookupByType lookup_by_type = 1;
	oneof lookup_by {
		string thread_id = 2 [(gogoproto.customname) = "ThreadID"];
		string entity_id = 3 [(gogoproto.customname) = "EntityID"];
	}

	enum EventType {
		ONBOARDING_THREAD_EVENT_TYPE_INVALID = 0;
		ONBOARDING_THREAD_EVENT_TYPE_GENERIC_SETUP = 1;
		ONBOARDING_THREAD_EVENT_TYPE_PROVISIONED_PHONE = 2;
	}
	EventType event_type = 4;
	oneof event {
		GenericSetupEvent generic_setup = 5;
		ProvisionedPhoneEvent provisioned_phone = 6;
	}
}

message OnboardingThreadEventResponse {
	Thread thread = 1;
}

service Threads {
	// CreateSavedQuery saves a query for later use
	rpc CreateSavedQuery(CreateSavedQueryRequest) returns (CreateSavedQueryResponse);
	// CreateEmptyThread creates a new thread with no messages
	rpc CreateEmptyThread(CreateEmptyThreadRequest) returns (CreateEmptyThreadResponse);
	// CreateLinkedThreads creates a pair of threads in two separate organizations that allows cross-org communication.
	rpc CreateLinkedThreads(CreateLinkedThreadsRequest) returns (CreateLinkedThreadsResponse);
	// CreateOnboardingThread create a new scripted onboarding thread.
	rpc CreateOnboardingThread(CreateOnboardingThreadRequest) returns (CreateOnboardingThreadResponse);
	// CreateThread create a new thread with an initial message
	rpc CreateThread(CreateThreadRequest) returns (CreateThreadResponse);
	// DeleteMessage deletes a message from a thread
	rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
	// DeleteThread deletes a thread
	rpc DeleteThread(DeleteThreadRequest) returns (DeleteThreadResponse);
	// LinkedThread returns the linked thread of one exists
	rpc LinkedThread(LinkedThreadRequest) returns (LinkedThreadResponse);
	// MarkThreadsAsRead marks all threads in the list as read.
	rpc MarkThreadsAsRead(MarkThreadsAsReadRequest) returns (MarkThreadsAsReadResponse);
	// OnboardThreadEvent processes an event in an onboarding thread
	rpc OnboardingThreadEvent(OnboardingThreadEventRequest) returns (OnboardingThreadEventResponse);
	// PostMessage posts a message into a specified thread
	rpc PostMessage(PostMessageRequest) returns (PostMessageResponse);
	// QueryThreads queries the list of threads in an organization
	rpc QueryThreads(QueryThreadsRequest) returns (QueryThreadsResponse);
	// SavedQuery returns a single saved query by ID
	rpc SavedQuery(SavedQueryRequest) returns (SavedQueryResponse);
	// SavedQueries returns the list of saved queries for an org / entity pair
	rpc SavedQueries(SavedQueriesRequest) returns (SavedQueriesResponse);
	// DEPRECATED: Thread lookups and returns a single thread by ID
	rpc Thread(ThreadRequest) returns (ThreadResponse);
	// Theads looks up list of threads.
	rpc Threads(ThreadsRequest) returns (ThreadsResponse);
	// ThreadsForMember looks up a list of threads by entity membership
	rpc ThreadsForMember(ThreadsForMemberRequest) returns (ThreadsForMemberResponse);
	// ThreadItem returns a single thread item
	rpc ThreadItem(ThreadItemRequest) returns (ThreadItemResponse);
	// ThreadItems returns the items (messages or events) in a thread
	rpc ThreadItems(ThreadItemsRequest) returns (ThreadItemsResponse);
	// ThreadMembers returns the members of a thread
	rpc ThreadMembers(ThreadMembersRequest) returns (ThreadMembersResponse);
    // ThreadItemViewDetails returns the view details of a thread
	rpc ThreadItemViewDetails(ThreadItemViewDetailsRequest) returns (ThreadItemViewDetailsResponse);
	// UpdateSavedQuery updated a saved query
	rpc UpdateSavedQuery(UpdateSavedQueryRequest) returns (UpdateSavedQueryResponse);
	// UpdateThread updates the thread members and other information
	rpc UpdateThread(UpdateThreadRequest) returns (UpdateThreadResponse);
}
