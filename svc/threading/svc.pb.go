// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package threading is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		Iterator
		Thread
		Member
		ThreadItem
		ThreadItemViewDetails
		Reference
		Message
		Endpoint
		MessageUpdated
		FollowerUpdated
		SavedQuery
		Query
		Attachment
		ImageAttachment
		VideoAttachment
		AudioAttachment
		GenericURLAttachment
		VisitAttachment
		CarePlanAttachment
		PaymentRequestAttachment
		PublishedThreadItem
		PostMessageRequest
		PostMessageResponse
		MarkThreadsAsReadRequest
		MarkThreadsAsReadResponse
		ThreadItemsRequest
		ThreadItemEdge
		ThreadItemsResponse
		QueryThreadsRequest
		ThreadEdge
		QueryThreadsResponse
		SavedQueriesRequest
		SavedQueriesResponse
		ThreadRequest
		ThreadResponse
		ThreadsRequest
		ThreadsResponse
		CreateSavedQueryRequest
		CreateSavedQueryResponse
		UpdateSavedQueryRequest
		UpdateSavedQueryResponse
		DeleteMessageRequest
		DeleteMessageResponse
		DeleteThreadRequest
		DeleteThreadResponse
		UpdateThreadRequest
		UpdateThreadResponse
		CreateThreadRequest
		CreateThreadResponse
		CreateEmptyThreadRequest
		CreateEmptyThreadResponse
		ThreadMembersRequest
		ThreadMembersResponse
		ThreadsForMemberRequest
		ThreadsForMemberResponse
		SavedQueryRequest
		SavedQueryResponse
		ThreadItemRequest
		ThreadItemResponse
		ThreadItemViewDetailsRequest
		ThreadItemViewDetailsResponse
		CreateLinkedThreadsRequest
		CreateLinkedThreadsResponse
		CreateOnboardingThreadRequest
		CreateOnboardingThreadResponse
		LinkedThreadRequest
		LinkedThreadResponse
		KeyValue
		GenericSetupEvent
		ProvisionedPhoneEvent
		OnboardingThreadEventRequest
		OnboardingThreadEventResponse
*/
package threading

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ThreadType int32

const (
	ThreadType_UNKNOWN         ThreadType = 0
	ThreadType_EXTERNAL        ThreadType = 1
	ThreadType_TEAM            ThreadType = 2
	ThreadType_SETUP           ThreadType = 3
	ThreadType_SUPPORT         ThreadType = 4
	ThreadType_LEGACY_TEAM     ThreadType = 5
	ThreadType_SECURE_EXTERNAL ThreadType = 6
)

var ThreadType_name = map[int32]string{
	0: "UNKNOWN",
	1: "EXTERNAL",
	2: "TEAM",
	3: "SETUP",
	4: "SUPPORT",
	5: "LEGACY_TEAM",
	6: "SECURE_EXTERNAL",
}
var ThreadType_value = map[string]int32{
	"UNKNOWN":         0,
	"EXTERNAL":        1,
	"TEAM":            2,
	"SETUP":           3,
	"SUPPORT":         4,
	"LEGACY_TEAM":     5,
	"SECURE_EXTERNAL": 6,
}

func (ThreadType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type ThreadOrigin int32

const (
	ThreadOrigin_THREAD_ORIGIN_UNKNOWN           ThreadOrigin = 0
	ThreadOrigin_THREAD_ORIGIN_PATIENT_INVITE    ThreadOrigin = 1
	ThreadOrigin_THREAD_ORIGIN_ORGANIZATION_CODE ThreadOrigin = 2
	ThreadOrigin_THREAD_ORIGIN_SYNC              ThreadOrigin = 3
)

var ThreadOrigin_name = map[int32]string{
	0: "THREAD_ORIGIN_UNKNOWN",
	1: "THREAD_ORIGIN_PATIENT_INVITE",
	2: "THREAD_ORIGIN_ORGANIZATION_CODE",
	3: "THREAD_ORIGIN_SYNC",
}
var ThreadOrigin_value = map[string]int32{
	"THREAD_ORIGIN_UNKNOWN":           0,
	"THREAD_ORIGIN_PATIENT_INVITE":    1,
	"THREAD_ORIGIN_ORGANIZATION_CODE": 2,
	"THREAD_ORIGIN_SYNC":              3,
}

func (ThreadOrigin) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type Iterator_Direction int32

const (
	Iterator_FROM_START Iterator_Direction = 0
	Iterator_FROM_END   Iterator_Direction = 1
)

var Iterator_Direction_name = map[int32]string{
	0: "FROM_START",
	1: "FROM_END",
}
var Iterator_Direction_value = map[string]int32{
	"FROM_START": 0,
	"FROM_END":   1,
}

func (Iterator_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0, 0} }

type ThreadItem_Type int32

const (
	ThreadItem_MESSAGE          ThreadItem_Type = 0
	ThreadItem_MESSAGE_UPDATED  ThreadItem_Type = 1
	ThreadItem_FOLLOWER_UPDATED ThreadItem_Type = 2
)

var ThreadItem_Type_name = map[int32]string{
	0: "MESSAGE",
	1: "MESSAGE_UPDATED",
	2: "FOLLOWER_UPDATED",
}
var ThreadItem_Type_value = map[string]int32{
	"MESSAGE":          0,
	"MESSAGE_UPDATED":  1,
	"FOLLOWER_UPDATED": 2,
}

func (ThreadItem_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3, 0} }

type Reference_Type int32

const (
	Reference_ENTITY Reference_Type = 0
)

var Reference_Type_name = map[int32]string{
	0: "ENTITY",
}
var Reference_Type_value = map[string]int32{
	"ENTITY": 0,
}

func (Reference_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5, 0} }

type Message_Status int32

const (
	Message_NORMAL  Message_Status = 0
	Message_DELETED Message_Status = 1
)

var Message_Status_name = map[int32]string{
	0: "NORMAL",
	1: "DELETED",
}
var Message_Status_value = map[string]int32{
	"NORMAL":  0,
	"DELETED": 1,
}

func (Message_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6, 0} }

type Endpoint_Channel int32

const (
	Endpoint_APP   Endpoint_Channel = 0
	Endpoint_SMS   Endpoint_Channel = 1
	Endpoint_VOICE Endpoint_Channel = 2
	Endpoint_EMAIL Endpoint_Channel = 3
)

var Endpoint_Channel_name = map[int32]string{
	0: "APP",
	1: "SMS",
	2: "VOICE",
	3: "EMAIL",
}
var Endpoint_Channel_value = map[string]int32{
	"APP":   0,
	"SMS":   1,
	"VOICE": 2,
	"EMAIL": 3,
}

func (Endpoint_Channel) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7, 0} }

type Attachment_Type int32

const (
	Attachment_IMAGE           Attachment_Type = 0
	Attachment_AUDIO           Attachment_Type = 1
	Attachment_GENERIC_URL     Attachment_Type = 2
	Attachment_VISIT           Attachment_Type = 3
	Attachment_CARE_PLAN       Attachment_Type = 4
	Attachment_VIDEO           Attachment_Type = 5
	Attachment_PAYMENT_REQUEST Attachment_Type = 6
)

var Attachment_Type_name = map[int32]string{
	0: "IMAGE",
	1: "AUDIO",
	2: "GENERIC_URL",
	3: "VISIT",
	4: "CARE_PLAN",
	5: "VIDEO",
	6: "PAYMENT_REQUEST",
}
var Attachment_Type_value = map[string]int32{
	"IMAGE":           0,
	"AUDIO":           1,
	"GENERIC_URL":     2,
	"VISIT":           3,
	"CARE_PLAN":       4,
	"VIDEO":           5,
	"PAYMENT_REQUEST": 6,
}

func (Attachment_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12, 0} }

type QueryThreadsRequest_Type int32

const (
	QueryThreadsRequest_ADHOC          QueryThreadsRequest_Type = 0
	QueryThreadsRequest_SAVED          QueryThreadsRequest_Type = 1
	QueryThreadsRequest_ALL_FOR_VIEWER QueryThreadsRequest_Type = 2
)

var QueryThreadsRequest_Type_name = map[int32]string{
	0: "ADHOC",
	1: "SAVED",
	2: "ALL_FOR_VIEWER",
}
var QueryThreadsRequest_Type_value = map[string]int32{
	"ADHOC":          0,
	"SAVED":          1,
	"ALL_FOR_VIEWER": 2,
}

func (QueryThreadsRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{28, 0}
}

type OnboardingThreadEventRequest_LookupByType int32

const (
	OnboardingThreadEventRequest_INVALID_LOOKUP_BY_TYPE OnboardingThreadEventRequest_LookupByType = 0
	OnboardingThreadEventRequest_THREAD_ID              OnboardingThreadEventRequest_LookupByType = 1
	OnboardingThreadEventRequest_ENTITY_ID              OnboardingThreadEventRequest_LookupByType = 2
)

var OnboardingThreadEventRequest_LookupByType_name = map[int32]string{
	0: "INVALID_LOOKUP_BY_TYPE",
	1: "THREAD_ID",
	2: "ENTITY_ID",
}
var OnboardingThreadEventRequest_LookupByType_value = map[string]int32{
	"INVALID_LOOKUP_BY_TYPE": 0,
	"THREAD_ID":              1,
	"ENTITY_ID":              2,
}

func (OnboardingThreadEventRequest_LookupByType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{70, 0}
}

type OnboardingThreadEventRequest_EventType int32

const (
	OnboardingThreadEventRequest_INVALID_EVENT_TYPE OnboardingThreadEventRequest_EventType = 0
	OnboardingThreadEventRequest_GENERIC_SETUP      OnboardingThreadEventRequest_EventType = 1
	OnboardingThreadEventRequest_PROVISIONED_PHONE  OnboardingThreadEventRequest_EventType = 2
)

var OnboardingThreadEventRequest_EventType_name = map[int32]string{
	0: "INVALID_EVENT_TYPE",
	1: "GENERIC_SETUP",
	2: "PROVISIONED_PHONE",
}
var OnboardingThreadEventRequest_EventType_value = map[string]int32{
	"INVALID_EVENT_TYPE": 0,
	"GENERIC_SETUP":      1,
	"PROVISIONED_PHONE":  2,
}

func (OnboardingThreadEventRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{70, 1}
}

type Iterator struct {
	StartCursor string             `protobuf:"bytes,1,opt,name=start_cursor,proto3" json:"start_cursor,omitempty"`
	EndCursor   string             `protobuf:"bytes,2,opt,name=end_cursor,proto3" json:"end_cursor,omitempty"`
	Direction   Iterator_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=threading.Iterator_Direction" json:"direction,omitempty"`
	Count       uint32             `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Iterator) Reset()                    { *m = Iterator{} }
func (*Iterator) ProtoMessage()               {}
func (*Iterator) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type Thread struct {
	ID                         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationID             string       `protobuf:"bytes,2,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	PrimaryEntityID            string       `protobuf:"bytes,3,opt,name=primary_entity_id,proto3" json:"primary_entity_id,omitempty"`
	Members                    []*Member    `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	LastMessageTimestamp       uint64       `protobuf:"varint,5,opt,name=last_message_timestamp,proto3" json:"last_message_timestamp,omitempty"`
	LastMessageSummary         string       `protobuf:"bytes,6,opt,name=last_message_summary,proto3" json:"last_message_summary,omitempty"`
	Unread                     bool         `protobuf:"varint,7,opt,name=unread,proto3" json:"unread,omitempty"`
	LastPrimaryEntityEndpoints []*Endpoint  `protobuf:"bytes,8,rep,name=last_primary_entity_endpoints" json:"last_primary_entity_endpoints,omitempty"`
	CreatedTimestamp           uint64       `protobuf:"varint,9,opt,name=created_timestamp,proto3" json:"created_timestamp,omitempty"`
	MessageCount               int32        `protobuf:"varint,10,opt,name=message_count,proto3" json:"message_count,omitempty"`
	Type                       ThreadType   `protobuf:"varint,11,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	SystemTitle                string       `protobuf:"bytes,12,opt,name=system_title,proto3" json:"system_title,omitempty"`
	UserTitle                  string       `protobuf:"bytes,13,opt,name=user_title,proto3" json:"user_title,omitempty"`
	UnreadReference            bool         `protobuf:"varint,14,opt,name=unread_reference,proto3" json:"unread_reference,omitempty"`
	Origin                     ThreadOrigin `protobuf:"varint,15,opt,name=origin,proto3,enum=threading.ThreadOrigin" json:"origin,omitempty"`
}

func (m *Thread) Reset()                    { *m = Thread{} }
func (*Thread) ProtoMessage()               {}
func (*Thread) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

func (m *Thread) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Thread) GetLastPrimaryEntityEndpoints() []*Endpoint {
	if m != nil {
		return m.LastPrimaryEntityEndpoints
	}
	return nil
}

type Member struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type ThreadItem struct {
	ID            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp     uint64          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ActorEntityID string          `protobuf:"bytes,3,opt,name=actor_entity_id,proto3" json:"actor_entity_id,omitempty"`
	Internal      bool            `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
	Type          ThreadItem_Type `protobuf:"varint,5,opt,name=type,proto3,enum=threading.ThreadItem_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*ThreadItem_Message
	//	*ThreadItem_MessageUpdated
	//	*ThreadItem_FollowerUpdated
	Item           isThreadItem_Item `protobuf_oneof:"item"`
	ThreadID       string            `protobuf:"bytes,6,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	OrganizationID string            `protobuf:"bytes,7,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
}

func (m *ThreadItem) Reset()                    { *m = ThreadItem{} }
func (*ThreadItem) ProtoMessage()               {}
func (*ThreadItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type isThreadItem_Item interface {
	isThreadItem_Item()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ThreadItem_Message struct {
	Message *Message `protobuf:"bytes,10,opt,name=message,oneof"`
}
type ThreadItem_MessageUpdated struct {
	MessageUpdated *MessageUpdated `protobuf:"bytes,11,opt,name=message_updated,oneof"`
}
type ThreadItem_FollowerUpdated struct {
	FollowerUpdated *FollowerUpdated `protobuf:"bytes,12,opt,name=follower_updated,oneof"`
}

func (*ThreadItem_Message) isThreadItem_Item()         {}
func (*ThreadItem_MessageUpdated) isThreadItem_Item()  {}
func (*ThreadItem_FollowerUpdated) isThreadItem_Item() {}

func (m *ThreadItem) GetItem() isThreadItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ThreadItem) GetMessage() *Message {
	if x, ok := m.GetItem().(*ThreadItem_Message); ok {
		return x.Message
	}
	return nil
}

func (m *ThreadItem) GetMessageUpdated() *MessageUpdated {
	if x, ok := m.GetItem().(*ThreadItem_MessageUpdated); ok {
		return x.MessageUpdated
	}
	return nil
}

func (m *ThreadItem) GetFollowerUpdated() *FollowerUpdated {
	if x, ok := m.GetItem().(*ThreadItem_FollowerUpdated); ok {
		return x.FollowerUpdated
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ThreadItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ThreadItem_OneofMarshaler, _ThreadItem_OneofUnmarshaler, _ThreadItem_OneofSizer, []interface{}{
		(*ThreadItem_Message)(nil),
		(*ThreadItem_MessageUpdated)(nil),
		(*ThreadItem_FollowerUpdated)(nil),
	}
}

func _ThreadItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ThreadItem)
	// item
	switch x := m.Item.(type) {
	case *ThreadItem_Message:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *ThreadItem_MessageUpdated:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageUpdated); err != nil {
			return err
		}
	case *ThreadItem_FollowerUpdated:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FollowerUpdated); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ThreadItem.Item has unexpected type %T", x)
	}
	return nil
}

func _ThreadItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ThreadItem)
	switch tag {
	case 10: // item.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Item = &ThreadItem_Message{msg}
		return true, err
	case 11: // item.message_updated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageUpdated)
		err := b.DecodeMessage(msg)
		m.Item = &ThreadItem_MessageUpdated{msg}
		return true, err
	case 12: // item.follower_updated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FollowerUpdated)
		err := b.DecodeMessage(msg)
		m.Item = &ThreadItem_FollowerUpdated{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ThreadItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ThreadItem)
	// item
	switch x := m.Item.(type) {
	case *ThreadItem_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ThreadItem_MessageUpdated:
		s := proto.Size(x.MessageUpdated)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ThreadItem_FollowerUpdated:
		s := proto.Size(x.FollowerUpdated)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ThreadItemViewDetails struct {
	ThreadItemID string `protobuf:"bytes,1,opt,name=thread_item_id,proto3" json:"thread_item_id,omitempty"`
	EntityID     string `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	ViewTime     uint64 `protobuf:"varint,3,opt,name=view_time,proto3" json:"view_time,omitempty"`
}

func (m *ThreadItemViewDetails) Reset()                    { *m = ThreadItemViewDetails{} }
func (*ThreadItemViewDetails) ProtoMessage()               {}
func (*ThreadItemViewDetails) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type Reference struct {
	Type Reference_Type `protobuf:"varint,1,opt,name=type,proto3,enum=threading.Reference_Type" json:"type,omitempty"`
	ID   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type Message struct {
	Text            string         `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Attachments     []*Attachment  `protobuf:"bytes,2,rep,name=attachments" json:"attachments,omitempty"`
	Status          Message_Status `protobuf:"varint,3,opt,name=status,proto3,enum=threading.Message_Status" json:"status,omitempty"`
	Source          *Endpoint      `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Destinations    []*Endpoint    `protobuf:"bytes,5,rep,name=destinations" json:"destinations,omitempty"`
	EditedTimestamp uint64         `protobuf:"varint,6,opt,name=edited_timestamp,proto3" json:"edited_timestamp,omitempty"`
	EditorEntityID  string         `protobuf:"bytes,7,opt,name=editor_entity_id,proto3" json:"editor_entity_id,omitempty"`
	Title           string         `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	TextRefs        []*Reference   `protobuf:"bytes,9,rep,name=text_refs" json:"text_refs,omitempty"`
	Summary         string         `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

func (m *Message) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Message) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Message) GetDestinations() []*Endpoint {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Message) GetTextRefs() []*Reference {
	if m != nil {
		return m.TextRefs
	}
	return nil
}

type Endpoint struct {
	Channel Endpoint_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=threading.Endpoint_Channel" json:"channel,omitempty"`
	ID      string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

type MessageUpdated struct {
	ThreadItemID  string   `protobuf:"bytes,1,opt,name=thread_item_id,proto3" json:"thread_item_id,omitempty"`
	ActorEntityID string   `protobuf:"bytes,2,opt,name=actor_entity_id,proto3" json:"actor_entity_id,omitempty"`
	Message       *Message `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *MessageUpdated) Reset()                    { *m = MessageUpdated{} }
func (*MessageUpdated) ProtoMessage()               {}
func (*MessageUpdated) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

func (m *MessageUpdated) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type FollowerUpdated struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
}

func (m *FollowerUpdated) Reset()                    { *m = FollowerUpdated{} }
func (*FollowerUpdated) ProtoMessage()               {}
func (*FollowerUpdated) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

type SavedQuery struct {
	ID             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationID string `protobuf:"bytes,2,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	Query          *Query `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *SavedQuery) Reset()                    { *m = SavedQuery{} }
func (*SavedQuery) ProtoMessage()               {}
func (*SavedQuery) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

func (m *SavedQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type Query struct {
}

func (m *Query) Reset()                    { *m = Query{} }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

type Attachment struct {
	Type  Attachment_Type `protobuf:"varint,1,opt,name=type,proto3,enum=threading.Attachment_Type" json:"type,omitempty"`
	Title string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	URL   string          `protobuf:"bytes,3,opt,name=mediaID,proto3" json:"mediaID,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Attachment_Image
	//	*Attachment_Audio
	//	*Attachment_GenericURL
	//	*Attachment_Visit
	//	*Attachment_CarePlan
	//	*Attachment_Video
	//	*Attachment_PaymentRequest
	Data isAttachment_Data `protobuf_oneof:"data"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

type isAttachment_Data interface {
	isAttachment_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Attachment_Image struct {
	Image *ImageAttachment `protobuf:"bytes,10,opt,name=image,oneof"`
}
type Attachment_Audio struct {
	Audio *AudioAttachment `protobuf:"bytes,11,opt,name=audio,oneof"`
}
type Attachment_GenericURL struct {
	GenericURL *GenericURLAttachment `protobuf:"bytes,12,opt,name=generic_url,oneof"`
}
type Attachment_Visit struct {
	Visit *VisitAttachment `protobuf:"bytes,13,opt,name=visit,oneof"`
}
type Attachment_CarePlan struct {
	CarePlan *CarePlanAttachment `protobuf:"bytes,14,opt,name=care_plan,oneof"`
}
type Attachment_Video struct {
	Video *VideoAttachment `protobuf:"bytes,15,opt,name=video,oneof"`
}
type Attachment_PaymentRequest struct {
	PaymentRequest *PaymentRequestAttachment `protobuf:"bytes,16,opt,name=payment_request,oneof"`
}

func (*Attachment_Image) isAttachment_Data()          {}
func (*Attachment_Audio) isAttachment_Data()          {}
func (*Attachment_GenericURL) isAttachment_Data()     {}
func (*Attachment_Visit) isAttachment_Data()          {}
func (*Attachment_CarePlan) isAttachment_Data()       {}
func (*Attachment_Video) isAttachment_Data()          {}
func (*Attachment_PaymentRequest) isAttachment_Data() {}

func (m *Attachment) GetData() isAttachment_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attachment) GetImage() *ImageAttachment {
	if x, ok := m.GetData().(*Attachment_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Attachment) GetAudio() *AudioAttachment {
	if x, ok := m.GetData().(*Attachment_Audio); ok {
		return x.Audio
	}
	return nil
}

func (m *Attachment) GetGenericURL() *GenericURLAttachment {
	if x, ok := m.GetData().(*Attachment_GenericURL); ok {
		return x.GenericURL
	}
	return nil
}

func (m *Attachment) GetVisit() *VisitAttachment {
	if x, ok := m.GetData().(*Attachment_Visit); ok {
		return x.Visit
	}
	return nil
}

func (m *Attachment) GetCarePlan() *CarePlanAttachment {
	if x, ok := m.GetData().(*Attachment_CarePlan); ok {
		return x.CarePlan
	}
	return nil
}

func (m *Attachment) GetVideo() *VideoAttachment {
	if x, ok := m.GetData().(*Attachment_Video); ok {
		return x.Video
	}
	return nil
}

func (m *Attachment) GetPaymentRequest() *PaymentRequestAttachment {
	if x, ok := m.GetData().(*Attachment_PaymentRequest); ok {
		return x.PaymentRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Attachment) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Attachment_OneofMarshaler, _Attachment_OneofUnmarshaler, _Attachment_OneofSizer, []interface{}{
		(*Attachment_Image)(nil),
		(*Attachment_Audio)(nil),
		(*Attachment_GenericURL)(nil),
		(*Attachment_Visit)(nil),
		(*Attachment_CarePlan)(nil),
		(*Attachment_Video)(nil),
		(*Attachment_PaymentRequest)(nil),
	}
}

func _Attachment_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Attachment)
	// data
	switch x := m.Data.(type) {
	case *Attachment_Image:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Attachment_Audio:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case *Attachment_GenericURL:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericURL); err != nil {
			return err
		}
	case *Attachment_Visit:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Visit); err != nil {
			return err
		}
	case *Attachment_CarePlan:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CarePlan); err != nil {
			return err
		}
	case *Attachment_Video:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *Attachment_PaymentRequest:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PaymentRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Attachment.Data has unexpected type %T", x)
	}
	return nil
}

func _Attachment_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Attachment)
	switch tag {
	case 10: // data.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImageAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Image{msg}
		return true, err
	case 11: // data.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AudioAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Audio{msg}
		return true, err
	case 12: // data.generic_url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericURLAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_GenericURL{msg}
		return true, err
	case 13: // data.visit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VisitAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Visit{msg}
		return true, err
	case 14: // data.care_plan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CarePlanAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_CarePlan{msg}
		return true, err
	case 15: // data.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VideoAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Video{msg}
		return true, err
	case 16: // data.payment_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PaymentRequestAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_PaymentRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Attachment_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Attachment)
	// data
	switch x := m.Data.(type) {
	case *Attachment_Image:
		s := proto.Size(x.Image)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Audio:
		s := proto.Size(x.Audio)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_GenericURL:
		s := proto.Size(x.GenericURL)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Visit:
		s := proto.Size(x.Visit)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_CarePlan:
		s := proto.Size(x.CarePlan)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Video:
		s := proto.Size(x.Video)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_PaymentRequest:
		s := proto.Size(x.PaymentRequest)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImageAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID  string `protobuf:"bytes,2,opt,name=media_id,proto3" json:"media_id,omitempty"`
	Width    uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ImageAttachment) Reset()                    { *m = ImageAttachment{} }
func (*ImageAttachment) ProtoMessage()               {}
func (*ImageAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

type VideoAttachment struct {
	Mimetype   string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID    string `protobuf:"bytes,2,opt,name=mediaID,proto3" json:"mediaID,omitempty"`
	DurationNS uint64 `protobuf:"varint,4,opt,name=duration_ns,proto3" json:"duration_ns,omitempty"`
}

func (m *VideoAttachment) Reset()                    { *m = VideoAttachment{} }
func (*VideoAttachment) ProtoMessage()               {}
func (*VideoAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

type AudioAttachment struct {
	Mimetype   string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID    string `protobuf:"bytes,2,opt,name=media_id,proto3" json:"media_id,omitempty"`
	DurationNS uint64 `protobuf:"varint,4,opt,name=duration_ns,proto3" json:"duration_ns,omitempty"`
}

func (m *AudioAttachment) Reset()                    { *m = AudioAttachment{} }
func (*AudioAttachment) ProtoMessage()               {}
func (*AudioAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

type GenericURLAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	URL      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GenericURLAttachment) Reset()                    { *m = GenericURLAttachment{} }
func (*GenericURLAttachment) ProtoMessage()               {}
func (*GenericURLAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

type VisitAttachment struct {
	VisitID   string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
	VisitName string `protobuf:"bytes,2,opt,name=visit_name,proto3" json:"visit_name,omitempty"`
}

func (m *VisitAttachment) Reset()                    { *m = VisitAttachment{} }
func (*VisitAttachment) ProtoMessage()               {}
func (*VisitAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

type CarePlanAttachment struct {
	CarePlanID   string `protobuf:"bytes,1,opt,name=care_plan_id,proto3" json:"care_plan_id,omitempty"`
	CarePlanName string `protobuf:"bytes,2,opt,name=care_plan_name,proto3" json:"care_plan_name,omitempty"`
}

func (m *CarePlanAttachment) Reset()                    { *m = CarePlanAttachment{} }
func (*CarePlanAttachment) ProtoMessage()               {}
func (*CarePlanAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{18} }

type PaymentRequestAttachment struct {
	PaymentID string `protobuf:"bytes,1,opt,name=payment_id,proto3" json:"payment_id,omitempty"`
}

func (m *PaymentRequestAttachment) Reset()                    { *m = PaymentRequestAttachment{} }
func (*PaymentRequestAttachment) ProtoMessage()               {}
func (*PaymentRequestAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

type PublishedThreadItem struct {
	UUID            string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrganizationID  string      `protobuf:"bytes,2,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	ThreadID        string      `protobuf:"bytes,3,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	PrimaryEntityID string      `protobuf:"bytes,4,opt,name=primary_entity_id,proto3" json:"primary_entity_id,omitempty"`
	Item            *ThreadItem `protobuf:"bytes,5,opt,name=item" json:"item,omitempty"`
}

func (m *PublishedThreadItem) Reset()                    { *m = PublishedThreadItem{} }
func (*PublishedThreadItem) ProtoMessage()               {}
func (*PublishedThreadItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

func (m *PublishedThreadItem) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type PostMessageRequest struct {
	UUID         string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ThreadID     string        `protobuf:"bytes,2,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	FromEntityID string        `protobuf:"bytes,3,opt,name=from_entity_id,proto3" json:"from_entity_id,omitempty"`
	Source       *Endpoint     `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Destinations []*Endpoint   `protobuf:"bytes,5,rep,name=destinations" json:"destinations,omitempty"`
	Internal     bool          `protobuf:"varint,6,opt,name=internal,proto3" json:"internal,omitempty"`
	Text         string        `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	Attachments  []*Attachment `protobuf:"bytes,8,rep,name=attachments" json:"attachments,omitempty"`
	Title        string        `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Summary      string        `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
	DontNotify   bool          `protobuf:"varint,11,opt,name=dont_notify,proto3" json:"dont_notify,omitempty"`
}

func (m *PostMessageRequest) Reset()                    { *m = PostMessageRequest{} }
func (*PostMessageRequest) ProtoMessage()               {}
func (*PostMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

func (m *PostMessageRequest) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *PostMessageRequest) GetDestinations() []*Endpoint {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *PostMessageRequest) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type PostMessageResponse struct {
	Item   *ThreadItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Thread *Thread     `protobuf:"bytes,2,opt,name=thread" json:"thread,omitempty"`
}

func (m *PostMessageResponse) Reset()                    { *m = PostMessageResponse{} }
func (*PostMessageResponse) ProtoMessage()               {}
func (*PostMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{22} }

func (m *PostMessageResponse) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PostMessageResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type MarkThreadsAsReadRequest struct {
	ThreadWatermarks []*MarkThreadsAsReadRequest_ThreadWatermark `protobuf:"bytes,1,rep,name=thread_watermarks" json:"thread_watermarks,omitempty"`
	EntityID         string                                      `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Timestamp        uint64                                      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Seen             bool                                        `protobuf:"varint,4,opt,name=seen,proto3" json:"seen,omitempty"`
}

func (m *MarkThreadsAsReadRequest) Reset()                    { *m = MarkThreadsAsReadRequest{} }
func (*MarkThreadsAsReadRequest) ProtoMessage()               {}
func (*MarkThreadsAsReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

func (m *MarkThreadsAsReadRequest) GetThreadWatermarks() []*MarkThreadsAsReadRequest_ThreadWatermark {
	if m != nil {
		return m.ThreadWatermarks
	}
	return nil
}

type MarkThreadsAsReadRequest_ThreadWatermark struct {
	ThreadID             string `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	LastMessageTimestamp uint64 `protobuf:"varint,2,opt,name=last_message_timestamp,proto3" json:"last_message_timestamp,omitempty"`
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) Reset() {
	*m = MarkThreadsAsReadRequest_ThreadWatermark{}
}
func (*MarkThreadsAsReadRequest_ThreadWatermark) ProtoMessage() {}
func (*MarkThreadsAsReadRequest_ThreadWatermark) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{23, 0}
}

type MarkThreadsAsReadResponse struct {
}

func (m *MarkThreadsAsReadResponse) Reset()                    { *m = MarkThreadsAsReadResponse{} }
func (*MarkThreadsAsReadResponse) ProtoMessage()               {}
func (*MarkThreadsAsReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{24} }

type ThreadItemsRequest struct {
	ThreadID       string    `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	ViewerEntityID string    `protobuf:"bytes,2,opt,name=viewer_entity_id,proto3" json:"viewer_entity_id,omitempty"`
	Iterator       *Iterator `protobuf:"bytes,3,opt,name=iterator" json:"iterator,omitempty"`
}

func (m *ThreadItemsRequest) Reset()                    { *m = ThreadItemsRequest{} }
func (*ThreadItemsRequest) ProtoMessage()               {}
func (*ThreadItemsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

func (m *ThreadItemsRequest) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

type ThreadItemEdge struct {
	Item   *ThreadItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Cursor string      `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (m *ThreadItemEdge) Reset()                    { *m = ThreadItemEdge{} }
func (*ThreadItemEdge) ProtoMessage()               {}
func (*ThreadItemEdge) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

func (m *ThreadItemEdge) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type ThreadItemsResponse struct {
	Edges   []*ThreadItemEdge `protobuf:"bytes,1,rep,name=edges" json:"edges,omitempty"`
	HasMore bool              `protobuf:"varint,2,opt,name=has_more,proto3" json:"has_more,omitempty"`
}

func (m *ThreadItemsResponse) Reset()                    { *m = ThreadItemsResponse{} }
func (*ThreadItemsResponse) ProtoMessage()               {}
func (*ThreadItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

func (m *ThreadItemsResponse) GetEdges() []*ThreadItemEdge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type QueryThreadsRequest struct {
	OrganizationID string                   `protobuf:"bytes,1,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	Iterator       *Iterator                `protobuf:"bytes,2,opt,name=iterator" json:"iterator,omitempty"`
	Type           QueryThreadsRequest_Type `protobuf:"varint,3,opt,name=type,proto3,enum=threading.QueryThreadsRequest_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to QueryType:
	//	*QueryThreadsRequest_Query
	//	*QueryThreadsRequest_SavedQueryID
	QueryType      isQueryThreadsRequest_QueryType `protobuf_oneof:"query_type"`
	ViewerEntityID string                          `protobuf:"bytes,4,opt,name=viewer_entity_id,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *QueryThreadsRequest) Reset()                    { *m = QueryThreadsRequest{} }
func (*QueryThreadsRequest) ProtoMessage()               {}
func (*QueryThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

type isQueryThreadsRequest_QueryType interface {
	isQueryThreadsRequest_QueryType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryThreadsRequest_Query struct {
	Query *Query `protobuf:"bytes,10,opt,name=query,oneof"`
}
type QueryThreadsRequest_SavedQueryID struct {
	SavedQueryID string `protobuf:"bytes,11,opt,name=saved_query_id,proto3,oneof"`
}

func (*QueryThreadsRequest_Query) isQueryThreadsRequest_QueryType()        {}
func (*QueryThreadsRequest_SavedQueryID) isQueryThreadsRequest_QueryType() {}

func (m *QueryThreadsRequest) GetQueryType() isQueryThreadsRequest_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (m *QueryThreadsRequest) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

func (m *QueryThreadsRequest) GetQuery() *Query {
	if x, ok := m.GetQueryType().(*QueryThreadsRequest_Query); ok {
		return x.Query
	}
	return nil
}

func (m *QueryThreadsRequest) GetSavedQueryID() string {
	if x, ok := m.GetQueryType().(*QueryThreadsRequest_SavedQueryID); ok {
		return x.SavedQueryID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryThreadsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueryThreadsRequest_OneofMarshaler, _QueryThreadsRequest_OneofUnmarshaler, _QueryThreadsRequest_OneofSizer, []interface{}{
		(*QueryThreadsRequest_Query)(nil),
		(*QueryThreadsRequest_SavedQueryID)(nil),
	}
}

func _QueryThreadsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueryThreadsRequest)
	// query_type
	switch x := m.QueryType.(type) {
	case *QueryThreadsRequest_Query:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case *QueryThreadsRequest_SavedQueryID:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SavedQueryID)
	case nil:
	default:
		return fmt.Errorf("QueryThreadsRequest.QueryType has unexpected type %T", x)
	}
	return nil
}

func _QueryThreadsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueryThreadsRequest)
	switch tag {
	case 10: // query_type.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Query)
		err := b.DecodeMessage(msg)
		m.QueryType = &QueryThreadsRequest_Query{msg}
		return true, err
	case 11: // query_type.saved_query_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.QueryType = &QueryThreadsRequest_SavedQueryID{x}
		return true, err
	default:
		return false, nil
	}
}

func _QueryThreadsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueryThreadsRequest)
	// query_type
	switch x := m.QueryType.(type) {
	case *QueryThreadsRequest_Query:
		s := proto.Size(x.Query)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryThreadsRequest_SavedQueryID:
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SavedQueryID)))
		n += len(x.SavedQueryID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ThreadEdge struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
	Cursor string  `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (m *ThreadEdge) Reset()                    { *m = ThreadEdge{} }
func (*ThreadEdge) ProtoMessage()               {}
func (*ThreadEdge) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

func (m *ThreadEdge) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type QueryThreadsResponse struct {
	Edges   []*ThreadEdge `protobuf:"bytes,1,rep,name=edges" json:"edges,omitempty"`
	HasMore bool          `protobuf:"varint,2,opt,name=has_more,proto3" json:"has_more,omitempty"`
}

func (m *QueryThreadsResponse) Reset()                    { *m = QueryThreadsResponse{} }
func (*QueryThreadsResponse) ProtoMessage()               {}
func (*QueryThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

func (m *QueryThreadsResponse) GetEdges() []*ThreadEdge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type SavedQueriesRequest struct {
	// entity ID of the person who's saved queries to return
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
}

func (m *SavedQueriesRequest) Reset()                    { *m = SavedQueriesRequest{} }
func (*SavedQueriesRequest) ProtoMessage()               {}
func (*SavedQueriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

type SavedQueriesResponse struct {
	SavedQueries []*SavedQuery `protobuf:"bytes,1,rep,name=saved_queries" json:"saved_queries,omitempty"`
}

func (m *SavedQueriesResponse) Reset()                    { *m = SavedQueriesResponse{} }
func (*SavedQueriesResponse) ProtoMessage()               {}
func (*SavedQueriesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

func (m *SavedQueriesResponse) GetSavedQueries() []*SavedQuery {
	if m != nil {
		return m.SavedQueries
	}
	return nil
}

type ThreadRequest struct {
	ThreadID       string `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	ViewerEntityID string `protobuf:"bytes,2,opt,name=viewer_entity_id,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *ThreadRequest) Reset()                    { *m = ThreadRequest{} }
func (*ThreadRequest) ProtoMessage()               {}
func (*ThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{33} }

type ThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *ThreadResponse) Reset()                    { *m = ThreadResponse{} }
func (*ThreadResponse) ProtoMessage()               {}
func (*ThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{34} }

func (m *ThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type ThreadsRequest struct {
	ThreadIDs      []string `protobuf:"bytes,1,rep,name=thread_ids" json:"thread_ids,omitempty"`
	ViewerEntityID string   `protobuf:"bytes,2,opt,name=viewer_entity_id,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *ThreadsRequest) Reset()                    { *m = ThreadsRequest{} }
func (*ThreadsRequest) ProtoMessage()               {}
func (*ThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{35} }

type ThreadsResponse struct {
	Threads []*Thread `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
}

func (m *ThreadsResponse) Reset()                    { *m = ThreadsResponse{} }
func (*ThreadsResponse) ProtoMessage()               {}
func (*ThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{36} }

func (m *ThreadsResponse) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

type CreateSavedQueryRequest struct {
	OrganizationID string `protobuf:"bytes,1,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	EntityID       string `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Query          *Query `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *CreateSavedQueryRequest) Reset()                    { *m = CreateSavedQueryRequest{} }
func (*CreateSavedQueryRequest) ProtoMessage()               {}
func (*CreateSavedQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{37} }

func (m *CreateSavedQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type CreateSavedQueryResponse struct {
	SavedQuery *SavedQuery `protobuf:"bytes,1,opt,name=saved_query" json:"saved_query,omitempty"`
}

func (m *CreateSavedQueryResponse) Reset()                    { *m = CreateSavedQueryResponse{} }
func (*CreateSavedQueryResponse) ProtoMessage()               {}
func (*CreateSavedQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{38} }

func (m *CreateSavedQueryResponse) GetSavedQuery() *SavedQuery {
	if m != nil {
		return m.SavedQuery
	}
	return nil
}

type UpdateSavedQueryRequest struct {
	OrganizationID string `protobuf:"bytes,1,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	QueryID        string `protobuf:"bytes,2,opt,name=query_id,proto3" json:"query_id,omitempty"`
	Query          *Query `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *UpdateSavedQueryRequest) Reset()                    { *m = UpdateSavedQueryRequest{} }
func (*UpdateSavedQueryRequest) ProtoMessage()               {}
func (*UpdateSavedQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{39} }

func (m *UpdateSavedQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type UpdateSavedQueryResponse struct {
}

func (m *UpdateSavedQueryResponse) Reset()                    { *m = UpdateSavedQueryResponse{} }
func (*UpdateSavedQueryResponse) ProtoMessage()               {}
func (*UpdateSavedQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{40} }

type DeleteMessageRequest struct {
	ActorEntityID string `protobuf:"bytes,1,opt,name=actor_entity_id,proto3" json:"actor_entity_id,omitempty"`
	ThreadItemID  string `protobuf:"bytes,2,opt,name=thread_item_id,proto3" json:"thread_item_id,omitempty"`
}

func (m *DeleteMessageRequest) Reset()                    { *m = DeleteMessageRequest{} }
func (*DeleteMessageRequest) ProtoMessage()               {}
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{41} }

type DeleteMessageResponse struct {
}

func (m *DeleteMessageResponse) Reset()                    { *m = DeleteMessageResponse{} }
func (*DeleteMessageResponse) ProtoMessage()               {}
func (*DeleteMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{42} }

type DeleteThreadRequest struct {
	ActorEntityID string `protobuf:"bytes,1,opt,name=actor_entity_id,proto3" json:"actor_entity_id,omitempty"`
	ThreadID      string `protobuf:"bytes,2,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
}

func (m *DeleteThreadRequest) Reset()                    { *m = DeleteThreadRequest{} }
func (*DeleteThreadRequest) ProtoMessage()               {}
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{43} }

type DeleteThreadResponse struct {
}

func (m *DeleteThreadResponse) Reset()                    { *m = DeleteThreadResponse{} }
func (*DeleteThreadResponse) ProtoMessage()               {}
func (*DeleteThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{44} }

type UpdateThreadRequest struct {
	ThreadID              string   `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	UserTitle             string   `protobuf:"bytes,3,opt,name=user_title,proto3" json:"user_title,omitempty"`
	AddMemberEntityIDs    []string `protobuf:"bytes,4,rep,name=add_member_entity_ids" json:"add_member_entity_ids,omitempty"`
	RemoveMemberEntityIDs []string `protobuf:"bytes,5,rep,name=remove_member_entity_ids" json:"remove_member_entity_ids,omitempty"`
	SystemTitle           string   `protobuf:"bytes,6,opt,name=system_title,proto3" json:"system_title,omitempty"`
}

func (m *UpdateThreadRequest) Reset()                    { *m = UpdateThreadRequest{} }
func (*UpdateThreadRequest) ProtoMessage()               {}
func (*UpdateThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{45} }

type UpdateThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *UpdateThreadResponse) Reset()                    { *m = UpdateThreadResponse{} }
func (*UpdateThreadResponse) ProtoMessage()               {}
func (*UpdateThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{46} }

func (m *UpdateThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type CreateThreadRequest struct {
	UUID            string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrganizationID  string        `protobuf:"bytes,2,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	FromEntityID    string        `protobuf:"bytes,3,opt,name=from_entity_id,proto3" json:"from_entity_id,omitempty"`
	Source          *Endpoint     `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Destinations    []*Endpoint   `protobuf:"bytes,5,rep,name=destinations" json:"destinations,omitempty"`
	Internal        bool          `protobuf:"varint,6,opt,name=internal,proto3" json:"internal,omitempty"`
	Text            string        `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	Attachments     []*Attachment `protobuf:"bytes,8,rep,name=attachments" json:"attachments,omitempty"`
	MessageTitle    string        `protobuf:"bytes,9,opt,name=message_title,proto3" json:"message_title,omitempty"`
	Summary         string        `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
	UserTitle       string        `protobuf:"bytes,12,opt,name=user_title,proto3" json:"user_title,omitempty"`
	Type            ThreadType    `protobuf:"varint,13,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	MemberEntityIDs []string      `protobuf:"bytes,14,rep,name=member_entity_ids" json:"member_entity_ids,omitempty"`
	SystemTitle     string        `protobuf:"bytes,15,opt,name=system_title,proto3" json:"system_title,omitempty"`
	Origin          ThreadOrigin  `protobuf:"varint,16,opt,name=origin,proto3,enum=threading.ThreadOrigin" json:"origin,omitempty"`
	DontNotify      bool          `protobuf:"varint,17,opt,name=dont_notify,proto3" json:"dont_notify,omitempty"`
}

func (m *CreateThreadRequest) Reset()                    { *m = CreateThreadRequest{} }
func (*CreateThreadRequest) ProtoMessage()               {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{47} }

func (m *CreateThreadRequest) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CreateThreadRequest) GetDestinations() []*Endpoint {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *CreateThreadRequest) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type CreateThreadResponse struct {
	ThreadID   string      `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
	ThreadItem *ThreadItem `protobuf:"bytes,2,opt,name=thread_item" json:"thread_item,omitempty"`
	Thread     *Thread     `protobuf:"bytes,3,opt,name=thread" json:"thread,omitempty"`
}

func (m *CreateThreadResponse) Reset()                    { *m = CreateThreadResponse{} }
func (*CreateThreadResponse) ProtoMessage()               {}
func (*CreateThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{48} }

func (m *CreateThreadResponse) GetThreadItem() *ThreadItem {
	if m != nil {
		return m.ThreadItem
	}
	return nil
}

func (m *CreateThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type CreateEmptyThreadRequest struct {
	UUID            string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrganizationID  string       `protobuf:"bytes,2,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	FromEntityID    string       `protobuf:"bytes,3,opt,name=from_entity_id,proto3" json:"from_entity_id,omitempty"`
	PrimaryEntityID string       `protobuf:"bytes,5,opt,name=primary_entity_id,proto3" json:"primary_entity_id,omitempty"`
	Summary         string       `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	UserTitle       string       `protobuf:"bytes,8,opt,name=user_title,proto3" json:"user_title,omitempty"`
	Type            ThreadType   `protobuf:"varint,9,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	MemberEntityIDs []string     `protobuf:"bytes,10,rep,name=member_entity_ids" json:"member_entity_ids,omitempty"`
	SystemTitle     string       `protobuf:"bytes,11,opt,name=system_title,proto3" json:"system_title,omitempty"`
	Origin          ThreadOrigin `protobuf:"varint,12,opt,name=origin,proto3,enum=threading.ThreadOrigin" json:"origin,omitempty"`
}

func (m *CreateEmptyThreadRequest) Reset()                    { *m = CreateEmptyThreadRequest{} }
func (*CreateEmptyThreadRequest) ProtoMessage()               {}
func (*CreateEmptyThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{49} }

type CreateEmptyThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *CreateEmptyThreadResponse) Reset()                    { *m = CreateEmptyThreadResponse{} }
func (*CreateEmptyThreadResponse) ProtoMessage()               {}
func (*CreateEmptyThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{50} }

func (m *CreateEmptyThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type ThreadMembersRequest struct {
	ThreadID string `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
}

func (m *ThreadMembersRequest) Reset()                    { *m = ThreadMembersRequest{} }
func (*ThreadMembersRequest) ProtoMessage()               {}
func (*ThreadMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{51} }

type ThreadMembersResponse struct {
	Members []*Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *ThreadMembersResponse) Reset()                    { *m = ThreadMembersResponse{} }
func (*ThreadMembersResponse) ProtoMessage()               {}
func (*ThreadMembersResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{52} }

func (m *ThreadMembersResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type ThreadsForMemberRequest struct {
	EntityID    string `protobuf:"bytes,1,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	PrimaryOnly bool   `protobuf:"varint,2,opt,name=primary_only,proto3" json:"primary_only,omitempty"`
}

func (m *ThreadsForMemberRequest) Reset()                    { *m = ThreadsForMemberRequest{} }
func (*ThreadsForMemberRequest) ProtoMessage()               {}
func (*ThreadsForMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{53} }

type ThreadsForMemberResponse struct {
	Threads []*Thread `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
}

func (m *ThreadsForMemberResponse) Reset()                    { *m = ThreadsForMemberResponse{} }
func (*ThreadsForMemberResponse) ProtoMessage()               {}
func (*ThreadsForMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{54} }

func (m *ThreadsForMemberResponse) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

type SavedQueryRequest struct {
	SavedQueryID string `protobuf:"bytes,1,opt,name=saved_query_id,proto3" json:"saved_query_id,omitempty"`
}

func (m *SavedQueryRequest) Reset()                    { *m = SavedQueryRequest{} }
func (*SavedQueryRequest) ProtoMessage()               {}
func (*SavedQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{55} }

type SavedQueryResponse struct {
	SavedQuery *SavedQuery `protobuf:"bytes,1,opt,name=saved_query" json:"saved_query,omitempty"`
}

func (m *SavedQueryResponse) Reset()                    { *m = SavedQueryResponse{} }
func (*SavedQueryResponse) ProtoMessage()               {}
func (*SavedQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{56} }

func (m *SavedQueryResponse) GetSavedQuery() *SavedQuery {
	if m != nil {
		return m.SavedQuery
	}
	return nil
}

type ThreadItemRequest struct {
	ItemID         string `protobuf:"bytes,1,opt,name=item_id,proto3" json:"item_id,omitempty"`
	ViewerEntityID string `protobuf:"bytes,2,opt,name=viewer_entity_id,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *ThreadItemRequest) Reset()                    { *m = ThreadItemRequest{} }
func (*ThreadItemRequest) ProtoMessage()               {}
func (*ThreadItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{57} }

type ThreadItemResponse struct {
	Item *ThreadItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *ThreadItemResponse) Reset()                    { *m = ThreadItemResponse{} }
func (*ThreadItemResponse) ProtoMessage()               {}
func (*ThreadItemResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{58} }

func (m *ThreadItemResponse) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type ThreadItemViewDetailsRequest struct {
	ItemID string `protobuf:"bytes,1,opt,name=item_id,proto3" json:"item_id,omitempty"`
}

func (m *ThreadItemViewDetailsRequest) Reset()                    { *m = ThreadItemViewDetailsRequest{} }
func (*ThreadItemViewDetailsRequest) ProtoMessage()               {}
func (*ThreadItemViewDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{59} }

type ThreadItemViewDetailsResponse struct {
	ItemViewDetails []*ThreadItemViewDetails `protobuf:"bytes,1,rep,name=item_view_details" json:"item_view_details,omitempty"`
}

func (m *ThreadItemViewDetailsResponse) Reset()      { *m = ThreadItemViewDetailsResponse{} }
func (*ThreadItemViewDetailsResponse) ProtoMessage() {}
func (*ThreadItemViewDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{60}
}

func (m *ThreadItemViewDetailsResponse) GetItemViewDetails() []*ThreadItemViewDetails {
	if m != nil {
		return m.ItemViewDetails
	}
	return nil
}

type CreateLinkedThreadsRequest struct {
	Organization1ID      string     `protobuf:"bytes,1,opt,name=organization1_id,proto3" json:"organization1_id,omitempty"`
	Organization2ID      string     `protobuf:"bytes,2,opt,name=organization2_id,proto3" json:"organization2_id,omitempty"`
	PrimaryEntity1ID     string     `protobuf:"bytes,3,opt,name=primary_entity1_id,proto3" json:"primary_entity1_id,omitempty"`
	PrimaryEntity2ID     string     `protobuf:"bytes,4,opt,name=primary_entity2_id,proto3" json:"primary_entity2_id,omitempty"`
	Text                 string     `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	MessageTitle         string     `protobuf:"bytes,6,opt,name=message_title,proto3" json:"message_title,omitempty"`
	Summary              string     `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	PrependSenderThread1 bool       `protobuf:"varint,8,opt,name=prepend_sender_thread1,proto3" json:"prepend_sender_thread1,omitempty"`
	PrependSenderThread2 bool       `protobuf:"varint,9,opt,name=prepend_sender_thread2,proto3" json:"prepend_sender_thread2,omitempty"`
	Type                 ThreadType `protobuf:"varint,10,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	SystemTitle1         string     `protobuf:"bytes,11,opt,name=system_title1,proto3" json:"system_title1,omitempty"`
	SystemTitle2         string     `protobuf:"bytes,13,opt,name=system_title2,proto3" json:"system_title2,omitempty"`
}

func (m *CreateLinkedThreadsRequest) Reset()                    { *m = CreateLinkedThreadsRequest{} }
func (*CreateLinkedThreadsRequest) ProtoMessage()               {}
func (*CreateLinkedThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{61} }

type CreateLinkedThreadsResponse struct {
	Thread1 *Thread `protobuf:"bytes,1,opt,name=thread1" json:"thread1,omitempty"`
	Thread2 *Thread `protobuf:"bytes,2,opt,name=thread2" json:"thread2,omitempty"`
}

func (m *CreateLinkedThreadsResponse) Reset()                    { *m = CreateLinkedThreadsResponse{} }
func (*CreateLinkedThreadsResponse) ProtoMessage()               {}
func (*CreateLinkedThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{62} }

func (m *CreateLinkedThreadsResponse) GetThread1() *Thread {
	if m != nil {
		return m.Thread1
	}
	return nil
}

func (m *CreateLinkedThreadsResponse) GetThread2() *Thread {
	if m != nil {
		return m.Thread2
	}
	return nil
}

type CreateOnboardingThreadRequest struct {
	OrganizationID  string `protobuf:"bytes,1,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	PrimaryEntityID string `protobuf:"bytes,2,opt,name=primary_entity_id,proto3" json:"primary_entity_id,omitempty"`
	UserTitle       string `protobuf:"bytes,4,opt,name=user_title,proto3" json:"user_title,omitempty"`
}

func (m *CreateOnboardingThreadRequest) Reset()      { *m = CreateOnboardingThreadRequest{} }
func (*CreateOnboardingThreadRequest) ProtoMessage() {}
func (*CreateOnboardingThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{63}
}

type CreateOnboardingThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *CreateOnboardingThreadResponse) Reset()      { *m = CreateOnboardingThreadResponse{} }
func (*CreateOnboardingThreadResponse) ProtoMessage() {}
func (*CreateOnboardingThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{64}
}

func (m *CreateOnboardingThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type LinkedThreadRequest struct {
	ThreadID string `protobuf:"bytes,1,opt,name=thread_id,proto3" json:"thread_id,omitempty"`
}

func (m *LinkedThreadRequest) Reset()                    { *m = LinkedThreadRequest{} }
func (*LinkedThreadRequest) ProtoMessage()               {}
func (*LinkedThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{65} }

type LinkedThreadResponse struct {
	Thread        *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
	PrependSender bool    `protobuf:"varint,2,opt,name=prependSender,proto3" json:"prependSender,omitempty"`
}

func (m *LinkedThreadResponse) Reset()                    { *m = LinkedThreadResponse{} }
func (*LinkedThreadResponse) ProtoMessage()               {}
func (*LinkedThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{66} }

func (m *LinkedThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{67} }

type GenericSetupEvent struct {
	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attributes []*KeyValue `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *GenericSetupEvent) Reset()                    { *m = GenericSetupEvent{} }
func (*GenericSetupEvent) ProtoMessage()               {}
func (*GenericSetupEvent) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{68} }

func (m *GenericSetupEvent) GetAttributes() []*KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ProvisionedPhoneEvent struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
}

func (m *ProvisionedPhoneEvent) Reset()                    { *m = ProvisionedPhoneEvent{} }
func (*ProvisionedPhoneEvent) ProtoMessage()               {}
func (*ProvisionedPhoneEvent) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{69} }

type OnboardingThreadEventRequest struct {
	LookupByType OnboardingThreadEventRequest_LookupByType `protobuf:"varint,1,opt,name=lookup_by_type,proto3,enum=threading.OnboardingThreadEventRequest_LookupByType" json:"lookup_by_type,omitempty"`
	// Types that are valid to be assigned to LookupBy:
	//	*OnboardingThreadEventRequest_ThreadID
	//	*OnboardingThreadEventRequest_EntityID
	LookupBy  isOnboardingThreadEventRequest_LookupBy `protobuf_oneof:"lookup_by"`
	EventType OnboardingThreadEventRequest_EventType  `protobuf:"varint,4,opt,name=event_type,proto3,enum=threading.OnboardingThreadEventRequest_EventType" json:"event_type,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*OnboardingThreadEventRequest_GenericSetup
	//	*OnboardingThreadEventRequest_ProvisionedPhone
	Event isOnboardingThreadEventRequest_Event `protobuf_oneof:"event"`
}

func (m *OnboardingThreadEventRequest) Reset()                    { *m = OnboardingThreadEventRequest{} }
func (*OnboardingThreadEventRequest) ProtoMessage()               {}
func (*OnboardingThreadEventRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{70} }

type isOnboardingThreadEventRequest_LookupBy interface {
	isOnboardingThreadEventRequest_LookupBy()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOnboardingThreadEventRequest_Event interface {
	isOnboardingThreadEventRequest_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OnboardingThreadEventRequest_ThreadID struct {
	ThreadID string `protobuf:"bytes,2,opt,name=thread_id,proto3,oneof"`
}
type OnboardingThreadEventRequest_EntityID struct {
	EntityID string `protobuf:"bytes,3,opt,name=entity_id,proto3,oneof"`
}
type OnboardingThreadEventRequest_GenericSetup struct {
	GenericSetup *GenericSetupEvent `protobuf:"bytes,5,opt,name=generic_setup,oneof"`
}
type OnboardingThreadEventRequest_ProvisionedPhone struct {
	ProvisionedPhone *ProvisionedPhoneEvent `protobuf:"bytes,6,opt,name=provisioned_phone,oneof"`
}

func (*OnboardingThreadEventRequest_ThreadID) isOnboardingThreadEventRequest_LookupBy()      {}
func (*OnboardingThreadEventRequest_EntityID) isOnboardingThreadEventRequest_LookupBy()      {}
func (*OnboardingThreadEventRequest_GenericSetup) isOnboardingThreadEventRequest_Event()     {}
func (*OnboardingThreadEventRequest_ProvisionedPhone) isOnboardingThreadEventRequest_Event() {}

func (m *OnboardingThreadEventRequest) GetLookupBy() isOnboardingThreadEventRequest_LookupBy {
	if m != nil {
		return m.LookupBy
	}
	return nil
}
func (m *OnboardingThreadEventRequest) GetEvent() isOnboardingThreadEventRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *OnboardingThreadEventRequest) GetThreadID() string {
	if x, ok := m.GetLookupBy().(*OnboardingThreadEventRequest_ThreadID); ok {
		return x.ThreadID
	}
	return ""
}

func (m *OnboardingThreadEventRequest) GetEntityID() string {
	if x, ok := m.GetLookupBy().(*OnboardingThreadEventRequest_EntityID); ok {
		return x.EntityID
	}
	return ""
}

func (m *OnboardingThreadEventRequest) GetGenericSetup() *GenericSetupEvent {
	if x, ok := m.GetEvent().(*OnboardingThreadEventRequest_GenericSetup); ok {
		return x.GenericSetup
	}
	return nil
}

func (m *OnboardingThreadEventRequest) GetProvisionedPhone() *ProvisionedPhoneEvent {
	if x, ok := m.GetEvent().(*OnboardingThreadEventRequest_ProvisionedPhone); ok {
		return x.ProvisionedPhone
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OnboardingThreadEventRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OnboardingThreadEventRequest_OneofMarshaler, _OnboardingThreadEventRequest_OneofUnmarshaler, _OnboardingThreadEventRequest_OneofSizer, []interface{}{
		(*OnboardingThreadEventRequest_ThreadID)(nil),
		(*OnboardingThreadEventRequest_EntityID)(nil),
		(*OnboardingThreadEventRequest_GenericSetup)(nil),
		(*OnboardingThreadEventRequest_ProvisionedPhone)(nil),
	}
}

func _OnboardingThreadEventRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OnboardingThreadEventRequest)
	// lookup_by
	switch x := m.LookupBy.(type) {
	case *OnboardingThreadEventRequest_ThreadID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ThreadID)
	case *OnboardingThreadEventRequest_EntityID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EntityID)
	case nil:
	default:
		return fmt.Errorf("OnboardingThreadEventRequest.LookupBy has unexpected type %T", x)
	}
	// event
	switch x := m.Event.(type) {
	case *OnboardingThreadEventRequest_GenericSetup:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericSetup); err != nil {
			return err
		}
	case *OnboardingThreadEventRequest_ProvisionedPhone:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProvisionedPhone); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OnboardingThreadEventRequest.Event has unexpected type %T", x)
	}
	return nil
}

func _OnboardingThreadEventRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OnboardingThreadEventRequest)
	switch tag {
	case 2: // lookup_by.thread_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupBy = &OnboardingThreadEventRequest_ThreadID{x}
		return true, err
	case 3: // lookup_by.entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupBy = &OnboardingThreadEventRequest_EntityID{x}
		return true, err
	case 5: // event.generic_setup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericSetupEvent)
		err := b.DecodeMessage(msg)
		m.Event = &OnboardingThreadEventRequest_GenericSetup{msg}
		return true, err
	case 6: // event.provisioned_phone
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProvisionedPhoneEvent)
		err := b.DecodeMessage(msg)
		m.Event = &OnboardingThreadEventRequest_ProvisionedPhone{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OnboardingThreadEventRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OnboardingThreadEventRequest)
	// lookup_by
	switch x := m.LookupBy.(type) {
	case *OnboardingThreadEventRequest_ThreadID:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ThreadID)))
		n += len(x.ThreadID)
	case *OnboardingThreadEventRequest_EntityID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EntityID)))
		n += len(x.EntityID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// event
	switch x := m.Event.(type) {
	case *OnboardingThreadEventRequest_GenericSetup:
		s := proto.Size(x.GenericSetup)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OnboardingThreadEventRequest_ProvisionedPhone:
		s := proto.Size(x.ProvisionedPhone)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OnboardingThreadEventResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *OnboardingThreadEventResponse) Reset()      { *m = OnboardingThreadEventResponse{} }
func (*OnboardingThreadEventResponse) ProtoMessage() {}
func (*OnboardingThreadEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{71}
}

func (m *OnboardingThreadEventResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

func init() {
	proto.RegisterType((*Iterator)(nil), "threading.Iterator")
	proto.RegisterType((*Thread)(nil), "threading.Thread")
	proto.RegisterType((*Member)(nil), "threading.Member")
	proto.RegisterType((*ThreadItem)(nil), "threading.ThreadItem")
	proto.RegisterType((*ThreadItemViewDetails)(nil), "threading.ThreadItemViewDetails")
	proto.RegisterType((*Reference)(nil), "threading.Reference")
	proto.RegisterType((*Message)(nil), "threading.Message")
	proto.RegisterType((*Endpoint)(nil), "threading.Endpoint")
	proto.RegisterType((*MessageUpdated)(nil), "threading.MessageUpdated")
	proto.RegisterType((*FollowerUpdated)(nil), "threading.FollowerUpdated")
	proto.RegisterType((*SavedQuery)(nil), "threading.SavedQuery")
	proto.RegisterType((*Query)(nil), "threading.Query")
	proto.RegisterType((*Attachment)(nil), "threading.Attachment")
	proto.RegisterType((*ImageAttachment)(nil), "threading.ImageAttachment")
	proto.RegisterType((*VideoAttachment)(nil), "threading.VideoAttachment")
	proto.RegisterType((*AudioAttachment)(nil), "threading.AudioAttachment")
	proto.RegisterType((*GenericURLAttachment)(nil), "threading.GenericURLAttachment")
	proto.RegisterType((*VisitAttachment)(nil), "threading.VisitAttachment")
	proto.RegisterType((*CarePlanAttachment)(nil), "threading.CarePlanAttachment")
	proto.RegisterType((*PaymentRequestAttachment)(nil), "threading.PaymentRequestAttachment")
	proto.RegisterType((*PublishedThreadItem)(nil), "threading.PublishedThreadItem")
	proto.RegisterType((*PostMessageRequest)(nil), "threading.PostMessageRequest")
	proto.RegisterType((*PostMessageResponse)(nil), "threading.PostMessageResponse")
	proto.RegisterType((*MarkThreadsAsReadRequest)(nil), "threading.MarkThreadsAsReadRequest")
	proto.RegisterType((*MarkThreadsAsReadRequest_ThreadWatermark)(nil), "threading.MarkThreadsAsReadRequest.ThreadWatermark")
	proto.RegisterType((*MarkThreadsAsReadResponse)(nil), "threading.MarkThreadsAsReadResponse")
	proto.RegisterType((*ThreadItemsRequest)(nil), "threading.ThreadItemsRequest")
	proto.RegisterType((*ThreadItemEdge)(nil), "threading.ThreadItemEdge")
	proto.RegisterType((*ThreadItemsResponse)(nil), "threading.ThreadItemsResponse")
	proto.RegisterType((*QueryThreadsRequest)(nil), "threading.QueryThreadsRequest")
	proto.RegisterType((*ThreadEdge)(nil), "threading.ThreadEdge")
	proto.RegisterType((*QueryThreadsResponse)(nil), "threading.QueryThreadsResponse")
	proto.RegisterType((*SavedQueriesRequest)(nil), "threading.SavedQueriesRequest")
	proto.RegisterType((*SavedQueriesResponse)(nil), "threading.SavedQueriesResponse")
	proto.RegisterType((*ThreadRequest)(nil), "threading.ThreadRequest")
	proto.RegisterType((*ThreadResponse)(nil), "threading.ThreadResponse")
	proto.RegisterType((*ThreadsRequest)(nil), "threading.ThreadsRequest")
	proto.RegisterType((*ThreadsResponse)(nil), "threading.ThreadsResponse")
	proto.RegisterType((*CreateSavedQueryRequest)(nil), "threading.CreateSavedQueryRequest")
	proto.RegisterType((*CreateSavedQueryResponse)(nil), "threading.CreateSavedQueryResponse")
	proto.RegisterType((*UpdateSavedQueryRequest)(nil), "threading.UpdateSavedQueryRequest")
	proto.RegisterType((*UpdateSavedQueryResponse)(nil), "threading.UpdateSavedQueryResponse")
	proto.RegisterType((*DeleteMessageRequest)(nil), "threading.DeleteMessageRequest")
	proto.RegisterType((*DeleteMessageResponse)(nil), "threading.DeleteMessageResponse")
	proto.RegisterType((*DeleteThreadRequest)(nil), "threading.DeleteThreadRequest")
	proto.RegisterType((*DeleteThreadResponse)(nil), "threading.DeleteThreadResponse")
	proto.RegisterType((*UpdateThreadRequest)(nil), "threading.UpdateThreadRequest")
	proto.RegisterType((*UpdateThreadResponse)(nil), "threading.UpdateThreadResponse")
	proto.RegisterType((*CreateThreadRequest)(nil), "threading.CreateThreadRequest")
	proto.RegisterType((*CreateThreadResponse)(nil), "threading.CreateThreadResponse")
	proto.RegisterType((*CreateEmptyThreadRequest)(nil), "threading.CreateEmptyThreadRequest")
	proto.RegisterType((*CreateEmptyThreadResponse)(nil), "threading.CreateEmptyThreadResponse")
	proto.RegisterType((*ThreadMembersRequest)(nil), "threading.ThreadMembersRequest")
	proto.RegisterType((*ThreadMembersResponse)(nil), "threading.ThreadMembersResponse")
	proto.RegisterType((*ThreadsForMemberRequest)(nil), "threading.ThreadsForMemberRequest")
	proto.RegisterType((*ThreadsForMemberResponse)(nil), "threading.ThreadsForMemberResponse")
	proto.RegisterType((*SavedQueryRequest)(nil), "threading.SavedQueryRequest")
	proto.RegisterType((*SavedQueryResponse)(nil), "threading.SavedQueryResponse")
	proto.RegisterType((*ThreadItemRequest)(nil), "threading.ThreadItemRequest")
	proto.RegisterType((*ThreadItemResponse)(nil), "threading.ThreadItemResponse")
	proto.RegisterType((*ThreadItemViewDetailsRequest)(nil), "threading.ThreadItemViewDetailsRequest")
	proto.RegisterType((*ThreadItemViewDetailsResponse)(nil), "threading.ThreadItemViewDetailsResponse")
	proto.RegisterType((*CreateLinkedThreadsRequest)(nil), "threading.CreateLinkedThreadsRequest")
	proto.RegisterType((*CreateLinkedThreadsResponse)(nil), "threading.CreateLinkedThreadsResponse")
	proto.RegisterType((*CreateOnboardingThreadRequest)(nil), "threading.CreateOnboardingThreadRequest")
	proto.RegisterType((*CreateOnboardingThreadResponse)(nil), "threading.CreateOnboardingThreadResponse")
	proto.RegisterType((*LinkedThreadRequest)(nil), "threading.LinkedThreadRequest")
	proto.RegisterType((*LinkedThreadResponse)(nil), "threading.LinkedThreadResponse")
	proto.RegisterType((*KeyValue)(nil), "threading.KeyValue")
	proto.RegisterType((*GenericSetupEvent)(nil), "threading.GenericSetupEvent")
	proto.RegisterType((*ProvisionedPhoneEvent)(nil), "threading.ProvisionedPhoneEvent")
	proto.RegisterType((*OnboardingThreadEventRequest)(nil), "threading.OnboardingThreadEventRequest")
	proto.RegisterType((*OnboardingThreadEventResponse)(nil), "threading.OnboardingThreadEventResponse")
	proto.RegisterEnum("threading.ThreadType", ThreadType_name, ThreadType_value)
	proto.RegisterEnum("threading.ThreadOrigin", ThreadOrigin_name, ThreadOrigin_value)
	proto.RegisterEnum("threading.Iterator_Direction", Iterator_Direction_name, Iterator_Direction_value)
	proto.RegisterEnum("threading.ThreadItem_Type", ThreadItem_Type_name, ThreadItem_Type_value)
	proto.RegisterEnum("threading.Reference_Type", Reference_Type_name, Reference_Type_value)
	proto.RegisterEnum("threading.Message_Status", Message_Status_name, Message_Status_value)
	proto.RegisterEnum("threading.Endpoint_Channel", Endpoint_Channel_name, Endpoint_Channel_value)
	proto.RegisterEnum("threading.Attachment_Type", Attachment_Type_name, Attachment_Type_value)
	proto.RegisterEnum("threading.QueryThreadsRequest_Type", QueryThreadsRequest_Type_name, QueryThreadsRequest_Type_value)
	proto.RegisterEnum("threading.OnboardingThreadEventRequest_LookupByType", OnboardingThreadEventRequest_LookupByType_name, OnboardingThreadEventRequest_LookupByType_value)
	proto.RegisterEnum("threading.OnboardingThreadEventRequest_EventType", OnboardingThreadEventRequest_EventType_name, OnboardingThreadEventRequest_EventType_value)
}
func (x ThreadType) String() string {
	s, ok := ThreadType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ThreadOrigin) String() string {
	s, ok := ThreadOrigin_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Iterator_Direction) String() string {
	s, ok := Iterator_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ThreadItem_Type) String() string {
	s, ok := ThreadItem_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Reference_Type) String() string {
	s, ok := Reference_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Message_Status) String() string {
	s, ok := Message_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Endpoint_Channel) String() string {
	s, ok := Endpoint_Channel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Attachment_Type) String() string {
	s, ok := Attachment_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryThreadsRequest_Type) String() string {
	s, ok := QueryThreadsRequest_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OnboardingThreadEventRequest_LookupByType) String() string {
	s, ok := OnboardingThreadEventRequest_LookupByType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OnboardingThreadEventRequest_EventType) String() string {
	s, ok := OnboardingThreadEventRequest_EventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Iterator) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Iterator)
	if !ok {
		that2, ok := that.(Iterator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StartCursor != that1.StartCursor {
		return false
	}
	if this.EndCursor != that1.EndCursor {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Thread) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Thread)
	if !ok {
		that2, ok := that.(Thread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if this.LastMessageTimestamp != that1.LastMessageTimestamp {
		return false
	}
	if this.LastMessageSummary != that1.LastMessageSummary {
		return false
	}
	if this.Unread != that1.Unread {
		return false
	}
	if len(this.LastPrimaryEntityEndpoints) != len(that1.LastPrimaryEntityEndpoints) {
		return false
	}
	for i := range this.LastPrimaryEntityEndpoints {
		if !this.LastPrimaryEntityEndpoints[i].Equal(that1.LastPrimaryEntityEndpoints[i]) {
			return false
		}
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.MessageCount != that1.MessageCount {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.UnreadReference != that1.UnreadReference {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (this *Member) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Member)
	if !ok {
		that2, ok := that.(Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *ThreadItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem)
	if !ok {
		that2, ok := that.(ThreadItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Item == nil {
		if this.Item != nil {
			return false
		}
	} else if this.Item == nil {
		return false
	} else if !this.Item.Equal(that1.Item) {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *ThreadItem_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem_Message)
	if !ok {
		that2, ok := that.(ThreadItem_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *ThreadItem_MessageUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem_MessageUpdated)
	if !ok {
		that2, ok := that.(ThreadItem_MessageUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MessageUpdated.Equal(that1.MessageUpdated) {
		return false
	}
	return true
}
func (this *ThreadItem_FollowerUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem_FollowerUpdated)
	if !ok {
		that2, ok := that.(ThreadItem_FollowerUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FollowerUpdated.Equal(that1.FollowerUpdated) {
		return false
	}
	return true
}
func (this *ThreadItemViewDetails) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemViewDetails)
	if !ok {
		that2, ok := that.(ThreadItemViewDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.ViewTime != that1.ViewTime {
		return false
	}
	return true
}
func (this *Reference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Reference)
	if !ok {
		that2, ok := that.(Reference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if this.EditedTimestamp != that1.EditedTimestamp {
		return false
	}
	if this.EditorEntityID != that1.EditorEntityID {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.TextRefs) != len(that1.TextRefs) {
		return false
	}
	for i := range this.TextRefs {
		if !this.TextRefs[i].Equal(that1.TextRefs[i]) {
			return false
		}
	}
	if this.Summary != that1.Summary {
		return false
	}
	return true
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *MessageUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageUpdated)
	if !ok {
		that2, ok := that.(MessageUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *FollowerUpdated) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FollowerUpdated)
	if !ok {
		that2, ok := that.(FollowerUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *SavedQuery) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQuery)
	if !ok {
		that2, ok := that.(SavedQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *Query) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Attachment_Image) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Image)
	if !ok {
		that2, ok := that.(Attachment_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *Attachment_Audio) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Audio)
	if !ok {
		that2, ok := that.(Attachment_Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *Attachment_GenericURL) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_GenericURL)
	if !ok {
		that2, ok := that.(Attachment_GenericURL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GenericURL.Equal(that1.GenericURL) {
		return false
	}
	return true
}
func (this *Attachment_Visit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Visit)
	if !ok {
		that2, ok := that.(Attachment_Visit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *Attachment_CarePlan) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_CarePlan)
	if !ok {
		that2, ok := that.(Attachment_CarePlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *Attachment_Video) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Video)
	if !ok {
		that2, ok := that.(Attachment_Video)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Video.Equal(that1.Video) {
		return false
	}
	return true
}
func (this *Attachment_PaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_PaymentRequest)
	if !ok {
		that2, ok := that.(Attachment_PaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PaymentRequest.Equal(that1.PaymentRequest) {
		return false
	}
	return true
}
func (this *ImageAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageAttachment)
	if !ok {
		that2, ok := that.(ImageAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *VideoAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VideoAttachment)
	if !ok {
		that2, ok := that.(VideoAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	return true
}
func (this *AudioAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AudioAttachment)
	if !ok {
		that2, ok := that.(AudioAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	return true
}
func (this *GenericURLAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericURLAttachment)
	if !ok {
		that2, ok := that.(GenericURLAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *VisitAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VisitAttachment)
	if !ok {
		that2, ok := that.(VisitAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.VisitName != that1.VisitName {
		return false
	}
	return true
}
func (this *CarePlanAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanAttachment)
	if !ok {
		that2, ok := that.(CarePlanAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CarePlanID != that1.CarePlanID {
		return false
	}
	if this.CarePlanName != that1.CarePlanName {
		return false
	}
	return true
}
func (this *PaymentRequestAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PaymentRequestAttachment)
	if !ok {
		that2, ok := that.(PaymentRequestAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PaymentID != that1.PaymentID {
		return false
	}
	return true
}
func (this *PublishedThreadItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedThreadItem)
	if !ok {
		that2, ok := that.(PublishedThreadItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *PostMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostMessageRequest)
	if !ok {
		that2, ok := that.(PostMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.DontNotify != that1.DontNotify {
		return false
	}
	return true
}
func (this *PostMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostMessageResponse)
	if !ok {
		that2, ok := that.(PostMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *MarkThreadsAsReadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkThreadsAsReadRequest)
	if !ok {
		that2, ok := that.(MarkThreadsAsReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ThreadWatermarks) != len(that1.ThreadWatermarks) {
		return false
	}
	for i := range this.ThreadWatermarks {
		if !this.ThreadWatermarks[i].Equal(that1.ThreadWatermarks[i]) {
			return false
		}
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Seen != that1.Seen {
		return false
	}
	return true
}
func (this *MarkThreadsAsReadRequest_ThreadWatermark) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkThreadsAsReadRequest_ThreadWatermark)
	if !ok {
		that2, ok := that.(MarkThreadsAsReadRequest_ThreadWatermark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.LastMessageTimestamp != that1.LastMessageTimestamp {
		return false
	}
	return true
}
func (this *MarkThreadsAsReadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkThreadsAsReadResponse)
	if !ok {
		that2, ok := that.(MarkThreadsAsReadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ThreadItemsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemsRequest)
	if !ok {
		that2, ok := that.(ThreadItemsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	if !this.Iterator.Equal(that1.Iterator) {
		return false
	}
	return true
}
func (this *ThreadItemEdge) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemEdge)
	if !ok {
		that2, ok := that.(ThreadItemEdge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	if this.Cursor != that1.Cursor {
		return false
	}
	return true
}
func (this *ThreadItemsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemsResponse)
	if !ok {
		that2, ok := that.(ThreadItemsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	return true
}
func (this *QueryThreadsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsRequest)
	if !ok {
		that2, ok := that.(QueryThreadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if !this.Iterator.Equal(that1.Iterator) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.QueryType == nil {
		if this.QueryType != nil {
			return false
		}
	} else if this.QueryType == nil {
		return false
	} else if !this.QueryType.Equal(that1.QueryType) {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *QueryThreadsRequest_Query) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsRequest_Query)
	if !ok {
		that2, ok := that.(QueryThreadsRequest_Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *QueryThreadsRequest_SavedQueryID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsRequest_SavedQueryID)
	if !ok {
		that2, ok := that.(QueryThreadsRequest_SavedQueryID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedQueryID != that1.SavedQueryID {
		return false
	}
	return true
}
func (this *ThreadEdge) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadEdge)
	if !ok {
		that2, ok := that.(ThreadEdge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	if this.Cursor != that1.Cursor {
		return false
	}
	return true
}
func (this *QueryThreadsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsResponse)
	if !ok {
		that2, ok := that.(QueryThreadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	return true
}
func (this *SavedQueriesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueriesRequest)
	if !ok {
		that2, ok := that.(SavedQueriesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *SavedQueriesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueriesResponse)
	if !ok {
		that2, ok := that.(SavedQueriesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SavedQueries) != len(that1.SavedQueries) {
		return false
	}
	for i := range this.SavedQueries {
		if !this.SavedQueries[i].Equal(that1.SavedQueries[i]) {
			return false
		}
	}
	return true
}
func (this *ThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadRequest)
	if !ok {
		that2, ok := that.(ThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *ThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadResponse)
	if !ok {
		that2, ok := that.(ThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *ThreadsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsRequest)
	if !ok {
		that2, ok := that.(ThreadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ThreadIDs) != len(that1.ThreadIDs) {
		return false
	}
	for i := range this.ThreadIDs {
		if this.ThreadIDs[i] != that1.ThreadIDs[i] {
			return false
		}
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *ThreadsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsResponse)
	if !ok {
		that2, ok := that.(ThreadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Threads) != len(that1.Threads) {
		return false
	}
	for i := range this.Threads {
		if !this.Threads[i].Equal(that1.Threads[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSavedQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedQueryRequest)
	if !ok {
		that2, ok := that.(CreateSavedQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *CreateSavedQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedQueryResponse)
	if !ok {
		that2, ok := that.(CreateSavedQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SavedQuery.Equal(that1.SavedQuery) {
		return false
	}
	return true
}
func (this *UpdateSavedQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedQueryRequest)
	if !ok {
		that2, ok := that.(UpdateSavedQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.QueryID != that1.QueryID {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *UpdateSavedQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedQueryResponse)
	if !ok {
		that2, ok := that.(UpdateSavedQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteMessageRequest)
	if !ok {
		that2, ok := that.(DeleteMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	return true
}
func (this *DeleteMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteMessageResponse)
	if !ok {
		that2, ok := that.(DeleteMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteThreadRequest)
	if !ok {
		that2, ok := that.(DeleteThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *DeleteThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteThreadResponse)
	if !ok {
		that2, ok := that.(DeleteThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateThreadRequest)
	if !ok {
		that2, ok := that.(UpdateThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if len(this.AddMemberEntityIDs) != len(that1.AddMemberEntityIDs) {
		return false
	}
	for i := range this.AddMemberEntityIDs {
		if this.AddMemberEntityIDs[i] != that1.AddMemberEntityIDs[i] {
			return false
		}
	}
	if len(this.RemoveMemberEntityIDs) != len(that1.RemoveMemberEntityIDs) {
		return false
	}
	for i := range this.RemoveMemberEntityIDs {
		if this.RemoveMemberEntityIDs[i] != that1.RemoveMemberEntityIDs[i] {
			return false
		}
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	return true
}
func (this *UpdateThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateThreadResponse)
	if !ok {
		that2, ok := that.(UpdateThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *CreateThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateThreadRequest)
	if !ok {
		that2, ok := that.(CreateThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.MessageTitle != that1.MessageTitle {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.MemberEntityIDs) != len(that1.MemberEntityIDs) {
		return false
	}
	for i := range this.MemberEntityIDs {
		if this.MemberEntityIDs[i] != that1.MemberEntityIDs[i] {
			return false
		}
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	if this.DontNotify != that1.DontNotify {
		return false
	}
	return true
}
func (this *CreateThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateThreadResponse)
	if !ok {
		that2, ok := that.(CreateThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if !this.ThreadItem.Equal(that1.ThreadItem) {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *CreateEmptyThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEmptyThreadRequest)
	if !ok {
		that2, ok := that.(CreateEmptyThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.MemberEntityIDs) != len(that1.MemberEntityIDs) {
		return false
	}
	for i := range this.MemberEntityIDs {
		if this.MemberEntityIDs[i] != that1.MemberEntityIDs[i] {
			return false
		}
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (this *CreateEmptyThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEmptyThreadResponse)
	if !ok {
		that2, ok := that.(CreateEmptyThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *ThreadMembersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadMembersRequest)
	if !ok {
		that2, ok := that.(ThreadMembersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *ThreadMembersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadMembersResponse)
	if !ok {
		that2, ok := that.(ThreadMembersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *ThreadsForMemberRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsForMemberRequest)
	if !ok {
		that2, ok := that.(ThreadsForMemberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.PrimaryOnly != that1.PrimaryOnly {
		return false
	}
	return true
}
func (this *ThreadsForMemberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsForMemberResponse)
	if !ok {
		that2, ok := that.(ThreadsForMemberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Threads) != len(that1.Threads) {
		return false
	}
	for i := range this.Threads {
		if !this.Threads[i].Equal(that1.Threads[i]) {
			return false
		}
	}
	return true
}
func (this *SavedQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueryRequest)
	if !ok {
		that2, ok := that.(SavedQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedQueryID != that1.SavedQueryID {
		return false
	}
	return true
}
func (this *SavedQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueryResponse)
	if !ok {
		that2, ok := that.(SavedQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SavedQuery.Equal(that1.SavedQuery) {
		return false
	}
	return true
}
func (this *ThreadItemRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemRequest)
	if !ok {
		that2, ok := that.(ThreadItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemID != that1.ItemID {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *ThreadItemResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemResponse)
	if !ok {
		that2, ok := that.(ThreadItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *ThreadItemViewDetailsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemViewDetailsRequest)
	if !ok {
		that2, ok := that.(ThreadItemViewDetailsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemID != that1.ItemID {
		return false
	}
	return true
}
func (this *ThreadItemViewDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemViewDetailsResponse)
	if !ok {
		that2, ok := that.(ThreadItemViewDetailsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ItemViewDetails) != len(that1.ItemViewDetails) {
		return false
	}
	for i := range this.ItemViewDetails {
		if !this.ItemViewDetails[i].Equal(that1.ItemViewDetails[i]) {
			return false
		}
	}
	return true
}
func (this *CreateLinkedThreadsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateLinkedThreadsRequest)
	if !ok {
		that2, ok := that.(CreateLinkedThreadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Organization1ID != that1.Organization1ID {
		return false
	}
	if this.Organization2ID != that1.Organization2ID {
		return false
	}
	if this.PrimaryEntity1ID != that1.PrimaryEntity1ID {
		return false
	}
	if this.PrimaryEntity2ID != that1.PrimaryEntity2ID {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.MessageTitle != that1.MessageTitle {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.PrependSenderThread1 != that1.PrependSenderThread1 {
		return false
	}
	if this.PrependSenderThread2 != that1.PrependSenderThread2 {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SystemTitle1 != that1.SystemTitle1 {
		return false
	}
	if this.SystemTitle2 != that1.SystemTitle2 {
		return false
	}
	return true
}
func (this *CreateLinkedThreadsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateLinkedThreadsResponse)
	if !ok {
		that2, ok := that.(CreateLinkedThreadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread1.Equal(that1.Thread1) {
		return false
	}
	if !this.Thread2.Equal(that1.Thread2) {
		return false
	}
	return true
}
func (this *CreateOnboardingThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateOnboardingThreadRequest)
	if !ok {
		that2, ok := that.(CreateOnboardingThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	return true
}
func (this *CreateOnboardingThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateOnboardingThreadResponse)
	if !ok {
		that2, ok := that.(CreateOnboardingThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *LinkedThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinkedThreadRequest)
	if !ok {
		that2, ok := that.(LinkedThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *LinkedThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinkedThreadResponse)
	if !ok {
		that2, ok := that.(LinkedThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	if this.PrependSender != that1.PrependSender {
		return false
	}
	return true
}
func (this *KeyValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KeyValue)
	if !ok {
		that2, ok := that.(KeyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *GenericSetupEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericSetupEvent)
	if !ok {
		that2, ok := that.(GenericSetupEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	return true
}
func (this *ProvisionedPhoneEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionedPhoneEvent)
	if !ok {
		that2, ok := that.(ProvisionedPhoneEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LookupByType != that1.LookupByType {
		return false
	}
	if that1.LookupBy == nil {
		if this.LookupBy != nil {
			return false
		}
	} else if this.LookupBy == nil {
		return false
	} else if !this.LookupBy.Equal(that1.LookupBy) {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_ThreadID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_ThreadID)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_ThreadID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_EntityID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_EntityID)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_EntityID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_GenericSetup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_GenericSetup)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_GenericSetup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GenericSetup.Equal(that1.GenericSetup) {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_ProvisionedPhone) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_ProvisionedPhone)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_ProvisionedPhone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ProvisionedPhone.Equal(that1.ProvisionedPhone) {
		return false
	}
	return true
}
func (this *OnboardingThreadEventResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventResponse)
	if !ok {
		that2, ok := that.(OnboardingThreadEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *Iterator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.Iterator{")
	s = append(s, "StartCursor: "+fmt.Sprintf("%#v", this.StartCursor)+",\n")
	s = append(s, "EndCursor: "+fmt.Sprintf("%#v", this.EndCursor)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Thread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&threading.Thread{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "LastMessageTimestamp: "+fmt.Sprintf("%#v", this.LastMessageTimestamp)+",\n")
	s = append(s, "LastMessageSummary: "+fmt.Sprintf("%#v", this.LastMessageSummary)+",\n")
	s = append(s, "Unread: "+fmt.Sprintf("%#v", this.Unread)+",\n")
	if this.LastPrimaryEntityEndpoints != nil {
		s = append(s, "LastPrimaryEntityEndpoints: "+fmt.Sprintf("%#v", this.LastPrimaryEntityEndpoints)+",\n")
	}
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "MessageCount: "+fmt.Sprintf("%#v", this.MessageCount)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "UnreadReference: "+fmt.Sprintf("%#v", this.UnreadReference)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.Member{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&threading.ThreadItem{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItem_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ThreadItem_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *ThreadItem_MessageUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ThreadItem_MessageUpdated{` +
		`MessageUpdated:` + fmt.Sprintf("%#v", this.MessageUpdated) + `}`}, ", ")
	return s
}
func (this *ThreadItem_FollowerUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ThreadItem_FollowerUpdated{` +
		`FollowerUpdated:` + fmt.Sprintf("%#v", this.FollowerUpdated) + `}`}, ", ")
	return s
}
func (this *ThreadItemViewDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.ThreadItemViewDetails{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "ViewTime: "+fmt.Sprintf("%#v", this.ViewTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Reference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.Reference{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&threading.Message{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destinations != nil {
		s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	}
	s = append(s, "EditedTimestamp: "+fmt.Sprintf("%#v", this.EditedTimestamp)+",\n")
	s = append(s, "EditorEntityID: "+fmt.Sprintf("%#v", this.EditorEntityID)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.TextRefs != nil {
		s = append(s, "TextRefs: "+fmt.Sprintf("%#v", this.TextRefs)+",\n")
	}
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Endpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.Endpoint{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.MessageUpdated{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FollowerUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.FollowerUpdated{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.SavedQuery{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.Query{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&threading.Attachment{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment_Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Image{` +
		`Image:` + fmt.Sprintf("%#v", this.Image) + `}`}, ", ")
	return s
}
func (this *Attachment_Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Audio{` +
		`Audio:` + fmt.Sprintf("%#v", this.Audio) + `}`}, ", ")
	return s
}
func (this *Attachment_GenericURL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_GenericURL{` +
		`GenericURL:` + fmt.Sprintf("%#v", this.GenericURL) + `}`}, ", ")
	return s
}
func (this *Attachment_Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Visit{` +
		`Visit:` + fmt.Sprintf("%#v", this.Visit) + `}`}, ", ")
	return s
}
func (this *Attachment_CarePlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_CarePlan{` +
		`CarePlan:` + fmt.Sprintf("%#v", this.CarePlan) + `}`}, ", ")
	return s
}
func (this *Attachment_Video) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Video{` +
		`Video:` + fmt.Sprintf("%#v", this.Video) + `}`}, ", ")
	return s
}
func (this *Attachment_PaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_PaymentRequest{` +
		`PaymentRequest:` + fmt.Sprintf("%#v", this.PaymentRequest) + `}`}, ", ")
	return s
}
func (this *ImageAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.ImageAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VideoAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.VideoAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AudioAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.AudioAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericURLAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.GenericURLAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisitAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.VisitAttachment{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "VisitName: "+fmt.Sprintf("%#v", this.VisitName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.CarePlanAttachment{")
	s = append(s, "CarePlanID: "+fmt.Sprintf("%#v", this.CarePlanID)+",\n")
	s = append(s, "CarePlanName: "+fmt.Sprintf("%#v", this.CarePlanName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaymentRequestAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.PaymentRequestAttachment{")
	s = append(s, "PaymentID: "+fmt.Sprintf("%#v", this.PaymentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishedThreadItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.PublishedThreadItem{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&threading.PostMessageRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destinations != nil {
		s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	}
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "DontNotify: "+fmt.Sprintf("%#v", this.DontNotify)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.PostMessageResponse{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkThreadsAsReadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.MarkThreadsAsReadRequest{")
	if this.ThreadWatermarks != nil {
		s = append(s, "ThreadWatermarks: "+fmt.Sprintf("%#v", this.ThreadWatermarks)+",\n")
	}
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Seen: "+fmt.Sprintf("%#v", this.Seen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkThreadsAsReadRequest_ThreadWatermark) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.MarkThreadsAsReadRequest_ThreadWatermark{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "LastMessageTimestamp: "+fmt.Sprintf("%#v", this.LastMessageTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkThreadsAsReadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.MarkThreadsAsReadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.ThreadItemsRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	if this.Iterator != nil {
		s = append(s, "Iterator: "+fmt.Sprintf("%#v", this.Iterator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemEdge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadItemEdge{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "Cursor: "+fmt.Sprintf("%#v", this.Cursor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadItemsResponse{")
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "HasMore: "+fmt.Sprintf("%#v", this.HasMore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryThreadsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&threading.QueryThreadsRequest{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	if this.Iterator != nil {
		s = append(s, "Iterator: "+fmt.Sprintf("%#v", this.Iterator)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.QueryType != nil {
		s = append(s, "QueryType: "+fmt.Sprintf("%#v", this.QueryType)+",\n")
	}
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryThreadsRequest_Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.QueryThreadsRequest_Query{` +
		`Query:` + fmt.Sprintf("%#v", this.Query) + `}`}, ", ")
	return s
}
func (this *QueryThreadsRequest_SavedQueryID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.QueryThreadsRequest_SavedQueryID{` +
		`SavedQueryID:` + fmt.Sprintf("%#v", this.SavedQueryID) + `}`}, ", ")
	return s
}
func (this *ThreadEdge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadEdge{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "Cursor: "+fmt.Sprintf("%#v", this.Cursor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryThreadsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.QueryThreadsResponse{")
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "HasMore: "+fmt.Sprintf("%#v", this.HasMore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueriesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueriesRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueriesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueriesResponse{")
	if this.SavedQueries != nil {
		s = append(s, "SavedQueries: "+fmt.Sprintf("%#v", this.SavedQueries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadsRequest{")
	s = append(s, "ThreadIDs: "+fmt.Sprintf("%#v", this.ThreadIDs)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadsResponse{")
	if this.Threads != nil {
		s = append(s, "Threads: "+fmt.Sprintf("%#v", this.Threads)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSavedQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.CreateSavedQueryRequest{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSavedQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateSavedQueryResponse{")
	if this.SavedQuery != nil {
		s = append(s, "SavedQuery: "+fmt.Sprintf("%#v", this.SavedQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSavedQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.UpdateSavedQueryRequest{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "QueryID: "+fmt.Sprintf("%#v", this.QueryID)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSavedQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.UpdateSavedQueryResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.DeleteMessageRequest{")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.DeleteThreadRequest{")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteThreadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.UpdateThreadRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "AddMemberEntityIDs: "+fmt.Sprintf("%#v", this.AddMemberEntityIDs)+",\n")
	s = append(s, "RemoveMemberEntityIDs: "+fmt.Sprintf("%#v", this.RemoveMemberEntityIDs)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.UpdateThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&threading.CreateThreadRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destinations != nil {
		s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	}
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "MessageTitle: "+fmt.Sprintf("%#v", this.MessageTitle)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "MemberEntityIDs: "+fmt.Sprintf("%#v", this.MemberEntityIDs)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "DontNotify: "+fmt.Sprintf("%#v", this.DontNotify)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.CreateThreadResponse{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	if this.ThreadItem != nil {
		s = append(s, "ThreadItem: "+fmt.Sprintf("%#v", this.ThreadItem)+",\n")
	}
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEmptyThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&threading.CreateEmptyThreadRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "MemberEntityIDs: "+fmt.Sprintf("%#v", this.MemberEntityIDs)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEmptyThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateEmptyThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadMembersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadMembersRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadMembersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadMembersResponse{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsForMemberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadsForMemberRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "PrimaryOnly: "+fmt.Sprintf("%#v", this.PrimaryOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsForMemberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadsForMemberResponse{")
	if this.Threads != nil {
		s = append(s, "Threads: "+fmt.Sprintf("%#v", this.Threads)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueryRequest{")
	s = append(s, "SavedQueryID: "+fmt.Sprintf("%#v", this.SavedQueryID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueryResponse{")
	if this.SavedQuery != nil {
		s = append(s, "SavedQuery: "+fmt.Sprintf("%#v", this.SavedQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadItemRequest{")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadItemResponse{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemViewDetailsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadItemViewDetailsRequest{")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemViewDetailsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadItemViewDetailsResponse{")
	if this.ItemViewDetails != nil {
		s = append(s, "ItemViewDetails: "+fmt.Sprintf("%#v", this.ItemViewDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLinkedThreadsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&threading.CreateLinkedThreadsRequest{")
	s = append(s, "Organization1ID: "+fmt.Sprintf("%#v", this.Organization1ID)+",\n")
	s = append(s, "Organization2ID: "+fmt.Sprintf("%#v", this.Organization2ID)+",\n")
	s = append(s, "PrimaryEntity1ID: "+fmt.Sprintf("%#v", this.PrimaryEntity1ID)+",\n")
	s = append(s, "PrimaryEntity2ID: "+fmt.Sprintf("%#v", this.PrimaryEntity2ID)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "MessageTitle: "+fmt.Sprintf("%#v", this.MessageTitle)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "PrependSenderThread1: "+fmt.Sprintf("%#v", this.PrependSenderThread1)+",\n")
	s = append(s, "PrependSenderThread2: "+fmt.Sprintf("%#v", this.PrependSenderThread2)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SystemTitle1: "+fmt.Sprintf("%#v", this.SystemTitle1)+",\n")
	s = append(s, "SystemTitle2: "+fmt.Sprintf("%#v", this.SystemTitle2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLinkedThreadsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.CreateLinkedThreadsResponse{")
	if this.Thread1 != nil {
		s = append(s, "Thread1: "+fmt.Sprintf("%#v", this.Thread1)+",\n")
	}
	if this.Thread2 != nil {
		s = append(s, "Thread2: "+fmt.Sprintf("%#v", this.Thread2)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOnboardingThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.CreateOnboardingThreadRequest{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOnboardingThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateOnboardingThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkedThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.LinkedThreadRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkedThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.LinkedThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "PrependSender: "+fmt.Sprintf("%#v", this.PrependSender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.KeyValue{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericSetupEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.GenericSetupEvent{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionedPhoneEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ProvisionedPhoneEvent{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnboardingThreadEventRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&threading.OnboardingThreadEventRequest{")
	s = append(s, "LookupByType: "+fmt.Sprintf("%#v", this.LookupByType)+",\n")
	if this.LookupBy != nil {
		s = append(s, "LookupBy: "+fmt.Sprintf("%#v", this.LookupBy)+",\n")
	}
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnboardingThreadEventRequest_ThreadID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_ThreadID{` +
		`ThreadID:` + fmt.Sprintf("%#v", this.ThreadID) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventRequest_EntityID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_EntityID{` +
		`EntityID:` + fmt.Sprintf("%#v", this.EntityID) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventRequest_GenericSetup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_GenericSetup{` +
		`GenericSetup:` + fmt.Sprintf("%#v", this.GenericSetup) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventRequest_ProvisionedPhone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_ProvisionedPhone{` +
		`ProvisionedPhone:` + fmt.Sprintf("%#v", this.ProvisionedPhone) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.OnboardingThreadEventResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Threads service

type ThreadsClient interface {
	// CreateSavedQuery saves a query for later use
	CreateSavedQuery(ctx context.Context, in *CreateSavedQueryRequest, opts ...grpc.CallOption) (*CreateSavedQueryResponse, error)
	// CreateEmptyThread creates a new thread with no messages
	CreateEmptyThread(ctx context.Context, in *CreateEmptyThreadRequest, opts ...grpc.CallOption) (*CreateEmptyThreadResponse, error)
	// CreateLinkedThreads creates a pair of threads in two separate organizations that allows cross-org communication.
	CreateLinkedThreads(ctx context.Context, in *CreateLinkedThreadsRequest, opts ...grpc.CallOption) (*CreateLinkedThreadsResponse, error)
	// CreateOnboardingThread create a new scripted onboarding thread.
	CreateOnboardingThread(ctx context.Context, in *CreateOnboardingThreadRequest, opts ...grpc.CallOption) (*CreateOnboardingThreadResponse, error)
	// CreateThread create a new thread with an initial message
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	// DeleteMessage deletes a message from a thread
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// DeleteThread deletes a thread
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error)
	// LinkedThread returns the linked thread of one exists
	LinkedThread(ctx context.Context, in *LinkedThreadRequest, opts ...grpc.CallOption) (*LinkedThreadResponse, error)
	// MarkThreadsAsRead marks all threads in the list as read.
	MarkThreadsAsRead(ctx context.Context, in *MarkThreadsAsReadRequest, opts ...grpc.CallOption) (*MarkThreadsAsReadResponse, error)
	// OnboardThreadEvent processes an event in an onboarding thread
	OnboardingThreadEvent(ctx context.Context, in *OnboardingThreadEventRequest, opts ...grpc.CallOption) (*OnboardingThreadEventResponse, error)
	// PostMessage posts a message into a specified thread
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error)
	// QueryThreads queries the list of threads in an organization
	QueryThreads(ctx context.Context, in *QueryThreadsRequest, opts ...grpc.CallOption) (*QueryThreadsResponse, error)
	// SavedQuery returns a single saved query by ID
	SavedQuery(ctx context.Context, in *SavedQueryRequest, opts ...grpc.CallOption) (*SavedQueryResponse, error)
	// SavedQueries returns the list of saved queries for an org / entity pair
	SavedQueries(ctx context.Context, in *SavedQueriesRequest, opts ...grpc.CallOption) (*SavedQueriesResponse, error)
	// DEPRECATED: Thread lookups and returns a single thread by ID
	Thread(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	// Theads looks up list of threads.
	Threads(ctx context.Context, in *ThreadsRequest, opts ...grpc.CallOption) (*ThreadsResponse, error)
	// ThreadsForMember looks up a list of threads by entity membership
	ThreadsForMember(ctx context.Context, in *ThreadsForMemberRequest, opts ...grpc.CallOption) (*ThreadsForMemberResponse, error)
	// ThreadItem returns a single thread item
	ThreadItem(ctx context.Context, in *ThreadItemRequest, opts ...grpc.CallOption) (*ThreadItemResponse, error)
	// ThreadItems returns the items (messages or events) in a thread
	ThreadItems(ctx context.Context, in *ThreadItemsRequest, opts ...grpc.CallOption) (*ThreadItemsResponse, error)
	// ThreadMembers returns the members of a thread
	ThreadMembers(ctx context.Context, in *ThreadMembersRequest, opts ...grpc.CallOption) (*ThreadMembersResponse, error)
	// ThreadItemViewDetails returns the view details of a thread
	ThreadItemViewDetails(ctx context.Context, in *ThreadItemViewDetailsRequest, opts ...grpc.CallOption) (*ThreadItemViewDetailsResponse, error)
	// UpdateSavedQuery updated a saved query
	UpdateSavedQuery(ctx context.Context, in *UpdateSavedQueryRequest, opts ...grpc.CallOption) (*UpdateSavedQueryResponse, error)
	// UpdateThread updates the thread members and other information
	UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*UpdateThreadResponse, error)
}

type threadsClient struct {
	cc *grpc.ClientConn
}

func NewThreadsClient(cc *grpc.ClientConn) ThreadsClient {
	return &threadsClient{cc}
}

func (c *threadsClient) CreateSavedQuery(ctx context.Context, in *CreateSavedQueryRequest, opts ...grpc.CallOption) (*CreateSavedQueryResponse, error) {
	out := new(CreateSavedQueryResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateSavedQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateEmptyThread(ctx context.Context, in *CreateEmptyThreadRequest, opts ...grpc.CallOption) (*CreateEmptyThreadResponse, error) {
	out := new(CreateEmptyThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateEmptyThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateLinkedThreads(ctx context.Context, in *CreateLinkedThreadsRequest, opts ...grpc.CallOption) (*CreateLinkedThreadsResponse, error) {
	out := new(CreateLinkedThreadsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateLinkedThreads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateOnboardingThread(ctx context.Context, in *CreateOnboardingThreadRequest, opts ...grpc.CallOption) (*CreateOnboardingThreadResponse, error) {
	out := new(CreateOnboardingThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateOnboardingThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	out := new(CreateThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error) {
	out := new(DeleteThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) LinkedThread(ctx context.Context, in *LinkedThreadRequest, opts ...grpc.CallOption) (*LinkedThreadResponse, error) {
	out := new(LinkedThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/LinkedThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) MarkThreadsAsRead(ctx context.Context, in *MarkThreadsAsReadRequest, opts ...grpc.CallOption) (*MarkThreadsAsReadResponse, error) {
	out := new(MarkThreadsAsReadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/MarkThreadsAsRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) OnboardingThreadEvent(ctx context.Context, in *OnboardingThreadEventRequest, opts ...grpc.CallOption) (*OnboardingThreadEventResponse, error) {
	out := new(OnboardingThreadEventResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/OnboardingThreadEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error) {
	out := new(PostMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/PostMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) QueryThreads(ctx context.Context, in *QueryThreadsRequest, opts ...grpc.CallOption) (*QueryThreadsResponse, error) {
	out := new(QueryThreadsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/QueryThreads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) SavedQuery(ctx context.Context, in *SavedQueryRequest, opts ...grpc.CallOption) (*SavedQueryResponse, error) {
	out := new(SavedQueryResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/SavedQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) SavedQueries(ctx context.Context, in *SavedQueriesRequest, opts ...grpc.CallOption) (*SavedQueriesResponse, error) {
	out := new(SavedQueriesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/SavedQueries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Thread(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	out := new(ThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/Thread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Threads(ctx context.Context, in *ThreadsRequest, opts ...grpc.CallOption) (*ThreadsResponse, error) {
	out := new(ThreadsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/Threads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadsForMember(ctx context.Context, in *ThreadsForMemberRequest, opts ...grpc.CallOption) (*ThreadsForMemberResponse, error) {
	out := new(ThreadsForMemberResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadsForMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadItem(ctx context.Context, in *ThreadItemRequest, opts ...grpc.CallOption) (*ThreadItemResponse, error) {
	out := new(ThreadItemResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadItems(ctx context.Context, in *ThreadItemsRequest, opts ...grpc.CallOption) (*ThreadItemsResponse, error) {
	out := new(ThreadItemsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadItems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadMembers(ctx context.Context, in *ThreadMembersRequest, opts ...grpc.CallOption) (*ThreadMembersResponse, error) {
	out := new(ThreadMembersResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadItemViewDetails(ctx context.Context, in *ThreadItemViewDetailsRequest, opts ...grpc.CallOption) (*ThreadItemViewDetailsResponse, error) {
	out := new(ThreadItemViewDetailsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadItemViewDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateSavedQuery(ctx context.Context, in *UpdateSavedQueryRequest, opts ...grpc.CallOption) (*UpdateSavedQueryResponse, error) {
	out := new(UpdateSavedQueryResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateSavedQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*UpdateThreadResponse, error) {
	out := new(UpdateThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Threads service

type ThreadsServer interface {
	// CreateSavedQuery saves a query for later use
	CreateSavedQuery(context.Context, *CreateSavedQueryRequest) (*CreateSavedQueryResponse, error)
	// CreateEmptyThread creates a new thread with no messages
	CreateEmptyThread(context.Context, *CreateEmptyThreadRequest) (*CreateEmptyThreadResponse, error)
	// CreateLinkedThreads creates a pair of threads in two separate organizations that allows cross-org communication.
	CreateLinkedThreads(context.Context, *CreateLinkedThreadsRequest) (*CreateLinkedThreadsResponse, error)
	// CreateOnboardingThread create a new scripted onboarding thread.
	CreateOnboardingThread(context.Context, *CreateOnboardingThreadRequest) (*CreateOnboardingThreadResponse, error)
	// CreateThread create a new thread with an initial message
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	// DeleteMessage deletes a message from a thread
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// DeleteThread deletes a thread
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadResponse, error)
	// LinkedThread returns the linked thread of one exists
	LinkedThread(context.Context, *LinkedThreadRequest) (*LinkedThreadResponse, error)
	// MarkThreadsAsRead marks all threads in the list as read.
	MarkThreadsAsRead(context.Context, *MarkThreadsAsReadRequest) (*MarkThreadsAsReadResponse, error)
	// OnboardThreadEvent processes an event in an onboarding thread
	OnboardingThreadEvent(context.Context, *OnboardingThreadEventRequest) (*OnboardingThreadEventResponse, error)
	// PostMessage posts a message into a specified thread
	PostMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error)
	// QueryThreads queries the list of threads in an organization
	QueryThreads(context.Context, *QueryThreadsRequest) (*QueryThreadsResponse, error)
	// SavedQuery returns a single saved query by ID
	SavedQuery(context.Context, *SavedQueryRequest) (*SavedQueryResponse, error)
	// SavedQueries returns the list of saved queries for an org / entity pair
	SavedQueries(context.Context, *SavedQueriesRequest) (*SavedQueriesResponse, error)
	// DEPRECATED: Thread lookups and returns a single thread by ID
	Thread(context.Context, *ThreadRequest) (*ThreadResponse, error)
	// Theads looks up list of threads.
	Threads(context.Context, *ThreadsRequest) (*ThreadsResponse, error)
	// ThreadsForMember looks up a list of threads by entity membership
	ThreadsForMember(context.Context, *ThreadsForMemberRequest) (*ThreadsForMemberResponse, error)
	// ThreadItem returns a single thread item
	ThreadItem(context.Context, *ThreadItemRequest) (*ThreadItemResponse, error)
	// ThreadItems returns the items (messages or events) in a thread
	ThreadItems(context.Context, *ThreadItemsRequest) (*ThreadItemsResponse, error)
	// ThreadMembers returns the members of a thread
	ThreadMembers(context.Context, *ThreadMembersRequest) (*ThreadMembersResponse, error)
	// ThreadItemViewDetails returns the view details of a thread
	ThreadItemViewDetails(context.Context, *ThreadItemViewDetailsRequest) (*ThreadItemViewDetailsResponse, error)
	// UpdateSavedQuery updated a saved query
	UpdateSavedQuery(context.Context, *UpdateSavedQueryRequest) (*UpdateSavedQueryResponse, error)
	// UpdateThread updates the thread members and other information
	UpdateThread(context.Context, *UpdateThreadRequest) (*UpdateThreadResponse, error)
}

func RegisterThreadsServer(s *grpc.Server, srv ThreadsServer) {
	s.RegisterService(&_Threads_serviceDesc, srv)
}

func _Threads_CreateSavedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSavedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateSavedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateSavedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateSavedQuery(ctx, req.(*CreateSavedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateEmptyThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmptyThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateEmptyThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateEmptyThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateEmptyThread(ctx, req.(*CreateEmptyThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateLinkedThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkedThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateLinkedThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateLinkedThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateLinkedThreads(ctx, req.(*CreateLinkedThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateOnboardingThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOnboardingThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateOnboardingThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateOnboardingThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateOnboardingThread(ctx, req.(*CreateOnboardingThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_LinkedThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkedThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).LinkedThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/LinkedThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).LinkedThread(ctx, req.(*LinkedThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_MarkThreadsAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkThreadsAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).MarkThreadsAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/MarkThreadsAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).MarkThreadsAsRead(ctx, req.(*MarkThreadsAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_OnboardingThreadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingThreadEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).OnboardingThreadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/OnboardingThreadEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).OnboardingThreadEvent(ctx, req.(*OnboardingThreadEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).PostMessage(ctx, req.(*PostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_QueryThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).QueryThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/QueryThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).QueryThreads(ctx, req.(*QueryThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_SavedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).SavedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/SavedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).SavedQuery(ctx, req.(*SavedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_SavedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).SavedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/SavedQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).SavedQueries(ctx, req.(*SavedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Thread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Thread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/Thread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Thread(ctx, req.(*ThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Threads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Threads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/Threads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Threads(ctx, req.(*ThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadsForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsForMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadsForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadsForMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadsForMember(ctx, req.(*ThreadsForMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadItem(ctx, req.(*ThreadItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadItems(ctx, req.(*ThreadItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadMembers(ctx, req.(*ThreadMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadItemViewDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadItemViewDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadItemViewDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadItemViewDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadItemViewDetails(ctx, req.(*ThreadItemViewDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateSavedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSavedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateSavedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateSavedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateSavedQuery(ctx, req.(*UpdateSavedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateThread(ctx, req.(*UpdateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Threads_serviceDesc = grpc.ServiceDesc{
	ServiceName: "threading.Threads",
	HandlerType: (*ThreadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSavedQuery",
			Handler:    _Threads_CreateSavedQuery_Handler,
		},
		{
			MethodName: "CreateEmptyThread",
			Handler:    _Threads_CreateEmptyThread_Handler,
		},
		{
			MethodName: "CreateLinkedThreads",
			Handler:    _Threads_CreateLinkedThreads_Handler,
		},
		{
			MethodName: "CreateOnboardingThread",
			Handler:    _Threads_CreateOnboardingThread_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _Threads_CreateThread_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Threads_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _Threads_DeleteThread_Handler,
		},
		{
			MethodName: "LinkedThread",
			Handler:    _Threads_LinkedThread_Handler,
		},
		{
			MethodName: "MarkThreadsAsRead",
			Handler:    _Threads_MarkThreadsAsRead_Handler,
		},
		{
			MethodName: "OnboardingThreadEvent",
			Handler:    _Threads_OnboardingThreadEvent_Handler,
		},
		{
			MethodName: "PostMessage",
			Handler:    _Threads_PostMessage_Handler,
		},
		{
			MethodName: "QueryThreads",
			Handler:    _Threads_QueryThreads_Handler,
		},
		{
			MethodName: "SavedQuery",
			Handler:    _Threads_SavedQuery_Handler,
		},
		{
			MethodName: "SavedQueries",
			Handler:    _Threads_SavedQueries_Handler,
		},
		{
			MethodName: "Thread",
			Handler:    _Threads_Thread_Handler,
		},
		{
			MethodName: "Threads",
			Handler:    _Threads_Threads_Handler,
		},
		{
			MethodName: "ThreadsForMember",
			Handler:    _Threads_ThreadsForMember_Handler,
		},
		{
			MethodName: "ThreadItem",
			Handler:    _Threads_ThreadItem_Handler,
		},
		{
			MethodName: "ThreadItems",
			Handler:    _Threads_ThreadItems_Handler,
		},
		{
			MethodName: "ThreadMembers",
			Handler:    _Threads_ThreadMembers_Handler,
		},
		{
			MethodName: "ThreadItemViewDetails",
			Handler:    _Threads_ThreadItemViewDetails_Handler,
		},
		{
			MethodName: "UpdateSavedQuery",
			Handler:    _Threads_UpdateSavedQuery_Handler,
		},
		{
			MethodName: "UpdateThread",
			Handler:    _Threads_UpdateThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorSvc,
}

func (m *Iterator) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Iterator) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StartCursor) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.StartCursor)))
		i += copy(data[i:], m.StartCursor)
	}
	if len(m.EndCursor) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EndCursor)))
		i += copy(data[i:], m.EndCursor)
	}
	if m.Direction != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Direction))
	}
	if m.Count != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Count))
	}
	return i, nil
}

func (m *Thread) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Thread) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.PrimaryEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PrimaryEntityID)))
		i += copy(data[i:], m.PrimaryEntityID)
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastMessageTimestamp != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.LastMessageTimestamp))
	}
	if len(m.LastMessageSummary) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LastMessageSummary)))
		i += copy(data[i:], m.LastMessageSummary)
	}
	if m.Unread {
		data[i] = 0x38
		i++
		if m.Unread {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.LastPrimaryEntityEndpoints) > 0 {
		for _, msg := range m.LastPrimaryEntityEndpoints {
			data[i] = 0x42
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if m.MessageCount != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.MessageCount))
	}
	if m.Type != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.SystemTitle) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SystemTitle)))
		i += copy(data[i:], m.SystemTitle)
	}
	if len(m.UserTitle) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UserTitle)))
		i += copy(data[i:], m.UserTitle)
	}
	if m.UnreadReference {
		data[i] = 0x70
		i++
		if m.UnreadReference {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Origin != 0 {
		data[i] = 0x78
		i++
		i = encodeVarintSvc(data, i, uint64(m.Origin))
	}
	return i, nil
}

func (m *Member) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Member) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	return i, nil
}

func (m *ThreadItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if m.Timestamp != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Timestamp))
	}
	if len(m.ActorEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	if m.Internal {
		data[i] = 0x20
		i++
		if m.Internal {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Type != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.ThreadID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if m.Item != nil {
		nn1, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ThreadItem_Message) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Message != nil {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(m.Message.Size()))
		n2, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ThreadItem_MessageUpdated) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.MessageUpdated != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintSvc(data, i, uint64(m.MessageUpdated.Size()))
		n3, err := m.MessageUpdated.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ThreadItem_FollowerUpdated) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.FollowerUpdated != nil {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(m.FollowerUpdated.Size()))
		n4, err := m.FollowerUpdated.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ThreadItemViewDetails) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemViewDetails) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadItemID)))
		i += copy(data[i:], m.ThreadItemID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.ViewTime != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.ViewTime))
	}
	return i, nil
}

func (m *Reference) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Reference) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *Message) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Message) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Status))
	}
	if m.Source != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.Source.Size()))
		n5, err := m.Source.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EditedTimestamp != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.EditedTimestamp))
	}
	if len(m.EditorEntityID) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EditorEntityID)))
		i += copy(data[i:], m.EditorEntityID)
	}
	if len(m.Title) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.TextRefs) > 0 {
		for _, msg := range m.TextRefs {
			data[i] = 0x4a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Summary) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	return i, nil
}

func (m *Endpoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Endpoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Channel))
	}
	if len(m.ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *MessageUpdated) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MessageUpdated) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadItemID)))
		i += copy(data[i:], m.ThreadItemID)
	}
	if len(m.ActorEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	if m.Message != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Message.Size()))
		n6, err := m.Message.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *FollowerUpdated) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FollowerUpdated) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	return i, nil
}

func (m *SavedQuery) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SavedQuery) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if m.Query != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Query.Size()))
		n7, err := m.Query.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *Query) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Query) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Attachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Attachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.Title) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.URL) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	if m.Data != nil {
		nn8, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *Attachment_Image) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Image != nil {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(m.Image.Size()))
		n9, err := m.Image.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Attachment_Audio) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Audio != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Audio.Size()))
		n10, err := m.Audio.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Attachment_GenericURL) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.GenericURL != nil {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(m.GenericURL.Size()))
		n11, err := m.GenericURL.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Attachment_Visit) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Visit != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n12, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Attachment_CarePlan) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CarePlan != nil {
		data[i] = 0x72
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n13, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Attachment_Video) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Video != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Video.Size()))
		n14, err := m.Video.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Attachment_PaymentRequest) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PaymentRequest != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(m.PaymentRequest.Size()))
		n15, err := m.PaymentRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ImageAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ImageAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.Width != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Width))
	}
	if m.Height != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.Height))
	}
	return i, nil
}

func (m *VideoAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VideoAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.DurationNS != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationNS))
	}
	return i, nil
}

func (m *AudioAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AudioAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if m.DurationNS != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.DurationNS))
	}
	return i, nil
}

func (m *GenericURLAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GenericURLAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Mimetype)))
		i += copy(data[i:], m.Mimetype)
	}
	if len(m.URL) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	return i, nil
}

func (m *VisitAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VisitAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	if len(m.VisitName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitName)))
		i += copy(data[i:], m.VisitName)
	}
	return i, nil
}

func (m *CarePlanAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CarePlanID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CarePlanID)))
		i += copy(data[i:], m.CarePlanID)
	}
	if len(m.CarePlanName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CarePlanName)))
		i += copy(data[i:], m.CarePlanName)
	}
	return i, nil
}

func (m *PaymentRequestAttachment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PaymentRequestAttachment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PaymentID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PaymentID)))
		i += copy(data[i:], m.PaymentID)
	}
	return i, nil
}

func (m *PublishedThreadItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PublishedThreadItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.ThreadID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if len(m.PrimaryEntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PrimaryEntityID)))
		i += copy(data[i:], m.PrimaryEntityID)
	}
	if m.Item != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Item.Size()))
		n16, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *PostMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PostMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	if len(m.ThreadID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if len(m.FromEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromEntityID)))
		i += copy(data[i:], m.FromEntityID)
	}
	if m.Source != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.Source.Size()))
		n17, err := m.Source.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Internal {
		data[i] = 0x30
		i++
		if m.Internal {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Text) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x42
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Title) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Summary) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	if m.DontNotify {
		data[i] = 0x58
		i++
		if m.DontNotify {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PostMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PostMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Item.Size()))
		n18, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Thread != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n19, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *MarkThreadsAsReadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MarkThreadsAsReadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadWatermarks) > 0 {
		for _, msg := range m.ThreadWatermarks {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Timestamp != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Timestamp))
	}
	if m.Seen {
		data[i] = 0x20
		i++
		if m.Seen {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if m.LastMessageTimestamp != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.LastMessageTimestamp))
	}
	return i, nil
}

func (m *MarkThreadsAsReadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MarkThreadsAsReadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ThreadItemsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if len(m.ViewerEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ViewerEntityID)))
		i += copy(data[i:], m.ViewerEntityID)
	}
	if m.Iterator != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Iterator.Size()))
		n20, err := m.Iterator.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ThreadItemEdge) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemEdge) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Item.Size()))
		n21, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.Cursor) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Cursor)))
		i += copy(data[i:], m.Cursor)
	}
	return i, nil
}

func (m *ThreadItemsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasMore {
		data[i] = 0x10
		i++
		if m.HasMore {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *QueryThreadsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *QueryThreadsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if m.Iterator != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Iterator.Size()))
		n22, err := m.Iterator.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Type != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.ViewerEntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ViewerEntityID)))
		i += copy(data[i:], m.ViewerEntityID)
	}
	if m.QueryType != nil {
		nn23, err := m.QueryType.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *QueryThreadsRequest_Query) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Query != nil {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(m.Query.Size()))
		n24, err := m.Query.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *QueryThreadsRequest_SavedQueryID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x5a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.SavedQueryID)))
	i += copy(data[i:], m.SavedQueryID)
	return i, nil
}
func (m *ThreadEdge) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadEdge) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n25, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if len(m.Cursor) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Cursor)))
		i += copy(data[i:], m.Cursor)
	}
	return i, nil
}

func (m *QueryThreadsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *QueryThreadsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasMore {
		data[i] = 0x10
		i++
		if m.HasMore {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SavedQueriesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SavedQueriesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	return i, nil
}

func (m *SavedQueriesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SavedQueriesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueries) > 0 {
		for _, msg := range m.SavedQueries {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if len(m.ViewerEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ViewerEntityID)))
		i += copy(data[i:], m.ViewerEntityID)
	}
	return i, nil
}

func (m *ThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n26, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *ThreadsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadIDs) > 0 {
		for _, s := range m.ThreadIDs {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.ViewerEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ViewerEntityID)))
		i += copy(data[i:], m.ViewerEntityID)
	}
	return i, nil
}

func (m *ThreadsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, msg := range m.Threads {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSavedQueryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateSavedQueryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Query != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Query.Size()))
		n27, err := m.Query.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *CreateSavedQueryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateSavedQueryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SavedQuery != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.SavedQuery.Size()))
		n28, err := m.SavedQuery.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *UpdateSavedQueryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateSavedQueryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.QueryID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.QueryID)))
		i += copy(data[i:], m.QueryID)
	}
	if m.Query != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Query.Size()))
		n29, err := m.Query.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *UpdateSavedQueryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateSavedQueryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteMessageRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteMessageRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActorEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	if len(m.ThreadItemID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadItemID)))
		i += copy(data[i:], m.ThreadItemID)
	}
	return i, nil
}

func (m *DeleteMessageResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteMessageResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActorEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	if len(m.ThreadID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	return i, nil
}

func (m *DeleteThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if len(m.UserTitle) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UserTitle)))
		i += copy(data[i:], m.UserTitle)
	}
	if len(m.AddMemberEntityIDs) > 0 {
		for _, s := range m.AddMemberEntityIDs {
			data[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.RemoveMemberEntityIDs) > 0 {
		for _, s := range m.RemoveMemberEntityIDs {
			data[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.SystemTitle) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SystemTitle)))
		i += copy(data[i:], m.SystemTitle)
	}
	return i, nil
}

func (m *UpdateThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n30, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *CreateThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.FromEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromEntityID)))
		i += copy(data[i:], m.FromEntityID)
	}
	if m.Source != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.Source.Size()))
		n31, err := m.Source.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Internal {
		data[i] = 0x30
		i++
		if m.Internal {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Text) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			data[i] = 0x42
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MessageTitle) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MessageTitle)))
		i += copy(data[i:], m.MessageTitle)
	}
	if len(m.Summary) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	if len(m.UserTitle) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UserTitle)))
		i += copy(data[i:], m.UserTitle)
	}
	if m.Type != 0 {
		data[i] = 0x68
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.SystemTitle) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SystemTitle)))
		i += copy(data[i:], m.SystemTitle)
	}
	if m.Origin != 0 {
		data[i] = 0x80
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(m.Origin))
	}
	if m.DontNotify {
		data[i] = 0x88
		i++
		data[i] = 0x1
		i++
		if m.DontNotify {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	if m.ThreadItem != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.ThreadItem.Size()))
		n32, err := m.ThreadItem.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Thread != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n33, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *CreateEmptyThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEmptyThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UUID)))
		i += copy(data[i:], m.UUID)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.FromEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FromEntityID)))
		i += copy(data[i:], m.FromEntityID)
	}
	if len(m.PrimaryEntityID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PrimaryEntityID)))
		i += copy(data[i:], m.PrimaryEntityID)
	}
	if len(m.Summary) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	if len(m.UserTitle) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UserTitle)))
		i += copy(data[i:], m.UserTitle)
	}
	if m.Type != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			data[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.SystemTitle) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SystemTitle)))
		i += copy(data[i:], m.SystemTitle)
	}
	if m.Origin != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintSvc(data, i, uint64(m.Origin))
	}
	return i, nil
}

func (m *CreateEmptyThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateEmptyThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n34, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *ThreadMembersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadMembersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	return i, nil
}

func (m *ThreadMembersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadMembersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ThreadsForMemberRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadsForMemberRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.PrimaryOnly {
		data[i] = 0x10
		i++
		if m.PrimaryOnly {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ThreadsForMemberResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadsForMemberResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, msg := range m.Threads {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SavedQueryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SavedQueryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueryID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SavedQueryID)))
		i += copy(data[i:], m.SavedQueryID)
	}
	return i, nil
}

func (m *SavedQueryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SavedQueryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SavedQuery != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.SavedQuery.Size()))
		n35, err := m.SavedQuery.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *ThreadItemRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ItemID)))
		i += copy(data[i:], m.ItemID)
	}
	if len(m.ViewerEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ViewerEntityID)))
		i += copy(data[i:], m.ViewerEntityID)
	}
	return i, nil
}

func (m *ThreadItemResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Item.Size()))
		n36, err := m.Item.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *ThreadItemViewDetailsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemViewDetailsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ItemID)))
		i += copy(data[i:], m.ItemID)
	}
	return i, nil
}

func (m *ThreadItemViewDetailsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ThreadItemViewDetailsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemViewDetails) > 0 {
		for _, msg := range m.ItemViewDetails {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateLinkedThreadsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateLinkedThreadsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organization1ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Organization1ID)))
		i += copy(data[i:], m.Organization1ID)
	}
	if len(m.Organization2ID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Organization2ID)))
		i += copy(data[i:], m.Organization2ID)
	}
	if len(m.PrimaryEntity1ID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PrimaryEntity1ID)))
		i += copy(data[i:], m.PrimaryEntity1ID)
	}
	if len(m.PrimaryEntity2ID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PrimaryEntity2ID)))
		i += copy(data[i:], m.PrimaryEntity2ID)
	}
	if len(m.Text) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if len(m.MessageTitle) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MessageTitle)))
		i += copy(data[i:], m.MessageTitle)
	}
	if len(m.Summary) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	if m.PrependSenderThread1 {
		data[i] = 0x40
		i++
		if m.PrependSenderThread1 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.PrependSenderThread2 {
		data[i] = 0x48
		i++
		if m.PrependSenderThread2 {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Type != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.SystemTitle1) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SystemTitle1)))
		i += copy(data[i:], m.SystemTitle1)
	}
	if len(m.SystemTitle2) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SystemTitle2)))
		i += copy(data[i:], m.SystemTitle2)
	}
	return i, nil
}

func (m *CreateLinkedThreadsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateLinkedThreadsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread1 != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread1.Size()))
		n37, err := m.Thread1.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.Thread2 != nil {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread2.Size()))
		n38, err := m.Thread2.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *CreateOnboardingThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOnboardingThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.PrimaryEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PrimaryEntityID)))
		i += copy(data[i:], m.PrimaryEntityID)
	}
	if len(m.UserTitle) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.UserTitle)))
		i += copy(data[i:], m.UserTitle)
	}
	return i, nil
}

func (m *CreateOnboardingThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOnboardingThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n39, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *LinkedThreadRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LinkedThreadRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
		i += copy(data[i:], m.ThreadID)
	}
	return i, nil
}

func (m *LinkedThreadResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LinkedThreadResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n40, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.PrependSender {
		data[i] = 0x10
		i++
		if m.PrependSender {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KeyValue) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KeyValue) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *GenericSetupEvent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GenericSetupEvent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProvisionedPhoneEvent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProvisionedPhoneEvent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *OnboardingThreadEventRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OnboardingThreadEventRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LookupByType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.LookupByType))
	}
	if m.LookupBy != nil {
		nn41, err := m.LookupBy.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn41
	}
	if m.EventType != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintSvc(data, i, uint64(m.EventType))
	}
	if m.Event != nil {
		nn42, err := m.Event.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn42
	}
	return i, nil
}

func (m *OnboardingThreadEventRequest_ThreadID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.ThreadID)))
	i += copy(data[i:], m.ThreadID)
	return i, nil
}
func (m *OnboardingThreadEventRequest_EntityID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
	i += copy(data[i:], m.EntityID)
	return i, nil
}
func (m *OnboardingThreadEventRequest_GenericSetup) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.GenericSetup != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(m.GenericSetup.Size()))
		n43, err := m.GenericSetup.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *OnboardingThreadEventRequest_ProvisionedPhone) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.ProvisionedPhone != nil {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(m.ProvisionedPhone.Size()))
		n44, err := m.ProvisionedPhone.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *OnboardingThreadEventResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OnboardingThreadEventResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Thread.Size()))
		n45, err := m.Thread.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Iterator) Size() (n int) {
	var l int
	_ = l
	l = len(m.StartCursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EndCursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovSvc(uint64(m.Direction))
	}
	if m.Count != 0 {
		n += 1 + sovSvc(uint64(m.Count))
	}
	return n
}

func (m *Thread) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.LastMessageTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.LastMessageTimestamp))
	}
	l = len(m.LastMessageSummary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Unread {
		n += 2
	}
	if len(m.LastPrimaryEntityEndpoints) > 0 {
		for _, e := range m.LastPrimaryEntityEndpoints {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	if m.MessageCount != 0 {
		n += 1 + sovSvc(uint64(m.MessageCount))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UnreadReference {
		n += 2
	}
	if m.Origin != 0 {
		n += 1 + sovSvc(uint64(m.Origin))
	}
	return n
}

func (m *Member) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSvc(uint64(m.Timestamp))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	return n
}

func (m *ThreadItem_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ThreadItem_MessageUpdated) Size() (n int) {
	var l int
	_ = l
	if m.MessageUpdated != nil {
		l = m.MessageUpdated.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ThreadItem_FollowerUpdated) Size() (n int) {
	var l int
	_ = l
	if m.FollowerUpdated != nil {
		l = m.FollowerUpdated.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ThreadItemViewDetails) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ViewTime != 0 {
		n += 1 + sovSvc(uint64(m.ViewTime))
	}
	return n
}

func (m *Reference) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovSvc(uint64(m.Status))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.EditedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.EditedTimestamp))
	}
	l = len(m.EditorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TextRefs) > 0 {
		for _, e := range m.TextRefs {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSvc(uint64(m.Channel))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MessageUpdated) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *FollowerUpdated) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Query) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Attachment) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Attachment_Image) Size() (n int) {
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Audio) Size() (n int) {
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_GenericURL) Size() (n int) {
	var l int
	_ = l
	if m.GenericURL != nil {
		l = m.GenericURL.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Visit) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_CarePlan) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Video) Size() (n int) {
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_PaymentRequest) Size() (n int) {
	var l int
	_ = l
	if m.PaymentRequest != nil {
		l = m.PaymentRequest.Size()
		n += 2 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ImageAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovSvc(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovSvc(uint64(m.Height))
	}
	return n
}

func (m *VideoAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DurationNS != 0 {
		n += 1 + sovSvc(uint64(m.DurationNS))
	}
	return n
}

func (m *AudioAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DurationNS != 0 {
		n += 1 + sovSvc(uint64(m.DurationNS))
	}
	return n
}

func (m *GenericURLAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *VisitAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.VisitName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CarePlanAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.CarePlanID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CarePlanName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PaymentRequestAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.PaymentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PublishedThreadItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PostMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Internal {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DontNotify {
		n += 2
	}
	return n
}

func (m *PostMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MarkThreadsAsReadRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ThreadWatermarks) > 0 {
		for _, e := range m.ThreadWatermarks {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSvc(uint64(m.Timestamp))
	}
	if m.Seen {
		n += 2
	}
	return n
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.LastMessageTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.LastMessageTimestamp))
	}
	return n
}

func (m *MarkThreadsAsReadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ThreadItemsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Iterator != nil {
		l = m.Iterator.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemEdge) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	return n
}

func (m *QueryThreadsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Iterator != nil {
		l = m.Iterator.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.QueryType != nil {
		n += m.QueryType.Size()
	}
	return n
}

func (m *QueryThreadsRequest_Query) Size() (n int) {
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *QueryThreadsRequest_SavedQueryID) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedQueryID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ThreadEdge) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *QueryThreadsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	return n
}

func (m *SavedQueriesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQueriesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.SavedQueries) > 0 {
		for _, e := range m.SavedQueries {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ThreadIDs) > 0 {
		for _, s := range m.ThreadIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateSavedQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateSavedQueryResponse) Size() (n int) {
	var l int
	_ = l
	if m.SavedQuery != nil {
		l = m.SavedQuery.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateSavedQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.QueryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateSavedQueryResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteThreadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.AddMemberEntityIDs) > 0 {
		for _, s := range m.AddMemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.RemoveMemberEntityIDs) > 0 {
		for _, s := range m.RemoveMemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Internal {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.MessageTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Origin != 0 {
		n += 2 + sovSvc(uint64(m.Origin))
	}
	if m.DontNotify {
		n += 3
	}
	return n
}

func (m *CreateThreadResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ThreadItem != nil {
		l = m.ThreadItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEmptyThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Origin != 0 {
		n += 1 + sovSvc(uint64(m.Origin))
	}
	return n
}

func (m *CreateEmptyThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadMembersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadMembersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ThreadsForMemberRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.PrimaryOnly {
		n += 2
	}
	return n
}

func (m *ThreadsForMemberResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SavedQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedQueryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQueryResponse) Size() (n int) {
	var l int
	_ = l
	if m.SavedQuery != nil {
		l = m.SavedQuery.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemResponse) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemViewDetailsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemViewDetailsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemViewDetails) > 0 {
		for _, e := range m.ItemViewDetails {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateLinkedThreadsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Organization1ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Organization2ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntity1ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntity2ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MessageTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.PrependSenderThread1 {
		n += 2
	}
	if m.PrependSenderThread2 {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.SystemTitle1)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SystemTitle2)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateLinkedThreadsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread1 != nil {
		l = m.Thread1.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Thread2 != nil {
		l = m.Thread2.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateOnboardingThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateOnboardingThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LinkedThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LinkedThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.PrependSender {
		n += 2
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GenericSetupEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ProvisionedPhoneEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *OnboardingThreadEventRequest) Size() (n int) {
	var l int
	_ = l
	if m.LookupByType != 0 {
		n += 1 + sovSvc(uint64(m.LookupByType))
	}
	if m.LookupBy != nil {
		n += m.LookupBy.Size()
	}
	if m.EventType != 0 {
		n += 1 + sovSvc(uint64(m.EventType))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *OnboardingThreadEventRequest_ThreadID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *OnboardingThreadEventRequest_EntityID) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *OnboardingThreadEventRequest_GenericSetup) Size() (n int) {
	var l int
	_ = l
	if m.GenericSetup != nil {
		l = m.GenericSetup.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *OnboardingThreadEventRequest_ProvisionedPhone) Size() (n int) {
	var l int
	_ = l
	if m.ProvisionedPhone != nil {
		l = m.ProvisionedPhone.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *OnboardingThreadEventResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Iterator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Iterator{`,
		`StartCursor:` + fmt.Sprintf("%v", this.StartCursor) + `,`,
		`EndCursor:` + fmt.Sprintf("%v", this.EndCursor) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Thread) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Thread{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`LastMessageTimestamp:` + fmt.Sprintf("%v", this.LastMessageTimestamp) + `,`,
		`LastMessageSummary:` + fmt.Sprintf("%v", this.LastMessageSummary) + `,`,
		`Unread:` + fmt.Sprintf("%v", this.Unread) + `,`,
		`LastPrimaryEntityEndpoints:` + strings.Replace(fmt.Sprintf("%v", this.LastPrimaryEntityEndpoints), "Endpoint", "Endpoint", 1) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`MessageCount:` + fmt.Sprintf("%v", this.MessageCount) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`UnreadReference:` + fmt.Sprintf("%v", this.UnreadReference) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Member) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Member{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`Item:` + fmt.Sprintf("%v", this.Item) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem_MessageUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem_MessageUpdated{`,
		`MessageUpdated:` + strings.Replace(fmt.Sprintf("%v", this.MessageUpdated), "MessageUpdated", "MessageUpdated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem_FollowerUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem_FollowerUpdated{`,
		`FollowerUpdated:` + strings.Replace(fmt.Sprintf("%v", this.FollowerUpdated), "FollowerUpdated", "FollowerUpdated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemViewDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemViewDetails{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`ViewTime:` + fmt.Sprintf("%v", this.ViewTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Reference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reference{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "Endpoint", "Endpoint", 1) + `,`,
		`Destinations:` + strings.Replace(fmt.Sprintf("%v", this.Destinations), "Endpoint", "Endpoint", 1) + `,`,
		`EditedTimestamp:` + fmt.Sprintf("%v", this.EditedTimestamp) + `,`,
		`EditorEntityID:` + fmt.Sprintf("%v", this.EditorEntityID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`TextRefs:` + strings.Replace(fmt.Sprintf("%v", this.TextRefs), "Reference", "Reference", 1) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Endpoint{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageUpdated{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FollowerUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FollowerUpdated{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQuery{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query{`,
		`}`,
	}, "")
	return s
}
func (this *Attachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Image{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageAttachment", "ImageAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Audio{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "AudioAttachment", "AudioAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_GenericURL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_GenericURL{`,
		`GenericURL:` + strings.Replace(fmt.Sprintf("%v", this.GenericURL), "GenericURLAttachment", "GenericURLAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Visit{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "VisitAttachment", "VisitAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_CarePlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_CarePlan{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlanAttachment", "CarePlanAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Video) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Video{`,
		`Video:` + strings.Replace(fmt.Sprintf("%v", this.Video), "VideoAttachment", "VideoAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_PaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_PaymentRequest{`,
		`PaymentRequest:` + strings.Replace(fmt.Sprintf("%v", this.PaymentRequest), "PaymentRequestAttachment", "PaymentRequestAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AudioAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericURLAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericURLAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisitAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisitAttachment{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`VisitName:` + fmt.Sprintf("%v", this.VisitName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanAttachment{`,
		`CarePlanID:` + fmt.Sprintf("%v", this.CarePlanID) + `,`,
		`CarePlanName:` + fmt.Sprintf("%v", this.CarePlanName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaymentRequestAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentRequestAttachment{`,
		`PaymentID:` + fmt.Sprintf("%v", this.PaymentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedThreadItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedThreadItem{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostMessageRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "Endpoint", "Endpoint", 1) + `,`,
		`Destinations:` + strings.Replace(fmt.Sprintf("%v", this.Destinations), "Endpoint", "Endpoint", 1) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`DontNotify:` + fmt.Sprintf("%v", this.DontNotify) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostMessageResponse{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkThreadsAsReadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkThreadsAsReadRequest{`,
		`ThreadWatermarks:` + strings.Replace(fmt.Sprintf("%v", this.ThreadWatermarks), "MarkThreadsAsReadRequest_ThreadWatermark", "MarkThreadsAsReadRequest_ThreadWatermark", 1) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Seen:` + fmt.Sprintf("%v", this.Seen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkThreadsAsReadRequest_ThreadWatermark) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkThreadsAsReadRequest_ThreadWatermark{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`LastMessageTimestamp:` + fmt.Sprintf("%v", this.LastMessageTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkThreadsAsReadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkThreadsAsReadResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemsRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`Iterator:` + strings.Replace(fmt.Sprintf("%v", this.Iterator), "Iterator", "Iterator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemEdge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemEdge{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`Cursor:` + fmt.Sprintf("%v", this.Cursor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemsResponse{`,
		`Edges:` + strings.Replace(fmt.Sprintf("%v", this.Edges), "ThreadItemEdge", "ThreadItemEdge", 1) + `,`,
		`HasMore:` + fmt.Sprintf("%v", this.HasMore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsRequest{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`Iterator:` + strings.Replace(fmt.Sprintf("%v", this.Iterator), "Iterator", "Iterator", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`QueryType:` + fmt.Sprintf("%v", this.QueryType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsRequest_Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsRequest_Query{`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsRequest_SavedQueryID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsRequest_SavedQueryID{`,
		`SavedQueryID:` + fmt.Sprintf("%v", this.SavedQueryID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadEdge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadEdge{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`Cursor:` + fmt.Sprintf("%v", this.Cursor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsResponse{`,
		`Edges:` + strings.Replace(fmt.Sprintf("%v", this.Edges), "ThreadEdge", "ThreadEdge", 1) + `,`,
		`HasMore:` + fmt.Sprintf("%v", this.HasMore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueriesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueriesRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueriesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueriesResponse{`,
		`SavedQueries:` + strings.Replace(fmt.Sprintf("%v", this.SavedQueries), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsRequest{`,
		`ThreadIDs:` + fmt.Sprintf("%v", this.ThreadIDs) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsResponse{`,
		`Threads:` + strings.Replace(fmt.Sprintf("%v", this.Threads), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedQueryRequest{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedQueryResponse{`,
		`SavedQuery:` + strings.Replace(fmt.Sprintf("%v", this.SavedQuery), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedQueryRequest{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`QueryID:` + fmt.Sprintf("%v", this.QueryID) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedQueryResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMessageRequest{`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteThreadRequest{`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteThreadResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThreadRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`AddMemberEntityIDs:` + fmt.Sprintf("%v", this.AddMemberEntityIDs) + `,`,
		`RemoveMemberEntityIDs:` + fmt.Sprintf("%v", this.RemoveMemberEntityIDs) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateThreadRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "Endpoint", "Endpoint", 1) + `,`,
		`Destinations:` + strings.Replace(fmt.Sprintf("%v", this.Destinations), "Endpoint", "Endpoint", 1) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`MessageTitle:` + fmt.Sprintf("%v", this.MessageTitle) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`MemberEntityIDs:` + fmt.Sprintf("%v", this.MemberEntityIDs) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`DontNotify:` + fmt.Sprintf("%v", this.DontNotify) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateThreadResponse{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ThreadItem:` + strings.Replace(fmt.Sprintf("%v", this.ThreadItem), "ThreadItem", "ThreadItem", 1) + `,`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEmptyThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEmptyThreadRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`MemberEntityIDs:` + fmt.Sprintf("%v", this.MemberEntityIDs) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEmptyThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEmptyThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadMembersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadMembersRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadMembersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadMembersResponse{`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsForMemberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsForMemberRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`PrimaryOnly:` + fmt.Sprintf("%v", this.PrimaryOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsForMemberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsForMemberResponse{`,
		`Threads:` + strings.Replace(fmt.Sprintf("%v", this.Threads), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueryRequest{`,
		`SavedQueryID:` + fmt.Sprintf("%v", this.SavedQueryID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueryResponse{`,
		`SavedQuery:` + strings.Replace(fmt.Sprintf("%v", this.SavedQuery), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemRequest{`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemResponse{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemViewDetailsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemViewDetailsRequest{`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemViewDetailsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemViewDetailsResponse{`,
		`ItemViewDetails:` + strings.Replace(fmt.Sprintf("%v", this.ItemViewDetails), "ThreadItemViewDetails", "ThreadItemViewDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLinkedThreadsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLinkedThreadsRequest{`,
		`Organization1ID:` + fmt.Sprintf("%v", this.Organization1ID) + `,`,
		`Organization2ID:` + fmt.Sprintf("%v", this.Organization2ID) + `,`,
		`PrimaryEntity1ID:` + fmt.Sprintf("%v", this.PrimaryEntity1ID) + `,`,
		`PrimaryEntity2ID:` + fmt.Sprintf("%v", this.PrimaryEntity2ID) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`MessageTitle:` + fmt.Sprintf("%v", this.MessageTitle) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`PrependSenderThread1:` + fmt.Sprintf("%v", this.PrependSenderThread1) + `,`,
		`PrependSenderThread2:` + fmt.Sprintf("%v", this.PrependSenderThread2) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SystemTitle1:` + fmt.Sprintf("%v", this.SystemTitle1) + `,`,
		`SystemTitle2:` + fmt.Sprintf("%v", this.SystemTitle2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLinkedThreadsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLinkedThreadsResponse{`,
		`Thread1:` + strings.Replace(fmt.Sprintf("%v", this.Thread1), "Thread", "Thread", 1) + `,`,
		`Thread2:` + strings.Replace(fmt.Sprintf("%v", this.Thread2), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOnboardingThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOnboardingThreadRequest{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOnboardingThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOnboardingThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkedThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkedThreadRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkedThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkedThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`PrependSender:` + fmt.Sprintf("%v", this.PrependSender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValue{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericSetupEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericSetupEvent{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "KeyValue", "KeyValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionedPhoneEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionedPhoneEvent{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest{`,
		`LookupByType:` + fmt.Sprintf("%v", this.LookupByType) + `,`,
		`LookupBy:` + fmt.Sprintf("%v", this.LookupBy) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_ThreadID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_ThreadID{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_EntityID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_EntityID{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_GenericSetup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_GenericSetup{`,
		`GenericSetup:` + strings.Replace(fmt.Sprintf("%v", this.GenericSetup), "GenericSetupEvent", "GenericSetupEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_ProvisionedPhone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_ProvisionedPhone{`,
		`ProvisionedPhone:` + strings.Replace(fmt.Sprintf("%v", this.ProvisionedPhone), "ProvisionedPhoneEvent", "ProvisionedPhoneEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Iterator) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Iterator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Iterator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartCursor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndCursor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Direction |= (Iterator_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Thread) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageTimestamp", wireType)
			}
			m.LastMessageTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastMessageTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMessageSummary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unread = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrimaryEntityEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPrimaryEntityEndpoints = append(m.LastPrimaryEntityEndpoints, &Endpoint{})
			if err := m.LastPrimaryEntityEndpoints[len(m.LastPrimaryEntityEndpoints)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCount", wireType)
			}
			m.MessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MessageCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadReference = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Origin |= (ThreadOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (ThreadItem_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ThreadItem_Message{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageUpdated{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ThreadItem_MessageUpdated{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FollowerUpdated{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ThreadItem_FollowerUpdated{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemViewDetails) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemViewDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemViewDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewTime", wireType)
			}
			m.ViewTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ViewTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reference) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Reference_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (Message_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Endpoint{}
			}
			if err := m.Source.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Endpoint{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedTimestamp", wireType)
			}
			m.EditedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EditedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EditorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextRefs = append(m.TextRefs, &Reference{})
			if err := m.TextRefs[len(m.TextRefs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Channel |= (Endpoint_Channel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageUpdated) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowerUpdated) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowerUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowerUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQuery) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (Attachment_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Image{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AudioAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Audio{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericURL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericURLAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_GenericURL{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VisitAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Visit{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CarePlanAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_CarePlan{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VideoAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Video{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaymentRequestAttachment{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_PaymentRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericURLAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericURLAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericURLAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisitAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarePlanID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarePlanName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentRequestAttachment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentRequestAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentRequestAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishedThreadItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishedThreadItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishedThreadItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Endpoint{}
			}
			if err := m.Source.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Endpoint{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontNotify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkThreadsAsReadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkThreadsAsReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkThreadsAsReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadWatermarks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadWatermarks = append(m.ThreadWatermarks, &MarkThreadsAsReadRequest_ThreadWatermark{})
			if err := m.ThreadWatermarks[len(m.ThreadWatermarks)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkThreadsAsReadRequest_ThreadWatermark) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadWatermark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadWatermark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageTimestamp", wireType)
			}
			m.LastMessageTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastMessageTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkThreadsAsReadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkThreadsAsReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkThreadsAsReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iterator == nil {
				m.Iterator = &Iterator{}
			}
			if err := m.Iterator.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemEdge) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &ThreadItemEdge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iterator == nil {
				m.Iterator = &Iterator{}
			}
			if err := m.Iterator.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (QueryThreadsRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Query{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.QueryType = &QueryThreadsRequest_Query{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = &QueryThreadsRequest_SavedQueryID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadEdge) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &ThreadEdge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueriesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueriesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueries = append(m.SavedQueries, &SavedQuery{})
			if err := m.SavedQueries[len(m.SavedQueries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadIDs = append(m.ThreadIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &Thread{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSavedQueryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSavedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSavedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSavedQueryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSavedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSavedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SavedQuery == nil {
				m.SavedQuery = &SavedQuery{}
			}
			if err := m.SavedQuery.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSavedQueryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSavedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSavedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSavedQueryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSavedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSavedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMessageRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMessageResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddMemberEntityIDs = append(m.AddMemberEntityIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveMemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveMemberEntityIDs = append(m.RemoveMemberEntityIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Endpoint{}
			}
			if err := m.Source.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Endpoint{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberEntityIDs = append(m.MemberEntityIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Origin |= (ThreadOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontNotify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreadItem == nil {
				m.ThreadItem = &ThreadItem{}
			}
			if err := m.ThreadItem.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEmptyThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEmptyThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEmptyThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberEntityIDs = append(m.MemberEntityIDs, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Origin |= (ThreadOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEmptyThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEmptyThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEmptyThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMembersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMembersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMembersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMembersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMembersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMembersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsForMemberRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsForMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsForMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrimaryOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsForMemberResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsForMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsForMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &Thread{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SavedQuery == nil {
				m.SavedQuery = &SavedQuery{}
			}
			if err := m.SavedQuery.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemViewDetailsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemViewDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemViewDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemViewDetailsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemViewDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemViewDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemViewDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemViewDetails = append(m.ItemViewDetails, &ThreadItemViewDetails{})
			if err := m.ItemViewDetails[len(m.ItemViewDetails)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLinkedThreadsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLinkedThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLinkedThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization1ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization1ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization2ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization2ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntity1ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntity1ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntity2ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntity2ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrependSenderThread1", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrependSenderThread1 = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrependSenderThread2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrependSenderThread2 = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle1 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle2 = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLinkedThreadsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLinkedThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLinkedThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread1 == nil {
				m.Thread1 = &Thread{}
			}
			if err := m.Thread1.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread2 == nil {
				m.Thread2 = &Thread{}
			}
			if err := m.Thread2.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOnboardingThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOnboardingThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOnboardingThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOnboardingThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOnboardingThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOnboardingThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkedThreadRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkedThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkedThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkedThreadResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkedThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkedThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrependSender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrependSender = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericSetupEvent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericSetupEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericSetupEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionedPhoneEvent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionedPhoneEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionedPhoneEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnboardingThreadEventRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnboardingThreadEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnboardingThreadEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupByType", wireType)
			}
			m.LookupByType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LookupByType |= (OnboardingThreadEventRequest_LookupByType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupBy = &OnboardingThreadEventRequest_ThreadID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupBy = &OnboardingThreadEventRequest_EntityID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EventType |= (OnboardingThreadEventRequest_EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericSetupEvent{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OnboardingThreadEventRequest_GenericSetup{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionedPhone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProvisionedPhoneEvent{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OnboardingThreadEventRequest_ProvisionedPhone{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnboardingThreadEventResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnboardingThreadEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnboardingThreadEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc.proto", fileDescriptorSvc) }

var fileDescriptorSvc = []byte{
	// 3611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x5a, 0x4f, 0x73, 0xe3, 0x46,
	0x76, 0x17, 0xf8, 0x9f, 0x8f, 0xa2, 0x08, 0xb5, 0xfe, 0x0c, 0x87, 0x9e, 0x11, 0x35, 0x90, 0xbd,
	0xa3, 0x99, 0x1d, 0x6b, 0x2d, 0x79, 0xed, 0xd4, 0xc6, 0xe5, 0xc9, 0x52, 0x22, 0x66, 0x84, 0x98,
	0x22, 0x69, 0x92, 0x92, 0x33, 0xf1, 0x66, 0x50, 0x90, 0xd8, 0x23, 0x21, 0x23, 0x02, 0x5a, 0x00,
	0xd4, 0x44, 0xb9, 0x64, 0x2f, 0xd9, 0xda, 0x4a, 0x2e, 0xfb, 0x09, 0x52, 0xb9, 0x25, 0x1f, 0x23,
	0xa7, 0xd4, 0x9e, 0x52, 0x3e, 0xe4, 0x90, 0x5c, 0x54, 0x31, 0x73, 0x49, 0x55, 0x2e, 0x5b, 0xfb,
	0x09, 0x52, 0xe8, 0x6e, 0x10, 0x68, 0xb2, 0x21, 0x51, 0xb1, 0x53, 0xa9, 0xda, 0x1b, 0x80, 0x7e,
	0xdd, 0xfd, 0xfa, 0xbd, 0xdf, 0x7b, 0xfd, 0xfe, 0x00, 0xf2, 0xee, 0xe5, 0xc9, 0xd6, 0x85, 0x63,
	0x7b, 0x36, 0xca, 0x7b, 0x67, 0x0e, 0x36, 0xfa, 0xa6, 0x75, 0x5a, 0xf9, 0xf0, 0xd4, 0xf4, 0xce,
	0x86, 0xc7, 0x5b, 0x27, 0xf6, 0xe0, 0x47, 0xa7, 0xf6, 0xa9, 0xfd, 0x23, 0x42, 0x71, 0x3c, 0x7c,
	0x43, 0xde, 0xc8, 0x0b, 0x79, 0xa2, 0x33, 0x95, 0xbf, 0x97, 0x20, 0xa7, 0x79, 0xd8, 0x31, 0x3c,
	0xdb, 0x41, 0xcb, 0x30, 0xef, 0x7a, 0x86, 0xe3, 0xe9, 0x27, 0x43, 0xc7, 0xb5, 0x9d, 0xb2, 0xb4,
	0x2e, 0x6d, 0xe6, 0x11, 0x02, 0xc0, 0x56, 0x3f, 0xf8, 0x96, 0x20, 0xdf, 0x3e, 0x82, 0x7c, 0xdf,
	0x74, 0xf0, 0x89, 0x67, 0xda, 0x56, 0x39, 0xb9, 0x2e, 0x6d, 0x2e, 0xec, 0x3c, 0xdc, 0x1a, 0x33,
	0xb1, 0x15, 0xac, 0xb8, 0x55, 0x0f, 0x88, 0x50, 0x11, 0xd2, 0x27, 0xf6, 0xd0, 0xf2, 0xca, 0xa9,
	0x75, 0x69, 0xb3, 0xa8, 0x3c, 0x81, 0x7c, 0x38, 0xb6, 0x00, 0xf0, 0xa2, 0xd3, 0x3a, 0xd0, 0xbb,
	0xbd, 0x5a, 0xa7, 0x27, 0xcf, 0xa1, 0x79, 0xc8, 0x91, 0x77, 0xb5, 0x59, 0x97, 0x25, 0xe5, 0xbf,
	0x93, 0x90, 0xe9, 0x91, 0xa5, 0x11, 0x82, 0x84, 0xd9, 0xa7, 0x6c, 0xed, 0x66, 0x46, 0xd7, 0xd5,
	0x84, 0x56, 0x47, 0x3f, 0x84, 0x92, 0xed, 0x9c, 0x1a, 0x96, 0xf9, 0x97, 0x86, 0xbf, 0x98, 0x6e,
	0xf6, 0x29, 0x8f, 0xbb, 0x68, 0x74, 0x5d, 0x5d, 0x68, 0x45, 0x86, 0xb4, 0x3a, 0xda, 0x82, 0xc5,
	0x0b, 0xc7, 0x1c, 0x18, 0xce, 0x95, 0x8e, 0x2d, 0xcf, 0xf4, 0xae, 0x7c, 0xf2, 0x24, 0x21, 0x5f,
	0x1a, 0x5d, 0x57, 0x4b, 0x6d, 0x3a, 0xa8, 0x92, 0x31, 0xad, 0x8e, 0x14, 0xc8, 0x0e, 0xf0, 0xe0,
	0x18, 0x3b, 0x6e, 0x39, 0xb5, 0x9e, 0xdc, 0x2c, 0xec, 0x2c, 0x46, 0x4e, 0x79, 0x40, 0x46, 0xd0,
	0x1a, 0xac, 0x9e, 0x1b, 0xae, 0xa7, 0x0f, 0xb0, 0xeb, 0x1a, 0xa7, 0x58, 0xf7, 0xcc, 0x01, 0x76,
	0x3d, 0x63, 0x70, 0x51, 0x4e, 0xaf, 0x4b, 0x9b, 0x29, 0xf4, 0x00, 0x96, 0xb9, 0x71, 0x77, 0x38,
	0xf0, 0xf7, 0x28, 0x67, 0x88, 0x24, 0x17, 0x20, 0x33, 0xb4, 0xfc, 0x15, 0xcb, 0xd9, 0x75, 0x69,
	0x33, 0x87, 0xfe, 0x10, 0x1e, 0x12, 0xea, 0x09, 0x36, 0xb1, 0xd5, 0xbf, 0xb0, 0x4d, 0xcb, 0x73,
	0xcb, 0x39, 0xc2, 0xc7, 0x52, 0x84, 0x0f, 0x95, 0x8d, 0xa1, 0xfb, 0xb0, 0x78, 0xe2, 0x60, 0xc3,
	0xc3, 0xfd, 0x08, 0x13, 0x79, 0xc2, 0xc4, 0x0a, 0x14, 0x83, 0xfd, 0xa9, 0x1a, 0x60, 0x5d, 0xda,
	0x4c, 0xa3, 0x0d, 0x48, 0x79, 0x57, 0x17, 0xb8, 0x5c, 0x20, 0x2a, 0x5c, 0x89, 0x2c, 0x4a, 0x25,
	0xde, 0xbb, 0xba, 0xc0, 0x04, 0x16, 0x57, 0xae, 0x87, 0x07, 0xba, 0x67, 0x7a, 0xe7, 0xb8, 0x3c,
	0x1f, 0xc0, 0x62, 0xe8, 0x62, 0x87, 0x7d, 0x2b, 0x92, 0x6f, 0x65, 0x90, 0xe9, 0x61, 0x74, 0x07,
	0xbf, 0xc1, 0x0e, 0xb6, 0x4e, 0x70, 0x79, 0x81, 0x1c, 0xeb, 0x31, 0x64, 0x6c, 0xc7, 0x3c, 0x35,
	0xad, 0x72, 0x89, 0x6c, 0x75, 0x6f, 0x6a, 0xab, 0x16, 0x19, 0x56, 0x9e, 0x40, 0x86, 0xc9, 0xb5,
	0x0a, 0xf9, 0x50, 0x47, 0x54, 0xe7, 0xf3, 0xa3, 0xeb, 0x6a, 0x2e, 0x50, 0x8e, 0xf2, 0xcf, 0x49,
	0x00, 0x3a, 0x57, 0xf3, 0xf0, 0x40, 0x08, 0x8e, 0x45, 0xc8, 0x87, 0x92, 0x48, 0x10, 0x49, 0x3c,
	0x85, 0x92, 0x71, 0xe2, 0xd9, 0xce, 0x14, 0x00, 0x16, 0x47, 0xd7, 0xd5, 0x62, 0xcd, 0x1f, 0x1a,
	0xab, 0x5f, 0x86, 0x9c, 0x69, 0x79, 0xd8, 0xb1, 0x8c, 0x73, 0x82, 0xdb, 0x1c, 0xda, 0x64, 0x02,
	0x4b, 0x93, 0x53, 0x54, 0xa6, 0x4e, 0xe1, 0x73, 0xb2, 0x45, 0xa4, 0x56, 0x05, 0x66, 0x95, 0xfe,
	0x0e, 0x99, 0x90, 0x7d, 0x46, 0x27, 0x04, 0x6e, 0x36, 0x16, 0xb8, 0x1f, 0xf8, 0x40, 0x24, 0xfa,
	0x23, 0x9a, 0x2b, 0xec, 0x20, 0x0e, 0x88, 0x64, 0x64, 0x7f, 0x0e, 0xfd, 0x18, 0x4a, 0x81, 0x9a,
	0x87, 0x17, 0x7d, 0x1f, 0x09, 0x44, 0xb5, 0x85, 0x9d, 0xfb, 0xd3, 0xe4, 0x87, 0x94, 0x60, 0x7f,
	0x0e, 0x7d, 0x0a, 0xf2, 0x1b, 0xfb, 0xfc, 0xdc, 0x7e, 0x87, 0x9d, 0xf1, 0xb4, 0x79, 0x32, 0x2d,
	0x7a, 0xc0, 0x17, 0x8c, 0x64, 0x3c, 0x4f, 0x79, 0x0e, 0x29, 0x72, 0xd4, 0x02, 0x64, 0x0f, 0xd4,
	0x6e, 0xb7, 0xf6, 0x52, 0x95, 0xe7, 0xd0, 0x12, 0x94, 0xd8, 0x8b, 0x7e, 0xd8, 0xae, 0xd7, 0x7a,
	0x6a, 0x5d, 0x96, 0xd0, 0x32, 0xc8, 0x2f, 0x5a, 0x8d, 0x46, 0xeb, 0x2b, 0xb5, 0x33, 0xfe, 0x9a,
	0xd8, 0xcd, 0x40, 0xca, 0xf4, 0xf0, 0x40, 0x19, 0xc2, 0x4a, 0x28, 0xbd, 0x23, 0x13, 0xbf, 0xab,
	0x63, 0xcf, 0x30, 0xcf, 0x5d, 0xb4, 0x09, 0x0b, 0x81, 0x0c, 0x7d, 0xf8, 0x8d, 0xd5, 0x2b, 0x8f,
	0xae, 0xab, 0xf3, 0xe1, 0x14, 0xad, 0xce, 0x83, 0x25, 0x31, 0x0d, 0x16, 0x1f, 0x09, 0x97, 0x26,
	0x7e, 0x47, 0x0c, 0x83, 0x28, 0x3c, 0xa5, 0xfc, 0x0c, 0xf2, 0x9d, 0x00, 0xa6, 0xe8, 0x31, 0x53,
	0xac, 0x44, 0x14, 0x1b, 0x15, 0xd7, 0x98, 0x86, 0xea, 0x95, 0xc2, 0x2c, 0x11, 0x85, 0x99, 0x82,
	0x98, 0x20, 0x00, 0x32, 0x6a, 0xb3, 0xa7, 0xf5, 0x5e, 0xc9, 0x73, 0xca, 0xef, 0x12, 0x90, 0x65,
	0x92, 0x46, 0xf3, 0x90, 0xf2, 0xf0, 0x5f, 0x78, 0xcc, 0xa1, 0x3e, 0x85, 0x82, 0xe1, 0x79, 0xc6,
	0xc9, 0xd9, 0x00, 0xfb, 0x06, 0x9d, 0x20, 0x06, 0x1d, 0xb5, 0xbd, 0xda, 0x78, 0x14, 0x3d, 0x81,
	0x8c, 0xeb, 0x19, 0xde, 0xd0, 0x65, 0x5e, 0x56, 0xa0, 0xc7, 0xad, 0x2e, 0x21, 0x40, 0x1b, 0x90,
	0x71, 0xed, 0xa1, 0x73, 0x82, 0x09, 0x54, 0x63, 0x5c, 0xc4, 0x13, 0x98, 0xef, 0x63, 0xd7, 0x33,
	0x2d, 0x02, 0x2c, 0xb7, 0x9c, 0x8e, 0xf7, 0x26, 0x65, 0x90, 0x71, 0xdf, 0xe4, 0x9d, 0x49, 0x86,
	0x98, 0xd0, 0x33, 0x3a, 0xc2, 0xd9, 0x50, 0x04, 0xba, 0x2a, 0x19, 0x1b, 0x4b, 0xbe, 0x08, 0x69,
	0xea, 0x23, 0x72, 0xe4, 0xf4, 0x8f, 0x21, 0xef, 0xcb, 0xc2, 0xf7, 0x10, 0x6e, 0x39, 0x4f, 0xb6,
	0x5f, 0x16, 0x49, 0x1b, 0x95, 0x20, 0x1b, 0xb8, 0x4a, 0x1f, 0xf2, 0x79, 0xe5, 0x11, 0x64, 0xd8,
	0x51, 0x01, 0x32, 0xcd, 0x56, 0xe7, 0xa0, 0xd6, 0x90, 0xe7, 0x7c, 0xf0, 0xd5, 0xd5, 0x86, 0x4a,
	0x70, 0xa6, 0xfc, 0x15, 0xe4, 0xc6, 0xfc, 0x3f, 0x83, 0xec, 0xc9, 0x99, 0x61, 0x59, 0xf8, 0x9c,
	0x29, 0xf5, 0x3d, 0xc1, 0x29, 0xb7, 0xf6, 0x28, 0x89, 0x50, 0xad, 0xdb, 0x90, 0x0d, 0x86, 0xb3,
	0x90, 0xac, 0xb5, 0xdb, 0xf2, 0x9c, 0xff, 0xd0, 0x3d, 0xe8, 0xca, 0x12, 0xca, 0x43, 0xfa, 0xa8,
	0xa5, 0xed, 0xa9, 0x72, 0xc2, 0x7f, 0x54, 0x0f, 0x6a, 0x5a, 0x43, 0x4e, 0x2a, 0x7f, 0x2b, 0xc1,
	0x02, 0x6f, 0x5f, 0x77, 0x00, 0xb1, 0xc0, 0x35, 0x25, 0xe2, 0x5c, 0xd3, 0x46, 0xe8, 0x10, 0x92,
	0x71, 0x0e, 0x41, 0xd9, 0x81, 0xd2, 0x84, 0xd5, 0xde, 0xee, 0x55, 0x2d, 0x80, 0xae, 0x71, 0x89,
	0xfb, 0x5f, 0x0e, 0xb1, 0x73, 0xf5, 0xdd, 0x6f, 0xdc, 0x2a, 0xa4, 0x7f, 0xee, 0xaf, 0xc4, 0xb8,
	0x94, 0x23, 0x5c, 0x92, 0x1d, 0x94, 0x2c, 0xa4, 0xe9, 0xc3, 0x3f, 0xa5, 0x00, 0x22, 0xc8, 0xdf,
	0xe4, 0x0c, 0xb2, 0x22, 0x34, 0x0f, 0x6a, 0x91, 0x63, 0x80, 0x25, 0xd8, 0x25, 0x94, 0x1d, 0xe0,
	0xbe, 0x69, 0x68, 0x75, 0xe6, 0xd8, 0xb3, 0xa3, 0xeb, 0x6a, 0xf2, 0xb0, 0xd3, 0x40, 0x3f, 0x84,
	0xb4, 0x39, 0x08, 0x5d, 0x68, 0x74, 0x4d, 0xcd, 0xff, 0x1e, 0x2e, 0xbc, 0x3f, 0xe7, 0x13, 0x1b,
	0xc3, 0xbe, 0x69, 0x33, 0x07, 0xca, 0x31, 0xe0, 0x7f, 0xe7, 0x88, 0x5f, 0x40, 0xe1, 0x14, 0x5b,
	0xd8, 0x31, 0x4f, 0xf4, 0xa1, 0x73, 0xce, 0x9c, 0x67, 0x35, 0x32, 0xe5, 0x25, 0x1d, 0x3d, 0xec,
	0x34, 0xc2, 0x79, 0xbb, 0x0b, 0xa3, 0xeb, 0x2a, 0x84, 0x23, 0x74, 0xd3, 0x4b, 0xd3, 0x35, 0x3d,
	0x72, 0x9f, 0xf2, 0x9b, 0x1e, 0xf9, 0xdf, 0xb9, 0x4d, 0x77, 0x20, 0x7f, 0x62, 0x38, 0x58, 0xbf,
	0x38, 0x37, 0x2c, 0x72, 0xcd, 0x16, 0xb8, 0x20, 0x6c, 0xcf, 0x70, 0x70, 0xfb, 0xdc, 0xb0, 0x26,
	0x4f, 0x75, 0x69, 0xf6, 0xb1, 0x4d, 0xae, 0xe1, 0xc9, 0x0d, 0xfa, 0x98, 0x3f, 0xd5, 0x73, 0x28,
	0x5d, 0x18, 0x57, 0xfe, 0x8b, 0xee, 0xe0, 0x9f, 0x0f, 0xb1, 0xeb, 0x95, 0x65, 0x32, 0x6d, 0x23,
	0x32, 0xad, 0x4d, 0x29, 0x3a, 0x94, 0x20, 0x3a, 0x5f, 0x39, 0x65, 0x6e, 0x31, 0x0f, 0x69, 0xed,
	0x80, 0xde, 0x0e, 0x79, 0x48, 0xd7, 0x0e, 0xeb, 0x5a, 0x4b, 0x96, 0x50, 0x09, 0x0a, 0x2f, 0xd5,
	0xa6, 0xda, 0xd1, 0xf6, 0xf4, 0xc3, 0x4e, 0x83, 0x9a, 0xd1, 0x91, 0xd6, 0xd5, 0x7a, 0x72, 0x12,
	0x15, 0x21, 0xbf, 0x57, 0xeb, 0xa8, 0x7a, 0xbb, 0x51, 0x6b, 0xca, 0x29, 0x3a, 0x52, 0x57, 0x5b,
	0x72, 0xda, 0xbf, 0x5e, 0xda, 0xb5, 0x57, 0x07, 0x6a, 0xb3, 0xa7, 0x77, 0xd4, 0x2f, 0x0f, 0xd5,
	0x6e, 0x4f, 0xce, 0xf8, 0x17, 0x49, 0xdf, 0xf0, 0x0c, 0xc5, 0x80, 0xd2, 0x84, 0x22, 0xfd, 0x2b,
	0x7c, 0x60, 0x0e, 0xf0, 0x18, 0x4a, 0x79, 0xf4, 0x10, 0x72, 0x04, 0x1f, 0x21, 0x6e, 0x0b, 0xa3,
	0xeb, 0x6a, 0xf6, 0x80, 0x62, 0xc6, 0x47, 0xd3, 0x3b, 0xb3, 0xef, 0x9d, 0x11, 0xf0, 0x14, 0xfd,
	0xf8, 0xec, 0x0c, 0x9b, 0xa7, 0x67, 0x41, 0xe0, 0xfa, 0x06, 0x4a, 0x13, 0x82, 0x12, 0x6c, 0xf1,
	0x20, 0x84, 0xa0, 0x60, 0x87, 0x0d, 0x28, 0xf4, 0x87, 0x0e, 0xb5, 0x1d, 0xcb, 0x25, 0xeb, 0xa6,
	0x28, 0x16, 0xea, 0xec, 0x73, 0xb3, 0xab, 0x9c, 0x42, 0x69, 0x02, 0x66, 0x77, 0x3f, 0xca, 0x4c,
	0x1b, 0x3d, 0x87, 0x65, 0x11, 0x38, 0x05, 0xbb, 0x2d, 0x43, 0xd2, 0x07, 0x77, 0x82, 0x33, 0x2a,
	0xa5, 0xee, 0x0b, 0x84, 0x83, 0xa6, 0xcf, 0x16, 0x41, 0x71, 0xe8, 0x62, 0x08, 0x5b, 0x84, 0x4c,
	0xab, 0xfb, 0x91, 0x23, 0x1d, 0xb6, 0x8c, 0x01, 0x33, 0x5a, 0xa5, 0x03, 0x68, 0x1a, 0xaf, 0xe8,
	0x7d, 0x98, 0x1f, 0x23, 0x3c, 0x5c, 0x8c, 0x9c, 0x20, 0xa0, 0xd6, 0xea, 0x68, 0x15, 0x16, 0x42,
	0xaa, 0xc8, 0x9a, 0x9f, 0x43, 0x39, 0x0e, 0x9c, 0xe8, 0x11, 0x40, 0x00, 0xed, 0xf1, 0xba, 0xc5,
	0xd1, 0x75, 0x35, 0xcf, 0x66, 0x68, 0x75, 0xe5, 0x1b, 0x09, 0x96, 0xda, 0xc3, 0xe3, 0x73, 0xd3,
	0x3d, 0xc3, 0xfd, 0x48, 0x9c, 0xb9, 0x0a, 0xa9, 0xe1, 0x70, 0x3c, 0x29, 0x37, 0xba, 0xae, 0xa6,
	0x0e, 0x0f, 0xef, 0xee, 0x16, 0x23, 0xd1, 0x61, 0x52, 0x10, 0x1d, 0x0a, 0x33, 0x95, 0x54, 0x7c,
	0xa6, 0xb2, 0x41, 0x63, 0x29, 0x12, 0x98, 0x16, 0x04, 0x91, 0xbc, 0xcf, 0xba, 0xf2, 0x9b, 0x04,
	0xa0, 0xb6, 0xed, 0x7a, 0xec, 0x7e, 0x60, 0x62, 0x89, 0x3d, 0x11, 0xc7, 0x64, 0x42, 0xc0, 0xe4,
	0x26, 0x2c, 0xbc, 0x71, 0xec, 0xc1, 0x54, 0x28, 0x4d, 0xae, 0xb6, 0x17, 0x8e, 0x3d, 0x88, 0xb0,
	0xf7, 0xfd, 0x06, 0x27, 0xd1, 0xc8, 0x3c, 0x43, 0x22, 0xf3, 0x20, 0xc6, 0xca, 0x8a, 0x62, 0xac,
	0xdc, 0x4d, 0x31, 0xd6, 0xf8, 0xfe, 0xc8, 0x93, 0xa9, 0x93, 0x71, 0x07, 0x5a, 0x82, 0x42, 0xdf,
	0xb6, 0x3c, 0xdd, 0xb2, 0x3d, 0xf3, 0xcd, 0x15, 0xb9, 0x0f, 0x72, 0xca, 0x9f, 0xc1, 0x12, 0x27,
	0x49, 0xf7, 0xc2, 0xb6, 0x5c, 0x3c, 0x56, 0x83, 0x74, 0x83, 0x1a, 0xd0, 0x23, 0xc8, 0xd0, 0xef,
	0x44, 0xa8, 0x7c, 0x52, 0x49, 0xc9, 0x94, 0x5f, 0x24, 0xa0, 0x7c, 0x60, 0x38, 0x6f, 0xe9, 0xab,
	0x5b, 0x73, 0x3b, 0xd8, 0xe8, 0x07, 0xfa, 0x6a, 0xc2, 0x22, 0xd3, 0xcb, 0x3b, 0xc3, 0xc3, 0xce,
	0xc0, 0x70, 0xde, 0xba, 0x65, 0x89, 0x1c, 0xf1, 0xe3, 0x68, 0x14, 0x10, 0x33, 0x9f, 0xed, 0xf1,
	0x55, 0x30, 0x77, 0xa6, 0xe0, 0x39, 0x8c, 0x01, 0x49, 0xf0, 0xec, 0x8b, 0xdb, 0xc5, 0xd8, 0xa2,
	0x69, 0x51, 0xa5, 0x03, 0x25, 0xc1, 0xa2, 0x21, 0x78, 0x24, 0x01, 0x78, 0xe2, 0xf3, 0x66, 0x92,
	0xa8, 0x29, 0xef, 0xc1, 0x7d, 0xc1, 0x09, 0xa8, 0x9c, 0x95, 0xbf, 0x91, 0x00, 0x85, 0x12, 0x75,
	0x03, 0xc9, 0xdc, 0xba, 0xe9, 0x33, 0x90, 0xfd, 0x34, 0x00, 0x4f, 0xc7, 0x58, 0xc4, 0x4a, 0x8f,
	0xc8, 0xd8, 0xf8, 0xdc, 0x1f, 0x40, 0xce, 0x64, 0xa5, 0x0c, 0x16, 0xbf, 0x2c, 0x09, 0xaa, 0x1c,
	0x8a, 0x0a, 0x0b, 0x21, 0x2f, 0x6a, 0xff, 0x74, 0x46, 0x18, 0x2c, 0x40, 0x26, 0x5a, 0x54, 0x51,
	0xbe, 0x84, 0x25, 0xee, 0x48, 0x0c, 0x52, 0x9b, 0x90, 0xc6, 0xfd, 0x53, 0x1c, 0x68, 0xf8, 0xbe,
	0x70, 0x31, 0xb2, 0xab, 0x0c, 0xb9, 0x33, 0xc3, 0xd5, 0x07, 0xb6, 0x43, 0x5d, 0x60, 0x4e, 0xf9,
	0xf7, 0x04, 0x2c, 0x91, 0xe8, 0x8a, 0x49, 0x31, 0x90, 0x93, 0xc0, 0x57, 0x49, 0x37, 0xe4, 0x9e,
	0xa1, 0x14, 0x12, 0xb1, 0x52, 0x40, 0xdb, 0x2c, 0x60, 0xa3, 0x89, 0xca, 0xc6, 0x64, 0xa0, 0xc7,
	0x73, 0x40, 0x23, 0x37, 0x91, 0x36, 0x52, 0xb1, 0xda, 0x78, 0x14, 0x84, 0x92, 0x20, 0x0e, 0x25,
	0xf7, 0xe7, 0xd0, 0x53, 0x58, 0x70, 0xfd, 0xe0, 0x55, 0x27, 0x84, 0xfe, 0x72, 0x85, 0xd0, 0x21,
	0x85, 0x61, 0xad, 0x56, 0xdf, 0x9f, 0x53, 0x3e, 0x0a, 0xa3, 0x93, 0x5a, 0x7d, 0xbf, 0xb5, 0x47,
	0xa3, 0x93, 0x6e, 0xed, 0x88, 0x64, 0xac, 0x08, 0x16, 0x6a, 0x8d, 0x86, 0xfe, 0xa2, 0xd5, 0xd1,
	0x8f, 0x34, 0xf5, 0x2b, 0xb5, 0x23, 0x27, 0x76, 0xe7, 0x01, 0xe8, 0xba, 0xfe, 0x39, 0x95, 0x3f,
	0x0a, 0xaa, 0x0f, 0x44, 0xf6, 0xa1, 0x4d, 0x4b, 0x31, 0x36, 0x3d, 0xa5, 0xef, 0x26, 0x2c, 0xf3,
	0x92, 0x61, 0x0a, 0x7f, 0x9f, 0x57, 0xf8, 0x34, 0x7a, 0x62, 0x94, 0xfd, 0x29, 0x2c, 0x8d, 0x8f,
	0x68, 0xe2, 0xa8, 0x4d, 0xdc, 0x1c, 0xf1, 0xd7, 0x61, 0x99, 0x9f, 0xc7, 0xf8, 0x78, 0x06, 0xc5,
	0x50, 0x98, 0xa6, 0x90, 0x9f, 0x50, 0xa4, 0xca, 0x6b, 0x28, 0x52, 0xee, 0xfe, 0x6f, 0x6c, 0x51,
	0xf9, 0x38, 0x30, 0xb2, 0x31, 0x7f, 0xb7, 0x8b, 0x5c, 0x31, 0x82, 0x49, 0x63, 0x69, 0x3c, 0x02,
	0x18, 0x73, 0x45, 0x4f, 0xc4, 0x2e, 0xfe, 0x80, 0x2d, 0xf7, 0x8e, 0x7c, 0x7d, 0x12, 0xb8, 0xbe,
	0x50, 0x70, 0x0a, 0x64, 0xe9, 0x1e, 0x81, 0xc8, 0x04, 0x9c, 0xfd, 0x4a, 0x82, 0x7b, 0x7b, 0xa4,
	0x58, 0x17, 0xca, 0xf0, 0x7f, 0x65, 0x9d, 0xb7, 0x3a, 0xef, 0x5b, 0x33, 0xb0, 0x17, 0x50, 0x9e,
	0xe6, 0x84, 0x1d, 0xe5, 0x29, 0x14, 0x22, 0x06, 0x25, 0xf0, 0x67, 0x11, 0x04, 0xfc, 0x52, 0x82,
	0x7b, 0x34, 0xcd, 0xfc, 0x8e, 0x47, 0x7a, 0x08, 0xb9, 0xb1, 0xfd, 0x46, 0xc2, 0x5a, 0x66, 0xba,
	0xb7, 0x1f, 0xa8, 0x02, 0xe5, 0x69, 0x3e, 0xd8, 0xc5, 0x71, 0x0e, 0xcb, 0x75, 0x7c, 0x8e, 0x3d,
	0x3c, 0x11, 0x03, 0x09, 0x72, 0x6f, 0x29, 0x2e, 0xf7, 0x9e, 0xce, 0xe8, 0x13, 0xe2, 0x8c, 0x5e,
	0xb9, 0x07, 0x2b, 0x13, 0xbb, 0x31, 0x36, 0x8e, 0x61, 0x89, 0x0e, 0xf0, 0x36, 0x73, 0x17, 0x2e,
	0x6e, 0x8b, 0xce, 0x94, 0xd5, 0xe0, 0xa8, 0xbc, 0xdd, 0x28, 0xff, 0x2a, 0xc1, 0x12, 0x95, 0xcf,
	0x1d, 0x0d, 0x96, 0x2f, 0xf9, 0x92, 0x50, 0x0f, 0x7d, 0x02, 0x2b, 0x46, 0xbf, 0xaf, 0xd3, 0x2a,
	0x79, 0xc8, 0x36, 0xad, 0x97, 0xe7, 0x77, 0x57, 0x47, 0xd7, 0x55, 0x54, 0xeb, 0xf7, 0x69, 0x4d,
	0x37, 0xe0, 0xdd, 0x45, 0x9f, 0x41, 0xd9, 0xc1, 0x03, 0xfb, 0x12, 0x0b, 0x66, 0xa6, 0xc9, 0xcc,
	0xfb, 0xa3, 0xeb, 0xea, 0x4a, 0x87, 0xd0, 0x4c, 0x4e, 0x9e, 0x2c, 0x48, 0x93, 0xea, 0xaa, 0xf2,
	0x13, 0x58, 0xe6, 0x4f, 0x35, 0xbb, 0x9b, 0xf8, 0xeb, 0x14, 0x2c, 0x51, 0x13, 0xe0, 0x25, 0xf2,
	0xbd, 0x84, 0xfa, 0xbf, 0x1f, 0x41, 0x72, 0xa4, 0x81, 0x70, 0x63, 0xb0, 0xcc, 0x63, 0x84, 0xb6,
	0x0a, 0x82, 0x2e, 0x43, 0xf1, 0xa6, 0x2e, 0xc3, 0x16, 0x2c, 0x4e, 0x43, 0x61, 0x81, 0x40, 0x81,
	0x24, 0x3c, 0xb7, 0x81, 0xa0, 0xc4, 0xaa, 0x8b, 0x41, 0x9f, 0x41, 0xbe, 0xb1, 0xcf, 0x30, 0x19,
	0xd4, 0x2f, 0x92, 0x1b, 0xf4, 0x97, 0x12, 0x2c, 0xf3, 0x38, 0x60, 0x18, 0xba, 0xd5, 0x34, 0x9e,
	0x42, 0x21, 0xe2, 0x12, 0x58, 0x98, 0x74, 0x6b, 0xf8, 0x9f, 0x8c, 0x03, 0xe4, 0xef, 0x12, 0x81,
	0x4f, 0x56, 0x07, 0x17, 0xde, 0xd5, 0xff, 0x2b, 0x2a, 0x85, 0x99, 0x68, 0x3a, 0x3e, 0x13, 0x8d,
	0x40, 0x22, 0x23, 0x80, 0x44, 0x8e, 0x83, 0x44, 0xfe, 0xce, 0x90, 0x80, 0xd9, 0x21, 0x51, 0x98,
	0x80, 0xc4, 0xfc, 0xcd, 0xad, 0xa7, 0xe7, 0x70, 0x5f, 0x20, 0xf3, 0xd9, 0xbd, 0xc8, 0x1f, 0xc0,
	0x32, 0x7d, 0xa2, 0x7c, 0xcd, 0x9c, 0x94, 0x28, 0x9f, 0x05, 0xfd, 0x8f, 0xf1, 0xc4, 0x30, 0x90,
	0x08, 0xda, 0x8f, 0x52, 0x4c, 0xfb, 0x51, 0x69, 0xc3, 0x3d, 0x16, 0x7f, 0xbc, 0xb0, 0x1d, 0xfa,
	0x6d, 0xd6, 0xc8, 0xcf, 0x17, 0x58, 0xa0, 0x5a, 0xdb, 0x3a, 0xbf, 0x62, 0x71, 0xe4, 0x73, 0x28,
	0x4f, 0xaf, 0x78, 0x87, 0xd0, 0xe6, 0x73, 0x58, 0x9c, 0x0e, 0x00, 0x36, 0xa7, 0x22, 0x73, 0x49,
	0x1c, 0x99, 0x2b, 0x3f, 0x05, 0xf4, 0x1d, 0x03, 0x91, 0xd7, 0xb0, 0x18, 0x9a, 0x5b, 0xc0, 0xc0,
	0x7b, 0x90, 0xe5, 0xeb, 0xef, 0x30, 0xba, 0xae, 0x66, 0x58, 0xe5, 0xfd, 0x6e, 0x21, 0xdf, 0x4f,
	0xa2, 0xb9, 0xe7, 0x9d, 0x52, 0x7f, 0xe5, 0x33, 0x78, 0x20, 0x6c, 0x75, 0xcd, 0xc2, 0xa5, 0xf2,
	0x33, 0x78, 0x18, 0x33, 0x99, 0xb1, 0xf0, 0x19, 0x2c, 0x92, 0xd9, 0xa4, 0xd3, 0xd5, 0xa7, 0x83,
	0x4c, 0x4f, 0xeb, 0x42, 0x7e, 0x22, 0x8b, 0x28, 0xff, 0x90, 0x84, 0x0a, 0xc5, 0x7f, 0xc3, 0xb4,
	0xde, 0x06, 0x25, 0xaf, 0x31, 0x67, 0x1f, 0x82, 0x1c, 0xf5, 0x2e, 0xdb, 0x21, 0x8b, 0xc4, 0x16,
	0xa3, 0xee, 0x65, 0x5b, 0xab, 0x4f, 0x92, 0xef, 0x84, 0x12, 0x9d, 0x22, 0xdf, 0xd1, 0xea, 0xe8,
	0x23, 0x40, 0xbc, 0x93, 0xd9, 0x0e, 0x5d, 0xd2, 0xf2, 0xe8, 0xba, 0x2a, 0x73, 0x5e, 0x66, 0x5b,
	0x34, 0x63, 0x27, 0xcc, 0x1e, 0xa7, 0x67, 0xf8, 0x7b, 0x04, 0x97, 0x1f, 0xf1, 0x5d, 0xd3, 0x17,
	0x5a, 0x66, 0xf2, 0x42, 0xa3, 0x97, 0xe4, 0x1a, 0xac, 0x5e, 0x38, 0xf8, 0x02, 0x5b, 0x7d, 0xdd,
	0xc5, 0x56, 0xdf, 0xf7, 0x63, 0x44, 0x30, 0xdb, 0xc4, 0x93, 0xe5, 0x62, 0xc7, 0x77, 0x88, 0x6f,
	0xcb, 0x8d, 0x3d, 0x1d, 0xdc, 0xe4, 0xe9, 0x56, 0xa0, 0x18, 0xf5, 0x5c, 0xdb, 0xcc, 0x75, 0x4d,
	0x7c, 0xde, 0xa1, 0x6d, 0x76, 0x05, 0xc3, 0x7b, 0x42, 0x45, 0x4d, 0xda, 0xe8, 0x76, 0x7c, 0x2e,
	0x3a, 0xa6, 0xd9, 0x89, 0xaf, 0x41, 0xfd, 0x5a, 0x82, 0x87, 0x74, 0x9f, 0x96, 0x75, 0x6c, 0x1b,
	0x8e, 0x3f, 0xc6, 0xdf, 0x44, 0x77, 0x8a, 0xea, 0x85, 0xf7, 0x48, 0x22, 0xfe, 0x1e, 0xe1, 0xaf,
	0x0d, 0xa2, 0x58, 0x65, 0x0f, 0xd6, 0xe2, 0x38, 0x9a, 0xdd, 0x4f, 0x7f, 0x0a, 0x4b, 0x51, 0xc1,
	0xcd, 0xec, 0xa6, 0xdb, 0xb0, 0xcc, 0xcf, 0x9b, 0x79, 0x4b, 0x5f, 0x91, 0x0c, 0x24, 0x5d, 0x82,
	0x11, 0xe6, 0x69, 0x7f, 0x00, 0xb9, 0x2f, 0xf0, 0xd5, 0x91, 0x71, 0x3e, 0xc4, 0xa8, 0x00, 0xc9,
	0xb7, 0xf8, 0x8a, 0x95, 0xda, 0x8b, 0x90, 0xbe, 0xf4, 0xbf, 0xb2, 0x4a, 0xc1, 0x1f, 0xc3, 0x22,
	0xab, 0xd1, 0x77, 0xb1, 0x37, 0xbc, 0x50, 0x2f, 0xfd, 0x88, 0x6c, 0x1e, 0x52, 0xa4, 0xd8, 0x2d,
	0xb1, 0x5b, 0x0e, 0x0c, 0xcf, 0x73, 0xcc, 0xe3, 0xa1, 0x87, 0x83, 0x9e, 0x72, 0x34, 0x28, 0x0c,
	0xf6, 0x51, 0x3e, 0x84, 0x95, 0xb6, 0x63, 0x5f, 0x9a, 0xae, 0x69, 0x5b, 0xb8, 0xdf, 0x3e, 0xb3,
	0x2d, 0x4c, 0xd7, 0xf3, 0x2f, 0x03, 0xff, 0x4d, 0xb7, 0x86, 0xbe, 0xcb, 0xa7, 0xeb, 0x2a, 0x7f,
	0x97, 0x82, 0x07, 0x93, 0xc2, 0x26, 0xf4, 0x81, 0xd8, 0x1a, 0xb0, 0x70, 0x6e, 0xdb, 0x6f, 0x87,
	0x17, 0xfa, 0x31, 0x2d, 0x8c, 0xb0, 0x8e, 0xdd, 0x8f, 0x23, 0x9b, 0xdf, 0xb4, 0xc0, 0x56, 0x83,
	0xcc, 0xde, 0xbd, 0x22, 0x86, 0xf0, 0xe8, 0x96, 0xa4, 0x66, 0x7f, 0xce, 0x27, 0x99, 0x0c, 0x5a,
	0xb8, 0x5b, 0x6d, 0x7f, 0x0e, 0xa9, 0x00, 0xd8, 0xdf, 0x82, 0xf2, 0x93, 0x22, 0xfc, 0x6c, 0xcf,
	0xca, 0x0f, 0x79, 0x21, 0xcc, 0x7c, 0x02, 0xc5, 0xa0, 0xab, 0xe7, 0xfa, 0x72, 0x67, 0xc5, 0xf5,
	0x07, 0xd3, 0x7d, 0xbd, 0x50, 0x2d, 0xfb, 0x12, 0xfa, 0xdc, 0x07, 0xfa, 0x58, 0xc2, 0x3a, 0x11,
	0x2a, 0xf1, 0x2e, 0xbc, 0x17, 0x16, 0x6a, 0x61, 0x5f, 0x52, 0xf6, 0x61, 0x9e, 0x13, 0x49, 0x05,
	0x56, 0xb5, 0xe6, 0x51, 0xad, 0xa1, 0xd5, 0xf5, 0x46, 0xab, 0xf5, 0xc5, 0x61, 0x5b, 0xdf, 0x7d,
	0xa5, 0xf7, 0x5e, 0xb5, 0x55, 0x79, 0x0e, 0x15, 0x21, 0xdf, 0xdb, 0xef, 0xa8, 0xb5, 0xba, 0xae,
	0xd5, 0x65, 0xc9, 0x7f, 0xa5, 0xff, 0x1f, 0xf8, 0xaf, 0x09, 0xe5, 0x00, 0xf2, 0xe1, 0x61, 0x56,
	0x01, 0x05, 0xcb, 0xa8, 0x47, 0x6a, 0xb3, 0x17, 0x2c, 0xb1, 0x08, 0xc5, 0xa0, 0x0d, 0xd7, 0x55,
	0x7b, 0x87, 0x6d, 0x59, 0x42, 0x2b, 0xb0, 0xd8, 0xee, 0xb4, 0x8e, 0xb4, 0xae, 0xd6, 0x6a, 0xaa,
	0x75, 0xbd, 0xbd, 0xdf, 0x6a, 0xaa, 0x72, 0x62, 0xb7, 0x00, 0xf9, 0xb1, 0xa6, 0x77, 0xb3, 0x90,
	0x26, 0x22, 0x56, 0x76, 0xe1, 0x61, 0x8c, 0x38, 0x67, 0x36, 0x8f, 0xa7, 0x76, 0x50, 0x4a, 0x0b,
	0x7e, 0x27, 0x39, 0x6c, 0x7e, 0xd1, 0x6c, 0x7d, 0xd5, 0xa4, 0xff, 0x82, 0xa9, 0x7f, 0xd2, 0x53,
	0x3b, 0xcd, 0x5a, 0x43, 0x96, 0x50, 0x0e, 0x52, 0x3d, 0xb5, 0x76, 0x40, 0x9b, 0x85, 0x94, 0xdd,
	0xa4, 0x4f, 0xdf, 0x3d, 0x6c, 0xb7, 0x5b, 0x9d, 0x9e, 0x9c, 0x42, 0x25, 0x28, 0x34, 0xd4, 0x97,
	0xb5, 0xbd, 0x57, 0x3a, 0x21, 0x24, 0x0d, 0xc3, 0xae, 0xba, 0x77, 0xd8, 0x51, 0xf5, 0xf1, 0x3a,
	0x99, 0xa7, 0xbf, 0x92, 0x60, 0x9e, 0x4b, 0x07, 0xee, 0xc3, 0x0a, 0x13, 0x64, 0xab, 0xa3, 0xbd,
	0xd4, 0x9a, 0x7a, 0xc8, 0xc1, 0x3a, 0x3c, 0xe0, 0x87, 0xda, 0xb5, 0x9e, 0xe6, 0x0b, 0x50, 0x6b,
	0x1e, 0x69, 0x3d, 0x55, 0x96, 0xd0, 0x06, 0x54, 0x79, 0x8a, 0x56, 0xe7, 0x65, 0xad, 0xa9, 0xfd,
	0x69, 0xad, 0xa7, 0xb5, 0x9a, 0xfa, 0x5e, 0xab, 0xae, 0xca, 0x09, 0x5f, 0xfe, 0x3c, 0x51, 0xf7,
	0x55, 0x73, 0x4f, 0x4e, 0xee, 0xfc, 0x4b, 0x09, 0xb2, 0xcc, 0x83, 0xa3, 0xaf, 0x41, 0x9e, 0xac,
	0xc4, 0x20, 0x25, 0xda, 0xd2, 0x15, 0x17, 0x8c, 0x2a, 0x1b, 0x37, 0xd2, 0x30, 0x3d, 0xbc, 0x86,
	0xc5, 0xa9, 0xf0, 0x16, 0x4d, 0xcf, 0x9c, 0x4e, 0x38, 0x2a, 0xef, 0xdf, 0x4c, 0xc4, 0xd6, 0xef,
	0x07, 0x39, 0x34, 0x77, 0x2b, 0xa1, 0x0f, 0xa6, 0x26, 0x8b, 0xc2, 0x8b, 0xca, 0x0f, 0x6e, 0x23,
	0x63, 0xbb, 0x0c, 0x60, 0x55, 0x7c, 0x03, 0xa0, 0xcd, 0xa9, 0x15, 0x62, 0xae, 0xad, 0xca, 0x93,
	0x19, 0x28, 0xd9, 0x76, 0x2d, 0x98, 0x8f, 0x26, 0x84, 0x68, 0x6d, 0x6a, 0x2a, 0xbf, 0x74, 0x35,
	0x76, 0x9c, 0x2d, 0xd8, 0x81, 0x22, 0x57, 0x11, 0x42, 0xd1, 0x19, 0xa2, 0xca, 0x54, 0x65, 0x3d,
	0x9e, 0x20, 0x64, 0x32, 0x5a, 0xe8, 0xe1, 0x98, 0x14, 0x54, 0x99, 0x2a, 0xd5, 0xd8, 0xf1, 0x70,
	0xc1, 0xa8, 0xf4, 0xb9, 0x05, 0x05, 0x57, 0x27, 0xb7, 0xa0, 0xf0, 0x8a, 0x7c, 0x0d, 0x8b, 0x53,
	0xbd, 0x1c, 0x0e, 0x7b, 0x71, 0xbd, 0x2a, 0x0e, 0x7b, 0xb1, 0xed, 0x20, 0xf4, 0xe7, 0xb0, 0x22,
	0x74, 0x42, 0xe8, 0xf1, 0x8c, 0x5e, 0xbf, 0xb2, 0x79, 0x3b, 0x21, 0xdb, 0xab, 0x01, 0x85, 0x48,
	0xe7, 0x0f, 0x45, 0x7f, 0xb9, 0x98, 0xee, 0xad, 0x56, 0xd6, 0xe2, 0x86, 0x43, 0x51, 0x47, 0x9b,
	0x00, 0x9c, 0xa8, 0x05, 0x7d, 0x13, 0x4e, 0xd4, 0xc2, 0xee, 0x81, 0xc6, 0xfd, 0xbf, 0xf3, 0x40,
	0x98, 0x21, 0x05, 0x8b, 0x3d, 0x8c, 0x19, 0x0d, 0x79, 0x8b, 0x36, 0x06, 0x38, 0xde, 0x04, 0x9d,
	0x06, 0x8e, 0x37, 0x61, 0x47, 0xe1, 0xf3, 0xf1, 0x9f, 0xbc, 0xe5, 0xa9, 0x4b, 0x20, 0x58, 0xe4,
	0xbe, 0x60, 0x84, 0x4d, 0xff, 0x69, 0xe8, 0x29, 0xa7, 0xa9, 0xc6, 0x5c, 0x54, 0x44, 0x43, 0x6c,
	0x85, 0xaf, 0x41, 0x9e, 0x4c, 0x6d, 0x39, 0x07, 0x1b, 0x93, 0x49, 0x73, 0x0e, 0x36, 0x36, 0x37,
	0xd6, 0xb8, 0xdf, 0x51, 0x1f, 0x08, 0x13, 0x2e, 0x91, 0xe4, 0x05, 0xb9, 0x64, 0x03, 0x0a, 0x91,
	0x56, 0x20, 0x12, 0x53, 0xbb, 0x22, 0x8c, 0x89, 0x3a, 0x88, 0x9d, 0xa0, 0x35, 0xc3, 0xea, 0x0b,
	0x9c, 0xcf, 0x11, 0x95, 0x2c, 0x2a, 0xeb, 0xf1, 0x04, 0xa1, 0xc5, 0x89, 0xff, 0xd9, 0x7c, 0x7c,
	0x5b, 0xa2, 0x29, 0xb2, 0xb8, 0x9b, 0xd3, 0xda, 0xaf, 0x41, 0x9e, 0xac, 0xe7, 0x73, 0x5a, 0x8b,
	0x69, 0x3a, 0x70, 0x5a, 0x8b, 0x6b, 0x08, 0xf8, 0x20, 0x8f, 0x96, 0x8d, 0x39, 0x90, 0x0b, 0xaa,
	0xe4, 0x1c, 0xc8, 0x45, 0xf5, 0xe6, 0xdd, 0x67, 0xdf, 0x7c, 0xbb, 0x26, 0xfd, 0xdb, 0xb7, 0x6b,
	0x73, 0xbf, 0xfd, 0x76, 0x4d, 0xfa, 0xc5, 0x68, 0x4d, 0xfa, 0xc7, 0xd1, 0x9a, 0xf4, 0x9b, 0xd1,
	0x9a, 0xf4, 0xcd, 0x68, 0x4d, 0xfa, 0x8f, 0xd1, 0x9a, 0xf4, 0x5f, 0xa3, 0xb5, 0xb9, 0xdf, 0x8e,
	0xd6, 0xa4, 0x5f, 0xff, 0xe7, 0xda, 0xdc, 0x71, 0x86, 0xfc, 0x87, 0xff, 0xf1, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x11, 0x98, 0x75, 0x1b, 0xce, 0x2f, 0x00, 0x00,
}
