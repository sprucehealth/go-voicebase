// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package threading is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		Iterator
		Thread
		Member
		ThreadItem
		ThreadItemViewDetails
		Reference
		Message
		Endpoint
		MessageUpdate
		MessageDelete
		SavedQuery
		Query
		Expr
		Attachment
		ImageAttachment
		VideoAttachment
		AudioAttachment
		DocumentAttachment
		GenericURLAttachment
		VisitAttachment
		CarePlanAttachment
		PaymentRequestAttachment
		PublishedThreadItem
		MessagePost
		PostMessageRequest
		PostMessageResponse
		PostMessagesRequest
		PostMessagesResponse
		MarkThreadsAsReadRequest
		MarkThreadsAsReadResponse
		ThreadItemsRequest
		ThreadItemEdge
		ThreadItemsResponse
		QueryThreadsRequest
		ThreadEdge
		QueryThreadsResponse
		SavedQueriesRequest
		SavedQueriesResponse
		DeleteSavedQueriesRequest
		DeleteSavedQueriesResponse
		SavedQueryTemplatesRequest
		SavedQueryTemplatesResponse
		ThreadRequest
		ThreadResponse
		ThreadsRequest
		ThreadsResponse
		CreateSavedQueryRequest
		CreateSavedQueryResponse
		UpdateSavedQueryRequest
		UpdateSavedQueryResponse
		DeleteMessageRequest
		DeleteMessageResponse
		DeleteThreadRequest
		DeleteThreadResponse
		UpdateThreadRequest
		UpdateThreadResponse
		CreateThreadRequest
		CreateThreadResponse
		CreateEmptyThreadRequest
		CreateEmptyThreadResponse
		ThreadMembersRequest
		ThreadMembersResponse
		ThreadsForMemberRequest
		ThreadsForMemberResponse
		SavedQueryRequest
		SavedQueryResponse
		ThreadItemRequest
		ThreadItemResponse
		ThreadItemViewDetailsRequest
		ThreadItemViewDetailsResponse
		CreateLinkedThreadsRequest
		CreateLinkedThreadsResponse
		CreateOnboardingThreadRequest
		CreateOnboardingThreadResponse
		LinkedThreadRequest
		LinkedThreadResponse
		KeyValue
		GenericSetupEvent
		ProvisionedPhoneEvent
		OnboardingThreadEventRequest
		OnboardingThreadEventResponse
		SavedMessage
		IDList
		SavedMessagesRequest
		SavedMessagesResponse
		CreateSavedMessageRequest
		CreateSavedMessageResponse
		DeleteSavedMessageRequest
		DeleteSavedMessageResponse
		UpdateSavedMessageRequest
		UpdateSavedMessageResponse
		ScheduledMessage
		CreateScheduledMessageRequest
		CreateScheduledMessageResponse
		DeleteScheduledMessageRequest
		DeleteScheduledMessageResponse
		ScheduledMessagesRequest
		ScheduledMessagesResponse
		UpdateMessageRequest
		UpdateMessageResponse
		TagsRequest
		TagsResponse
		Tag
		TriggeredMessageKey
		TriggeredMessageItem
		TriggeredMessage
		CreateTriggeredMessageRequest
		CreateTriggeredMessageResponse
		TriggeredMessagesRequest
		TriggeredMessagesResponse
		DeleteTriggeredMessageRequest
		DeleteTriggeredMessageResponse
		UpdateTriggeredMessageRequest
		UpdateTriggeredMessageResponse
		CloneAttachmentsRequest
		CloneAttachmentsResponse
*/
package threading

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ThreadType int32

const (
	THREAD_TYPE_INVALID         ThreadType = 0
	THREAD_TYPE_EXTERNAL        ThreadType = 1
	THREAD_TYPE_TEAM            ThreadType = 2
	THREAD_TYPE_SETUP           ThreadType = 3
	THREAD_TYPE_SUPPORT         ThreadType = 4
	THREAD_TYPE_LEGACY_TEAM     ThreadType = 5
	THREAD_TYPE_SECURE_EXTERNAL ThreadType = 6
)

var ThreadType_name = map[int32]string{
	0: "THREAD_TYPE_INVALID",
	1: "THREAD_TYPE_EXTERNAL",
	2: "THREAD_TYPE_TEAM",
	3: "THREAD_TYPE_SETUP",
	4: "THREAD_TYPE_SUPPORT",
	5: "THREAD_TYPE_LEGACY_TEAM",
	6: "THREAD_TYPE_SECURE_EXTERNAL",
}
var ThreadType_value = map[string]int32{
	"THREAD_TYPE_INVALID":         0,
	"THREAD_TYPE_EXTERNAL":        1,
	"THREAD_TYPE_TEAM":            2,
	"THREAD_TYPE_SETUP":           3,
	"THREAD_TYPE_SUPPORT":         4,
	"THREAD_TYPE_LEGACY_TEAM":     5,
	"THREAD_TYPE_SECURE_EXTERNAL": 6,
}

func (ThreadType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type ThreadOrigin int32

const (
	THREAD_ORIGIN_UNKNOWN           ThreadOrigin = 0
	THREAD_ORIGIN_PATIENT_INVITE    ThreadOrigin = 1
	THREAD_ORIGIN_ORGANIZATION_CODE ThreadOrigin = 2
	THREAD_ORIGIN_SYNC              ThreadOrigin = 3
)

var ThreadOrigin_name = map[int32]string{
	0: "THREAD_ORIGIN_UNKNOWN",
	1: "THREAD_ORIGIN_PATIENT_INVITE",
	2: "THREAD_ORIGIN_ORGANIZATION_CODE",
	3: "THREAD_ORIGIN_SYNC",
}
var ThreadOrigin_value = map[string]int32{
	"THREAD_ORIGIN_UNKNOWN":           0,
	"THREAD_ORIGIN_PATIENT_INVITE":    1,
	"THREAD_ORIGIN_ORGANIZATION_CODE": 2,
	"THREAD_ORIGIN_SYNC":              3,
}

func (ThreadOrigin) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type SavedQueryType int32

const (
	SAVED_QUERY_TYPE_INVALID       SavedQueryType = 0
	SAVED_QUERY_TYPE_NORMAL        SavedQueryType = 1
	SAVED_QUERY_TYPE_NOTIFICATIONS SavedQueryType = 2
)

var SavedQueryType_name = map[int32]string{
	0: "SAVED_QUERY_TYPE_INVALID",
	1: "SAVED_QUERY_TYPE_NORMAL",
	2: "SAVED_QUERY_TYPE_NOTIFICATIONS",
}
var SavedQueryType_value = map[string]int32{
	"SAVED_QUERY_TYPE_INVALID":       0,
	"SAVED_QUERY_TYPE_NORMAL":        1,
	"SAVED_QUERY_TYPE_NOTIFICATIONS": 2,
}

func (SavedQueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type ValueType int32

const (
	VALUE_TYPE_UNKNOWN ValueType = 0
	VALUE_TYPE_EXACT   ValueType = 1
	VALUE_TYPE_MANY    ValueType = 2
)

var ValueType_name = map[int32]string{
	0: "VALUE_TYPE_UNKNOWN",
	1: "VALUE_TYPE_EXACT",
	2: "VALUE_TYPE_MANY",
}
var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNKNOWN": 0,
	"VALUE_TYPE_EXACT":   1,
	"VALUE_TYPE_MANY":    2,
}

func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

// Unfortunate artifact of go defaults and no grpc/protobuf ptr support
type NotificationsEnabledUpdate int32

const (
	NOTIFICATIONS_ENABLED_UPDATE_NONE  NotificationsEnabledUpdate = 0
	NOTIFICATIONS_ENABLED_UPDATE_TRUE  NotificationsEnabledUpdate = 1
	NOTIFICATIONS_ENABLED_UPDATE_FALSE NotificationsEnabledUpdate = 2
)

var NotificationsEnabledUpdate_name = map[int32]string{
	0: "NOTIFICATIONS_ENABLED_UPDATE_NONE",
	1: "NOTIFICATIONS_ENABLED_UPDATE_TRUE",
	2: "NOTIFICATIONS_ENABLED_UPDATE_FALSE",
}
var NotificationsEnabledUpdate_value = map[string]int32{
	"NOTIFICATIONS_ENABLED_UPDATE_NONE":  0,
	"NOTIFICATIONS_ENABLED_UPDATE_TRUE":  1,
	"NOTIFICATIONS_ENABLED_UPDATE_FALSE": 2,
}

func (NotificationsEnabledUpdate) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type ScheduledMessageStatus int32

const (
	SCHEDULED_MESSAGE_STATUS_UNKNOWN ScheduledMessageStatus = 0
	SCHEDULED_MESSAGE_STATUS_PENDING ScheduledMessageStatus = 1
	SCHEDULED_MESSAGE_STATUS_SENT    ScheduledMessageStatus = 2
	SCHEDULED_MESSAGE_STATUS_DELETED ScheduledMessageStatus = 3
)

var ScheduledMessageStatus_name = map[int32]string{
	0: "SCHEDULED_MESSAGE_STATUS_UNKNOWN",
	1: "SCHEDULED_MESSAGE_STATUS_PENDING",
	2: "SCHEDULED_MESSAGE_STATUS_SENT",
	3: "SCHEDULED_MESSAGE_STATUS_DELETED",
}
var ScheduledMessageStatus_value = map[string]int32{
	"SCHEDULED_MESSAGE_STATUS_UNKNOWN": 0,
	"SCHEDULED_MESSAGE_STATUS_PENDING": 1,
	"SCHEDULED_MESSAGE_STATUS_SENT":    2,
	"SCHEDULED_MESSAGE_STATUS_DELETED": 3,
}

func (ScheduledMessageStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type Iterator_Direction int32

const (
	ITERATOR_DIRECTION_FROM_START Iterator_Direction = 0
	ITERATOR_DIRECTION_FROM_END   Iterator_Direction = 1
)

var Iterator_Direction_name = map[int32]string{
	0: "ITERATOR_DIRECTION_FROM_START",
	1: "ITERATOR_DIRECTION_FROM_END",
}
var Iterator_Direction_value = map[string]int32{
	"ITERATOR_DIRECTION_FROM_START": 0,
	"ITERATOR_DIRECTION_FROM_END":   1,
}

func (Iterator_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0, 0} }

type Reference_Type int32

const (
	REFERENCE_TYPE_ENTITY Reference_Type = 0
)

var Reference_Type_name = map[int32]string{
	0: "REFERENCE_TYPE_ENTITY",
}
var Reference_Type_value = map[string]int32{
	"REFERENCE_TYPE_ENTITY": 0,
}

func (Reference_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5, 0} }

type Endpoint_Channel int32

const (
	ENDPOINT_CHANNEL_APP   Endpoint_Channel = 0
	ENDPOINT_CHANNEL_SMS   Endpoint_Channel = 1
	ENDPOINT_CHANNEL_VOICE Endpoint_Channel = 2
	ENDPOINT_CHANNEL_EMAIL Endpoint_Channel = 3
)

var Endpoint_Channel_name = map[int32]string{
	0: "ENDPOINT_CHANNEL_APP",
	1: "ENDPOINT_CHANNEL_SMS",
	2: "ENDPOINT_CHANNEL_VOICE",
	3: "ENDPOINT_CHANNEL_EMAIL",
}
var Endpoint_Channel_value = map[string]int32{
	"ENDPOINT_CHANNEL_APP":   0,
	"ENDPOINT_CHANNEL_SMS":   1,
	"ENDPOINT_CHANNEL_VOICE": 2,
	"ENDPOINT_CHANNEL_EMAIL": 3,
}

func (Endpoint_Channel) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7, 0} }

type Expr_Flag int32

const (
	EXPR_FLAG_INVALID          Expr_Flag = 0
	EXPR_FLAG_UNREAD           Expr_Flag = 1
	EXPR_FLAG_UNREAD_REFERENCE Expr_Flag = 2
	EXPR_FLAG_FOLLOWING        Expr_Flag = 3
)

var Expr_Flag_name = map[int32]string{
	0: "EXPR_FLAG_INVALID",
	1: "EXPR_FLAG_UNREAD",
	2: "EXPR_FLAG_UNREAD_REFERENCE",
	3: "EXPR_FLAG_FOLLOWING",
}
var Expr_Flag_value = map[string]int32{
	"EXPR_FLAG_INVALID":          0,
	"EXPR_FLAG_UNREAD":           1,
	"EXPR_FLAG_UNREAD_REFERENCE": 2,
	"EXPR_FLAG_FOLLOWING":        3,
}

func (Expr_Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12, 0} }

// This is separate from the top-level thread type to handle logical types like "patient"
type Expr_ThreadType int32

const (
	EXPR_THREAD_TYPE_INVALID          Expr_ThreadType = 0
	EXPR_THREAD_TYPE_PATIENT          Expr_ThreadType = 1
	EXPR_THREAD_TYPE_TEAM             Expr_ThreadType = 2
	EXPR_THREAD_TYPE_SUPPORT          Expr_ThreadType = 3
	EXPR_THREAD_TYPE_PATIENT_SECURE   Expr_ThreadType = 4
	EXPR_THREAD_TYPE_PATIENT_STANDARD Expr_ThreadType = 5
)

var Expr_ThreadType_name = map[int32]string{
	0: "EXPR_THREAD_TYPE_INVALID",
	1: "EXPR_THREAD_TYPE_PATIENT",
	2: "EXPR_THREAD_TYPE_TEAM",
	3: "EXPR_THREAD_TYPE_SUPPORT",
	4: "EXPR_THREAD_TYPE_PATIENT_SECURE",
	5: "EXPR_THREAD_TYPE_PATIENT_STANDARD",
}
var Expr_ThreadType_value = map[string]int32{
	"EXPR_THREAD_TYPE_INVALID":          0,
	"EXPR_THREAD_TYPE_PATIENT":          1,
	"EXPR_THREAD_TYPE_TEAM":             2,
	"EXPR_THREAD_TYPE_SUPPORT":          3,
	"EXPR_THREAD_TYPE_PATIENT_SECURE":   4,
	"EXPR_THREAD_TYPE_PATIENT_STANDARD": 5,
}

func (Expr_ThreadType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12, 1} }

type QueryThreadsRequest_Type int32

const (
	QUERY_THREADS_TYPE_ADHOC          QueryThreadsRequest_Type = 0
	QUERY_THREADS_TYPE_SAVED          QueryThreadsRequest_Type = 1
	QUERY_THREADS_TYPE_ALL_FOR_VIEWER QueryThreadsRequest_Type = 2
)

var QueryThreadsRequest_Type_name = map[int32]string{
	0: "QUERY_THREADS_TYPE_ADHOC",
	1: "QUERY_THREADS_TYPE_SAVED",
	2: "QUERY_THREADS_TYPE_ALL_FOR_VIEWER",
}
var QueryThreadsRequest_Type_value = map[string]int32{
	"QUERY_THREADS_TYPE_ADHOC":          0,
	"QUERY_THREADS_TYPE_SAVED":          1,
	"QUERY_THREADS_TYPE_ALL_FOR_VIEWER": 2,
}

func (QueryThreadsRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{33, 0}
}

type OnboardingThreadEventRequest_LookupByType int32

const (
	ONBOARDING_THREAD_LOOKUP_BY_INVALID   OnboardingThreadEventRequest_LookupByType = 0
	ONBOARDING_THREAD_LOOKUP_BY_THREAD_ID OnboardingThreadEventRequest_LookupByType = 1
	ONBOARDING_THREAD_LOOKUP_BY_ENTITY_ID OnboardingThreadEventRequest_LookupByType = 2
)

var OnboardingThreadEventRequest_LookupByType_name = map[int32]string{
	0: "ONBOARDING_THREAD_LOOKUP_BY_INVALID",
	1: "ONBOARDING_THREAD_LOOKUP_BY_THREAD_ID",
	2: "ONBOARDING_THREAD_LOOKUP_BY_ENTITY_ID",
}
var OnboardingThreadEventRequest_LookupByType_value = map[string]int32{
	"ONBOARDING_THREAD_LOOKUP_BY_INVALID":   0,
	"ONBOARDING_THREAD_LOOKUP_BY_THREAD_ID": 1,
	"ONBOARDING_THREAD_LOOKUP_BY_ENTITY_ID": 2,
}

func (OnboardingThreadEventRequest_LookupByType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{79, 0}
}

type OnboardingThreadEventRequest_EventType int32

const (
	ONBOARDING_THREAD_EVENT_TYPE_INVALID           OnboardingThreadEventRequest_EventType = 0
	ONBOARDING_THREAD_EVENT_TYPE_GENERIC_SETUP     OnboardingThreadEventRequest_EventType = 1
	ONBOARDING_THREAD_EVENT_TYPE_PROVISIONED_PHONE OnboardingThreadEventRequest_EventType = 2
)

var OnboardingThreadEventRequest_EventType_name = map[int32]string{
	0: "ONBOARDING_THREAD_EVENT_TYPE_INVALID",
	1: "ONBOARDING_THREAD_EVENT_TYPE_GENERIC_SETUP",
	2: "ONBOARDING_THREAD_EVENT_TYPE_PROVISIONED_PHONE",
}
var OnboardingThreadEventRequest_EventType_value = map[string]int32{
	"ONBOARDING_THREAD_EVENT_TYPE_INVALID":           0,
	"ONBOARDING_THREAD_EVENT_TYPE_GENERIC_SETUP":     1,
	"ONBOARDING_THREAD_EVENT_TYPE_PROVISIONED_PHONE": 2,
}

func (OnboardingThreadEventRequest_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{79, 1}
}

type TriggeredMessageKey_Key int32

const (
	TRIGGERED_MESSAGE_KEY_INVALID      TriggeredMessageKey_Key = 0
	TRIGGERED_MESSAGE_KEY_NEW_PATIENT  TriggeredMessageKey_Key = 1
	TRIGGERED_MESSAGE_KEY_AWAY_MESSAGE TriggeredMessageKey_Key = 2
)

var TriggeredMessageKey_Key_name = map[int32]string{
	0: "TRIGGERED_MESSAGE_KEY_INVALID",
	1: "TRIGGERED_MESSAGE_KEY_NEW_PATIENT",
	2: "TRIGGERED_MESSAGE_KEY_AWAY_MESSAGE",
}
var TriggeredMessageKey_Key_value = map[string]int32{
	"TRIGGERED_MESSAGE_KEY_INVALID":      0,
	"TRIGGERED_MESSAGE_KEY_NEW_PATIENT":  1,
	"TRIGGERED_MESSAGE_KEY_AWAY_MESSAGE": 2,
}

func (TriggeredMessageKey_Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{103, 0}
}

type CloneAttachmentsRequest_OwnerType int32

const (
	CLONED_ATTACHMENT_OWNER_INVALID           CloneAttachmentsRequest_OwnerType = 0
	CLONED_ATTACHMENT_OWNER_ACCOUNT           CloneAttachmentsRequest_OwnerType = 1
	CLONED_ATTACHMENT_OWNER_TRIGGERED_MESSAGE CloneAttachmentsRequest_OwnerType = 2
	CLONED_ATTACHMENT_OWNER_SAVED_MESSAGE     CloneAttachmentsRequest_OwnerType = 3
	CLONED_ATTACHMENT_OWNER_THREAD            CloneAttachmentsRequest_OwnerType = 4
	CLONED_ATTACHMENT_OWNER_VISIT             CloneAttachmentsRequest_OwnerType = 5
)

var CloneAttachmentsRequest_OwnerType_name = map[int32]string{
	0: "CLONED_ATTACHMENT_OWNER_INVALID",
	1: "CLONED_ATTACHMENT_OWNER_ACCOUNT",
	2: "CLONED_ATTACHMENT_OWNER_TRIGGERED_MESSAGE",
	3: "CLONED_ATTACHMENT_OWNER_SAVED_MESSAGE",
	4: "CLONED_ATTACHMENT_OWNER_THREAD",
	5: "CLONED_ATTACHMENT_OWNER_VISIT",
}
var CloneAttachmentsRequest_OwnerType_value = map[string]int32{
	"CLONED_ATTACHMENT_OWNER_INVALID":           0,
	"CLONED_ATTACHMENT_OWNER_ACCOUNT":           1,
	"CLONED_ATTACHMENT_OWNER_TRIGGERED_MESSAGE": 2,
	"CLONED_ATTACHMENT_OWNER_SAVED_MESSAGE":     3,
	"CLONED_ATTACHMENT_OWNER_THREAD":            4,
	"CLONED_ATTACHMENT_OWNER_VISIT":             5,
}

func (CloneAttachmentsRequest_OwnerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{114, 0}
}

type Iterator struct {
	StartCursor string             `protobuf:"bytes,1,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	EndCursor   string             `protobuf:"bytes,2,opt,name=end_cursor,json=endCursor,proto3" json:"end_cursor,omitempty"`
	Direction   Iterator_Direction `protobuf:"varint,3,opt,name=direction,proto3,enum=threading.Iterator_Direction" json:"direction,omitempty"`
	Count       uint32             `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Iterator) Reset()                    { *m = Iterator{} }
func (*Iterator) ProtoMessage()               {}
func (*Iterator) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type Thread struct {
	ID                         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationID             string       `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PrimaryEntityID            string       `protobuf:"bytes,3,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	Tags                       []*Tag       `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	LastMessageTimestamp       uint64       `protobuf:"varint,5,opt,name=last_message_timestamp,json=lastMessageTimestamp,proto3" json:"last_message_timestamp,omitempty"`
	LastMessageSummary         string       `protobuf:"bytes,6,opt,name=last_message_summary,json=lastMessageSummary,proto3" json:"last_message_summary,omitempty"`
	Unread                     bool         `protobuf:"varint,7,opt,name=unread,proto3" json:"unread,omitempty"`
	LastPrimaryEntityEndpoints []*Endpoint  `protobuf:"bytes,8,rep,name=last_primary_entity_endpoints,json=lastPrimaryEntityEndpoints" json:"last_primary_entity_endpoints,omitempty"`
	CreatedTimestamp           uint64       `protobuf:"varint,9,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	MessageCount               int32        `protobuf:"varint,10,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	Type                       ThreadType   `protobuf:"varint,11,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	SystemTitle                string       `protobuf:"bytes,12,opt,name=system_title,json=systemTitle,proto3" json:"system_title,omitempty"`
	UserTitle                  string       `protobuf:"bytes,13,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
	UnreadReference            bool         `protobuf:"varint,14,opt,name=unread_reference,json=unreadReference,proto3" json:"unread_reference,omitempty"`
	Origin                     ThreadOrigin `protobuf:"varint,15,opt,name=origin,proto3,enum=threading.ThreadOrigin" json:"origin,omitempty"`
}

func (m *Thread) Reset()                    { *m = Thread{} }
func (*Thread) ProtoMessage()               {}
func (*Thread) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

func (m *Thread) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Thread) GetLastPrimaryEntityEndpoints() []*Endpoint {
	if m != nil {
		return m.LastPrimaryEntityEndpoints
	}
	return nil
}

type Member struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type ThreadItem struct {
	ID                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedTimestamp  uint64 `protobuf:"varint,2,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	ActorEntityID     string `protobuf:"bytes,3,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	Internal          bool   `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
	Deleted           bool   `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	ThreadID          string `protobuf:"bytes,6,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	OrganizationID    string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ModifiedTimestamp uint64 `protobuf:"varint,8,opt,name=modified_timestamp,json=modifiedTimestamp,proto3" json:"modified_timestamp,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*ThreadItem_Message
	//	*ThreadItem_MessageUpdate
	//	*ThreadItem_MessageDelete
	Item isThreadItem_Item `protobuf_oneof:"item"`
}

func (m *ThreadItem) Reset()                    { *m = ThreadItem{} }
func (*ThreadItem) ProtoMessage()               {}
func (*ThreadItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type isThreadItem_Item interface {
	isThreadItem_Item()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ThreadItem_Message struct {
	Message *Message `protobuf:"bytes,10,opt,name=message,oneof"`
}
type ThreadItem_MessageUpdate struct {
	MessageUpdate *MessageUpdate `protobuf:"bytes,11,opt,name=message_update,json=messageUpdate,oneof"`
}
type ThreadItem_MessageDelete struct {
	MessageDelete *MessageDelete `protobuf:"bytes,12,opt,name=message_delete,json=messageDelete,oneof"`
}

func (*ThreadItem_Message) isThreadItem_Item()       {}
func (*ThreadItem_MessageUpdate) isThreadItem_Item() {}
func (*ThreadItem_MessageDelete) isThreadItem_Item() {}

func (m *ThreadItem) GetItem() isThreadItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ThreadItem) GetMessage() *Message {
	if x, ok := m.GetItem().(*ThreadItem_Message); ok {
		return x.Message
	}
	return nil
}

func (m *ThreadItem) GetMessageUpdate() *MessageUpdate {
	if x, ok := m.GetItem().(*ThreadItem_MessageUpdate); ok {
		return x.MessageUpdate
	}
	return nil
}

func (m *ThreadItem) GetMessageDelete() *MessageDelete {
	if x, ok := m.GetItem().(*ThreadItem_MessageDelete); ok {
		return x.MessageDelete
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ThreadItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ThreadItem_OneofMarshaler, _ThreadItem_OneofUnmarshaler, _ThreadItem_OneofSizer, []interface{}{
		(*ThreadItem_Message)(nil),
		(*ThreadItem_MessageUpdate)(nil),
		(*ThreadItem_MessageDelete)(nil),
	}
}

func _ThreadItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ThreadItem)
	// item
	switch x := m.Item.(type) {
	case *ThreadItem_Message:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *ThreadItem_MessageUpdate:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageUpdate); err != nil {
			return err
		}
	case *ThreadItem_MessageDelete:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MessageDelete); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ThreadItem.Item has unexpected type %T", x)
	}
	return nil
}

func _ThreadItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ThreadItem)
	switch tag {
	case 10: // item.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Item = &ThreadItem_Message{msg}
		return true, err
	case 11: // item.message_update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageUpdate)
		err := b.DecodeMessage(msg)
		m.Item = &ThreadItem_MessageUpdate{msg}
		return true, err
	case 12: // item.message_delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessageDelete)
		err := b.DecodeMessage(msg)
		m.Item = &ThreadItem_MessageDelete{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ThreadItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ThreadItem)
	// item
	switch x := m.Item.(type) {
	case *ThreadItem_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ThreadItem_MessageUpdate:
		s := proto.Size(x.MessageUpdate)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ThreadItem_MessageDelete:
		s := proto.Size(x.MessageDelete)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ThreadItemViewDetails struct {
	ThreadItemID string `protobuf:"bytes,1,opt,name=thread_item_id,json=threadItemId,proto3" json:"thread_item_id,omitempty"`
	EntityID     string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	ViewTime     uint64 `protobuf:"varint,3,opt,name=view_time,json=viewTime,proto3" json:"view_time,omitempty"`
}

func (m *ThreadItemViewDetails) Reset()                    { *m = ThreadItemViewDetails{} }
func (*ThreadItemViewDetails) ProtoMessage()               {}
func (*ThreadItemViewDetails) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type Reference struct {
	Type Reference_Type `protobuf:"varint,1,opt,name=type,proto3,enum=threading.Reference_Type" json:"type,omitempty"`
	ID   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type Message struct {
	Text         string        `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Attachments  []*Attachment `protobuf:"bytes,2,rep,name=attachments" json:"attachments,omitempty"`
	Source       *Endpoint     `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Destinations []*Endpoint   `protobuf:"bytes,5,rep,name=destinations" json:"destinations,omitempty"`
	Title        string        `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	TextRefs     []*Reference  `protobuf:"bytes,9,rep,name=text_refs,json=textRefs" json:"text_refs,omitempty"`
	Summary      string        `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

func (m *Message) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Message) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Message) GetDestinations() []*Endpoint {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Message) GetTextRefs() []*Reference {
	if m != nil {
		return m.TextRefs
	}
	return nil
}

type Endpoint struct {
	Channel Endpoint_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=threading.Endpoint_Channel" json:"channel,omitempty"`
	ID      string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

type MessageUpdate struct {
	// thread_item_id is the ID of the item that was modified
	ThreadItemID string `protobuf:"bytes,1,opt,name=thread_item_id,json=threadItemId,proto3" json:"thread_item_id,omitempty"`
	// message is the new message content
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *MessageUpdate) Reset()                    { *m = MessageUpdate{} }
func (*MessageUpdate) ProtoMessage()               {}
func (*MessageUpdate) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

func (m *MessageUpdate) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type MessageDelete struct {
	// thread_item_id is the ID of the item that was deleted
	ThreadItemID string `protobuf:"bytes,1,opt,name=thread_item_id,json=threadItemId,proto3" json:"thread_item_id,omitempty"`
}

func (m *MessageDelete) Reset()                    { *m = MessageDelete{} }
func (*MessageDelete) ProtoMessage()               {}
func (*MessageDelete) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

type SavedQuery struct {
	ID                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 SavedQueryType `protobuf:"varint,2,opt,name=type,proto3,enum=threading.SavedQueryType" json:"type,omitempty"`
	Query                *Query         `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	ShortTitle           string         `protobuf:"bytes,4,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`
	Unread               uint32         `protobuf:"varint,5,opt,name=unread,proto3" json:"unread,omitempty"`
	Total                uint32         `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	Ordinal              int32          `protobuf:"varint,7,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	EntityID             string         `protobuf:"bytes,8,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	NotificationsEnabled bool           `protobuf:"varint,9,opt,name=notifications_enabled,json=notificationsEnabled,proto3" json:"notifications_enabled,omitempty"`
	Hidden               bool           `protobuf:"varint,10,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Template             bool           `protobuf:"varint,11,opt,name=template,proto3" json:"template,omitempty"`
	LongTitle            string         `protobuf:"bytes,12,opt,name=long_title,json=longTitle,proto3" json:"long_title,omitempty"`
	Description          string         `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// default_template is true iff this template saved query is not concrete but rather from the default set
	DefaultTemplate bool `protobuf:"varint,14,opt,name=default_template,json=defaultTemplate,proto3" json:"default_template,omitempty"`
}

func (m *SavedQuery) Reset()                    { *m = SavedQuery{} }
func (*SavedQuery) ProtoMessage()               {}
func (*SavedQuery) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

func (m *SavedQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type Query struct {
	// All expressions are required to match (i.e. AND)
	Expressions []*Expr `protobuf:"bytes,1,rep,name=expressions" json:"expressions,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

func (m *Query) GetExpressions() []*Expr {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type Expr struct {
	Not bool `protobuf:"varint,1,opt,name=not,proto3" json:"not,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Expr_Token
	//	*Expr_Flag_
	//	*Expr_ThreadType_
	//	*Expr_Tag
	Value isExpr_Value `protobuf_oneof:"value"`
}

func (m *Expr) Reset()                    { *m = Expr{} }
func (*Expr) ProtoMessage()               {}
func (*Expr) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

type isExpr_Value interface {
	isExpr_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Expr_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}
type Expr_Flag_ struct {
	Flag Expr_Flag `protobuf:"varint,3,opt,name=flag,proto3,enum=threading.Expr_Flag,oneof"`
}
type Expr_ThreadType_ struct {
	ThreadType Expr_ThreadType `protobuf:"varint,4,opt,name=thread_type,json=threadType,proto3,enum=threading.Expr_ThreadType,oneof"`
}
type Expr_Tag struct {
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3,oneof"`
}

func (*Expr_Token) isExpr_Value()       {}
func (*Expr_Flag_) isExpr_Value()       {}
func (*Expr_ThreadType_) isExpr_Value() {}
func (*Expr_Tag) isExpr_Value()         {}

func (m *Expr) GetValue() isExpr_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Expr) GetToken() string {
	if x, ok := m.GetValue().(*Expr_Token); ok {
		return x.Token
	}
	return ""
}

func (m *Expr) GetFlag() Expr_Flag {
	if x, ok := m.GetValue().(*Expr_Flag_); ok {
		return x.Flag
	}
	return EXPR_FLAG_INVALID
}

func (m *Expr) GetThreadType() Expr_ThreadType {
	if x, ok := m.GetValue().(*Expr_ThreadType_); ok {
		return x.ThreadType
	}
	return EXPR_THREAD_TYPE_INVALID
}

func (m *Expr) GetTag() string {
	if x, ok := m.GetValue().(*Expr_Tag); ok {
		return x.Tag
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Expr) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Expr_OneofMarshaler, _Expr_OneofUnmarshaler, _Expr_OneofSizer, []interface{}{
		(*Expr_Token)(nil),
		(*Expr_Flag_)(nil),
		(*Expr_ThreadType_)(nil),
		(*Expr_Tag)(nil),
	}
}

func _Expr_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Expr)
	// value
	switch x := m.Value.(type) {
	case *Expr_Token:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Token)
	case *Expr_Flag_:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Flag))
	case *Expr_ThreadType_:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ThreadType))
	case *Expr_Tag:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Tag)
	case nil:
	default:
		return fmt.Errorf("Expr.Value has unexpected type %T", x)
	}
	return nil
}

func _Expr_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Expr)
	switch tag {
	case 2: // value.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Expr_Token{x}
		return true, err
	case 3: // value.flag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Expr_Flag_{Expr_Flag(x)}
		return true, err
	case 4: // value.thread_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Expr_ThreadType_{Expr_ThreadType(x)}
		return true, err
	case 5: // value.tag
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Expr_Tag{x}
		return true, err
	default:
		return false, nil
	}
}

func _Expr_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Expr)
	// value
	switch x := m.Value.(type) {
	case *Expr_Token:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Token)))
		n += len(x.Token)
	case *Expr_Flag_:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Flag))
	case *Expr_ThreadType_:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ThreadType))
	case *Expr_Tag:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Tag)))
		n += len(x.Tag)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Attachment struct {
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	URL       string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	UserTitle string `protobuf:"bytes,4,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
	ContentID string `protobuf:"bytes,5,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Attachment_Image
	//	*Attachment_Audio
	//	*Attachment_GenericURL
	//	*Attachment_Visit
	//	*Attachment_CarePlan
	//	*Attachment_Video
	//	*Attachment_PaymentRequest
	//	*Attachment_Document
	Data isAttachment_Data `protobuf_oneof:"data"`
}

func (m *Attachment) Reset()                    { *m = Attachment{} }
func (*Attachment) ProtoMessage()               {}
func (*Attachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

type isAttachment_Data interface {
	isAttachment_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Attachment_Image struct {
	Image *ImageAttachment `protobuf:"bytes,10,opt,name=image,oneof"`
}
type Attachment_Audio struct {
	Audio *AudioAttachment `protobuf:"bytes,11,opt,name=audio,oneof"`
}
type Attachment_GenericURL struct {
	GenericURL *GenericURLAttachment `protobuf:"bytes,12,opt,name=generic_url,json=genericUrl,oneof"`
}
type Attachment_Visit struct {
	Visit *VisitAttachment `protobuf:"bytes,13,opt,name=visit,oneof"`
}
type Attachment_CarePlan struct {
	CarePlan *CarePlanAttachment `protobuf:"bytes,14,opt,name=care_plan,json=carePlan,oneof"`
}
type Attachment_Video struct {
	Video *VideoAttachment `protobuf:"bytes,15,opt,name=video,oneof"`
}
type Attachment_PaymentRequest struct {
	PaymentRequest *PaymentRequestAttachment `protobuf:"bytes,16,opt,name=payment_request,json=paymentRequest,oneof"`
}
type Attachment_Document struct {
	Document *DocumentAttachment `protobuf:"bytes,17,opt,name=document,oneof"`
}

func (*Attachment_Image) isAttachment_Data()          {}
func (*Attachment_Audio) isAttachment_Data()          {}
func (*Attachment_GenericURL) isAttachment_Data()     {}
func (*Attachment_Visit) isAttachment_Data()          {}
func (*Attachment_CarePlan) isAttachment_Data()       {}
func (*Attachment_Video) isAttachment_Data()          {}
func (*Attachment_PaymentRequest) isAttachment_Data() {}
func (*Attachment_Document) isAttachment_Data()       {}

func (m *Attachment) GetData() isAttachment_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Attachment) GetImage() *ImageAttachment {
	if x, ok := m.GetData().(*Attachment_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Attachment) GetAudio() *AudioAttachment {
	if x, ok := m.GetData().(*Attachment_Audio); ok {
		return x.Audio
	}
	return nil
}

func (m *Attachment) GetGenericURL() *GenericURLAttachment {
	if x, ok := m.GetData().(*Attachment_GenericURL); ok {
		return x.GenericURL
	}
	return nil
}

func (m *Attachment) GetVisit() *VisitAttachment {
	if x, ok := m.GetData().(*Attachment_Visit); ok {
		return x.Visit
	}
	return nil
}

func (m *Attachment) GetCarePlan() *CarePlanAttachment {
	if x, ok := m.GetData().(*Attachment_CarePlan); ok {
		return x.CarePlan
	}
	return nil
}

func (m *Attachment) GetVideo() *VideoAttachment {
	if x, ok := m.GetData().(*Attachment_Video); ok {
		return x.Video
	}
	return nil
}

func (m *Attachment) GetPaymentRequest() *PaymentRequestAttachment {
	if x, ok := m.GetData().(*Attachment_PaymentRequest); ok {
		return x.PaymentRequest
	}
	return nil
}

func (m *Attachment) GetDocument() *DocumentAttachment {
	if x, ok := m.GetData().(*Attachment_Document); ok {
		return x.Document
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Attachment) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Attachment_OneofMarshaler, _Attachment_OneofUnmarshaler, _Attachment_OneofSizer, []interface{}{
		(*Attachment_Image)(nil),
		(*Attachment_Audio)(nil),
		(*Attachment_GenericURL)(nil),
		(*Attachment_Visit)(nil),
		(*Attachment_CarePlan)(nil),
		(*Attachment_Video)(nil),
		(*Attachment_PaymentRequest)(nil),
		(*Attachment_Document)(nil),
	}
}

func _Attachment_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Attachment)
	// data
	switch x := m.Data.(type) {
	case *Attachment_Image:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Attachment_Audio:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Audio); err != nil {
			return err
		}
	case *Attachment_GenericURL:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericURL); err != nil {
			return err
		}
	case *Attachment_Visit:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Visit); err != nil {
			return err
		}
	case *Attachment_CarePlan:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CarePlan); err != nil {
			return err
		}
	case *Attachment_Video:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Video); err != nil {
			return err
		}
	case *Attachment_PaymentRequest:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PaymentRequest); err != nil {
			return err
		}
	case *Attachment_Document:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Document); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Attachment.Data has unexpected type %T", x)
	}
	return nil
}

func _Attachment_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Attachment)
	switch tag {
	case 10: // data.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImageAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Image{msg}
		return true, err
	case 11: // data.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AudioAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Audio{msg}
		return true, err
	case 12: // data.generic_url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericURLAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_GenericURL{msg}
		return true, err
	case 13: // data.visit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VisitAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Visit{msg}
		return true, err
	case 14: // data.care_plan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CarePlanAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_CarePlan{msg}
		return true, err
	case 15: // data.video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VideoAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Video{msg}
		return true, err
	case 16: // data.payment_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PaymentRequestAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_PaymentRequest{msg}
		return true, err
	case 17: // data.document
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DocumentAttachment)
		err := b.DecodeMessage(msg)
		m.Data = &Attachment_Document{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Attachment_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Attachment)
	// data
	switch x := m.Data.(type) {
	case *Attachment_Image:
		s := proto.Size(x.Image)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Audio:
		s := proto.Size(x.Audio)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_GenericURL:
		s := proto.Size(x.GenericURL)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Visit:
		s := proto.Size(x.Visit)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_CarePlan:
		s := proto.Size(x.CarePlan)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Video:
		s := proto.Size(x.Video)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_PaymentRequest:
		s := proto.Size(x.PaymentRequest)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Attachment_Document:
		s := proto.Size(x.Document)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ImageAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID  string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Width    uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ImageAttachment) Reset()                    { *m = ImageAttachment{} }
func (*ImageAttachment) ProtoMessage()               {}
func (*ImageAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

type VideoAttachment struct {
	Mimetype   string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID    string `protobuf:"bytes,2,opt,name=mediaID,proto3" json:"mediaID,omitempty"`
	DurationNS uint64 `protobuf:"varint,4,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
}

func (m *VideoAttachment) Reset()                    { *m = VideoAttachment{} }
func (*VideoAttachment) ProtoMessage()               {}
func (*VideoAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

type AudioAttachment struct {
	Mimetype   string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID    string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	DurationNS uint64 `protobuf:"varint,4,opt,name=duration_ns,json=durationNs,proto3" json:"duration_ns,omitempty"`
}

func (m *AudioAttachment) Reset()                    { *m = AudioAttachment{} }
func (*AudioAttachment) ProtoMessage()               {}
func (*AudioAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

type DocumentAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	MediaID  string `protobuf:"bytes,2,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DocumentAttachment) Reset()                    { *m = DocumentAttachment{} }
func (*DocumentAttachment) ProtoMessage()               {}
func (*DocumentAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

type GenericURLAttachment struct {
	Mimetype string `protobuf:"bytes,1,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
	URL      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GenericURLAttachment) Reset()                    { *m = GenericURLAttachment{} }
func (*GenericURLAttachment) ProtoMessage()               {}
func (*GenericURLAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{18} }

type VisitAttachment struct {
	VisitID   string `protobuf:"bytes,1,opt,name=visit_id,json=visitId,proto3" json:"visit_id,omitempty"`
	VisitName string `protobuf:"bytes,2,opt,name=visit_name,json=visitName,proto3" json:"visit_name,omitempty"`
}

func (m *VisitAttachment) Reset()                    { *m = VisitAttachment{} }
func (*VisitAttachment) ProtoMessage()               {}
func (*VisitAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

type CarePlanAttachment struct {
	CarePlanID   string `protobuf:"bytes,1,opt,name=care_plan_id,json=carePlanId,proto3" json:"care_plan_id,omitempty"`
	CarePlanName string `protobuf:"bytes,2,opt,name=care_plan_name,json=carePlanName,proto3" json:"care_plan_name,omitempty"`
}

func (m *CarePlanAttachment) Reset()                    { *m = CarePlanAttachment{} }
func (*CarePlanAttachment) ProtoMessage()               {}
func (*CarePlanAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

type PaymentRequestAttachment struct {
	PaymentID string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (m *PaymentRequestAttachment) Reset()                    { *m = PaymentRequestAttachment{} }
func (*PaymentRequestAttachment) ProtoMessage()               {}
func (*PaymentRequestAttachment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

type PublishedThreadItem struct {
	UUID            string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrganizationID  string      `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	ThreadID        string      `protobuf:"bytes,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	PrimaryEntityID string      `protobuf:"bytes,4,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	Item            *ThreadItem `protobuf:"bytes,5,opt,name=item" json:"item,omitempty"`
}

func (m *PublishedThreadItem) Reset()                    { *m = PublishedThreadItem{} }
func (*PublishedThreadItem) ProtoMessage()               {}
func (*PublishedThreadItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{22} }

func (m *PublishedThreadItem) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type MessagePost struct {
	Source       *Endpoint     `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destinations []*Endpoint   `protobuf:"bytes,2,rep,name=destinations" json:"destinations,omitempty"`
	Internal     bool          `protobuf:"varint,3,opt,name=internal,proto3" json:"internal,omitempty"`
	Text         string        `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Attachments  []*Attachment `protobuf:"bytes,5,rep,name=attachments" json:"attachments,omitempty"`
	Title        string        `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Summary      string        `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *MessagePost) Reset()                    { *m = MessagePost{} }
func (*MessagePost) ProtoMessage()               {}
func (*MessagePost) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

func (m *MessagePost) GetSource() *Endpoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *MessagePost) GetDestinations() []*Endpoint {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *MessagePost) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type PostMessageRequest struct {
	UUID         string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ThreadID     string       `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	FromEntityID string       `protobuf:"bytes,3,opt,name=from_entity_id,json=fromEntityId,proto3" json:"from_entity_id,omitempty"`
	DontNotify   bool         `protobuf:"varint,11,opt,name=dont_notify,json=dontNotify,proto3" json:"dont_notify,omitempty"`
	Message      *MessagePost `protobuf:"bytes,12,opt,name=message" json:"message,omitempty"`
	// The following deprecated fields have been replaced by the message field
	DeprecatedSource       *Endpoint     `protobuf:"bytes,4,opt,name=deprecated_source,json=deprecatedSource" json:"deprecated_source,omitempty"`
	DeprecatedDestinations []*Endpoint   `protobuf:"bytes,5,rep,name=deprecated_destinations,json=deprecatedDestinations" json:"deprecated_destinations,omitempty"`
	DeprecatedInternal     bool          `protobuf:"varint,6,opt,name=deprecated_internal,json=deprecatedInternal,proto3" json:"deprecated_internal,omitempty"`
	DeprecatedText         string        `protobuf:"bytes,7,opt,name=deprecated_text,json=deprecatedText,proto3" json:"deprecated_text,omitempty"`
	DeprecatedAttachments  []*Attachment `protobuf:"bytes,8,rep,name=deprecated_attachments,json=deprecatedAttachments" json:"deprecated_attachments,omitempty"`
	DeprecatedTitle        string        `protobuf:"bytes,9,opt,name=deprecated_title,json=deprecatedTitle,proto3" json:"deprecated_title,omitempty"`
	DeprecatedSummary      string        `protobuf:"bytes,10,opt,name=deprecated_summary,json=deprecatedSummary,proto3" json:"deprecated_summary,omitempty"`
}

func (m *PostMessageRequest) Reset()                    { *m = PostMessageRequest{} }
func (*PostMessageRequest) ProtoMessage()               {}
func (*PostMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{24} }

func (m *PostMessageRequest) GetMessage() *MessagePost {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PostMessageRequest) GetDeprecatedSource() *Endpoint {
	if m != nil {
		return m.DeprecatedSource
	}
	return nil
}

func (m *PostMessageRequest) GetDeprecatedDestinations() []*Endpoint {
	if m != nil {
		return m.DeprecatedDestinations
	}
	return nil
}

func (m *PostMessageRequest) GetDeprecatedAttachments() []*Attachment {
	if m != nil {
		return m.DeprecatedAttachments
	}
	return nil
}

type PostMessageResponse struct {
	Item   *ThreadItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Thread *Thread     `protobuf:"bytes,2,opt,name=thread" json:"thread,omitempty"`
}

func (m *PostMessageResponse) Reset()                    { *m = PostMessageResponse{} }
func (*PostMessageResponse) ProtoMessage()               {}
func (*PostMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

func (m *PostMessageResponse) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *PostMessageResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type PostMessagesRequest struct {
	UUID         string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ThreadID     string         `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	FromEntityID string         `protobuf:"bytes,3,opt,name=from_entity_id,json=fromEntityId,proto3" json:"from_entity_id,omitempty"`
	DontNotify   bool           `protobuf:"varint,11,opt,name=dont_notify,json=dontNotify,proto3" json:"dont_notify,omitempty"`
	Messages     []*MessagePost `protobuf:"bytes,12,rep,name=messages" json:"messages,omitempty"`
}

func (m *PostMessagesRequest) Reset()                    { *m = PostMessagesRequest{} }
func (*PostMessagesRequest) ProtoMessage()               {}
func (*PostMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

func (m *PostMessagesRequest) GetMessages() []*MessagePost {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PostMessagesResponse struct {
	Items  []*ThreadItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Thread *Thread       `protobuf:"bytes,2,opt,name=thread" json:"thread,omitempty"`
}

func (m *PostMessagesResponse) Reset()                    { *m = PostMessagesResponse{} }
func (*PostMessagesResponse) ProtoMessage()               {}
func (*PostMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

func (m *PostMessagesResponse) GetItems() []*ThreadItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PostMessagesResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type MarkThreadsAsReadRequest struct {
	ThreadWatermarks []*MarkThreadsAsReadRequest_ThreadWatermark `protobuf:"bytes,1,rep,name=thread_watermarks,json=threadWatermarks" json:"thread_watermarks,omitempty"`
	EntityID         string                                      `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Timestamp        uint64                                      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Seen             bool                                        `protobuf:"varint,4,opt,name=seen,proto3" json:"seen,omitempty"`
}

func (m *MarkThreadsAsReadRequest) Reset()                    { *m = MarkThreadsAsReadRequest{} }
func (*MarkThreadsAsReadRequest) ProtoMessage()               {}
func (*MarkThreadsAsReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

func (m *MarkThreadsAsReadRequest) GetThreadWatermarks() []*MarkThreadsAsReadRequest_ThreadWatermark {
	if m != nil {
		return m.ThreadWatermarks
	}
	return nil
}

type MarkThreadsAsReadRequest_ThreadWatermark struct {
	ThreadID             string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	LastMessageTimestamp uint64 `protobuf:"varint,2,opt,name=last_message_timestamp,json=lastMessageTimestamp,proto3" json:"last_message_timestamp,omitempty"`
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) Reset() {
	*m = MarkThreadsAsReadRequest_ThreadWatermark{}
}
func (*MarkThreadsAsReadRequest_ThreadWatermark) ProtoMessage() {}
func (*MarkThreadsAsReadRequest_ThreadWatermark) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{28, 0}
}

type MarkThreadsAsReadResponse struct {
}

func (m *MarkThreadsAsReadResponse) Reset()                    { *m = MarkThreadsAsReadResponse{} }
func (*MarkThreadsAsReadResponse) ProtoMessage()               {}
func (*MarkThreadsAsReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

type ThreadItemsRequest struct {
	ThreadID       string    `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ViewerEntityID string    `protobuf:"bytes,2,opt,name=viewer_entity_id,json=viewerEntityId,proto3" json:"viewer_entity_id,omitempty"`
	Iterator       *Iterator `protobuf:"bytes,3,opt,name=iterator" json:"iterator,omitempty"`
}

func (m *ThreadItemsRequest) Reset()                    { *m = ThreadItemsRequest{} }
func (*ThreadItemsRequest) ProtoMessage()               {}
func (*ThreadItemsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

func (m *ThreadItemsRequest) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

type ThreadItemEdge struct {
	Item   *ThreadItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Cursor string      `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (m *ThreadItemEdge) Reset()                    { *m = ThreadItemEdge{} }
func (*ThreadItemEdge) ProtoMessage()               {}
func (*ThreadItemEdge) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

func (m *ThreadItemEdge) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type ThreadItemsResponse struct {
	Edges   []*ThreadItemEdge `protobuf:"bytes,1,rep,name=edges" json:"edges,omitempty"`
	HasMore bool              `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (m *ThreadItemsResponse) Reset()                    { *m = ThreadItemsResponse{} }
func (*ThreadItemsResponse) ProtoMessage()               {}
func (*ThreadItemsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

func (m *ThreadItemsResponse) GetEdges() []*ThreadItemEdge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type QueryThreadsRequest struct {
	// organization_id is deprecated and should no longer be sent. viewer_entity_id is now used for all queries.
	DeprecatedOrganizationID string                   `protobuf:"bytes,1,opt,name=deprecated_organization_id,json=deprecatedOrganizationId,proto3" json:"deprecated_organization_id,omitempty"`
	Iterator                 *Iterator                `protobuf:"bytes,2,opt,name=iterator" json:"iterator,omitempty"`
	Type                     QueryThreadsRequest_Type `protobuf:"varint,3,opt,name=type,proto3,enum=threading.QueryThreadsRequest_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to QueryType:
	//	*QueryThreadsRequest_Query
	//	*QueryThreadsRequest_SavedQueryID
	QueryType      isQueryThreadsRequest_QueryType `protobuf_oneof:"query_type"`
	ViewerEntityID string                          `protobuf:"bytes,4,opt,name=viewer_entity_id,json=viewerEntityId,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *QueryThreadsRequest) Reset()                    { *m = QueryThreadsRequest{} }
func (*QueryThreadsRequest) ProtoMessage()               {}
func (*QueryThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{33} }

type isQueryThreadsRequest_QueryType interface {
	isQueryThreadsRequest_QueryType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryThreadsRequest_Query struct {
	Query *Query `protobuf:"bytes,10,opt,name=query,oneof"`
}
type QueryThreadsRequest_SavedQueryID struct {
	SavedQueryID string `protobuf:"bytes,11,opt,name=saved_query_id,json=savedQueryId,proto3,oneof"`
}

func (*QueryThreadsRequest_Query) isQueryThreadsRequest_QueryType()        {}
func (*QueryThreadsRequest_SavedQueryID) isQueryThreadsRequest_QueryType() {}

func (m *QueryThreadsRequest) GetQueryType() isQueryThreadsRequest_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (m *QueryThreadsRequest) GetIterator() *Iterator {
	if m != nil {
		return m.Iterator
	}
	return nil
}

func (m *QueryThreadsRequest) GetQuery() *Query {
	if x, ok := m.GetQueryType().(*QueryThreadsRequest_Query); ok {
		return x.Query
	}
	return nil
}

func (m *QueryThreadsRequest) GetSavedQueryID() string {
	if x, ok := m.GetQueryType().(*QueryThreadsRequest_SavedQueryID); ok {
		return x.SavedQueryID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryThreadsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueryThreadsRequest_OneofMarshaler, _QueryThreadsRequest_OneofUnmarshaler, _QueryThreadsRequest_OneofSizer, []interface{}{
		(*QueryThreadsRequest_Query)(nil),
		(*QueryThreadsRequest_SavedQueryID)(nil),
	}
}

func _QueryThreadsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueryThreadsRequest)
	// query_type
	switch x := m.QueryType.(type) {
	case *QueryThreadsRequest_Query:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case *QueryThreadsRequest_SavedQueryID:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.SavedQueryID)
	case nil:
	default:
		return fmt.Errorf("QueryThreadsRequest.QueryType has unexpected type %T", x)
	}
	return nil
}

func _QueryThreadsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueryThreadsRequest)
	switch tag {
	case 10: // query_type.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Query)
		err := b.DecodeMessage(msg)
		m.QueryType = &QueryThreadsRequest_Query{msg}
		return true, err
	case 11: // query_type.saved_query_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.QueryType = &QueryThreadsRequest_SavedQueryID{x}
		return true, err
	default:
		return false, nil
	}
}

func _QueryThreadsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueryThreadsRequest)
	// query_type
	switch x := m.QueryType.(type) {
	case *QueryThreadsRequest_Query:
		s := proto.Size(x.Query)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryThreadsRequest_SavedQueryID:
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SavedQueryID)))
		n += len(x.SavedQueryID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ThreadEdge struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
	Cursor string  `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (m *ThreadEdge) Reset()                    { *m = ThreadEdge{} }
func (*ThreadEdge) ProtoMessage()               {}
func (*ThreadEdge) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{34} }

func (m *ThreadEdge) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type QueryThreadsResponse struct {
	Edges     []*ThreadEdge `protobuf:"bytes,1,rep,name=edges" json:"edges,omitempty"`
	HasMore   bool          `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	TotalType ValueType     `protobuf:"varint,3,opt,name=total_type,json=totalType,proto3,enum=threading.ValueType" json:"total_type,omitempty"`
	Total     uint32        `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *QueryThreadsResponse) Reset()                    { *m = QueryThreadsResponse{} }
func (*QueryThreadsResponse) ProtoMessage()               {}
func (*QueryThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{35} }

func (m *QueryThreadsResponse) GetEdges() []*ThreadEdge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type SavedQueriesRequest struct {
	// entity ID of the person who's saved queries to return
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (m *SavedQueriesRequest) Reset()                    { *m = SavedQueriesRequest{} }
func (*SavedQueriesRequest) ProtoMessage()               {}
func (*SavedQueriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{36} }

type SavedQueriesResponse struct {
	SavedQueries []*SavedQuery `protobuf:"bytes,1,rep,name=saved_queries,json=savedQueries" json:"saved_queries,omitempty"`
}

func (m *SavedQueriesResponse) Reset()                    { *m = SavedQueriesResponse{} }
func (*SavedQueriesResponse) ProtoMessage()               {}
func (*SavedQueriesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{37} }

func (m *SavedQueriesResponse) GetSavedQueries() []*SavedQuery {
	if m != nil {
		return m.SavedQueries
	}
	return nil
}

type DeleteSavedQueriesRequest struct {
	SavedQueryIDs []string `protobuf:"bytes,1,rep,name=saved_query_ids,json=savedQueryIds" json:"saved_query_ids,omitempty"`
}

func (m *DeleteSavedQueriesRequest) Reset()                    { *m = DeleteSavedQueriesRequest{} }
func (*DeleteSavedQueriesRequest) ProtoMessage()               {}
func (*DeleteSavedQueriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{38} }

type DeleteSavedQueriesResponse struct {
}

func (m *DeleteSavedQueriesResponse) Reset()                    { *m = DeleteSavedQueriesResponse{} }
func (*DeleteSavedQueriesResponse) ProtoMessage()               {}
func (*DeleteSavedQueriesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{39} }

type SavedQueryTemplatesRequest struct {
	EntityID string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
}

func (m *SavedQueryTemplatesRequest) Reset()                    { *m = SavedQueryTemplatesRequest{} }
func (*SavedQueryTemplatesRequest) ProtoMessage()               {}
func (*SavedQueryTemplatesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{40} }

type SavedQueryTemplatesResponse struct {
	SavedQueries []*SavedQuery `protobuf:"bytes,1,rep,name=saved_queries,json=savedQueries" json:"saved_queries,omitempty"`
}

func (m *SavedQueryTemplatesResponse) Reset()                    { *m = SavedQueryTemplatesResponse{} }
func (*SavedQueryTemplatesResponse) ProtoMessage()               {}
func (*SavedQueryTemplatesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{41} }

func (m *SavedQueryTemplatesResponse) GetSavedQueries() []*SavedQuery {
	if m != nil {
		return m.SavedQueries
	}
	return nil
}

type ThreadRequest struct {
	ThreadID       string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ViewerEntityID string `protobuf:"bytes,2,opt,name=viewer_entity_id,json=viewerEntityId,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *ThreadRequest) Reset()                    { *m = ThreadRequest{} }
func (*ThreadRequest) ProtoMessage()               {}
func (*ThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{42} }

type ThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *ThreadResponse) Reset()                    { *m = ThreadResponse{} }
func (*ThreadResponse) ProtoMessage()               {}
func (*ThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{43} }

func (m *ThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type ThreadsRequest struct {
	ThreadIDs      []string `protobuf:"bytes,1,rep,name=thread_ids,json=threadIds" json:"thread_ids,omitempty"`
	ViewerEntityID string   `protobuf:"bytes,2,opt,name=viewer_entity_id,json=viewerEntityId,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *ThreadsRequest) Reset()                    { *m = ThreadsRequest{} }
func (*ThreadsRequest) ProtoMessage()               {}
func (*ThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{44} }

type ThreadsResponse struct {
	Threads []*Thread `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
}

func (m *ThreadsResponse) Reset()                    { *m = ThreadsResponse{} }
func (*ThreadsResponse) ProtoMessage()               {}
func (*ThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{45} }

func (m *ThreadsResponse) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

type CreateSavedQueryRequest struct {
	Type                 SavedQueryType `protobuf:"varint,1,opt,name=type,proto3,enum=threading.SavedQueryType" json:"type,omitempty"`
	EntityID             string         `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	Query                *Query         `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	ShortTitle           string         `protobuf:"bytes,4,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`
	Ordinal              int32          `protobuf:"varint,5,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	NotificationsEnabled bool           `protobuf:"varint,6,opt,name=notifications_enabled,json=notificationsEnabled,proto3" json:"notifications_enabled,omitempty"`
	Hidden               bool           `protobuf:"varint,7,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Template             bool           `protobuf:"varint,8,opt,name=template,proto3" json:"template,omitempty"`
	LongTitle            string         `protobuf:"bytes,9,opt,name=long_title,json=longTitle,proto3" json:"long_title,omitempty"`
	Description          string         `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *CreateSavedQueryRequest) Reset()                    { *m = CreateSavedQueryRequest{} }
func (*CreateSavedQueryRequest) ProtoMessage()               {}
func (*CreateSavedQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{46} }

func (m *CreateSavedQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type CreateSavedQueryResponse struct {
	SavedQuery *SavedQuery `protobuf:"bytes,1,opt,name=saved_query,json=savedQuery" json:"saved_query,omitempty"`
}

func (m *CreateSavedQueryResponse) Reset()                    { *m = CreateSavedQueryResponse{} }
func (*CreateSavedQueryResponse) ProtoMessage()               {}
func (*CreateSavedQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{47} }

func (m *CreateSavedQueryResponse) GetSavedQuery() *SavedQuery {
	if m != nil {
		return m.SavedQuery
	}
	return nil
}

type UpdateSavedQueryRequest struct {
	SavedQueryID         string                     `protobuf:"bytes,1,opt,name=saved_query_id,json=savedQueryId,proto3" json:"saved_query_id,omitempty"`
	Query                *Query                     `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	ShortTitle           string                     `protobuf:"bytes,3,opt,name=short_title,json=shortTitle,proto3" json:"short_title,omitempty"`
	Ordinal              int32                      `protobuf:"varint,4,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	ForceRebuild         bool                       `protobuf:"varint,5,opt,name=force_rebuild,json=forceRebuild,proto3" json:"force_rebuild,omitempty"`
	NotificationsEnabled NotificationsEnabledUpdate `protobuf:"varint,6,opt,name=notifications_enabled,json=notificationsEnabled,proto3,enum=threading.NotificationsEnabledUpdate" json:"notifications_enabled,omitempty"`
	LongTitle            string                     `protobuf:"bytes,7,opt,name=long_title,json=longTitle,proto3" json:"long_title,omitempty"`
	Description          string                     `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *UpdateSavedQueryRequest) Reset()                    { *m = UpdateSavedQueryRequest{} }
func (*UpdateSavedQueryRequest) ProtoMessage()               {}
func (*UpdateSavedQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{48} }

func (m *UpdateSavedQueryRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type UpdateSavedQueryResponse struct {
	Query *SavedQuery `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *UpdateSavedQueryResponse) Reset()                    { *m = UpdateSavedQueryResponse{} }
func (*UpdateSavedQueryResponse) ProtoMessage()               {}
func (*UpdateSavedQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{49} }

func (m *UpdateSavedQueryResponse) GetQuery() *SavedQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

type DeleteMessageRequest struct {
	ActorEntityID string `protobuf:"bytes,1,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	ThreadItemID  string `protobuf:"bytes,2,opt,name=thread_item_id,json=threadItemId,proto3" json:"thread_item_id,omitempty"`
}

func (m *DeleteMessageRequest) Reset()                    { *m = DeleteMessageRequest{} }
func (*DeleteMessageRequest) ProtoMessage()               {}
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{50} }

type DeleteMessageResponse struct {
}

func (m *DeleteMessageResponse) Reset()                    { *m = DeleteMessageResponse{} }
func (*DeleteMessageResponse) ProtoMessage()               {}
func (*DeleteMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{51} }

type DeleteThreadRequest struct {
	ActorEntityID string `protobuf:"bytes,1,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	ThreadID      string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (m *DeleteThreadRequest) Reset()                    { *m = DeleteThreadRequest{} }
func (*DeleteThreadRequest) ProtoMessage()               {}
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{52} }

type DeleteThreadResponse struct {
}

func (m *DeleteThreadResponse) Reset()                    { *m = DeleteThreadResponse{} }
func (*DeleteThreadResponse) ProtoMessage()               {}
func (*DeleteThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{53} }

type UpdateThreadRequest struct {
	ThreadID string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// The entity ID of the entity performing the update (used for authorization check)
	ActorEntityID           string   `protobuf:"bytes,2,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	UserTitle               string   `protobuf:"bytes,3,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
	AddMemberEntityIDs      []string `protobuf:"bytes,4,rep,name=add_member_entity_ids,json=addMemberEntityIds" json:"add_member_entity_ids,omitempty"`
	RemoveMemberEntityIDs   []string `protobuf:"bytes,5,rep,name=remove_member_entity_ids,json=removeMemberEntityIds" json:"remove_member_entity_ids,omitempty"`
	SystemTitle             string   `protobuf:"bytes,6,opt,name=system_title,json=systemTitle,proto3" json:"system_title,omitempty"`
	AddFollowerEntityIDs    []string `protobuf:"bytes,7,rep,name=add_follower_entity_ids,json=addFollowerEntityIds" json:"add_follower_entity_ids,omitempty"`
	RemoveFollowerEntityIDs []string `protobuf:"bytes,8,rep,name=remove_follower_entity_ids,json=removeFollowerEntityIds" json:"remove_follower_entity_ids,omitempty"`
	AddTags                 []string `protobuf:"bytes,9,rep,name=add_tags,json=addTags" json:"add_tags,omitempty"`
	RemoveTags              []string `protobuf:"bytes,10,rep,name=remove_tags,json=removeTags" json:"remove_tags,omitempty"`
}

func (m *UpdateThreadRequest) Reset()                    { *m = UpdateThreadRequest{} }
func (*UpdateThreadRequest) ProtoMessage()               {}
func (*UpdateThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{54} }

type UpdateThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *UpdateThreadResponse) Reset()                    { *m = UpdateThreadResponse{} }
func (*UpdateThreadResponse) ProtoMessage()               {}
func (*UpdateThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{55} }

func (m *UpdateThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type CreateThreadRequest struct {
	UUID            string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrganizationID  string       `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	FromEntityID    string       `protobuf:"bytes,3,opt,name=from_entity_id,json=fromEntityId,proto3" json:"from_entity_id,omitempty"`
	Tags            []string     `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Message         *MessagePost `protobuf:"bytes,11,opt,name=message" json:"message,omitempty"`
	UserTitle       string       `protobuf:"bytes,12,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
	Type            ThreadType   `protobuf:"varint,13,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	MemberEntityIDs []string     `protobuf:"bytes,14,rep,name=member_entity_ids,json=memberEntityIds" json:"member_entity_ids,omitempty"`
	SystemTitle     string       `protobuf:"bytes,15,opt,name=system_title,json=systemTitle,proto3" json:"system_title,omitempty"`
	Origin          ThreadOrigin `protobuf:"varint,16,opt,name=origin,proto3,enum=threading.ThreadOrigin" json:"origin,omitempty"`
	DontNotify      bool         `protobuf:"varint,17,opt,name=dont_notify,json=dontNotify,proto3" json:"dont_notify,omitempty"`
}

func (m *CreateThreadRequest) Reset()                    { *m = CreateThreadRequest{} }
func (*CreateThreadRequest) ProtoMessage()               {}
func (*CreateThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{56} }

func (m *CreateThreadRequest) GetMessage() *MessagePost {
	if m != nil {
		return m.Message
	}
	return nil
}

type CreateThreadResponse struct {
	ThreadID   string      `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ThreadItem *ThreadItem `protobuf:"bytes,2,opt,name=thread_item,json=threadItem" json:"thread_item,omitempty"`
	Thread     *Thread     `protobuf:"bytes,3,opt,name=thread" json:"thread,omitempty"`
}

func (m *CreateThreadResponse) Reset()                    { *m = CreateThreadResponse{} }
func (*CreateThreadResponse) ProtoMessage()               {}
func (*CreateThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{57} }

func (m *CreateThreadResponse) GetThreadItem() *ThreadItem {
	if m != nil {
		return m.ThreadItem
	}
	return nil
}

func (m *CreateThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type CreateEmptyThreadRequest struct {
	UUID            string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrganizationID  string       `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	FromEntityID    string       `protobuf:"bytes,3,opt,name=from_entity_id,json=fromEntityId,proto3" json:"from_entity_id,omitempty"`
	PrimaryEntityID string       `protobuf:"bytes,5,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	Summary         string       `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Tags            []string     `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	UserTitle       string       `protobuf:"bytes,8,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
	Type            ThreadType   `protobuf:"varint,9,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	MemberEntityIDs []string     `protobuf:"bytes,10,rep,name=member_entity_ids,json=memberEntityIds" json:"member_entity_ids,omitempty"`
	SystemTitle     string       `protobuf:"bytes,11,opt,name=system_title,json=systemTitle,proto3" json:"system_title,omitempty"`
	Origin          ThreadOrigin `protobuf:"varint,12,opt,name=origin,proto3,enum=threading.ThreadOrigin" json:"origin,omitempty"`
}

func (m *CreateEmptyThreadRequest) Reset()                    { *m = CreateEmptyThreadRequest{} }
func (*CreateEmptyThreadRequest) ProtoMessage()               {}
func (*CreateEmptyThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{58} }

type CreateEmptyThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *CreateEmptyThreadResponse) Reset()                    { *m = CreateEmptyThreadResponse{} }
func (*CreateEmptyThreadResponse) ProtoMessage()               {}
func (*CreateEmptyThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{59} }

func (m *CreateEmptyThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type ThreadMembersRequest struct {
	ThreadID string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (m *ThreadMembersRequest) Reset()                    { *m = ThreadMembersRequest{} }
func (*ThreadMembersRequest) ProtoMessage()               {}
func (*ThreadMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{60} }

type ThreadMembersResponse struct {
	Members           []*Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	FollowerEntityIDs []string  `protobuf:"bytes,2,rep,name=follower_entity_ids,json=followerEntityIds" json:"follower_entity_ids,omitempty"`
}

func (m *ThreadMembersResponse) Reset()                    { *m = ThreadMembersResponse{} }
func (*ThreadMembersResponse) ProtoMessage()               {}
func (*ThreadMembersResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{61} }

func (m *ThreadMembersResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type ThreadsForMemberRequest struct {
	EntityID    string `protobuf:"bytes,1,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	PrimaryOnly bool   `protobuf:"varint,2,opt,name=primary_only,json=primaryOnly,proto3" json:"primary_only,omitempty"`
}

func (m *ThreadsForMemberRequest) Reset()                    { *m = ThreadsForMemberRequest{} }
func (*ThreadsForMemberRequest) ProtoMessage()               {}
func (*ThreadsForMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{62} }

type ThreadsForMemberResponse struct {
	Threads []*Thread `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
}

func (m *ThreadsForMemberResponse) Reset()                    { *m = ThreadsForMemberResponse{} }
func (*ThreadsForMemberResponse) ProtoMessage()               {}
func (*ThreadsForMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{63} }

func (m *ThreadsForMemberResponse) GetThreads() []*Thread {
	if m != nil {
		return m.Threads
	}
	return nil
}

type SavedQueryRequest struct {
	SavedQueryID string `protobuf:"bytes,1,opt,name=saved_query_id,json=savedQueryId,proto3" json:"saved_query_id,omitempty"`
}

func (m *SavedQueryRequest) Reset()                    { *m = SavedQueryRequest{} }
func (*SavedQueryRequest) ProtoMessage()               {}
func (*SavedQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{64} }

type SavedQueryResponse struct {
	SavedQuery *SavedQuery `protobuf:"bytes,1,opt,name=saved_query,json=savedQuery" json:"saved_query,omitempty"`
}

func (m *SavedQueryResponse) Reset()                    { *m = SavedQueryResponse{} }
func (*SavedQueryResponse) ProtoMessage()               {}
func (*SavedQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{65} }

func (m *SavedQueryResponse) GetSavedQuery() *SavedQuery {
	if m != nil {
		return m.SavedQuery
	}
	return nil
}

type ThreadItemRequest struct {
	ItemID         string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ViewerEntityID string `protobuf:"bytes,2,opt,name=viewer_entity_id,json=viewerEntityId,proto3" json:"viewer_entity_id,omitempty"`
}

func (m *ThreadItemRequest) Reset()                    { *m = ThreadItemRequest{} }
func (*ThreadItemRequest) ProtoMessage()               {}
func (*ThreadItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{66} }

type ThreadItemResponse struct {
	Item *ThreadItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *ThreadItemResponse) Reset()                    { *m = ThreadItemResponse{} }
func (*ThreadItemResponse) ProtoMessage()               {}
func (*ThreadItemResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{67} }

func (m *ThreadItemResponse) GetItem() *ThreadItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type ThreadItemViewDetailsRequest struct {
	ItemID string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (m *ThreadItemViewDetailsRequest) Reset()                    { *m = ThreadItemViewDetailsRequest{} }
func (*ThreadItemViewDetailsRequest) ProtoMessage()               {}
func (*ThreadItemViewDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{68} }

type ThreadItemViewDetailsResponse struct {
	ItemViewDetails []*ThreadItemViewDetails `protobuf:"bytes,1,rep,name=item_view_details,json=itemViewDetails" json:"item_view_details,omitempty"`
}

func (m *ThreadItemViewDetailsResponse) Reset()      { *m = ThreadItemViewDetailsResponse{} }
func (*ThreadItemViewDetailsResponse) ProtoMessage() {}
func (*ThreadItemViewDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{69}
}

func (m *ThreadItemViewDetailsResponse) GetItemViewDetails() []*ThreadItemViewDetails {
	if m != nil {
		return m.ItemViewDetails
	}
	return nil
}

type CreateLinkedThreadsRequest struct {
	Organization1ID      string     `protobuf:"bytes,1,opt,name=organization1_id,json=organization1Id,proto3" json:"organization1_id,omitempty"`
	Organization2ID      string     `protobuf:"bytes,2,opt,name=organization2_id,json=organization2Id,proto3" json:"organization2_id,omitempty"`
	PrimaryEntity1ID     string     `protobuf:"bytes,3,opt,name=primary_entity1_id,json=primaryEntity1Id,proto3" json:"primary_entity1_id,omitempty"`
	PrimaryEntity2ID     string     `protobuf:"bytes,4,opt,name=primary_entity2_id,json=primaryEntity2Id,proto3" json:"primary_entity2_id,omitempty"`
	Text                 string     `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	MessageTitle         string     `protobuf:"bytes,6,opt,name=message_title,json=messageTitle,proto3" json:"message_title,omitempty"`
	Summary              string     `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	PrependSenderThread1 bool       `protobuf:"varint,8,opt,name=prepend_sender_thread1,json=prependSenderThread1,proto3" json:"prepend_sender_thread1,omitempty"`
	PrependSenderThread2 bool       `protobuf:"varint,9,opt,name=prepend_sender_thread2,json=prependSenderThread2,proto3" json:"prepend_sender_thread2,omitempty"`
	Type                 ThreadType `protobuf:"varint,10,opt,name=type,proto3,enum=threading.ThreadType" json:"type,omitempty"`
	SystemTitle1         string     `protobuf:"bytes,11,opt,name=system_title1,json=systemTitle1,proto3" json:"system_title1,omitempty"`
	SystemTitle2         string     `protobuf:"bytes,13,opt,name=system_title2,json=systemTitle2,proto3" json:"system_title2,omitempty"`
}

func (m *CreateLinkedThreadsRequest) Reset()                    { *m = CreateLinkedThreadsRequest{} }
func (*CreateLinkedThreadsRequest) ProtoMessage()               {}
func (*CreateLinkedThreadsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{70} }

type CreateLinkedThreadsResponse struct {
	Thread1 *Thread `protobuf:"bytes,1,opt,name=thread1" json:"thread1,omitempty"`
	Thread2 *Thread `protobuf:"bytes,2,opt,name=thread2" json:"thread2,omitempty"`
}

func (m *CreateLinkedThreadsResponse) Reset()                    { *m = CreateLinkedThreadsResponse{} }
func (*CreateLinkedThreadsResponse) ProtoMessage()               {}
func (*CreateLinkedThreadsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{71} }

func (m *CreateLinkedThreadsResponse) GetThread1() *Thread {
	if m != nil {
		return m.Thread1
	}
	return nil
}

func (m *CreateLinkedThreadsResponse) GetThread2() *Thread {
	if m != nil {
		return m.Thread2
	}
	return nil
}

type CreateOnboardingThreadRequest struct {
	OrganizationID  string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	PrimaryEntityID string `protobuf:"bytes,2,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	UserTitle       string `protobuf:"bytes,4,opt,name=user_title,json=userTitle,proto3" json:"user_title,omitempty"`
}

func (m *CreateOnboardingThreadRequest) Reset()      { *m = CreateOnboardingThreadRequest{} }
func (*CreateOnboardingThreadRequest) ProtoMessage() {}
func (*CreateOnboardingThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{72}
}

type CreateOnboardingThreadResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *CreateOnboardingThreadResponse) Reset()      { *m = CreateOnboardingThreadResponse{} }
func (*CreateOnboardingThreadResponse) ProtoMessage() {}
func (*CreateOnboardingThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{73}
}

func (m *CreateOnboardingThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type LinkedThreadRequest struct {
	ThreadID string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (m *LinkedThreadRequest) Reset()                    { *m = LinkedThreadRequest{} }
func (*LinkedThreadRequest) ProtoMessage()               {}
func (*LinkedThreadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{74} }

type LinkedThreadResponse struct {
	Thread        *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
	PrependSender bool    `protobuf:"varint,2,opt,name=prependSender,proto3" json:"prependSender,omitempty"`
}

func (m *LinkedThreadResponse) Reset()                    { *m = LinkedThreadResponse{} }
func (*LinkedThreadResponse) ProtoMessage()               {}
func (*LinkedThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{75} }

func (m *LinkedThreadResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{76} }

type GenericSetupEvent struct {
	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attributes []*KeyValue `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *GenericSetupEvent) Reset()                    { *m = GenericSetupEvent{} }
func (*GenericSetupEvent) ProtoMessage()               {}
func (*GenericSetupEvent) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{77} }

func (m *GenericSetupEvent) GetAttributes() []*KeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ProvisionedPhoneEvent struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *ProvisionedPhoneEvent) Reset()                    { *m = ProvisionedPhoneEvent{} }
func (*ProvisionedPhoneEvent) ProtoMessage()               {}
func (*ProvisionedPhoneEvent) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{78} }

type OnboardingThreadEventRequest struct {
	LookupByType OnboardingThreadEventRequest_LookupByType `protobuf:"varint,1,opt,name=lookup_by_type,json=lookupByType,proto3,enum=threading.OnboardingThreadEventRequest_LookupByType" json:"lookup_by_type,omitempty"`
	// Types that are valid to be assigned to LookupBy:
	//	*OnboardingThreadEventRequest_ThreadID
	//	*OnboardingThreadEventRequest_EntityID
	LookupBy  isOnboardingThreadEventRequest_LookupBy `protobuf_oneof:"lookup_by"`
	EventType OnboardingThreadEventRequest_EventType  `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=threading.OnboardingThreadEventRequest_EventType" json:"event_type,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*OnboardingThreadEventRequest_GenericSetup
	//	*OnboardingThreadEventRequest_ProvisionedPhone
	Event isOnboardingThreadEventRequest_Event `protobuf_oneof:"event"`
}

func (m *OnboardingThreadEventRequest) Reset()                    { *m = OnboardingThreadEventRequest{} }
func (*OnboardingThreadEventRequest) ProtoMessage()               {}
func (*OnboardingThreadEventRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{79} }

type isOnboardingThreadEventRequest_LookupBy interface {
	isOnboardingThreadEventRequest_LookupBy()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isOnboardingThreadEventRequest_Event interface {
	isOnboardingThreadEventRequest_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OnboardingThreadEventRequest_ThreadID struct {
	ThreadID string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3,oneof"`
}
type OnboardingThreadEventRequest_EntityID struct {
	EntityID string `protobuf:"bytes,3,opt,name=entity_id,json=entityId,proto3,oneof"`
}
type OnboardingThreadEventRequest_GenericSetup struct {
	GenericSetup *GenericSetupEvent `protobuf:"bytes,5,opt,name=generic_setup,json=genericSetup,oneof"`
}
type OnboardingThreadEventRequest_ProvisionedPhone struct {
	ProvisionedPhone *ProvisionedPhoneEvent `protobuf:"bytes,6,opt,name=provisioned_phone,json=provisionedPhone,oneof"`
}

func (*OnboardingThreadEventRequest_ThreadID) isOnboardingThreadEventRequest_LookupBy()      {}
func (*OnboardingThreadEventRequest_EntityID) isOnboardingThreadEventRequest_LookupBy()      {}
func (*OnboardingThreadEventRequest_GenericSetup) isOnboardingThreadEventRequest_Event()     {}
func (*OnboardingThreadEventRequest_ProvisionedPhone) isOnboardingThreadEventRequest_Event() {}

func (m *OnboardingThreadEventRequest) GetLookupBy() isOnboardingThreadEventRequest_LookupBy {
	if m != nil {
		return m.LookupBy
	}
	return nil
}
func (m *OnboardingThreadEventRequest) GetEvent() isOnboardingThreadEventRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *OnboardingThreadEventRequest) GetThreadID() string {
	if x, ok := m.GetLookupBy().(*OnboardingThreadEventRequest_ThreadID); ok {
		return x.ThreadID
	}
	return ""
}

func (m *OnboardingThreadEventRequest) GetEntityID() string {
	if x, ok := m.GetLookupBy().(*OnboardingThreadEventRequest_EntityID); ok {
		return x.EntityID
	}
	return ""
}

func (m *OnboardingThreadEventRequest) GetGenericSetup() *GenericSetupEvent {
	if x, ok := m.GetEvent().(*OnboardingThreadEventRequest_GenericSetup); ok {
		return x.GenericSetup
	}
	return nil
}

func (m *OnboardingThreadEventRequest) GetProvisionedPhone() *ProvisionedPhoneEvent {
	if x, ok := m.GetEvent().(*OnboardingThreadEventRequest_ProvisionedPhone); ok {
		return x.ProvisionedPhone
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OnboardingThreadEventRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OnboardingThreadEventRequest_OneofMarshaler, _OnboardingThreadEventRequest_OneofUnmarshaler, _OnboardingThreadEventRequest_OneofSizer, []interface{}{
		(*OnboardingThreadEventRequest_ThreadID)(nil),
		(*OnboardingThreadEventRequest_EntityID)(nil),
		(*OnboardingThreadEventRequest_GenericSetup)(nil),
		(*OnboardingThreadEventRequest_ProvisionedPhone)(nil),
	}
}

func _OnboardingThreadEventRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OnboardingThreadEventRequest)
	// lookup_by
	switch x := m.LookupBy.(type) {
	case *OnboardingThreadEventRequest_ThreadID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ThreadID)
	case *OnboardingThreadEventRequest_EntityID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EntityID)
	case nil:
	default:
		return fmt.Errorf("OnboardingThreadEventRequest.LookupBy has unexpected type %T", x)
	}
	// event
	switch x := m.Event.(type) {
	case *OnboardingThreadEventRequest_GenericSetup:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericSetup); err != nil {
			return err
		}
	case *OnboardingThreadEventRequest_ProvisionedPhone:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProvisionedPhone); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OnboardingThreadEventRequest.Event has unexpected type %T", x)
	}
	return nil
}

func _OnboardingThreadEventRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OnboardingThreadEventRequest)
	switch tag {
	case 2: // lookup_by.thread_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupBy = &OnboardingThreadEventRequest_ThreadID{x}
		return true, err
	case 3: // lookup_by.entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupBy = &OnboardingThreadEventRequest_EntityID{x}
		return true, err
	case 5: // event.generic_setup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericSetupEvent)
		err := b.DecodeMessage(msg)
		m.Event = &OnboardingThreadEventRequest_GenericSetup{msg}
		return true, err
	case 6: // event.provisioned_phone
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProvisionedPhoneEvent)
		err := b.DecodeMessage(msg)
		m.Event = &OnboardingThreadEventRequest_ProvisionedPhone{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OnboardingThreadEventRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OnboardingThreadEventRequest)
	// lookup_by
	switch x := m.LookupBy.(type) {
	case *OnboardingThreadEventRequest_ThreadID:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ThreadID)))
		n += len(x.ThreadID)
	case *OnboardingThreadEventRequest_EntityID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EntityID)))
		n += len(x.EntityID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// event
	switch x := m.Event.(type) {
	case *OnboardingThreadEventRequest_GenericSetup:
		s := proto.Size(x.GenericSetup)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OnboardingThreadEventRequest_ProvisionedPhone:
		s := proto.Size(x.ProvisionedPhone)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OnboardingThreadEventResponse struct {
	Thread *Thread `protobuf:"bytes,1,opt,name=thread" json:"thread,omitempty"`
}

func (m *OnboardingThreadEventResponse) Reset()      { *m = OnboardingThreadEventResponse{} }
func (*OnboardingThreadEventResponse) ProtoMessage() {}
func (*OnboardingThreadEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{80}
}

func (m *OnboardingThreadEventResponse) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

type SavedMessage struct {
	ID              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	OrganizationID  string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	CreatorEntityID string `protobuf:"bytes,4,opt,name=creator_entity_id,json=creatorEntityId,proto3" json:"creator_entity_id,omitempty"`
	OwnerEntityID   string `protobuf:"bytes,5,opt,name=owner_entity_id,json=ownerEntityId,proto3" json:"owner_entity_id,omitempty"`
	Internal        bool   `protobuf:"varint,6,opt,name=internal,proto3" json:"internal,omitempty"`
	Created         uint64 `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Modified        uint64 `protobuf:"varint,8,opt,name=modified,proto3" json:"modified,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*SavedMessage_Message
	Content isSavedMessage_Content `protobuf_oneof:"content"`
}

func (m *SavedMessage) Reset()                    { *m = SavedMessage{} }
func (*SavedMessage) ProtoMessage()               {}
func (*SavedMessage) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{81} }

type isSavedMessage_Content interface {
	isSavedMessage_Content()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SavedMessage_Message struct {
	Message *Message `protobuf:"bytes,10,opt,name=message,oneof"`
}

func (*SavedMessage_Message) isSavedMessage_Content() {}

func (m *SavedMessage) GetContent() isSavedMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *SavedMessage) GetMessage() *Message {
	if x, ok := m.GetContent().(*SavedMessage_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SavedMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SavedMessage_OneofMarshaler, _SavedMessage_OneofUnmarshaler, _SavedMessage_OneofSizer, []interface{}{
		(*SavedMessage_Message)(nil),
	}
}

func _SavedMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SavedMessage)
	// content
	switch x := m.Content.(type) {
	case *SavedMessage_Message:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SavedMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _SavedMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SavedMessage)
	switch tag {
	case 10: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Content = &SavedMessage_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SavedMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SavedMessage)
	// content
	switch x := m.Content.(type) {
	case *SavedMessage_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IDList struct {
	IDs []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *IDList) Reset()                    { *m = IDList{} }
func (*IDList) ProtoMessage()               {}
func (*IDList) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{82} }

type SavedMessagesRequest struct {
	// Types that are valid to be assigned to By:
	//	*SavedMessagesRequest_IDs
	//	*SavedMessagesRequest_EntityIDs
	By isSavedMessagesRequest_By `protobuf_oneof:"by"`
}

func (m *SavedMessagesRequest) Reset()                    { *m = SavedMessagesRequest{} }
func (*SavedMessagesRequest) ProtoMessage()               {}
func (*SavedMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{83} }

type isSavedMessagesRequest_By interface {
	isSavedMessagesRequest_By()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SavedMessagesRequest_IDs struct {
	IDs *IDList `protobuf:"bytes,1,opt,name=ids,oneof"`
}
type SavedMessagesRequest_EntityIDs struct {
	EntityIDs *IDList `protobuf:"bytes,2,opt,name=entity_ids,json=entityIds,oneof"`
}

func (*SavedMessagesRequest_IDs) isSavedMessagesRequest_By()       {}
func (*SavedMessagesRequest_EntityIDs) isSavedMessagesRequest_By() {}

func (m *SavedMessagesRequest) GetBy() isSavedMessagesRequest_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (m *SavedMessagesRequest) GetIDs() *IDList {
	if x, ok := m.GetBy().(*SavedMessagesRequest_IDs); ok {
		return x.IDs
	}
	return nil
}

func (m *SavedMessagesRequest) GetEntityIDs() *IDList {
	if x, ok := m.GetBy().(*SavedMessagesRequest_EntityIDs); ok {
		return x.EntityIDs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SavedMessagesRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SavedMessagesRequest_OneofMarshaler, _SavedMessagesRequest_OneofUnmarshaler, _SavedMessagesRequest_OneofSizer, []interface{}{
		(*SavedMessagesRequest_IDs)(nil),
		(*SavedMessagesRequest_EntityIDs)(nil),
	}
}

func _SavedMessagesRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SavedMessagesRequest)
	// by
	switch x := m.By.(type) {
	case *SavedMessagesRequest_IDs:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IDs); err != nil {
			return err
		}
	case *SavedMessagesRequest_EntityIDs:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntityIDs); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SavedMessagesRequest.By has unexpected type %T", x)
	}
	return nil
}

func _SavedMessagesRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SavedMessagesRequest)
	switch tag {
	case 1: // by.ids
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IDList)
		err := b.DecodeMessage(msg)
		m.By = &SavedMessagesRequest_IDs{msg}
		return true, err
	case 2: // by.entity_ids
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IDList)
		err := b.DecodeMessage(msg)
		m.By = &SavedMessagesRequest_EntityIDs{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SavedMessagesRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SavedMessagesRequest)
	// by
	switch x := m.By.(type) {
	case *SavedMessagesRequest_IDs:
		s := proto.Size(x.IDs)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SavedMessagesRequest_EntityIDs:
		s := proto.Size(x.EntityIDs)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SavedMessagesResponse struct {
	SavedMessages []*SavedMessage `protobuf:"bytes,1,rep,name=saved_messages,json=savedMessages" json:"saved_messages,omitempty"`
}

func (m *SavedMessagesResponse) Reset()                    { *m = SavedMessagesResponse{} }
func (*SavedMessagesResponse) ProtoMessage()               {}
func (*SavedMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{84} }

func (m *SavedMessagesResponse) GetSavedMessages() []*SavedMessage {
	if m != nil {
		return m.SavedMessages
	}
	return nil
}

type CreateSavedMessageRequest struct {
	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	OrganizationID  string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	CreatorEntityID string `protobuf:"bytes,3,opt,name=creator_entity_id,json=creatorEntityId,proto3" json:"creator_entity_id,omitempty"`
	OwnerEntityID   string `protobuf:"bytes,4,opt,name=owner_entity_id,json=ownerEntityId,proto3" json:"owner_entity_id,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*CreateSavedMessageRequest_Message
	Content isCreateSavedMessageRequest_Content `protobuf_oneof:"content"`
}

func (m *CreateSavedMessageRequest) Reset()                    { *m = CreateSavedMessageRequest{} }
func (*CreateSavedMessageRequest) ProtoMessage()               {}
func (*CreateSavedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{85} }

type isCreateSavedMessageRequest_Content interface {
	isCreateSavedMessageRequest_Content()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSavedMessageRequest_Message struct {
	Message *MessagePost `protobuf:"bytes,10,opt,name=message,oneof"`
}

func (*CreateSavedMessageRequest_Message) isCreateSavedMessageRequest_Content() {}

func (m *CreateSavedMessageRequest) GetContent() isCreateSavedMessageRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CreateSavedMessageRequest) GetMessage() *MessagePost {
	if x, ok := m.GetContent().(*CreateSavedMessageRequest_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateSavedMessageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateSavedMessageRequest_OneofMarshaler, _CreateSavedMessageRequest_OneofUnmarshaler, _CreateSavedMessageRequest_OneofSizer, []interface{}{
		(*CreateSavedMessageRequest_Message)(nil),
	}
}

func _CreateSavedMessageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateSavedMessageRequest)
	// content
	switch x := m.Content.(type) {
	case *CreateSavedMessageRequest_Message:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateSavedMessageRequest.Content has unexpected type %T", x)
	}
	return nil
}

func _CreateSavedMessageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateSavedMessageRequest)
	switch tag {
	case 10: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessagePost)
		err := b.DecodeMessage(msg)
		m.Content = &CreateSavedMessageRequest_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateSavedMessageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateSavedMessageRequest)
	// content
	switch x := m.Content.(type) {
	case *CreateSavedMessageRequest_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateSavedMessageResponse struct {
	SavedMessage *SavedMessage `protobuf:"bytes,1,opt,name=saved_message,json=savedMessage" json:"saved_message,omitempty"`
}

func (m *CreateSavedMessageResponse) Reset()                    { *m = CreateSavedMessageResponse{} }
func (*CreateSavedMessageResponse) ProtoMessage()               {}
func (*CreateSavedMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{86} }

func (m *CreateSavedMessageResponse) GetSavedMessage() *SavedMessage {
	if m != nil {
		return m.SavedMessage
	}
	return nil
}

type DeleteSavedMessageRequest struct {
	SavedMessageID string `protobuf:"bytes,1,opt,name=saved_message_id,json=savedMessageId,proto3" json:"saved_message_id,omitempty"`
}

func (m *DeleteSavedMessageRequest) Reset()                    { *m = DeleteSavedMessageRequest{} }
func (*DeleteSavedMessageRequest) ProtoMessage()               {}
func (*DeleteSavedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{87} }

type DeleteSavedMessageResponse struct {
}

func (m *DeleteSavedMessageResponse) Reset()                    { *m = DeleteSavedMessageResponse{} }
func (*DeleteSavedMessageResponse) ProtoMessage()               {}
func (*DeleteSavedMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{88} }

type UpdateSavedMessageRequest struct {
	SavedMessageID string `protobuf:"bytes,1,opt,name=saved_message_id,json=savedMessageId,proto3" json:"saved_message_id,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*UpdateSavedMessageRequest_Message
	Content isUpdateSavedMessageRequest_Content `protobuf_oneof:"content"`
}

func (m *UpdateSavedMessageRequest) Reset()                    { *m = UpdateSavedMessageRequest{} }
func (*UpdateSavedMessageRequest) ProtoMessage()               {}
func (*UpdateSavedMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{89} }

type isUpdateSavedMessageRequest_Content interface {
	isUpdateSavedMessageRequest_Content()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateSavedMessageRequest_Message struct {
	Message *MessagePost `protobuf:"bytes,10,opt,name=message,oneof"`
}

func (*UpdateSavedMessageRequest_Message) isUpdateSavedMessageRequest_Content() {}

func (m *UpdateSavedMessageRequest) GetContent() isUpdateSavedMessageRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UpdateSavedMessageRequest) GetMessage() *MessagePost {
	if x, ok := m.GetContent().(*UpdateSavedMessageRequest_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateSavedMessageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateSavedMessageRequest_OneofMarshaler, _UpdateSavedMessageRequest_OneofUnmarshaler, _UpdateSavedMessageRequest_OneofSizer, []interface{}{
		(*UpdateSavedMessageRequest_Message)(nil),
	}
}

func _UpdateSavedMessageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateSavedMessageRequest)
	// content
	switch x := m.Content.(type) {
	case *UpdateSavedMessageRequest_Message:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UpdateSavedMessageRequest.Content has unexpected type %T", x)
	}
	return nil
}

func _UpdateSavedMessageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateSavedMessageRequest)
	switch tag {
	case 10: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessagePost)
		err := b.DecodeMessage(msg)
		m.Content = &UpdateSavedMessageRequest_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateSavedMessageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateSavedMessageRequest)
	// content
	switch x := m.Content.(type) {
	case *UpdateSavedMessageRequest_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpdateSavedMessageResponse struct {
	SavedMessage *SavedMessage `protobuf:"bytes,1,opt,name=saved_message,json=savedMessage" json:"saved_message,omitempty"`
}

func (m *UpdateSavedMessageResponse) Reset()                    { *m = UpdateSavedMessageResponse{} }
func (*UpdateSavedMessageResponse) ProtoMessage()               {}
func (*UpdateSavedMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{90} }

func (m *UpdateSavedMessageResponse) GetSavedMessage() *SavedMessage {
	if m != nil {
		return m.SavedMessage
	}
	return nil
}

type ScheduledMessage struct {
	ID               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ThreadID         string                 `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ActorEntityID    string                 `protobuf:"bytes,3,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	Internal         bool                   `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
	ScheduledFor     uint64                 `protobuf:"varint,5,opt,name=scheduled_for,json=scheduledFor,proto3" json:"scheduled_for,omitempty"`
	SentAt           uint64                 `protobuf:"varint,6,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`
	SentThreadItemID string                 `protobuf:"bytes,7,opt,name=sent_thread_item_id,json=sentThreadItemId,proto3" json:"sent_thread_item_id,omitempty"`
	Created          uint64                 `protobuf:"varint,8,opt,name=created,proto3" json:"created,omitempty"`
	Modified         uint64                 `protobuf:"varint,9,opt,name=modified,proto3" json:"modified,omitempty"`
	Status           ScheduledMessageStatus `protobuf:"varint,10,opt,name=status,proto3,enum=threading.ScheduledMessageStatus" json:"status,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*ScheduledMessage_Message
	Content isScheduledMessage_Content `protobuf_oneof:"content"`
}

func (m *ScheduledMessage) Reset()                    { *m = ScheduledMessage{} }
func (*ScheduledMessage) ProtoMessage()               {}
func (*ScheduledMessage) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{91} }

type isScheduledMessage_Content interface {
	isScheduledMessage_Content()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ScheduledMessage_Message struct {
	Message *Message `protobuf:"bytes,11,opt,name=message,oneof"`
}

func (*ScheduledMessage_Message) isScheduledMessage_Content() {}

func (m *ScheduledMessage) GetContent() isScheduledMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ScheduledMessage) GetMessage() *Message {
	if x, ok := m.GetContent().(*ScheduledMessage_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ScheduledMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ScheduledMessage_OneofMarshaler, _ScheduledMessage_OneofUnmarshaler, _ScheduledMessage_OneofSizer, []interface{}{
		(*ScheduledMessage_Message)(nil),
	}
}

func _ScheduledMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ScheduledMessage)
	// content
	switch x := m.Content.(type) {
	case *ScheduledMessage_Message:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ScheduledMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _ScheduledMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ScheduledMessage)
	switch tag {
	case 11: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Content = &ScheduledMessage_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ScheduledMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ScheduledMessage)
	// content
	switch x := m.Content.(type) {
	case *ScheduledMessage_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateScheduledMessageRequest struct {
	ThreadID      string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ActorEntityID string `protobuf:"bytes,2,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	ScheduledFor  uint64 `protobuf:"varint,3,opt,name=scheduled_for,json=scheduledFor,proto3" json:"scheduled_for,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*CreateScheduledMessageRequest_Message
	Content isCreateScheduledMessageRequest_Content `protobuf_oneof:"content"`
}

func (m *CreateScheduledMessageRequest) Reset()      { *m = CreateScheduledMessageRequest{} }
func (*CreateScheduledMessageRequest) ProtoMessage() {}
func (*CreateScheduledMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{92}
}

type isCreateScheduledMessageRequest_Content interface {
	isCreateScheduledMessageRequest_Content()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateScheduledMessageRequest_Message struct {
	Message *MessagePost `protobuf:"bytes,4,opt,name=message,oneof"`
}

func (*CreateScheduledMessageRequest_Message) isCreateScheduledMessageRequest_Content() {}

func (m *CreateScheduledMessageRequest) GetContent() isCreateScheduledMessageRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *CreateScheduledMessageRequest) GetMessage() *MessagePost {
	if x, ok := m.GetContent().(*CreateScheduledMessageRequest_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateScheduledMessageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateScheduledMessageRequest_OneofMarshaler, _CreateScheduledMessageRequest_OneofUnmarshaler, _CreateScheduledMessageRequest_OneofSizer, []interface{}{
		(*CreateScheduledMessageRequest_Message)(nil),
	}
}

func _CreateScheduledMessageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateScheduledMessageRequest)
	// content
	switch x := m.Content.(type) {
	case *CreateScheduledMessageRequest_Message:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateScheduledMessageRequest.Content has unexpected type %T", x)
	}
	return nil
}

func _CreateScheduledMessageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateScheduledMessageRequest)
	switch tag {
	case 4: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessagePost)
		err := b.DecodeMessage(msg)
		m.Content = &CreateScheduledMessageRequest_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateScheduledMessageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateScheduledMessageRequest)
	// content
	switch x := m.Content.(type) {
	case *CreateScheduledMessageRequest_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateScheduledMessageResponse struct {
	ScheduledMessage *ScheduledMessage `protobuf:"bytes,1,opt,name=scheduled_message,json=scheduledMessage" json:"scheduled_message,omitempty"`
}

func (m *CreateScheduledMessageResponse) Reset()      { *m = CreateScheduledMessageResponse{} }
func (*CreateScheduledMessageResponse) ProtoMessage() {}
func (*CreateScheduledMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{93}
}

func (m *CreateScheduledMessageResponse) GetScheduledMessage() *ScheduledMessage {
	if m != nil {
		return m.ScheduledMessage
	}
	return nil
}

type DeleteScheduledMessageRequest struct {
	ScheduledMessageID string `protobuf:"bytes,1,opt,name=scheduled_message_id,json=scheduledMessageId,proto3" json:"scheduled_message_id,omitempty"`
}

func (m *DeleteScheduledMessageRequest) Reset()      { *m = DeleteScheduledMessageRequest{} }
func (*DeleteScheduledMessageRequest) ProtoMessage() {}
func (*DeleteScheduledMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{94}
}

type DeleteScheduledMessageResponse struct {
}

func (m *DeleteScheduledMessageResponse) Reset()      { *m = DeleteScheduledMessageResponse{} }
func (*DeleteScheduledMessageResponse) ProtoMessage() {}
func (*DeleteScheduledMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{95}
}

type ScheduledMessagesRequest struct {
	Status []ScheduledMessageStatus `protobuf:"varint,1,rep,packed,name=status,enum=threading.ScheduledMessageStatus" json:"status,omitempty"`
	// Types that are valid to be assigned to LookupKey:
	//	*ScheduledMessagesRequest_ScheduledMessageID
	//	*ScheduledMessagesRequest_ThreadID
	LookupKey isScheduledMessagesRequest_LookupKey `protobuf_oneof:"lookup_key"`
}

func (m *ScheduledMessagesRequest) Reset()                    { *m = ScheduledMessagesRequest{} }
func (*ScheduledMessagesRequest) ProtoMessage()               {}
func (*ScheduledMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{96} }

type isScheduledMessagesRequest_LookupKey interface {
	isScheduledMessagesRequest_LookupKey()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ScheduledMessagesRequest_ScheduledMessageID struct {
	ScheduledMessageID string `protobuf:"bytes,2,opt,name=scheduled_message_id,json=scheduledMessageId,proto3,oneof"`
}
type ScheduledMessagesRequest_ThreadID struct {
	ThreadID string `protobuf:"bytes,3,opt,name=thread_id,json=threadId,proto3,oneof"`
}

func (*ScheduledMessagesRequest_ScheduledMessageID) isScheduledMessagesRequest_LookupKey() {}
func (*ScheduledMessagesRequest_ThreadID) isScheduledMessagesRequest_LookupKey()           {}

func (m *ScheduledMessagesRequest) GetLookupKey() isScheduledMessagesRequest_LookupKey {
	if m != nil {
		return m.LookupKey
	}
	return nil
}

func (m *ScheduledMessagesRequest) GetScheduledMessageID() string {
	if x, ok := m.GetLookupKey().(*ScheduledMessagesRequest_ScheduledMessageID); ok {
		return x.ScheduledMessageID
	}
	return ""
}

func (m *ScheduledMessagesRequest) GetThreadID() string {
	if x, ok := m.GetLookupKey().(*ScheduledMessagesRequest_ThreadID); ok {
		return x.ThreadID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ScheduledMessagesRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ScheduledMessagesRequest_OneofMarshaler, _ScheduledMessagesRequest_OneofUnmarshaler, _ScheduledMessagesRequest_OneofSizer, []interface{}{
		(*ScheduledMessagesRequest_ScheduledMessageID)(nil),
		(*ScheduledMessagesRequest_ThreadID)(nil),
	}
}

func _ScheduledMessagesRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ScheduledMessagesRequest)
	// lookup_key
	switch x := m.LookupKey.(type) {
	case *ScheduledMessagesRequest_ScheduledMessageID:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ScheduledMessageID)
	case *ScheduledMessagesRequest_ThreadID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ThreadID)
	case nil:
	default:
		return fmt.Errorf("ScheduledMessagesRequest.LookupKey has unexpected type %T", x)
	}
	return nil
}

func _ScheduledMessagesRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ScheduledMessagesRequest)
	switch tag {
	case 2: // lookup_key.scheduled_message_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKey = &ScheduledMessagesRequest_ScheduledMessageID{x}
		return true, err
	case 3: // lookup_key.thread_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKey = &ScheduledMessagesRequest_ThreadID{x}
		return true, err
	default:
		return false, nil
	}
}

func _ScheduledMessagesRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ScheduledMessagesRequest)
	// lookup_key
	switch x := m.LookupKey.(type) {
	case *ScheduledMessagesRequest_ScheduledMessageID:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ScheduledMessageID)))
		n += len(x.ScheduledMessageID)
	case *ScheduledMessagesRequest_ThreadID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ThreadID)))
		n += len(x.ThreadID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ScheduledMessagesResponse struct {
	ScheduledMessages []*ScheduledMessage `protobuf:"bytes,1,rep,name=scheduled_messages,json=scheduledMessages" json:"scheduled_messages,omitempty"`
}

func (m *ScheduledMessagesResponse) Reset()                    { *m = ScheduledMessagesResponse{} }
func (*ScheduledMessagesResponse) ProtoMessage()               {}
func (*ScheduledMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{97} }

func (m *ScheduledMessagesResponse) GetScheduledMessages() []*ScheduledMessage {
	if m != nil {
		return m.ScheduledMessages
	}
	return nil
}

type UpdateMessageRequest struct {
	ThreadItemID  string       `protobuf:"bytes,1,opt,name=thread_item_id,json=threadItemId,proto3" json:"thread_item_id,omitempty"`
	ActorEntityID string       `protobuf:"bytes,2,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	Message       *MessagePost `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateMessageRequest) Reset()                    { *m = UpdateMessageRequest{} }
func (*UpdateMessageRequest) ProtoMessage()               {}
func (*UpdateMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{98} }

func (m *UpdateMessageRequest) GetMessage() *MessagePost {
	if m != nil {
		return m.Message
	}
	return nil
}

type UpdateMessageResponse struct {
}

func (m *UpdateMessageResponse) Reset()                    { *m = UpdateMessageResponse{} }
func (*UpdateMessageResponse) ProtoMessage()               {}
func (*UpdateMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{99} }

type TagsRequest struct {
	OrganizationID string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Prefix         string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (m *TagsRequest) Reset()                    { *m = TagsRequest{} }
func (*TagsRequest) ProtoMessage()               {}
func (*TagsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{100} }

type TagsResponse struct {
	Tags []*Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *TagsResponse) Reset()                    { *m = TagsResponse{} }
func (*TagsResponse) ProtoMessage()               {}
func (*TagsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{101} }

func (m *TagsResponse) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Tag struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hidden bool   `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{102} }

type TriggeredMessageKey struct {
	Key    TriggeredMessageKey_Key `protobuf:"varint,1,opt,name=key,proto3,enum=threading.TriggeredMessageKey_Key" json:"key,omitempty"`
	Subkey string                  `protobuf:"bytes,2,opt,name=subkey,proto3" json:"subkey,omitempty"`
}

func (m *TriggeredMessageKey) Reset()                    { *m = TriggeredMessageKey{} }
func (*TriggeredMessageKey) ProtoMessage()               {}
func (*TriggeredMessageKey) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{103} }

type TriggeredMessageItem struct {
	ID                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TriggeredMessageID string `protobuf:"bytes,2,opt,name=triggered_message_id,json=triggeredMessageId,proto3" json:"triggered_message_id,omitempty"`
	ActorEntityID      string `protobuf:"bytes,3,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	Internal           bool   `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
	Ordinal            int64  `protobuf:"varint,5,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
	Created            uint64 `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Modified           uint64 `protobuf:"varint,8,opt,name=modified,proto3" json:"modified,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*TriggeredMessageItem_Message
	Content isTriggeredMessageItem_Content `protobuf_oneof:"content"`
}

func (m *TriggeredMessageItem) Reset()                    { *m = TriggeredMessageItem{} }
func (*TriggeredMessageItem) ProtoMessage()               {}
func (*TriggeredMessageItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{104} }

type isTriggeredMessageItem_Content interface {
	isTriggeredMessageItem_Content()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TriggeredMessageItem_Message struct {
	Message *Message `protobuf:"bytes,9,opt,name=message,oneof"`
}

func (*TriggeredMessageItem_Message) isTriggeredMessageItem_Content() {}

func (m *TriggeredMessageItem) GetContent() isTriggeredMessageItem_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *TriggeredMessageItem) GetMessage() *Message {
	if x, ok := m.GetContent().(*TriggeredMessageItem_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TriggeredMessageItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TriggeredMessageItem_OneofMarshaler, _TriggeredMessageItem_OneofUnmarshaler, _TriggeredMessageItem_OneofSizer, []interface{}{
		(*TriggeredMessageItem_Message)(nil),
	}
}

func _TriggeredMessageItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TriggeredMessageItem)
	// content
	switch x := m.Content.(type) {
	case *TriggeredMessageItem_Message:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TriggeredMessageItem.Content has unexpected type %T", x)
	}
	return nil
}

func _TriggeredMessageItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TriggeredMessageItem)
	switch tag {
	case 9: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Content = &TriggeredMessageItem_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TriggeredMessageItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TriggeredMessageItem)
	// content
	switch x := m.Content.(type) {
	case *TriggeredMessageItem_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TriggeredMessage struct {
	ID                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ActorEntityID        string                  `protobuf:"bytes,2,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	OrganizationEntityID string                  `protobuf:"bytes,3,opt,name=organization_entity_id,json=organizationEntityId,proto3" json:"organization_entity_id,omitempty"`
	Enabled              bool                    `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Key                  *TriggeredMessageKey    `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Items                []*TriggeredMessageItem `protobuf:"bytes,6,rep,name=items" json:"items,omitempty"`
	Created              uint64                  `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	Modified             uint64                  `protobuf:"varint,8,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (m *TriggeredMessage) Reset()                    { *m = TriggeredMessage{} }
func (*TriggeredMessage) ProtoMessage()               {}
func (*TriggeredMessage) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{105} }

func (m *TriggeredMessage) GetKey() *TriggeredMessageKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TriggeredMessage) GetItems() []*TriggeredMessageItem {
	if m != nil {
		return m.Items
	}
	return nil
}

type CreateTriggeredMessageRequest struct {
	ActorEntityID        string               `protobuf:"bytes,1,opt,name=actor_entity_id,json=actorEntityId,proto3" json:"actor_entity_id,omitempty"`
	OrganizationEntityID string               `protobuf:"bytes,2,opt,name=organization_entity_id,json=organizationEntityId,proto3" json:"organization_entity_id,omitempty"`
	Key                  *TriggeredMessageKey `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Messages             []*MessagePost       `protobuf:"bytes,4,rep,name=messages" json:"messages,omitempty"`
	Enabled              bool                 `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *CreateTriggeredMessageRequest) Reset()      { *m = CreateTriggeredMessageRequest{} }
func (*CreateTriggeredMessageRequest) ProtoMessage() {}
func (*CreateTriggeredMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{106}
}

func (m *CreateTriggeredMessageRequest) GetKey() *TriggeredMessageKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CreateTriggeredMessageRequest) GetMessages() []*MessagePost {
	if m != nil {
		return m.Messages
	}
	return nil
}

type CreateTriggeredMessageResponse struct {
	TriggeredMessage *TriggeredMessage `protobuf:"bytes,1,opt,name=triggered_message,json=triggeredMessage" json:"triggered_message,omitempty"`
}

func (m *CreateTriggeredMessageResponse) Reset()      { *m = CreateTriggeredMessageResponse{} }
func (*CreateTriggeredMessageResponse) ProtoMessage() {}
func (*CreateTriggeredMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{107}
}

func (m *CreateTriggeredMessageResponse) GetTriggeredMessage() *TriggeredMessage {
	if m != nil {
		return m.TriggeredMessage
	}
	return nil
}

type TriggeredMessagesRequest struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,json=organizationEntityId,proto3" json:"organization_entity_id,omitempty"`
	// Types that are valid to be assigned to LookupKey:
	//	*TriggeredMessagesRequest_Key
	LookupKey isTriggeredMessagesRequest_LookupKey `protobuf_oneof:"lookup_key"`
}

func (m *TriggeredMessagesRequest) Reset()                    { *m = TriggeredMessagesRequest{} }
func (*TriggeredMessagesRequest) ProtoMessage()               {}
func (*TriggeredMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{108} }

type isTriggeredMessagesRequest_LookupKey interface {
	isTriggeredMessagesRequest_LookupKey()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TriggeredMessagesRequest_Key struct {
	Key *TriggeredMessageKey `protobuf:"bytes,2,opt,name=key,oneof"`
}

func (*TriggeredMessagesRequest_Key) isTriggeredMessagesRequest_LookupKey() {}

func (m *TriggeredMessagesRequest) GetLookupKey() isTriggeredMessagesRequest_LookupKey {
	if m != nil {
		return m.LookupKey
	}
	return nil
}

func (m *TriggeredMessagesRequest) GetKey() *TriggeredMessageKey {
	if x, ok := m.GetLookupKey().(*TriggeredMessagesRequest_Key); ok {
		return x.Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TriggeredMessagesRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TriggeredMessagesRequest_OneofMarshaler, _TriggeredMessagesRequest_OneofUnmarshaler, _TriggeredMessagesRequest_OneofSizer, []interface{}{
		(*TriggeredMessagesRequest_Key)(nil),
	}
}

func _TriggeredMessagesRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TriggeredMessagesRequest)
	// lookup_key
	switch x := m.LookupKey.(type) {
	case *TriggeredMessagesRequest_Key:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TriggeredMessagesRequest.LookupKey has unexpected type %T", x)
	}
	return nil
}

func _TriggeredMessagesRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TriggeredMessagesRequest)
	switch tag {
	case 2: // lookup_key.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TriggeredMessageKey)
		err := b.DecodeMessage(msg)
		m.LookupKey = &TriggeredMessagesRequest_Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TriggeredMessagesRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TriggeredMessagesRequest)
	// lookup_key
	switch x := m.LookupKey.(type) {
	case *TriggeredMessagesRequest_Key:
		s := proto.Size(x.Key)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TriggeredMessagesResponse struct {
	TriggeredMessages []*TriggeredMessage `protobuf:"bytes,1,rep,name=triggered_messages,json=triggeredMessages" json:"triggered_messages,omitempty"`
}

func (m *TriggeredMessagesResponse) Reset()                    { *m = TriggeredMessagesResponse{} }
func (*TriggeredMessagesResponse) ProtoMessage()               {}
func (*TriggeredMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{109} }

func (m *TriggeredMessagesResponse) GetTriggeredMessages() []*TriggeredMessage {
	if m != nil {
		return m.TriggeredMessages
	}
	return nil
}

type DeleteTriggeredMessageRequest struct {
	TriggeredMessageID string `protobuf:"bytes,1,opt,name=triggered_message_id,json=triggeredMessageId,proto3" json:"triggered_message_id,omitempty"`
}

func (m *DeleteTriggeredMessageRequest) Reset()      { *m = DeleteTriggeredMessageRequest{} }
func (*DeleteTriggeredMessageRequest) ProtoMessage() {}
func (*DeleteTriggeredMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{110}
}

type DeleteTriggeredMessageResponse struct {
}

func (m *DeleteTriggeredMessageResponse) Reset()      { *m = DeleteTriggeredMessageResponse{} }
func (*DeleteTriggeredMessageResponse) ProtoMessage() {}
func (*DeleteTriggeredMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{111}
}

type UpdateTriggeredMessageRequest struct {
	TriggeredMessageID string `protobuf:"bytes,1,opt,name=triggered_message_id,json=triggeredMessageId,proto3" json:"triggered_message_id,omitempty"`
	Enabled            bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	UpdateEnabled      bool   `protobuf:"varint,3,opt,name=update_enabled,json=updateEnabled,proto3" json:"update_enabled,omitempty"`
}

func (m *UpdateTriggeredMessageRequest) Reset()      { *m = UpdateTriggeredMessageRequest{} }
func (*UpdateTriggeredMessageRequest) ProtoMessage() {}
func (*UpdateTriggeredMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{112}
}

type UpdateTriggeredMessageResponse struct {
	TriggeredMessage *TriggeredMessage `protobuf:"bytes,1,opt,name=triggered_message,json=triggeredMessage" json:"triggered_message,omitempty"`
}

func (m *UpdateTriggeredMessageResponse) Reset()      { *m = UpdateTriggeredMessageResponse{} }
func (*UpdateTriggeredMessageResponse) ProtoMessage() {}
func (*UpdateTriggeredMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{113}
}

func (m *UpdateTriggeredMessageResponse) GetTriggeredMessage() *TriggeredMessage {
	if m != nil {
		return m.TriggeredMessage
	}
	return nil
}

type CloneAttachmentsRequest struct {
	Attachments []*Attachment                     `protobuf:"bytes,1,rep,name=attachments" json:"attachments,omitempty"`
	OwnerType   CloneAttachmentsRequest_OwnerType `protobuf:"varint,2,opt,name=owner_type,json=ownerType,proto3,enum=threading.CloneAttachmentsRequest_OwnerType" json:"owner_type,omitempty"`
	OwnerID     string                            `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (m *CloneAttachmentsRequest) Reset()                    { *m = CloneAttachmentsRequest{} }
func (*CloneAttachmentsRequest) ProtoMessage()               {}
func (*CloneAttachmentsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{114} }

func (m *CloneAttachmentsRequest) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type CloneAttachmentsResponse struct {
	Attachments []*Attachment `protobuf:"bytes,1,rep,name=attachments" json:"attachments,omitempty"`
}

func (m *CloneAttachmentsResponse) Reset()                    { *m = CloneAttachmentsResponse{} }
func (*CloneAttachmentsResponse) ProtoMessage()               {}
func (*CloneAttachmentsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{115} }

func (m *CloneAttachmentsResponse) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func init() {
	proto.RegisterType((*Iterator)(nil), "threading.Iterator")
	proto.RegisterType((*Thread)(nil), "threading.Thread")
	proto.RegisterType((*Member)(nil), "threading.Member")
	proto.RegisterType((*ThreadItem)(nil), "threading.ThreadItem")
	proto.RegisterType((*ThreadItemViewDetails)(nil), "threading.ThreadItemViewDetails")
	proto.RegisterType((*Reference)(nil), "threading.Reference")
	proto.RegisterType((*Message)(nil), "threading.Message")
	proto.RegisterType((*Endpoint)(nil), "threading.Endpoint")
	proto.RegisterType((*MessageUpdate)(nil), "threading.MessageUpdate")
	proto.RegisterType((*MessageDelete)(nil), "threading.MessageDelete")
	proto.RegisterType((*SavedQuery)(nil), "threading.SavedQuery")
	proto.RegisterType((*Query)(nil), "threading.Query")
	proto.RegisterType((*Expr)(nil), "threading.Expr")
	proto.RegisterType((*Attachment)(nil), "threading.Attachment")
	proto.RegisterType((*ImageAttachment)(nil), "threading.ImageAttachment")
	proto.RegisterType((*VideoAttachment)(nil), "threading.VideoAttachment")
	proto.RegisterType((*AudioAttachment)(nil), "threading.AudioAttachment")
	proto.RegisterType((*DocumentAttachment)(nil), "threading.DocumentAttachment")
	proto.RegisterType((*GenericURLAttachment)(nil), "threading.GenericURLAttachment")
	proto.RegisterType((*VisitAttachment)(nil), "threading.VisitAttachment")
	proto.RegisterType((*CarePlanAttachment)(nil), "threading.CarePlanAttachment")
	proto.RegisterType((*PaymentRequestAttachment)(nil), "threading.PaymentRequestAttachment")
	proto.RegisterType((*PublishedThreadItem)(nil), "threading.PublishedThreadItem")
	proto.RegisterType((*MessagePost)(nil), "threading.MessagePost")
	proto.RegisterType((*PostMessageRequest)(nil), "threading.PostMessageRequest")
	proto.RegisterType((*PostMessageResponse)(nil), "threading.PostMessageResponse")
	proto.RegisterType((*PostMessagesRequest)(nil), "threading.PostMessagesRequest")
	proto.RegisterType((*PostMessagesResponse)(nil), "threading.PostMessagesResponse")
	proto.RegisterType((*MarkThreadsAsReadRequest)(nil), "threading.MarkThreadsAsReadRequest")
	proto.RegisterType((*MarkThreadsAsReadRequest_ThreadWatermark)(nil), "threading.MarkThreadsAsReadRequest.ThreadWatermark")
	proto.RegisterType((*MarkThreadsAsReadResponse)(nil), "threading.MarkThreadsAsReadResponse")
	proto.RegisterType((*ThreadItemsRequest)(nil), "threading.ThreadItemsRequest")
	proto.RegisterType((*ThreadItemEdge)(nil), "threading.ThreadItemEdge")
	proto.RegisterType((*ThreadItemsResponse)(nil), "threading.ThreadItemsResponse")
	proto.RegisterType((*QueryThreadsRequest)(nil), "threading.QueryThreadsRequest")
	proto.RegisterType((*ThreadEdge)(nil), "threading.ThreadEdge")
	proto.RegisterType((*QueryThreadsResponse)(nil), "threading.QueryThreadsResponse")
	proto.RegisterType((*SavedQueriesRequest)(nil), "threading.SavedQueriesRequest")
	proto.RegisterType((*SavedQueriesResponse)(nil), "threading.SavedQueriesResponse")
	proto.RegisterType((*DeleteSavedQueriesRequest)(nil), "threading.DeleteSavedQueriesRequest")
	proto.RegisterType((*DeleteSavedQueriesResponse)(nil), "threading.DeleteSavedQueriesResponse")
	proto.RegisterType((*SavedQueryTemplatesRequest)(nil), "threading.SavedQueryTemplatesRequest")
	proto.RegisterType((*SavedQueryTemplatesResponse)(nil), "threading.SavedQueryTemplatesResponse")
	proto.RegisterType((*ThreadRequest)(nil), "threading.ThreadRequest")
	proto.RegisterType((*ThreadResponse)(nil), "threading.ThreadResponse")
	proto.RegisterType((*ThreadsRequest)(nil), "threading.ThreadsRequest")
	proto.RegisterType((*ThreadsResponse)(nil), "threading.ThreadsResponse")
	proto.RegisterType((*CreateSavedQueryRequest)(nil), "threading.CreateSavedQueryRequest")
	proto.RegisterType((*CreateSavedQueryResponse)(nil), "threading.CreateSavedQueryResponse")
	proto.RegisterType((*UpdateSavedQueryRequest)(nil), "threading.UpdateSavedQueryRequest")
	proto.RegisterType((*UpdateSavedQueryResponse)(nil), "threading.UpdateSavedQueryResponse")
	proto.RegisterType((*DeleteMessageRequest)(nil), "threading.DeleteMessageRequest")
	proto.RegisterType((*DeleteMessageResponse)(nil), "threading.DeleteMessageResponse")
	proto.RegisterType((*DeleteThreadRequest)(nil), "threading.DeleteThreadRequest")
	proto.RegisterType((*DeleteThreadResponse)(nil), "threading.DeleteThreadResponse")
	proto.RegisterType((*UpdateThreadRequest)(nil), "threading.UpdateThreadRequest")
	proto.RegisterType((*UpdateThreadResponse)(nil), "threading.UpdateThreadResponse")
	proto.RegisterType((*CreateThreadRequest)(nil), "threading.CreateThreadRequest")
	proto.RegisterType((*CreateThreadResponse)(nil), "threading.CreateThreadResponse")
	proto.RegisterType((*CreateEmptyThreadRequest)(nil), "threading.CreateEmptyThreadRequest")
	proto.RegisterType((*CreateEmptyThreadResponse)(nil), "threading.CreateEmptyThreadResponse")
	proto.RegisterType((*ThreadMembersRequest)(nil), "threading.ThreadMembersRequest")
	proto.RegisterType((*ThreadMembersResponse)(nil), "threading.ThreadMembersResponse")
	proto.RegisterType((*ThreadsForMemberRequest)(nil), "threading.ThreadsForMemberRequest")
	proto.RegisterType((*ThreadsForMemberResponse)(nil), "threading.ThreadsForMemberResponse")
	proto.RegisterType((*SavedQueryRequest)(nil), "threading.SavedQueryRequest")
	proto.RegisterType((*SavedQueryResponse)(nil), "threading.SavedQueryResponse")
	proto.RegisterType((*ThreadItemRequest)(nil), "threading.ThreadItemRequest")
	proto.RegisterType((*ThreadItemResponse)(nil), "threading.ThreadItemResponse")
	proto.RegisterType((*ThreadItemViewDetailsRequest)(nil), "threading.ThreadItemViewDetailsRequest")
	proto.RegisterType((*ThreadItemViewDetailsResponse)(nil), "threading.ThreadItemViewDetailsResponse")
	proto.RegisterType((*CreateLinkedThreadsRequest)(nil), "threading.CreateLinkedThreadsRequest")
	proto.RegisterType((*CreateLinkedThreadsResponse)(nil), "threading.CreateLinkedThreadsResponse")
	proto.RegisterType((*CreateOnboardingThreadRequest)(nil), "threading.CreateOnboardingThreadRequest")
	proto.RegisterType((*CreateOnboardingThreadResponse)(nil), "threading.CreateOnboardingThreadResponse")
	proto.RegisterType((*LinkedThreadRequest)(nil), "threading.LinkedThreadRequest")
	proto.RegisterType((*LinkedThreadResponse)(nil), "threading.LinkedThreadResponse")
	proto.RegisterType((*KeyValue)(nil), "threading.KeyValue")
	proto.RegisterType((*GenericSetupEvent)(nil), "threading.GenericSetupEvent")
	proto.RegisterType((*ProvisionedPhoneEvent)(nil), "threading.ProvisionedPhoneEvent")
	proto.RegisterType((*OnboardingThreadEventRequest)(nil), "threading.OnboardingThreadEventRequest")
	proto.RegisterType((*OnboardingThreadEventResponse)(nil), "threading.OnboardingThreadEventResponse")
	proto.RegisterType((*SavedMessage)(nil), "threading.SavedMessage")
	proto.RegisterType((*IDList)(nil), "threading.IDList")
	proto.RegisterType((*SavedMessagesRequest)(nil), "threading.SavedMessagesRequest")
	proto.RegisterType((*SavedMessagesResponse)(nil), "threading.SavedMessagesResponse")
	proto.RegisterType((*CreateSavedMessageRequest)(nil), "threading.CreateSavedMessageRequest")
	proto.RegisterType((*CreateSavedMessageResponse)(nil), "threading.CreateSavedMessageResponse")
	proto.RegisterType((*DeleteSavedMessageRequest)(nil), "threading.DeleteSavedMessageRequest")
	proto.RegisterType((*DeleteSavedMessageResponse)(nil), "threading.DeleteSavedMessageResponse")
	proto.RegisterType((*UpdateSavedMessageRequest)(nil), "threading.UpdateSavedMessageRequest")
	proto.RegisterType((*UpdateSavedMessageResponse)(nil), "threading.UpdateSavedMessageResponse")
	proto.RegisterType((*ScheduledMessage)(nil), "threading.ScheduledMessage")
	proto.RegisterType((*CreateScheduledMessageRequest)(nil), "threading.CreateScheduledMessageRequest")
	proto.RegisterType((*CreateScheduledMessageResponse)(nil), "threading.CreateScheduledMessageResponse")
	proto.RegisterType((*DeleteScheduledMessageRequest)(nil), "threading.DeleteScheduledMessageRequest")
	proto.RegisterType((*DeleteScheduledMessageResponse)(nil), "threading.DeleteScheduledMessageResponse")
	proto.RegisterType((*ScheduledMessagesRequest)(nil), "threading.ScheduledMessagesRequest")
	proto.RegisterType((*ScheduledMessagesResponse)(nil), "threading.ScheduledMessagesResponse")
	proto.RegisterType((*UpdateMessageRequest)(nil), "threading.UpdateMessageRequest")
	proto.RegisterType((*UpdateMessageResponse)(nil), "threading.UpdateMessageResponse")
	proto.RegisterType((*TagsRequest)(nil), "threading.TagsRequest")
	proto.RegisterType((*TagsResponse)(nil), "threading.TagsResponse")
	proto.RegisterType((*Tag)(nil), "threading.Tag")
	proto.RegisterType((*TriggeredMessageKey)(nil), "threading.TriggeredMessageKey")
	proto.RegisterType((*TriggeredMessageItem)(nil), "threading.TriggeredMessageItem")
	proto.RegisterType((*TriggeredMessage)(nil), "threading.TriggeredMessage")
	proto.RegisterType((*CreateTriggeredMessageRequest)(nil), "threading.CreateTriggeredMessageRequest")
	proto.RegisterType((*CreateTriggeredMessageResponse)(nil), "threading.CreateTriggeredMessageResponse")
	proto.RegisterType((*TriggeredMessagesRequest)(nil), "threading.TriggeredMessagesRequest")
	proto.RegisterType((*TriggeredMessagesResponse)(nil), "threading.TriggeredMessagesResponse")
	proto.RegisterType((*DeleteTriggeredMessageRequest)(nil), "threading.DeleteTriggeredMessageRequest")
	proto.RegisterType((*DeleteTriggeredMessageResponse)(nil), "threading.DeleteTriggeredMessageResponse")
	proto.RegisterType((*UpdateTriggeredMessageRequest)(nil), "threading.UpdateTriggeredMessageRequest")
	proto.RegisterType((*UpdateTriggeredMessageResponse)(nil), "threading.UpdateTriggeredMessageResponse")
	proto.RegisterType((*CloneAttachmentsRequest)(nil), "threading.CloneAttachmentsRequest")
	proto.RegisterType((*CloneAttachmentsResponse)(nil), "threading.CloneAttachmentsResponse")
	proto.RegisterEnum("threading.ThreadType", ThreadType_name, ThreadType_value)
	proto.RegisterEnum("threading.ThreadOrigin", ThreadOrigin_name, ThreadOrigin_value)
	proto.RegisterEnum("threading.SavedQueryType", SavedQueryType_name, SavedQueryType_value)
	proto.RegisterEnum("threading.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("threading.NotificationsEnabledUpdate", NotificationsEnabledUpdate_name, NotificationsEnabledUpdate_value)
	proto.RegisterEnum("threading.ScheduledMessageStatus", ScheduledMessageStatus_name, ScheduledMessageStatus_value)
	proto.RegisterEnum("threading.Iterator_Direction", Iterator_Direction_name, Iterator_Direction_value)
	proto.RegisterEnum("threading.Reference_Type", Reference_Type_name, Reference_Type_value)
	proto.RegisterEnum("threading.Endpoint_Channel", Endpoint_Channel_name, Endpoint_Channel_value)
	proto.RegisterEnum("threading.Expr_Flag", Expr_Flag_name, Expr_Flag_value)
	proto.RegisterEnum("threading.Expr_ThreadType", Expr_ThreadType_name, Expr_ThreadType_value)
	proto.RegisterEnum("threading.QueryThreadsRequest_Type", QueryThreadsRequest_Type_name, QueryThreadsRequest_Type_value)
	proto.RegisterEnum("threading.OnboardingThreadEventRequest_LookupByType", OnboardingThreadEventRequest_LookupByType_name, OnboardingThreadEventRequest_LookupByType_value)
	proto.RegisterEnum("threading.OnboardingThreadEventRequest_EventType", OnboardingThreadEventRequest_EventType_name, OnboardingThreadEventRequest_EventType_value)
	proto.RegisterEnum("threading.TriggeredMessageKey_Key", TriggeredMessageKey_Key_name, TriggeredMessageKey_Key_value)
	proto.RegisterEnum("threading.CloneAttachmentsRequest_OwnerType", CloneAttachmentsRequest_OwnerType_name, CloneAttachmentsRequest_OwnerType_value)
}
func (x ThreadType) String() string {
	s, ok := ThreadType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ThreadOrigin) String() string {
	s, ok := ThreadOrigin_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SavedQueryType) String() string {
	s, ok := SavedQueryType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ValueType) String() string {
	s, ok := ValueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NotificationsEnabledUpdate) String() string {
	s, ok := NotificationsEnabledUpdate_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ScheduledMessageStatus) String() string {
	s, ok := ScheduledMessageStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Iterator_Direction) String() string {
	s, ok := Iterator_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Reference_Type) String() string {
	s, ok := Reference_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Endpoint_Channel) String() string {
	s, ok := Endpoint_Channel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Expr_Flag) String() string {
	s, ok := Expr_Flag_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Expr_ThreadType) String() string {
	s, ok := Expr_ThreadType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QueryThreadsRequest_Type) String() string {
	s, ok := QueryThreadsRequest_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OnboardingThreadEventRequest_LookupByType) String() string {
	s, ok := OnboardingThreadEventRequest_LookupByType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OnboardingThreadEventRequest_EventType) String() string {
	s, ok := OnboardingThreadEventRequest_EventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TriggeredMessageKey_Key) String() string {
	s, ok := TriggeredMessageKey_Key_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CloneAttachmentsRequest_OwnerType) String() string {
	s, ok := CloneAttachmentsRequest_OwnerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Iterator) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Iterator)
	if !ok {
		that2, ok := that.(Iterator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StartCursor != that1.StartCursor {
		return false
	}
	if this.EndCursor != that1.EndCursor {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Thread) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Thread)
	if !ok {
		that2, ok := that.(Thread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if this.LastMessageTimestamp != that1.LastMessageTimestamp {
		return false
	}
	if this.LastMessageSummary != that1.LastMessageSummary {
		return false
	}
	if this.Unread != that1.Unread {
		return false
	}
	if len(this.LastPrimaryEntityEndpoints) != len(that1.LastPrimaryEntityEndpoints) {
		return false
	}
	for i := range this.LastPrimaryEntityEndpoints {
		if !this.LastPrimaryEntityEndpoints[i].Equal(that1.LastPrimaryEntityEndpoints[i]) {
			return false
		}
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.MessageCount != that1.MessageCount {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.UnreadReference != that1.UnreadReference {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (this *Member) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Member)
	if !ok {
		that2, ok := that.(Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *ThreadItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem)
	if !ok {
		that2, ok := that.(ThreadItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.ModifiedTimestamp != that1.ModifiedTimestamp {
		return false
	}
	if that1.Item == nil {
		if this.Item != nil {
			return false
		}
	} else if this.Item == nil {
		return false
	} else if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *ThreadItem_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem_Message)
	if !ok {
		that2, ok := that.(ThreadItem_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *ThreadItem_MessageUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem_MessageUpdate)
	if !ok {
		that2, ok := that.(ThreadItem_MessageUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MessageUpdate.Equal(that1.MessageUpdate) {
		return false
	}
	return true
}
func (this *ThreadItem_MessageDelete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItem_MessageDelete)
	if !ok {
		that2, ok := that.(ThreadItem_MessageDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MessageDelete.Equal(that1.MessageDelete) {
		return false
	}
	return true
}
func (this *ThreadItemViewDetails) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemViewDetails)
	if !ok {
		that2, ok := that.(ThreadItemViewDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.ViewTime != that1.ViewTime {
		return false
	}
	return true
}
func (this *Reference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Reference)
	if !ok {
		that2, ok := that.(Reference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.TextRefs) != len(that1.TextRefs) {
		return false
	}
	for i := range this.TextRefs {
		if !this.TextRefs[i].Equal(that1.TextRefs[i]) {
			return false
		}
	}
	if this.Summary != that1.Summary {
		return false
	}
	return true
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *MessageUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageUpdate)
	if !ok {
		that2, ok := that.(MessageUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *MessageDelete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessageDelete)
	if !ok {
		that2, ok := that.(MessageDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	return true
}
func (this *SavedQuery) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQuery)
	if !ok {
		that2, ok := that.(SavedQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if this.ShortTitle != that1.ShortTitle {
		return false
	}
	if this.Unread != that1.Unread {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Ordinal != that1.Ordinal {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.NotificationsEnabled != that1.NotificationsEnabled {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	if this.Template != that1.Template {
		return false
	}
	if this.LongTitle != that1.LongTitle {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DefaultTemplate != that1.DefaultTemplate {
		return false
	}
	return true
}
func (this *Query) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Expressions) != len(that1.Expressions) {
		return false
	}
	for i := range this.Expressions {
		if !this.Expressions[i].Equal(that1.Expressions[i]) {
			return false
		}
	}
	return true
}
func (this *Expr) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Expr)
	if !ok {
		that2, ok := that.(Expr)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Not != that1.Not {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Expr_Token) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Expr_Token)
	if !ok {
		that2, ok := that.(Expr_Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *Expr_Flag_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Expr_Flag_)
	if !ok {
		that2, ok := that.(Expr_Flag_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Flag != that1.Flag {
		return false
	}
	return true
}
func (this *Expr_ThreadType_) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Expr_ThreadType_)
	if !ok {
		that2, ok := that.(Expr_ThreadType_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadType != that1.ThreadType {
		return false
	}
	return true
}
func (this *Expr_Tag) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Expr_Tag)
	if !ok {
		that2, ok := that.(Expr_Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	return true
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.ContentID != that1.ContentID {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Attachment_Image) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Image)
	if !ok {
		that2, ok := that.(Attachment_Image)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *Attachment_Audio) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Audio)
	if !ok {
		that2, ok := that.(Attachment_Audio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *Attachment_GenericURL) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_GenericURL)
	if !ok {
		that2, ok := that.(Attachment_GenericURL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GenericURL.Equal(that1.GenericURL) {
		return false
	}
	return true
}
func (this *Attachment_Visit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Visit)
	if !ok {
		that2, ok := that.(Attachment_Visit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *Attachment_CarePlan) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_CarePlan)
	if !ok {
		that2, ok := that.(Attachment_CarePlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *Attachment_Video) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Video)
	if !ok {
		that2, ok := that.(Attachment_Video)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Video.Equal(that1.Video) {
		return false
	}
	return true
}
func (this *Attachment_PaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_PaymentRequest)
	if !ok {
		that2, ok := that.(Attachment_PaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PaymentRequest.Equal(that1.PaymentRequest) {
		return false
	}
	return true
}
func (this *Attachment_Document) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Attachment_Document)
	if !ok {
		that2, ok := that.(Attachment_Document)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Document.Equal(that1.Document) {
		return false
	}
	return true
}
func (this *ImageAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageAttachment)
	if !ok {
		that2, ok := that.(ImageAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	return true
}
func (this *VideoAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VideoAttachment)
	if !ok {
		that2, ok := that.(VideoAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	return true
}
func (this *AudioAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AudioAttachment)
	if !ok {
		that2, ok := that.(AudioAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.DurationNS != that1.DurationNS {
		return false
	}
	return true
}
func (this *DocumentAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DocumentAttachment)
	if !ok {
		that2, ok := that.(DocumentAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GenericURLAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericURLAttachment)
	if !ok {
		that2, ok := that.(GenericURLAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Mimetype != that1.Mimetype {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *VisitAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VisitAttachment)
	if !ok {
		that2, ok := that.(VisitAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.VisitName != that1.VisitName {
		return false
	}
	return true
}
func (this *CarePlanAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanAttachment)
	if !ok {
		that2, ok := that.(CarePlanAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CarePlanID != that1.CarePlanID {
		return false
	}
	if this.CarePlanName != that1.CarePlanName {
		return false
	}
	return true
}
func (this *PaymentRequestAttachment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PaymentRequestAttachment)
	if !ok {
		that2, ok := that.(PaymentRequestAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PaymentID != that1.PaymentID {
		return false
	}
	return true
}
func (this *PublishedThreadItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PublishedThreadItem)
	if !ok {
		that2, ok := that.(PublishedThreadItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *MessagePost) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MessagePost)
	if !ok {
		that2, ok := that.(MessagePost)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if !this.Destinations[i].Equal(that1.Destinations[i]) {
			return false
		}
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	return true
}
func (this *PostMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostMessageRequest)
	if !ok {
		that2, ok := that.(PostMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if this.DontNotify != that1.DontNotify {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DeprecatedSource.Equal(that1.DeprecatedSource) {
		return false
	}
	if len(this.DeprecatedDestinations) != len(that1.DeprecatedDestinations) {
		return false
	}
	for i := range this.DeprecatedDestinations {
		if !this.DeprecatedDestinations[i].Equal(that1.DeprecatedDestinations[i]) {
			return false
		}
	}
	if this.DeprecatedInternal != that1.DeprecatedInternal {
		return false
	}
	if this.DeprecatedText != that1.DeprecatedText {
		return false
	}
	if len(this.DeprecatedAttachments) != len(that1.DeprecatedAttachments) {
		return false
	}
	for i := range this.DeprecatedAttachments {
		if !this.DeprecatedAttachments[i].Equal(that1.DeprecatedAttachments[i]) {
			return false
		}
	}
	if this.DeprecatedTitle != that1.DeprecatedTitle {
		return false
	}
	if this.DeprecatedSummary != that1.DeprecatedSummary {
		return false
	}
	return true
}
func (this *PostMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostMessageResponse)
	if !ok {
		that2, ok := that.(PostMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *PostMessagesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostMessagesRequest)
	if !ok {
		that2, ok := that.(PostMessagesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if this.DontNotify != that1.DontNotify {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *PostMessagesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PostMessagesResponse)
	if !ok {
		that2, ok := that.(PostMessagesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *MarkThreadsAsReadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkThreadsAsReadRequest)
	if !ok {
		that2, ok := that.(MarkThreadsAsReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ThreadWatermarks) != len(that1.ThreadWatermarks) {
		return false
	}
	for i := range this.ThreadWatermarks {
		if !this.ThreadWatermarks[i].Equal(that1.ThreadWatermarks[i]) {
			return false
		}
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Seen != that1.Seen {
		return false
	}
	return true
}
func (this *MarkThreadsAsReadRequest_ThreadWatermark) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkThreadsAsReadRequest_ThreadWatermark)
	if !ok {
		that2, ok := that.(MarkThreadsAsReadRequest_ThreadWatermark)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.LastMessageTimestamp != that1.LastMessageTimestamp {
		return false
	}
	return true
}
func (this *MarkThreadsAsReadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkThreadsAsReadResponse)
	if !ok {
		that2, ok := that.(MarkThreadsAsReadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ThreadItemsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemsRequest)
	if !ok {
		that2, ok := that.(ThreadItemsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	if !this.Iterator.Equal(that1.Iterator) {
		return false
	}
	return true
}
func (this *ThreadItemEdge) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemEdge)
	if !ok {
		that2, ok := that.(ThreadItemEdge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	if this.Cursor != that1.Cursor {
		return false
	}
	return true
}
func (this *ThreadItemsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemsResponse)
	if !ok {
		that2, ok := that.(ThreadItemsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	return true
}
func (this *QueryThreadsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsRequest)
	if !ok {
		that2, ok := that.(QueryThreadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeprecatedOrganizationID != that1.DeprecatedOrganizationID {
		return false
	}
	if !this.Iterator.Equal(that1.Iterator) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.QueryType == nil {
		if this.QueryType != nil {
			return false
		}
	} else if this.QueryType == nil {
		return false
	} else if !this.QueryType.Equal(that1.QueryType) {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *QueryThreadsRequest_Query) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsRequest_Query)
	if !ok {
		that2, ok := that.(QueryThreadsRequest_Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *QueryThreadsRequest_SavedQueryID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsRequest_SavedQueryID)
	if !ok {
		that2, ok := that.(QueryThreadsRequest_SavedQueryID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedQueryID != that1.SavedQueryID {
		return false
	}
	return true
}
func (this *ThreadEdge) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadEdge)
	if !ok {
		that2, ok := that.(ThreadEdge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	if this.Cursor != that1.Cursor {
		return false
	}
	return true
}
func (this *QueryThreadsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QueryThreadsResponse)
	if !ok {
		that2, ok := that.(QueryThreadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Edges) != len(that1.Edges) {
		return false
	}
	for i := range this.Edges {
		if !this.Edges[i].Equal(that1.Edges[i]) {
			return false
		}
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	if this.TotalType != that1.TotalType {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *SavedQueriesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueriesRequest)
	if !ok {
		that2, ok := that.(SavedQueriesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *SavedQueriesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueriesResponse)
	if !ok {
		that2, ok := that.(SavedQueriesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SavedQueries) != len(that1.SavedQueries) {
		return false
	}
	for i := range this.SavedQueries {
		if !this.SavedQueries[i].Equal(that1.SavedQueries[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteSavedQueriesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteSavedQueriesRequest)
	if !ok {
		that2, ok := that.(DeleteSavedQueriesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SavedQueryIDs) != len(that1.SavedQueryIDs) {
		return false
	}
	for i := range this.SavedQueryIDs {
		if this.SavedQueryIDs[i] != that1.SavedQueryIDs[i] {
			return false
		}
	}
	return true
}
func (this *DeleteSavedQueriesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteSavedQueriesResponse)
	if !ok {
		that2, ok := that.(DeleteSavedQueriesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SavedQueryTemplatesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueryTemplatesRequest)
	if !ok {
		that2, ok := that.(SavedQueryTemplatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *SavedQueryTemplatesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueryTemplatesResponse)
	if !ok {
		that2, ok := that.(SavedQueryTemplatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SavedQueries) != len(that1.SavedQueries) {
		return false
	}
	for i := range this.SavedQueries {
		if !this.SavedQueries[i].Equal(that1.SavedQueries[i]) {
			return false
		}
	}
	return true
}
func (this *ThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadRequest)
	if !ok {
		that2, ok := that.(ThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *ThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadResponse)
	if !ok {
		that2, ok := that.(ThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *ThreadsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsRequest)
	if !ok {
		that2, ok := that.(ThreadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ThreadIDs) != len(that1.ThreadIDs) {
		return false
	}
	for i := range this.ThreadIDs {
		if this.ThreadIDs[i] != that1.ThreadIDs[i] {
			return false
		}
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *ThreadsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsResponse)
	if !ok {
		that2, ok := that.(ThreadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Threads) != len(that1.Threads) {
		return false
	}
	for i := range this.Threads {
		if !this.Threads[i].Equal(that1.Threads[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSavedQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedQueryRequest)
	if !ok {
		that2, ok := that.(CreateSavedQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if this.ShortTitle != that1.ShortTitle {
		return false
	}
	if this.Ordinal != that1.Ordinal {
		return false
	}
	if this.NotificationsEnabled != that1.NotificationsEnabled {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	if this.Template != that1.Template {
		return false
	}
	if this.LongTitle != that1.LongTitle {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *CreateSavedQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedQueryResponse)
	if !ok {
		that2, ok := that.(CreateSavedQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SavedQuery.Equal(that1.SavedQuery) {
		return false
	}
	return true
}
func (this *UpdateSavedQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedQueryRequest)
	if !ok {
		that2, ok := that.(UpdateSavedQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedQueryID != that1.SavedQueryID {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if this.ShortTitle != that1.ShortTitle {
		return false
	}
	if this.Ordinal != that1.Ordinal {
		return false
	}
	if this.ForceRebuild != that1.ForceRebuild {
		return false
	}
	if this.NotificationsEnabled != that1.NotificationsEnabled {
		return false
	}
	if this.LongTitle != that1.LongTitle {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *UpdateSavedQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedQueryResponse)
	if !ok {
		that2, ok := that.(UpdateSavedQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	return true
}
func (this *DeleteMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteMessageRequest)
	if !ok {
		that2, ok := that.(DeleteMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	return true
}
func (this *DeleteMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteMessageResponse)
	if !ok {
		that2, ok := that.(DeleteMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteThreadRequest)
	if !ok {
		that2, ok := that.(DeleteThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *DeleteThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteThreadResponse)
	if !ok {
		that2, ok := that.(DeleteThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateThreadRequest)
	if !ok {
		that2, ok := that.(UpdateThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if len(this.AddMemberEntityIDs) != len(that1.AddMemberEntityIDs) {
		return false
	}
	for i := range this.AddMemberEntityIDs {
		if this.AddMemberEntityIDs[i] != that1.AddMemberEntityIDs[i] {
			return false
		}
	}
	if len(this.RemoveMemberEntityIDs) != len(that1.RemoveMemberEntityIDs) {
		return false
	}
	for i := range this.RemoveMemberEntityIDs {
		if this.RemoveMemberEntityIDs[i] != that1.RemoveMemberEntityIDs[i] {
			return false
		}
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if len(this.AddFollowerEntityIDs) != len(that1.AddFollowerEntityIDs) {
		return false
	}
	for i := range this.AddFollowerEntityIDs {
		if this.AddFollowerEntityIDs[i] != that1.AddFollowerEntityIDs[i] {
			return false
		}
	}
	if len(this.RemoveFollowerEntityIDs) != len(that1.RemoveFollowerEntityIDs) {
		return false
	}
	for i := range this.RemoveFollowerEntityIDs {
		if this.RemoveFollowerEntityIDs[i] != that1.RemoveFollowerEntityIDs[i] {
			return false
		}
	}
	if len(this.AddTags) != len(that1.AddTags) {
		return false
	}
	for i := range this.AddTags {
		if this.AddTags[i] != that1.AddTags[i] {
			return false
		}
	}
	if len(this.RemoveTags) != len(that1.RemoveTags) {
		return false
	}
	for i := range this.RemoveTags {
		if this.RemoveTags[i] != that1.RemoveTags[i] {
			return false
		}
	}
	return true
}
func (this *UpdateThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateThreadResponse)
	if !ok {
		that2, ok := that.(UpdateThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *CreateThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateThreadRequest)
	if !ok {
		that2, ok := that.(CreateThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.MemberEntityIDs) != len(that1.MemberEntityIDs) {
		return false
	}
	for i := range this.MemberEntityIDs {
		if this.MemberEntityIDs[i] != that1.MemberEntityIDs[i] {
			return false
		}
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	if this.DontNotify != that1.DontNotify {
		return false
	}
	return true
}
func (this *CreateThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateThreadResponse)
	if !ok {
		that2, ok := that.(CreateThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if !this.ThreadItem.Equal(that1.ThreadItem) {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *CreateEmptyThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEmptyThreadRequest)
	if !ok {
		that2, ok := that.(CreateEmptyThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UUID != that1.UUID {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.FromEntityID != that1.FromEntityID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.MemberEntityIDs) != len(that1.MemberEntityIDs) {
		return false
	}
	for i := range this.MemberEntityIDs {
		if this.MemberEntityIDs[i] != that1.MemberEntityIDs[i] {
			return false
		}
	}
	if this.SystemTitle != that1.SystemTitle {
		return false
	}
	if this.Origin != that1.Origin {
		return false
	}
	return true
}
func (this *CreateEmptyThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateEmptyThreadResponse)
	if !ok {
		that2, ok := that.(CreateEmptyThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *ThreadMembersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadMembersRequest)
	if !ok {
		that2, ok := that.(ThreadMembersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *ThreadMembersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadMembersResponse)
	if !ok {
		that2, ok := that.(ThreadMembersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if len(this.FollowerEntityIDs) != len(that1.FollowerEntityIDs) {
		return false
	}
	for i := range this.FollowerEntityIDs {
		if this.FollowerEntityIDs[i] != that1.FollowerEntityIDs[i] {
			return false
		}
	}
	return true
}
func (this *ThreadsForMemberRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsForMemberRequest)
	if !ok {
		that2, ok := that.(ThreadsForMemberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.PrimaryOnly != that1.PrimaryOnly {
		return false
	}
	return true
}
func (this *ThreadsForMemberResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadsForMemberResponse)
	if !ok {
		that2, ok := that.(ThreadsForMemberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Threads) != len(that1.Threads) {
		return false
	}
	for i := range this.Threads {
		if !this.Threads[i].Equal(that1.Threads[i]) {
			return false
		}
	}
	return true
}
func (this *SavedQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueryRequest)
	if !ok {
		that2, ok := that.(SavedQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedQueryID != that1.SavedQueryID {
		return false
	}
	return true
}
func (this *SavedQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedQueryResponse)
	if !ok {
		that2, ok := that.(SavedQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SavedQuery.Equal(that1.SavedQuery) {
		return false
	}
	return true
}
func (this *ThreadItemRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemRequest)
	if !ok {
		that2, ok := that.(ThreadItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemID != that1.ItemID {
		return false
	}
	if this.ViewerEntityID != that1.ViewerEntityID {
		return false
	}
	return true
}
func (this *ThreadItemResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemResponse)
	if !ok {
		that2, ok := that.(ThreadItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Item.Equal(that1.Item) {
		return false
	}
	return true
}
func (this *ThreadItemViewDetailsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemViewDetailsRequest)
	if !ok {
		that2, ok := that.(ThreadItemViewDetailsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ItemID != that1.ItemID {
		return false
	}
	return true
}
func (this *ThreadItemViewDetailsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ThreadItemViewDetailsResponse)
	if !ok {
		that2, ok := that.(ThreadItemViewDetailsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ItemViewDetails) != len(that1.ItemViewDetails) {
		return false
	}
	for i := range this.ItemViewDetails {
		if !this.ItemViewDetails[i].Equal(that1.ItemViewDetails[i]) {
			return false
		}
	}
	return true
}
func (this *CreateLinkedThreadsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateLinkedThreadsRequest)
	if !ok {
		that2, ok := that.(CreateLinkedThreadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Organization1ID != that1.Organization1ID {
		return false
	}
	if this.Organization2ID != that1.Organization2ID {
		return false
	}
	if this.PrimaryEntity1ID != that1.PrimaryEntity1ID {
		return false
	}
	if this.PrimaryEntity2ID != that1.PrimaryEntity2ID {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.MessageTitle != that1.MessageTitle {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	if this.PrependSenderThread1 != that1.PrependSenderThread1 {
		return false
	}
	if this.PrependSenderThread2 != that1.PrependSenderThread2 {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SystemTitle1 != that1.SystemTitle1 {
		return false
	}
	if this.SystemTitle2 != that1.SystemTitle2 {
		return false
	}
	return true
}
func (this *CreateLinkedThreadsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateLinkedThreadsResponse)
	if !ok {
		that2, ok := that.(CreateLinkedThreadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread1.Equal(that1.Thread1) {
		return false
	}
	if !this.Thread2.Equal(that1.Thread2) {
		return false
	}
	return true
}
func (this *CreateOnboardingThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateOnboardingThreadRequest)
	if !ok {
		that2, ok := that.(CreateOnboardingThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.PrimaryEntityID != that1.PrimaryEntityID {
		return false
	}
	if this.UserTitle != that1.UserTitle {
		return false
	}
	return true
}
func (this *CreateOnboardingThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateOnboardingThreadResponse)
	if !ok {
		that2, ok := that.(CreateOnboardingThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *LinkedThreadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinkedThreadRequest)
	if !ok {
		that2, ok := that.(LinkedThreadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *LinkedThreadResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LinkedThreadResponse)
	if !ok {
		that2, ok := that.(LinkedThreadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	if this.PrependSender != that1.PrependSender {
		return false
	}
	return true
}
func (this *KeyValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KeyValue)
	if !ok {
		that2, ok := that.(KeyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *GenericSetupEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericSetupEvent)
	if !ok {
		that2, ok := that.(GenericSetupEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	return true
}
func (this *ProvisionedPhoneEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProvisionedPhoneEvent)
	if !ok {
		that2, ok := that.(ProvisionedPhoneEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LookupByType != that1.LookupByType {
		return false
	}
	if that1.LookupBy == nil {
		if this.LookupBy != nil {
			return false
		}
	} else if this.LookupBy == nil {
		return false
	} else if !this.LookupBy.Equal(that1.LookupBy) {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_ThreadID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_ThreadID)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_ThreadID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_EntityID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_EntityID)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_EntityID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_GenericSetup) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_GenericSetup)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_GenericSetup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GenericSetup.Equal(that1.GenericSetup) {
		return false
	}
	return true
}
func (this *OnboardingThreadEventRequest_ProvisionedPhone) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventRequest_ProvisionedPhone)
	if !ok {
		that2, ok := that.(OnboardingThreadEventRequest_ProvisionedPhone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ProvisionedPhone.Equal(that1.ProvisionedPhone) {
		return false
	}
	return true
}
func (this *OnboardingThreadEventResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OnboardingThreadEventResponse)
	if !ok {
		that2, ok := that.(OnboardingThreadEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Thread.Equal(that1.Thread) {
		return false
	}
	return true
}
func (this *SavedMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedMessage)
	if !ok {
		that2, ok := that.(SavedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.CreatorEntityID != that1.CreatorEntityID {
		return false
	}
	if this.OwnerEntityID != that1.OwnerEntityID {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Modified != that1.Modified {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *SavedMessage_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedMessage_Message)
	if !ok {
		that2, ok := that.(SavedMessage_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *IDList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IDList)
	if !ok {
		that2, ok := that.(IDList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	return true
}
func (this *SavedMessagesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedMessagesRequest)
	if !ok {
		that2, ok := that.(SavedMessagesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.By == nil {
		if this.By != nil {
			return false
		}
	} else if this.By == nil {
		return false
	} else if !this.By.Equal(that1.By) {
		return false
	}
	return true
}
func (this *SavedMessagesRequest_IDs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedMessagesRequest_IDs)
	if !ok {
		that2, ok := that.(SavedMessagesRequest_IDs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.IDs.Equal(that1.IDs) {
		return false
	}
	return true
}
func (this *SavedMessagesRequest_EntityIDs) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedMessagesRequest_EntityIDs)
	if !ok {
		that2, ok := that.(SavedMessagesRequest_EntityIDs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.EntityIDs.Equal(that1.EntityIDs) {
		return false
	}
	return true
}
func (this *SavedMessagesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedMessagesResponse)
	if !ok {
		that2, ok := that.(SavedMessagesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SavedMessages) != len(that1.SavedMessages) {
		return false
	}
	for i := range this.SavedMessages {
		if !this.SavedMessages[i].Equal(that1.SavedMessages[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSavedMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedMessageRequest)
	if !ok {
		that2, ok := that.(CreateSavedMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.CreatorEntityID != that1.CreatorEntityID {
		return false
	}
	if this.OwnerEntityID != that1.OwnerEntityID {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *CreateSavedMessageRequest_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedMessageRequest_Message)
	if !ok {
		that2, ok := that.(CreateSavedMessageRequest_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *CreateSavedMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSavedMessageResponse)
	if !ok {
		that2, ok := that.(CreateSavedMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SavedMessage.Equal(that1.SavedMessage) {
		return false
	}
	return true
}
func (this *DeleteSavedMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteSavedMessageRequest)
	if !ok {
		that2, ok := that.(DeleteSavedMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedMessageID != that1.SavedMessageID {
		return false
	}
	return true
}
func (this *DeleteSavedMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteSavedMessageResponse)
	if !ok {
		that2, ok := that.(DeleteSavedMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateSavedMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedMessageRequest)
	if !ok {
		that2, ok := that.(UpdateSavedMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SavedMessageID != that1.SavedMessageID {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *UpdateSavedMessageRequest_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedMessageRequest_Message)
	if !ok {
		that2, ok := that.(UpdateSavedMessageRequest_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *UpdateSavedMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateSavedMessageResponse)
	if !ok {
		that2, ok := that.(UpdateSavedMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SavedMessage.Equal(that1.SavedMessage) {
		return false
	}
	return true
}
func (this *ScheduledMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledMessage)
	if !ok {
		that2, ok := that.(ScheduledMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.ScheduledFor != that1.ScheduledFor {
		return false
	}
	if this.SentAt != that1.SentAt {
		return false
	}
	if this.SentThreadItemID != that1.SentThreadItemID {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Modified != that1.Modified {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *ScheduledMessage_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledMessage_Message)
	if !ok {
		that2, ok := that.(ScheduledMessage_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *CreateScheduledMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateScheduledMessageRequest)
	if !ok {
		that2, ok := that.(CreateScheduledMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.ScheduledFor != that1.ScheduledFor {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *CreateScheduledMessageRequest_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateScheduledMessageRequest_Message)
	if !ok {
		that2, ok := that.(CreateScheduledMessageRequest_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *CreateScheduledMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateScheduledMessageResponse)
	if !ok {
		that2, ok := that.(CreateScheduledMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ScheduledMessage.Equal(that1.ScheduledMessage) {
		return false
	}
	return true
}
func (this *DeleteScheduledMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteScheduledMessageRequest)
	if !ok {
		that2, ok := that.(DeleteScheduledMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ScheduledMessageID != that1.ScheduledMessageID {
		return false
	}
	return true
}
func (this *DeleteScheduledMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteScheduledMessageResponse)
	if !ok {
		that2, ok := that.(DeleteScheduledMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ScheduledMessagesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledMessagesRequest)
	if !ok {
		that2, ok := that.(ScheduledMessagesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if this.Status[i] != that1.Status[i] {
			return false
		}
	}
	if that1.LookupKey == nil {
		if this.LookupKey != nil {
			return false
		}
	} else if this.LookupKey == nil {
		return false
	} else if !this.LookupKey.Equal(that1.LookupKey) {
		return false
	}
	return true
}
func (this *ScheduledMessagesRequest_ScheduledMessageID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledMessagesRequest_ScheduledMessageID)
	if !ok {
		that2, ok := that.(ScheduledMessagesRequest_ScheduledMessageID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ScheduledMessageID != that1.ScheduledMessageID {
		return false
	}
	return true
}
func (this *ScheduledMessagesRequest_ThreadID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledMessagesRequest_ThreadID)
	if !ok {
		that2, ok := that.(ScheduledMessagesRequest_ThreadID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadID != that1.ThreadID {
		return false
	}
	return true
}
func (this *ScheduledMessagesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScheduledMessagesResponse)
	if !ok {
		that2, ok := that.(ScheduledMessagesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ScheduledMessages) != len(that1.ScheduledMessages) {
		return false
	}
	for i := range this.ScheduledMessages {
		if !this.ScheduledMessages[i].Equal(that1.ScheduledMessages[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageRequest)
	if !ok {
		that2, ok := that.(UpdateMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ThreadItemID != that1.ThreadItemID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *UpdateMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateMessageResponse)
	if !ok {
		that2, ok := that.(UpdateMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *TagsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TagsRequest)
	if !ok {
		that2, ok := that.(TagsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *TagsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TagsResponse)
	if !ok {
		that2, ok := that.(TagsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	return true
}
func (this *TriggeredMessageKey) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessageKey)
	if !ok {
		that2, ok := that.(TriggeredMessageKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Subkey != that1.Subkey {
		return false
	}
	return true
}
func (this *TriggeredMessageItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessageItem)
	if !ok {
		that2, ok := that.(TriggeredMessageItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.TriggeredMessageID != that1.TriggeredMessageID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.Internal != that1.Internal {
		return false
	}
	if this.Ordinal != that1.Ordinal {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Modified != that1.Modified {
		return false
	}
	if that1.Content == nil {
		if this.Content != nil {
			return false
		}
	} else if this.Content == nil {
		return false
	} else if !this.Content.Equal(that1.Content) {
		return false
	}
	return true
}
func (this *TriggeredMessageItem_Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessageItem_Message)
	if !ok {
		that2, ok := that.(TriggeredMessageItem_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *TriggeredMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessage)
	if !ok {
		that2, ok := that.(TriggeredMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	if this.Created != that1.Created {
		return false
	}
	if this.Modified != that1.Modified {
		return false
	}
	return true
}
func (this *CreateTriggeredMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateTriggeredMessageRequest)
	if !ok {
		that2, ok := that.(CreateTriggeredMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	return true
}
func (this *CreateTriggeredMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateTriggeredMessageResponse)
	if !ok {
		that2, ok := that.(CreateTriggeredMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TriggeredMessage.Equal(that1.TriggeredMessage) {
		return false
	}
	return true
}
func (this *TriggeredMessagesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessagesRequest)
	if !ok {
		that2, ok := that.(TriggeredMessagesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if that1.LookupKey == nil {
		if this.LookupKey != nil {
			return false
		}
	} else if this.LookupKey == nil {
		return false
	} else if !this.LookupKey.Equal(that1.LookupKey) {
		return false
	}
	return true
}
func (this *TriggeredMessagesRequest_Key) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessagesRequest_Key)
	if !ok {
		that2, ok := that.(TriggeredMessagesRequest_Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *TriggeredMessagesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriggeredMessagesResponse)
	if !ok {
		that2, ok := that.(TriggeredMessagesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.TriggeredMessages) != len(that1.TriggeredMessages) {
		return false
	}
	for i := range this.TriggeredMessages {
		if !this.TriggeredMessages[i].Equal(that1.TriggeredMessages[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteTriggeredMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteTriggeredMessageRequest)
	if !ok {
		that2, ok := that.(DeleteTriggeredMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TriggeredMessageID != that1.TriggeredMessageID {
		return false
	}
	return true
}
func (this *DeleteTriggeredMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteTriggeredMessageResponse)
	if !ok {
		that2, ok := that.(DeleteTriggeredMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateTriggeredMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateTriggeredMessageRequest)
	if !ok {
		that2, ok := that.(UpdateTriggeredMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TriggeredMessageID != that1.TriggeredMessageID {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.UpdateEnabled != that1.UpdateEnabled {
		return false
	}
	return true
}
func (this *UpdateTriggeredMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateTriggeredMessageResponse)
	if !ok {
		that2, ok := that.(UpdateTriggeredMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TriggeredMessage.Equal(that1.TriggeredMessage) {
		return false
	}
	return true
}
func (this *CloneAttachmentsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloneAttachmentsRequest)
	if !ok {
		that2, ok := that.(CloneAttachmentsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.OwnerType != that1.OwnerType {
		return false
	}
	if this.OwnerID != that1.OwnerID {
		return false
	}
	return true
}
func (this *CloneAttachmentsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloneAttachmentsResponse)
	if !ok {
		that2, ok := that.(CloneAttachmentsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *Iterator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.Iterator{")
	s = append(s, "StartCursor: "+fmt.Sprintf("%#v", this.StartCursor)+",\n")
	s = append(s, "EndCursor: "+fmt.Sprintf("%#v", this.EndCursor)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Thread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&threading.Thread{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "LastMessageTimestamp: "+fmt.Sprintf("%#v", this.LastMessageTimestamp)+",\n")
	s = append(s, "LastMessageSummary: "+fmt.Sprintf("%#v", this.LastMessageSummary)+",\n")
	s = append(s, "Unread: "+fmt.Sprintf("%#v", this.Unread)+",\n")
	if this.LastPrimaryEntityEndpoints != nil {
		s = append(s, "LastPrimaryEntityEndpoints: "+fmt.Sprintf("%#v", this.LastPrimaryEntityEndpoints)+",\n")
	}
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "MessageCount: "+fmt.Sprintf("%#v", this.MessageCount)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "UnreadReference: "+fmt.Sprintf("%#v", this.UnreadReference)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.Member{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&threading.ThreadItem{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Deleted: "+fmt.Sprintf("%#v", this.Deleted)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "ModifiedTimestamp: "+fmt.Sprintf("%#v", this.ModifiedTimestamp)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItem_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ThreadItem_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *ThreadItem_MessageUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ThreadItem_MessageUpdate{` +
		`MessageUpdate:` + fmt.Sprintf("%#v", this.MessageUpdate) + `}`}, ", ")
	return s
}
func (this *ThreadItem_MessageDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ThreadItem_MessageDelete{` +
		`MessageDelete:` + fmt.Sprintf("%#v", this.MessageDelete) + `}`}, ", ")
	return s
}
func (this *ThreadItemViewDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.ThreadItemViewDetails{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "ViewTime: "+fmt.Sprintf("%#v", this.ViewTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Reference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.Reference{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&threading.Message{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destinations != nil {
		s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.TextRefs != nil {
		s = append(s, "TextRefs: "+fmt.Sprintf("%#v", this.TextRefs)+",\n")
	}
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Endpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.Endpoint{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.MessageUpdate{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.MessageDelete{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&threading.SavedQuery{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "ShortTitle: "+fmt.Sprintf("%#v", this.ShortTitle)+",\n")
	s = append(s, "Unread: "+fmt.Sprintf("%#v", this.Unread)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Ordinal: "+fmt.Sprintf("%#v", this.Ordinal)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "NotificationsEnabled: "+fmt.Sprintf("%#v", this.NotificationsEnabled)+",\n")
	s = append(s, "Hidden: "+fmt.Sprintf("%#v", this.Hidden)+",\n")
	s = append(s, "Template: "+fmt.Sprintf("%#v", this.Template)+",\n")
	s = append(s, "LongTitle: "+fmt.Sprintf("%#v", this.LongTitle)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "DefaultTemplate: "+fmt.Sprintf("%#v", this.DefaultTemplate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.Query{")
	if this.Expressions != nil {
		s = append(s, "Expressions: "+fmt.Sprintf("%#v", this.Expressions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Expr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.Expr{")
	s = append(s, "Not: "+fmt.Sprintf("%#v", this.Not)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Expr_Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Expr_Token{` +
		`Token:` + fmt.Sprintf("%#v", this.Token) + `}`}, ", ")
	return s
}
func (this *Expr_Flag_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Expr_Flag_{` +
		`Flag:` + fmt.Sprintf("%#v", this.Flag) + `}`}, ", ")
	return s
}
func (this *Expr_ThreadType_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Expr_ThreadType_{` +
		`ThreadType:` + fmt.Sprintf("%#v", this.ThreadType) + `}`}, ", ")
	return s
}
func (this *Expr_Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Expr_Tag{` +
		`Tag:` + fmt.Sprintf("%#v", this.Tag) + `}`}, ", ")
	return s
}
func (this *Attachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&threading.Attachment{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "ContentID: "+fmt.Sprintf("%#v", this.ContentID)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment_Image) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Image{` +
		`Image:` + fmt.Sprintf("%#v", this.Image) + `}`}, ", ")
	return s
}
func (this *Attachment_Audio) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Audio{` +
		`Audio:` + fmt.Sprintf("%#v", this.Audio) + `}`}, ", ")
	return s
}
func (this *Attachment_GenericURL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_GenericURL{` +
		`GenericURL:` + fmt.Sprintf("%#v", this.GenericURL) + `}`}, ", ")
	return s
}
func (this *Attachment_Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Visit{` +
		`Visit:` + fmt.Sprintf("%#v", this.Visit) + `}`}, ", ")
	return s
}
func (this *Attachment_CarePlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_CarePlan{` +
		`CarePlan:` + fmt.Sprintf("%#v", this.CarePlan) + `}`}, ", ")
	return s
}
func (this *Attachment_Video) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Video{` +
		`Video:` + fmt.Sprintf("%#v", this.Video) + `}`}, ", ")
	return s
}
func (this *Attachment_PaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_PaymentRequest{` +
		`PaymentRequest:` + fmt.Sprintf("%#v", this.PaymentRequest) + `}`}, ", ")
	return s
}
func (this *Attachment_Document) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.Attachment_Document{` +
		`Document:` + fmt.Sprintf("%#v", this.Document) + `}`}, ", ")
	return s
}
func (this *ImageAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.ImageAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VideoAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.VideoAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AudioAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.AudioAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "DurationNS: "+fmt.Sprintf("%#v", this.DurationNS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.DocumentAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericURLAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.GenericURLAttachment{")
	s = append(s, "Mimetype: "+fmt.Sprintf("%#v", this.Mimetype)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisitAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.VisitAttachment{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "VisitName: "+fmt.Sprintf("%#v", this.VisitName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.CarePlanAttachment{")
	s = append(s, "CarePlanID: "+fmt.Sprintf("%#v", this.CarePlanID)+",\n")
	s = append(s, "CarePlanName: "+fmt.Sprintf("%#v", this.CarePlanName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaymentRequestAttachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.PaymentRequestAttachment{")
	s = append(s, "PaymentID: "+fmt.Sprintf("%#v", this.PaymentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishedThreadItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.PublishedThreadItem{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessagePost) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&threading.MessagePost{")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destinations != nil {
		s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	}
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&threading.PostMessageRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	s = append(s, "DontNotify: "+fmt.Sprintf("%#v", this.DontNotify)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.DeprecatedSource != nil {
		s = append(s, "DeprecatedSource: "+fmt.Sprintf("%#v", this.DeprecatedSource)+",\n")
	}
	if this.DeprecatedDestinations != nil {
		s = append(s, "DeprecatedDestinations: "+fmt.Sprintf("%#v", this.DeprecatedDestinations)+",\n")
	}
	s = append(s, "DeprecatedInternal: "+fmt.Sprintf("%#v", this.DeprecatedInternal)+",\n")
	s = append(s, "DeprecatedText: "+fmt.Sprintf("%#v", this.DeprecatedText)+",\n")
	if this.DeprecatedAttachments != nil {
		s = append(s, "DeprecatedAttachments: "+fmt.Sprintf("%#v", this.DeprecatedAttachments)+",\n")
	}
	s = append(s, "DeprecatedTitle: "+fmt.Sprintf("%#v", this.DeprecatedTitle)+",\n")
	s = append(s, "DeprecatedSummary: "+fmt.Sprintf("%#v", this.DeprecatedSummary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.PostMessageResponse{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostMessagesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.PostMessagesRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	s = append(s, "DontNotify: "+fmt.Sprintf("%#v", this.DontNotify)+",\n")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PostMessagesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.PostMessagesResponse{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkThreadsAsReadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.MarkThreadsAsReadRequest{")
	if this.ThreadWatermarks != nil {
		s = append(s, "ThreadWatermarks: "+fmt.Sprintf("%#v", this.ThreadWatermarks)+",\n")
	}
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Seen: "+fmt.Sprintf("%#v", this.Seen)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkThreadsAsReadRequest_ThreadWatermark) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.MarkThreadsAsReadRequest_ThreadWatermark{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "LastMessageTimestamp: "+fmt.Sprintf("%#v", this.LastMessageTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkThreadsAsReadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.MarkThreadsAsReadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.ThreadItemsRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	if this.Iterator != nil {
		s = append(s, "Iterator: "+fmt.Sprintf("%#v", this.Iterator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemEdge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadItemEdge{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "Cursor: "+fmt.Sprintf("%#v", this.Cursor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadItemsResponse{")
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "HasMore: "+fmt.Sprintf("%#v", this.HasMore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryThreadsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&threading.QueryThreadsRequest{")
	s = append(s, "DeprecatedOrganizationID: "+fmt.Sprintf("%#v", this.DeprecatedOrganizationID)+",\n")
	if this.Iterator != nil {
		s = append(s, "Iterator: "+fmt.Sprintf("%#v", this.Iterator)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.QueryType != nil {
		s = append(s, "QueryType: "+fmt.Sprintf("%#v", this.QueryType)+",\n")
	}
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryThreadsRequest_Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.QueryThreadsRequest_Query{` +
		`Query:` + fmt.Sprintf("%#v", this.Query) + `}`}, ", ")
	return s
}
func (this *QueryThreadsRequest_SavedQueryID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.QueryThreadsRequest_SavedQueryID{` +
		`SavedQueryID:` + fmt.Sprintf("%#v", this.SavedQueryID) + `}`}, ", ")
	return s
}
func (this *ThreadEdge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadEdge{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "Cursor: "+fmt.Sprintf("%#v", this.Cursor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryThreadsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.QueryThreadsResponse{")
	if this.Edges != nil {
		s = append(s, "Edges: "+fmt.Sprintf("%#v", this.Edges)+",\n")
	}
	s = append(s, "HasMore: "+fmt.Sprintf("%#v", this.HasMore)+",\n")
	s = append(s, "TotalType: "+fmt.Sprintf("%#v", this.TotalType)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueriesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueriesRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueriesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueriesResponse{")
	if this.SavedQueries != nil {
		s = append(s, "SavedQueries: "+fmt.Sprintf("%#v", this.SavedQueries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSavedQueriesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.DeleteSavedQueriesRequest{")
	s = append(s, "SavedQueryIDs: "+fmt.Sprintf("%#v", this.SavedQueryIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSavedQueriesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteSavedQueriesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueryTemplatesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueryTemplatesRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueryTemplatesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueryTemplatesResponse{")
	if this.SavedQueries != nil {
		s = append(s, "SavedQueries: "+fmt.Sprintf("%#v", this.SavedQueries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadsRequest{")
	s = append(s, "ThreadIDs: "+fmt.Sprintf("%#v", this.ThreadIDs)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadsResponse{")
	if this.Threads != nil {
		s = append(s, "Threads: "+fmt.Sprintf("%#v", this.Threads)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSavedQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&threading.CreateSavedQueryRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "ShortTitle: "+fmt.Sprintf("%#v", this.ShortTitle)+",\n")
	s = append(s, "Ordinal: "+fmt.Sprintf("%#v", this.Ordinal)+",\n")
	s = append(s, "NotificationsEnabled: "+fmt.Sprintf("%#v", this.NotificationsEnabled)+",\n")
	s = append(s, "Hidden: "+fmt.Sprintf("%#v", this.Hidden)+",\n")
	s = append(s, "Template: "+fmt.Sprintf("%#v", this.Template)+",\n")
	s = append(s, "LongTitle: "+fmt.Sprintf("%#v", this.LongTitle)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSavedQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateSavedQueryResponse{")
	if this.SavedQuery != nil {
		s = append(s, "SavedQuery: "+fmt.Sprintf("%#v", this.SavedQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSavedQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&threading.UpdateSavedQueryRequest{")
	s = append(s, "SavedQueryID: "+fmt.Sprintf("%#v", this.SavedQueryID)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "ShortTitle: "+fmt.Sprintf("%#v", this.ShortTitle)+",\n")
	s = append(s, "Ordinal: "+fmt.Sprintf("%#v", this.Ordinal)+",\n")
	s = append(s, "ForceRebuild: "+fmt.Sprintf("%#v", this.ForceRebuild)+",\n")
	s = append(s, "NotificationsEnabled: "+fmt.Sprintf("%#v", this.NotificationsEnabled)+",\n")
	s = append(s, "LongTitle: "+fmt.Sprintf("%#v", this.LongTitle)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSavedQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.UpdateSavedQueryResponse{")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.DeleteMessageRequest{")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.DeleteThreadRequest{")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteThreadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&threading.UpdateThreadRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "AddMemberEntityIDs: "+fmt.Sprintf("%#v", this.AddMemberEntityIDs)+",\n")
	s = append(s, "RemoveMemberEntityIDs: "+fmt.Sprintf("%#v", this.RemoveMemberEntityIDs)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "AddFollowerEntityIDs: "+fmt.Sprintf("%#v", this.AddFollowerEntityIDs)+",\n")
	s = append(s, "RemoveFollowerEntityIDs: "+fmt.Sprintf("%#v", this.RemoveFollowerEntityIDs)+",\n")
	s = append(s, "AddTags: "+fmt.Sprintf("%#v", this.AddTags)+",\n")
	s = append(s, "RemoveTags: "+fmt.Sprintf("%#v", this.RemoveTags)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.UpdateThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&threading.CreateThreadRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "MemberEntityIDs: "+fmt.Sprintf("%#v", this.MemberEntityIDs)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "DontNotify: "+fmt.Sprintf("%#v", this.DontNotify)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.CreateThreadResponse{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	if this.ThreadItem != nil {
		s = append(s, "ThreadItem: "+fmt.Sprintf("%#v", this.ThreadItem)+",\n")
	}
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEmptyThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&threading.CreateEmptyThreadRequest{")
	s = append(s, "UUID: "+fmt.Sprintf("%#v", this.UUID)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "FromEntityID: "+fmt.Sprintf("%#v", this.FromEntityID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "MemberEntityIDs: "+fmt.Sprintf("%#v", this.MemberEntityIDs)+",\n")
	s = append(s, "SystemTitle: "+fmt.Sprintf("%#v", this.SystemTitle)+",\n")
	s = append(s, "Origin: "+fmt.Sprintf("%#v", this.Origin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateEmptyThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateEmptyThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadMembersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadMembersRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadMembersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadMembersResponse{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "FollowerEntityIDs: "+fmt.Sprintf("%#v", this.FollowerEntityIDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsForMemberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadsForMemberRequest{")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "PrimaryOnly: "+fmt.Sprintf("%#v", this.PrimaryOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadsForMemberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadsForMemberResponse{")
	if this.Threads != nil {
		s = append(s, "Threads: "+fmt.Sprintf("%#v", this.Threads)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueryRequest{")
	s = append(s, "SavedQueryID: "+fmt.Sprintf("%#v", this.SavedQueryID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedQueryResponse{")
	if this.SavedQuery != nil {
		s = append(s, "SavedQuery: "+fmt.Sprintf("%#v", this.SavedQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.ThreadItemRequest{")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "ViewerEntityID: "+fmt.Sprintf("%#v", this.ViewerEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadItemResponse{")
	if this.Item != nil {
		s = append(s, "Item: "+fmt.Sprintf("%#v", this.Item)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemViewDetailsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadItemViewDetailsRequest{")
	s = append(s, "ItemID: "+fmt.Sprintf("%#v", this.ItemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThreadItemViewDetailsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ThreadItemViewDetailsResponse{")
	if this.ItemViewDetails != nil {
		s = append(s, "ItemViewDetails: "+fmt.Sprintf("%#v", this.ItemViewDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLinkedThreadsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&threading.CreateLinkedThreadsRequest{")
	s = append(s, "Organization1ID: "+fmt.Sprintf("%#v", this.Organization1ID)+",\n")
	s = append(s, "Organization2ID: "+fmt.Sprintf("%#v", this.Organization2ID)+",\n")
	s = append(s, "PrimaryEntity1ID: "+fmt.Sprintf("%#v", this.PrimaryEntity1ID)+",\n")
	s = append(s, "PrimaryEntity2ID: "+fmt.Sprintf("%#v", this.PrimaryEntity2ID)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "MessageTitle: "+fmt.Sprintf("%#v", this.MessageTitle)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "PrependSenderThread1: "+fmt.Sprintf("%#v", this.PrependSenderThread1)+",\n")
	s = append(s, "PrependSenderThread2: "+fmt.Sprintf("%#v", this.PrependSenderThread2)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SystemTitle1: "+fmt.Sprintf("%#v", this.SystemTitle1)+",\n")
	s = append(s, "SystemTitle2: "+fmt.Sprintf("%#v", this.SystemTitle2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLinkedThreadsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.CreateLinkedThreadsResponse{")
	if this.Thread1 != nil {
		s = append(s, "Thread1: "+fmt.Sprintf("%#v", this.Thread1)+",\n")
	}
	if this.Thread2 != nil {
		s = append(s, "Thread2: "+fmt.Sprintf("%#v", this.Thread2)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOnboardingThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.CreateOnboardingThreadRequest{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "PrimaryEntityID: "+fmt.Sprintf("%#v", this.PrimaryEntityID)+",\n")
	s = append(s, "UserTitle: "+fmt.Sprintf("%#v", this.UserTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOnboardingThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateOnboardingThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkedThreadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.LinkedThreadRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LinkedThreadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.LinkedThreadResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "PrependSender: "+fmt.Sprintf("%#v", this.PrependSender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.KeyValue{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericSetupEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.GenericSetupEvent{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProvisionedPhoneEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ProvisionedPhoneEvent{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnboardingThreadEventRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&threading.OnboardingThreadEventRequest{")
	s = append(s, "LookupByType: "+fmt.Sprintf("%#v", this.LookupByType)+",\n")
	if this.LookupBy != nil {
		s = append(s, "LookupBy: "+fmt.Sprintf("%#v", this.LookupBy)+",\n")
	}
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnboardingThreadEventRequest_ThreadID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_ThreadID{` +
		`ThreadID:` + fmt.Sprintf("%#v", this.ThreadID) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventRequest_EntityID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_EntityID{` +
		`EntityID:` + fmt.Sprintf("%#v", this.EntityID) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventRequest_GenericSetup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_GenericSetup{` +
		`GenericSetup:` + fmt.Sprintf("%#v", this.GenericSetup) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventRequest_ProvisionedPhone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.OnboardingThreadEventRequest_ProvisionedPhone{` +
		`ProvisionedPhone:` + fmt.Sprintf("%#v", this.ProvisionedPhone) + `}`}, ", ")
	return s
}
func (this *OnboardingThreadEventResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.OnboardingThreadEventResponse{")
	if this.Thread != nil {
		s = append(s, "Thread: "+fmt.Sprintf("%#v", this.Thread)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&threading.SavedMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "CreatorEntityID: "+fmt.Sprintf("%#v", this.CreatorEntityID)+",\n")
	s = append(s, "OwnerEntityID: "+fmt.Sprintf("%#v", this.OwnerEntityID)+",\n")
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Modified: "+fmt.Sprintf("%#v", this.Modified)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedMessage_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.SavedMessage_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *IDList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.IDList{")
	s = append(s, "IDs: "+fmt.Sprintf("%#v", this.IDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedMessagesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.SavedMessagesRequest{")
	if this.By != nil {
		s = append(s, "By: "+fmt.Sprintf("%#v", this.By)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedMessagesRequest_IDs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.SavedMessagesRequest_IDs{` +
		`IDs:` + fmt.Sprintf("%#v", this.IDs) + `}`}, ", ")
	return s
}
func (this *SavedMessagesRequest_EntityIDs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.SavedMessagesRequest_EntityIDs{` +
		`EntityIDs:` + fmt.Sprintf("%#v", this.EntityIDs) + `}`}, ", ")
	return s
}
func (this *SavedMessagesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.SavedMessagesResponse{")
	if this.SavedMessages != nil {
		s = append(s, "SavedMessages: "+fmt.Sprintf("%#v", this.SavedMessages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSavedMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.CreateSavedMessageRequest{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "CreatorEntityID: "+fmt.Sprintf("%#v", this.CreatorEntityID)+",\n")
	s = append(s, "OwnerEntityID: "+fmt.Sprintf("%#v", this.OwnerEntityID)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSavedMessageRequest_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.CreateSavedMessageRequest_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *CreateSavedMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateSavedMessageResponse{")
	if this.SavedMessage != nil {
		s = append(s, "SavedMessage: "+fmt.Sprintf("%#v", this.SavedMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSavedMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.DeleteSavedMessageRequest{")
	s = append(s, "SavedMessageID: "+fmt.Sprintf("%#v", this.SavedMessageID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSavedMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteSavedMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSavedMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.UpdateSavedMessageRequest{")
	s = append(s, "SavedMessageID: "+fmt.Sprintf("%#v", this.SavedMessageID)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSavedMessageRequest_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.UpdateSavedMessageRequest_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *UpdateSavedMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.UpdateSavedMessageResponse{")
	if this.SavedMessage != nil {
		s = append(s, "SavedMessage: "+fmt.Sprintf("%#v", this.SavedMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&threading.ScheduledMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "ScheduledFor: "+fmt.Sprintf("%#v", this.ScheduledFor)+",\n")
	s = append(s, "SentAt: "+fmt.Sprintf("%#v", this.SentAt)+",\n")
	s = append(s, "SentThreadItemID: "+fmt.Sprintf("%#v", this.SentThreadItemID)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Modified: "+fmt.Sprintf("%#v", this.Modified)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledMessage_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ScheduledMessage_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *CreateScheduledMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&threading.CreateScheduledMessageRequest{")
	s = append(s, "ThreadID: "+fmt.Sprintf("%#v", this.ThreadID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "ScheduledFor: "+fmt.Sprintf("%#v", this.ScheduledFor)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateScheduledMessageRequest_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.CreateScheduledMessageRequest_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *CreateScheduledMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateScheduledMessageResponse{")
	if this.ScheduledMessage != nil {
		s = append(s, "ScheduledMessage: "+fmt.Sprintf("%#v", this.ScheduledMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteScheduledMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.DeleteScheduledMessageRequest{")
	s = append(s, "ScheduledMessageID: "+fmt.Sprintf("%#v", this.ScheduledMessageID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteScheduledMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteScheduledMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledMessagesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.ScheduledMessagesRequest{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.LookupKey != nil {
		s = append(s, "LookupKey: "+fmt.Sprintf("%#v", this.LookupKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduledMessagesRequest_ScheduledMessageID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ScheduledMessagesRequest_ScheduledMessageID{` +
		`ScheduledMessageID:` + fmt.Sprintf("%#v", this.ScheduledMessageID) + `}`}, ", ")
	return s
}
func (this *ScheduledMessagesRequest_ThreadID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.ScheduledMessagesRequest_ThreadID{` +
		`ThreadID:` + fmt.Sprintf("%#v", this.ThreadID) + `}`}, ", ")
	return s
}
func (this *ScheduledMessagesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.ScheduledMessagesResponse{")
	if this.ScheduledMessages != nil {
		s = append(s, "ScheduledMessages: "+fmt.Sprintf("%#v", this.ScheduledMessages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.UpdateMessageRequest{")
	s = append(s, "ThreadItemID: "+fmt.Sprintf("%#v", this.ThreadItemID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.UpdateMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.TagsRequest{")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "Prefix: "+fmt.Sprintf("%#v", this.Prefix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TagsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.TagsResponse{")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.Tag{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Hidden: "+fmt.Sprintf("%#v", this.Hidden)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggeredMessageKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.TriggeredMessageKey{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Subkey: "+fmt.Sprintf("%#v", this.Subkey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggeredMessageItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&threading.TriggeredMessageItem{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "TriggeredMessageID: "+fmt.Sprintf("%#v", this.TriggeredMessageID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	s = append(s, "Ordinal: "+fmt.Sprintf("%#v", this.Ordinal)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Modified: "+fmt.Sprintf("%#v", this.Modified)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggeredMessageItem_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.TriggeredMessageItem_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *TriggeredMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&threading.TriggeredMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "Modified: "+fmt.Sprintf("%#v", this.Modified)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTriggeredMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&threading.CreateTriggeredMessageRequest{")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTriggeredMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CreateTriggeredMessageResponse{")
	if this.TriggeredMessage != nil {
		s = append(s, "TriggeredMessage: "+fmt.Sprintf("%#v", this.TriggeredMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggeredMessagesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&threading.TriggeredMessagesRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	if this.LookupKey != nil {
		s = append(s, "LookupKey: "+fmt.Sprintf("%#v", this.LookupKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggeredMessagesRequest_Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&threading.TriggeredMessagesRequest_Key{` +
		`Key:` + fmt.Sprintf("%#v", this.Key) + `}`}, ", ")
	return s
}
func (this *TriggeredMessagesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.TriggeredMessagesResponse{")
	if this.TriggeredMessages != nil {
		s = append(s, "TriggeredMessages: "+fmt.Sprintf("%#v", this.TriggeredMessages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTriggeredMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.DeleteTriggeredMessageRequest{")
	s = append(s, "TriggeredMessageID: "+fmt.Sprintf("%#v", this.TriggeredMessageID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTriggeredMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&threading.DeleteTriggeredMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTriggeredMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.UpdateTriggeredMessageRequest{")
	s = append(s, "TriggeredMessageID: "+fmt.Sprintf("%#v", this.TriggeredMessageID)+",\n")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "UpdateEnabled: "+fmt.Sprintf("%#v", this.UpdateEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTriggeredMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.UpdateTriggeredMessageResponse{")
	if this.TriggeredMessage != nil {
		s = append(s, "TriggeredMessage: "+fmt.Sprintf("%#v", this.TriggeredMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloneAttachmentsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&threading.CloneAttachmentsRequest{")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "OwnerType: "+fmt.Sprintf("%#v", this.OwnerType)+",\n")
	s = append(s, "OwnerID: "+fmt.Sprintf("%#v", this.OwnerID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloneAttachmentsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&threading.CloneAttachmentsResponse{")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Threads service

type ThreadsClient interface {
	// CloneAttachments creates a clone of a list of attachments
	CloneAttachments(ctx context.Context, in *CloneAttachmentsRequest, opts ...grpc.CallOption) (*CloneAttachmentsResponse, error)
	// CreateEmptyThread creates a new thread with no messages
	CreateEmptyThread(ctx context.Context, in *CreateEmptyThreadRequest, opts ...grpc.CallOption) (*CreateEmptyThreadResponse, error)
	// CreateSavedQuery saves a query for later use
	CreateSavedQuery(ctx context.Context, in *CreateSavedQueryRequest, opts ...grpc.CallOption) (*CreateSavedQueryResponse, error)
	// CreateLinkedThreads creates a pair of threads in two separate organizations that allows cross-org communication.
	CreateLinkedThreads(ctx context.Context, in *CreateLinkedThreadsRequest, opts ...grpc.CallOption) (*CreateLinkedThreadsResponse, error)
	// CreateOnboardingThread create a new scripted onboarding thread.
	CreateOnboardingThread(ctx context.Context, in *CreateOnboardingThreadRequest, opts ...grpc.CallOption) (*CreateOnboardingThreadResponse, error)
	// CreateTriggeredMessage creates a new triggered message
	CreateTriggeredMessage(ctx context.Context, in *CreateTriggeredMessageRequest, opts ...grpc.CallOption) (*CreateTriggeredMessageResponse, error)
	// CreateSavedMessage creates a new saved message
	CreateSavedMessage(ctx context.Context, in *CreateSavedMessageRequest, opts ...grpc.CallOption) (*CreateSavedMessageResponse, error)
	// CreateScheduledMessage creates a new scheduled message
	CreateScheduledMessage(ctx context.Context, in *CreateScheduledMessageRequest, opts ...grpc.CallOption) (*CreateScheduledMessageResponse, error)
	// CreateThread create a new thread with an initial message
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	// DeleteMessage deletes a message from a thread
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// DeleteTriggeredMessage deleted triggered messages
	DeleteTriggeredMessage(ctx context.Context, in *DeleteTriggeredMessageRequest, opts ...grpc.CallOption) (*DeleteTriggeredMessageResponse, error)
	// DeleteSavedMessage deletes a saved message
	DeleteSavedMessage(ctx context.Context, in *DeleteSavedMessageRequest, opts ...grpc.CallOption) (*DeleteSavedMessageResponse, error)
	// DeleteSavedQueries delets the provided list of saved queries
	DeleteSavedQueries(ctx context.Context, in *DeleteSavedQueriesRequest, opts ...grpc.CallOption) (*DeleteSavedQueriesResponse, error)
	// DeleteScheduledMessage deletes a scheduled message
	DeleteScheduledMessage(ctx context.Context, in *DeleteScheduledMessageRequest, opts ...grpc.CallOption) (*DeleteScheduledMessageResponse, error)
	// DeleteThread deletes a thread
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error)
	// LinkedThread returns the linked thread of one exists
	LinkedThread(ctx context.Context, in *LinkedThreadRequest, opts ...grpc.CallOption) (*LinkedThreadResponse, error)
	// MarkThreadsAsRead marks all threads in the list as read.
	MarkThreadsAsRead(ctx context.Context, in *MarkThreadsAsReadRequest, opts ...grpc.CallOption) (*MarkThreadsAsReadResponse, error)
	// OnboardThreadEvent processes an event in an onboarding thread
	OnboardingThreadEvent(ctx context.Context, in *OnboardingThreadEventRequest, opts ...grpc.CallOption) (*OnboardingThreadEventResponse, error)
	// PostMessage posts a message into a specified thread
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error)
	// PostMessages posts a series of messages into a specified thread
	PostMessages(ctx context.Context, in *PostMessagesRequest, opts ...grpc.CallOption) (*PostMessagesResponse, error)
	// QueryThreads queries the list of threads in an organization
	QueryThreads(ctx context.Context, in *QueryThreadsRequest, opts ...grpc.CallOption) (*QueryThreadsResponse, error)
	// TriggeredMessages queries for triggered messages
	TriggeredMessages(ctx context.Context, in *TriggeredMessagesRequest, opts ...grpc.CallOption) (*TriggeredMessagesResponse, error)
	// SavedMessages queries for saved messages
	SavedMessages(ctx context.Context, in *SavedMessagesRequest, opts ...grpc.CallOption) (*SavedMessagesResponse, error)
	// ScheduledMessages queries for scheduled messages
	ScheduledMessages(ctx context.Context, in *ScheduledMessagesRequest, opts ...grpc.CallOption) (*ScheduledMessagesResponse, error)
	// SavedQuery returns a single saved query by ID
	SavedQuery(ctx context.Context, in *SavedQueryRequest, opts ...grpc.CallOption) (*SavedQueryResponse, error)
	// SavedQueries returns the list of saved queries for an org / entity pair
	SavedQueries(ctx context.Context, in *SavedQueriesRequest, opts ...grpc.CallOption) (*SavedQueriesResponse, error)
	// SavedQueryTemplates returns the list of saved query templates for an entity
	SavedQueryTemplates(ctx context.Context, in *SavedQueryTemplatesRequest, opts ...grpc.CallOption) (*SavedQueryTemplatesResponse, error)
	// Tags returns a list of tags for an organization
	Tags(ctx context.Context, in *TagsRequest, opts ...grpc.CallOption) (*TagsResponse, error)
	// DEPRECATED: Thread lookups and returns a single thread by ID
	Thread(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error)
	// Theads looks up list of threads.
	Threads(ctx context.Context, in *ThreadsRequest, opts ...grpc.CallOption) (*ThreadsResponse, error)
	// ThreadsForMember looks up a list of threads by entity membership
	ThreadsForMember(ctx context.Context, in *ThreadsForMemberRequest, opts ...grpc.CallOption) (*ThreadsForMemberResponse, error)
	// ThreadItem returns a single thread item
	ThreadItem(ctx context.Context, in *ThreadItemRequest, opts ...grpc.CallOption) (*ThreadItemResponse, error)
	// ThreadItems returns the items (messages or events) in a thread
	ThreadItems(ctx context.Context, in *ThreadItemsRequest, opts ...grpc.CallOption) (*ThreadItemsResponse, error)
	// ThreadMembers returns the members of a thread
	ThreadMembers(ctx context.Context, in *ThreadMembersRequest, opts ...grpc.CallOption) (*ThreadMembersResponse, error)
	// ThreadItemViewDetails returns the view details of a thread
	ThreadItemViewDetails(ctx context.Context, in *ThreadItemViewDetailsRequest, opts ...grpc.CallOption) (*ThreadItemViewDetailsResponse, error)
	// UpdateMessage updates a thread item that is a message by replacing the entire message
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	// UpdateSavedMessage updated a saved messages
	UpdateSavedMessage(ctx context.Context, in *UpdateSavedMessageRequest, opts ...grpc.CallOption) (*UpdateSavedMessageResponse, error)
	// UpdateSavedQuery updated a saved query
	UpdateSavedQuery(ctx context.Context, in *UpdateSavedQueryRequest, opts ...grpc.CallOption) (*UpdateSavedQueryResponse, error)
	// UpdateTriggeredMessage updates a specified triggered message
	UpdateTriggeredMessage(ctx context.Context, in *UpdateTriggeredMessageRequest, opts ...grpc.CallOption) (*UpdateTriggeredMessageResponse, error)
	// UpdateThread updates the thread members and other information
	UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*UpdateThreadResponse, error)
}

type threadsClient struct {
	cc *grpc.ClientConn
}

func NewThreadsClient(cc *grpc.ClientConn) ThreadsClient {
	return &threadsClient{cc}
}

func (c *threadsClient) CloneAttachments(ctx context.Context, in *CloneAttachmentsRequest, opts ...grpc.CallOption) (*CloneAttachmentsResponse, error) {
	out := new(CloneAttachmentsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CloneAttachments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateEmptyThread(ctx context.Context, in *CreateEmptyThreadRequest, opts ...grpc.CallOption) (*CreateEmptyThreadResponse, error) {
	out := new(CreateEmptyThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateEmptyThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateSavedQuery(ctx context.Context, in *CreateSavedQueryRequest, opts ...grpc.CallOption) (*CreateSavedQueryResponse, error) {
	out := new(CreateSavedQueryResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateSavedQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateLinkedThreads(ctx context.Context, in *CreateLinkedThreadsRequest, opts ...grpc.CallOption) (*CreateLinkedThreadsResponse, error) {
	out := new(CreateLinkedThreadsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateLinkedThreads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateOnboardingThread(ctx context.Context, in *CreateOnboardingThreadRequest, opts ...grpc.CallOption) (*CreateOnboardingThreadResponse, error) {
	out := new(CreateOnboardingThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateOnboardingThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateTriggeredMessage(ctx context.Context, in *CreateTriggeredMessageRequest, opts ...grpc.CallOption) (*CreateTriggeredMessageResponse, error) {
	out := new(CreateTriggeredMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateTriggeredMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateSavedMessage(ctx context.Context, in *CreateSavedMessageRequest, opts ...grpc.CallOption) (*CreateSavedMessageResponse, error) {
	out := new(CreateSavedMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateSavedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateScheduledMessage(ctx context.Context, in *CreateScheduledMessageRequest, opts ...grpc.CallOption) (*CreateScheduledMessageResponse, error) {
	out := new(CreateScheduledMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateScheduledMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	out := new(CreateThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/CreateThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteTriggeredMessage(ctx context.Context, in *DeleteTriggeredMessageRequest, opts ...grpc.CallOption) (*DeleteTriggeredMessageResponse, error) {
	out := new(DeleteTriggeredMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteTriggeredMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteSavedMessage(ctx context.Context, in *DeleteSavedMessageRequest, opts ...grpc.CallOption) (*DeleteSavedMessageResponse, error) {
	out := new(DeleteSavedMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteSavedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteSavedQueries(ctx context.Context, in *DeleteSavedQueriesRequest, opts ...grpc.CallOption) (*DeleteSavedQueriesResponse, error) {
	out := new(DeleteSavedQueriesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteSavedQueries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteScheduledMessage(ctx context.Context, in *DeleteScheduledMessageRequest, opts ...grpc.CallOption) (*DeleteScheduledMessageResponse, error) {
	out := new(DeleteScheduledMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteScheduledMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error) {
	out := new(DeleteThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/DeleteThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) LinkedThread(ctx context.Context, in *LinkedThreadRequest, opts ...grpc.CallOption) (*LinkedThreadResponse, error) {
	out := new(LinkedThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/LinkedThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) MarkThreadsAsRead(ctx context.Context, in *MarkThreadsAsReadRequest, opts ...grpc.CallOption) (*MarkThreadsAsReadResponse, error) {
	out := new(MarkThreadsAsReadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/MarkThreadsAsRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) OnboardingThreadEvent(ctx context.Context, in *OnboardingThreadEventRequest, opts ...grpc.CallOption) (*OnboardingThreadEventResponse, error) {
	out := new(OnboardingThreadEventResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/OnboardingThreadEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error) {
	out := new(PostMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/PostMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) PostMessages(ctx context.Context, in *PostMessagesRequest, opts ...grpc.CallOption) (*PostMessagesResponse, error) {
	out := new(PostMessagesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/PostMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) QueryThreads(ctx context.Context, in *QueryThreadsRequest, opts ...grpc.CallOption) (*QueryThreadsResponse, error) {
	out := new(QueryThreadsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/QueryThreads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) TriggeredMessages(ctx context.Context, in *TriggeredMessagesRequest, opts ...grpc.CallOption) (*TriggeredMessagesResponse, error) {
	out := new(TriggeredMessagesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/TriggeredMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) SavedMessages(ctx context.Context, in *SavedMessagesRequest, opts ...grpc.CallOption) (*SavedMessagesResponse, error) {
	out := new(SavedMessagesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/SavedMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ScheduledMessages(ctx context.Context, in *ScheduledMessagesRequest, opts ...grpc.CallOption) (*ScheduledMessagesResponse, error) {
	out := new(ScheduledMessagesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ScheduledMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) SavedQuery(ctx context.Context, in *SavedQueryRequest, opts ...grpc.CallOption) (*SavedQueryResponse, error) {
	out := new(SavedQueryResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/SavedQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) SavedQueries(ctx context.Context, in *SavedQueriesRequest, opts ...grpc.CallOption) (*SavedQueriesResponse, error) {
	out := new(SavedQueriesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/SavedQueries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) SavedQueryTemplates(ctx context.Context, in *SavedQueryTemplatesRequest, opts ...grpc.CallOption) (*SavedQueryTemplatesResponse, error) {
	out := new(SavedQueryTemplatesResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/SavedQueryTemplates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Tags(ctx context.Context, in *TagsRequest, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/Tags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Thread(ctx context.Context, in *ThreadRequest, opts ...grpc.CallOption) (*ThreadResponse, error) {
	out := new(ThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/Thread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) Threads(ctx context.Context, in *ThreadsRequest, opts ...grpc.CallOption) (*ThreadsResponse, error) {
	out := new(ThreadsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/Threads", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadsForMember(ctx context.Context, in *ThreadsForMemberRequest, opts ...grpc.CallOption) (*ThreadsForMemberResponse, error) {
	out := new(ThreadsForMemberResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadsForMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadItem(ctx context.Context, in *ThreadItemRequest, opts ...grpc.CallOption) (*ThreadItemResponse, error) {
	out := new(ThreadItemResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadItems(ctx context.Context, in *ThreadItemsRequest, opts ...grpc.CallOption) (*ThreadItemsResponse, error) {
	out := new(ThreadItemsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadItems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadMembers(ctx context.Context, in *ThreadMembersRequest, opts ...grpc.CallOption) (*ThreadMembersResponse, error) {
	out := new(ThreadMembersResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) ThreadItemViewDetails(ctx context.Context, in *ThreadItemViewDetailsRequest, opts ...grpc.CallOption) (*ThreadItemViewDetailsResponse, error) {
	out := new(ThreadItemViewDetailsResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/ThreadItemViewDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	out := new(UpdateMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateSavedMessage(ctx context.Context, in *UpdateSavedMessageRequest, opts ...grpc.CallOption) (*UpdateSavedMessageResponse, error) {
	out := new(UpdateSavedMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateSavedMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateSavedQuery(ctx context.Context, in *UpdateSavedQueryRequest, opts ...grpc.CallOption) (*UpdateSavedQueryResponse, error) {
	out := new(UpdateSavedQueryResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateSavedQuery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateTriggeredMessage(ctx context.Context, in *UpdateTriggeredMessageRequest, opts ...grpc.CallOption) (*UpdateTriggeredMessageResponse, error) {
	out := new(UpdateTriggeredMessageResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateTriggeredMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) UpdateThread(ctx context.Context, in *UpdateThreadRequest, opts ...grpc.CallOption) (*UpdateThreadResponse, error) {
	out := new(UpdateThreadResponse)
	err := grpc.Invoke(ctx, "/threading.Threads/UpdateThread", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Threads service

type ThreadsServer interface {
	// CloneAttachments creates a clone of a list of attachments
	CloneAttachments(context.Context, *CloneAttachmentsRequest) (*CloneAttachmentsResponse, error)
	// CreateEmptyThread creates a new thread with no messages
	CreateEmptyThread(context.Context, *CreateEmptyThreadRequest) (*CreateEmptyThreadResponse, error)
	// CreateSavedQuery saves a query for later use
	CreateSavedQuery(context.Context, *CreateSavedQueryRequest) (*CreateSavedQueryResponse, error)
	// CreateLinkedThreads creates a pair of threads in two separate organizations that allows cross-org communication.
	CreateLinkedThreads(context.Context, *CreateLinkedThreadsRequest) (*CreateLinkedThreadsResponse, error)
	// CreateOnboardingThread create a new scripted onboarding thread.
	CreateOnboardingThread(context.Context, *CreateOnboardingThreadRequest) (*CreateOnboardingThreadResponse, error)
	// CreateTriggeredMessage creates a new triggered message
	CreateTriggeredMessage(context.Context, *CreateTriggeredMessageRequest) (*CreateTriggeredMessageResponse, error)
	// CreateSavedMessage creates a new saved message
	CreateSavedMessage(context.Context, *CreateSavedMessageRequest) (*CreateSavedMessageResponse, error)
	// CreateScheduledMessage creates a new scheduled message
	CreateScheduledMessage(context.Context, *CreateScheduledMessageRequest) (*CreateScheduledMessageResponse, error)
	// CreateThread create a new thread with an initial message
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	// DeleteMessage deletes a message from a thread
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// DeleteTriggeredMessage deleted triggered messages
	DeleteTriggeredMessage(context.Context, *DeleteTriggeredMessageRequest) (*DeleteTriggeredMessageResponse, error)
	// DeleteSavedMessage deletes a saved message
	DeleteSavedMessage(context.Context, *DeleteSavedMessageRequest) (*DeleteSavedMessageResponse, error)
	// DeleteSavedQueries delets the provided list of saved queries
	DeleteSavedQueries(context.Context, *DeleteSavedQueriesRequest) (*DeleteSavedQueriesResponse, error)
	// DeleteScheduledMessage deletes a scheduled message
	DeleteScheduledMessage(context.Context, *DeleteScheduledMessageRequest) (*DeleteScheduledMessageResponse, error)
	// DeleteThread deletes a thread
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadResponse, error)
	// LinkedThread returns the linked thread of one exists
	LinkedThread(context.Context, *LinkedThreadRequest) (*LinkedThreadResponse, error)
	// MarkThreadsAsRead marks all threads in the list as read.
	MarkThreadsAsRead(context.Context, *MarkThreadsAsReadRequest) (*MarkThreadsAsReadResponse, error)
	// OnboardThreadEvent processes an event in an onboarding thread
	OnboardingThreadEvent(context.Context, *OnboardingThreadEventRequest) (*OnboardingThreadEventResponse, error)
	// PostMessage posts a message into a specified thread
	PostMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error)
	// PostMessages posts a series of messages into a specified thread
	PostMessages(context.Context, *PostMessagesRequest) (*PostMessagesResponse, error)
	// QueryThreads queries the list of threads in an organization
	QueryThreads(context.Context, *QueryThreadsRequest) (*QueryThreadsResponse, error)
	// TriggeredMessages queries for triggered messages
	TriggeredMessages(context.Context, *TriggeredMessagesRequest) (*TriggeredMessagesResponse, error)
	// SavedMessages queries for saved messages
	SavedMessages(context.Context, *SavedMessagesRequest) (*SavedMessagesResponse, error)
	// ScheduledMessages queries for scheduled messages
	ScheduledMessages(context.Context, *ScheduledMessagesRequest) (*ScheduledMessagesResponse, error)
	// SavedQuery returns a single saved query by ID
	SavedQuery(context.Context, *SavedQueryRequest) (*SavedQueryResponse, error)
	// SavedQueries returns the list of saved queries for an org / entity pair
	SavedQueries(context.Context, *SavedQueriesRequest) (*SavedQueriesResponse, error)
	// SavedQueryTemplates returns the list of saved query templates for an entity
	SavedQueryTemplates(context.Context, *SavedQueryTemplatesRequest) (*SavedQueryTemplatesResponse, error)
	// Tags returns a list of tags for an organization
	Tags(context.Context, *TagsRequest) (*TagsResponse, error)
	// DEPRECATED: Thread lookups and returns a single thread by ID
	Thread(context.Context, *ThreadRequest) (*ThreadResponse, error)
	// Theads looks up list of threads.
	Threads(context.Context, *ThreadsRequest) (*ThreadsResponse, error)
	// ThreadsForMember looks up a list of threads by entity membership
	ThreadsForMember(context.Context, *ThreadsForMemberRequest) (*ThreadsForMemberResponse, error)
	// ThreadItem returns a single thread item
	ThreadItem(context.Context, *ThreadItemRequest) (*ThreadItemResponse, error)
	// ThreadItems returns the items (messages or events) in a thread
	ThreadItems(context.Context, *ThreadItemsRequest) (*ThreadItemsResponse, error)
	// ThreadMembers returns the members of a thread
	ThreadMembers(context.Context, *ThreadMembersRequest) (*ThreadMembersResponse, error)
	// ThreadItemViewDetails returns the view details of a thread
	ThreadItemViewDetails(context.Context, *ThreadItemViewDetailsRequest) (*ThreadItemViewDetailsResponse, error)
	// UpdateMessage updates a thread item that is a message by replacing the entire message
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	// UpdateSavedMessage updated a saved messages
	UpdateSavedMessage(context.Context, *UpdateSavedMessageRequest) (*UpdateSavedMessageResponse, error)
	// UpdateSavedQuery updated a saved query
	UpdateSavedQuery(context.Context, *UpdateSavedQueryRequest) (*UpdateSavedQueryResponse, error)
	// UpdateTriggeredMessage updates a specified triggered message
	UpdateTriggeredMessage(context.Context, *UpdateTriggeredMessageRequest) (*UpdateTriggeredMessageResponse, error)
	// UpdateThread updates the thread members and other information
	UpdateThread(context.Context, *UpdateThreadRequest) (*UpdateThreadResponse, error)
}

func RegisterThreadsServer(s *grpc.Server, srv ThreadsServer) {
	s.RegisterService(&_Threads_serviceDesc, srv)
}

func _Threads_CloneAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CloneAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CloneAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CloneAttachments(ctx, req.(*CloneAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateEmptyThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmptyThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateEmptyThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateEmptyThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateEmptyThread(ctx, req.(*CreateEmptyThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateSavedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSavedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateSavedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateSavedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateSavedQuery(ctx, req.(*CreateSavedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateLinkedThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkedThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateLinkedThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateLinkedThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateLinkedThreads(ctx, req.(*CreateLinkedThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateOnboardingThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOnboardingThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateOnboardingThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateOnboardingThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateOnboardingThread(ctx, req.(*CreateOnboardingThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateTriggeredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTriggeredMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateTriggeredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateTriggeredMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateTriggeredMessage(ctx, req.(*CreateTriggeredMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateSavedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSavedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateSavedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateSavedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateSavedMessage(ctx, req.(*CreateSavedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateScheduledMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateScheduledMessage(ctx, req.(*CreateScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteTriggeredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTriggeredMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteTriggeredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteTriggeredMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteTriggeredMessage(ctx, req.(*DeleteTriggeredMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteSavedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteSavedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteSavedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteSavedMessage(ctx, req.(*DeleteSavedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteSavedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSavedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteSavedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteSavedQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteSavedQueries(ctx, req.(*DeleteSavedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteScheduledMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduledMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteScheduledMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteScheduledMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteScheduledMessage(ctx, req.(*DeleteScheduledMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_LinkedThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkedThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).LinkedThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/LinkedThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).LinkedThread(ctx, req.(*LinkedThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_MarkThreadsAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkThreadsAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).MarkThreadsAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/MarkThreadsAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).MarkThreadsAsRead(ctx, req.(*MarkThreadsAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_OnboardingThreadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardingThreadEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).OnboardingThreadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/OnboardingThreadEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).OnboardingThreadEvent(ctx, req.(*OnboardingThreadEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).PostMessage(ctx, req.(*PostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_PostMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).PostMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/PostMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).PostMessages(ctx, req.(*PostMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_QueryThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).QueryThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/QueryThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).QueryThreads(ctx, req.(*QueryThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_TriggeredMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggeredMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).TriggeredMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/TriggeredMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).TriggeredMessages(ctx, req.(*TriggeredMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_SavedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).SavedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/SavedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).SavedMessages(ctx, req.(*SavedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ScheduledMessages(ctx, req.(*ScheduledMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_SavedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).SavedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/SavedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).SavedQuery(ctx, req.(*SavedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_SavedQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).SavedQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/SavedQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).SavedQueries(ctx, req.(*SavedQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_SavedQueryTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedQueryTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).SavedQueryTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/SavedQueryTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).SavedQueryTemplates(ctx, req.(*SavedQueryTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Tags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Tags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/Tags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Tags(ctx, req.(*TagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Thread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Thread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/Thread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Thread(ctx, req.(*ThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_Threads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).Threads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/Threads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).Threads(ctx, req.(*ThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadsForMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadsForMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadsForMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadsForMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadsForMember(ctx, req.(*ThreadsForMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadItem(ctx, req.(*ThreadItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadItems(ctx, req.(*ThreadItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadMembers(ctx, req.(*ThreadMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_ThreadItemViewDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadItemViewDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).ThreadItemViewDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/ThreadItemViewDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).ThreadItemViewDetails(ctx, req.(*ThreadItemViewDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateSavedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSavedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateSavedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateSavedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateSavedMessage(ctx, req.(*UpdateSavedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateSavedQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSavedQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateSavedQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateSavedQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateSavedQuery(ctx, req.(*UpdateSavedQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateTriggeredMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTriggeredMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateTriggeredMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateTriggeredMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateTriggeredMessage(ctx, req.(*UpdateTriggeredMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_UpdateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).UpdateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/threading.Threads/UpdateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).UpdateThread(ctx, req.(*UpdateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Threads_serviceDesc = grpc.ServiceDesc{
	ServiceName: "threading.Threads",
	HandlerType: (*ThreadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloneAttachments",
			Handler:    _Threads_CloneAttachments_Handler,
		},
		{
			MethodName: "CreateEmptyThread",
			Handler:    _Threads_CreateEmptyThread_Handler,
		},
		{
			MethodName: "CreateSavedQuery",
			Handler:    _Threads_CreateSavedQuery_Handler,
		},
		{
			MethodName: "CreateLinkedThreads",
			Handler:    _Threads_CreateLinkedThreads_Handler,
		},
		{
			MethodName: "CreateOnboardingThread",
			Handler:    _Threads_CreateOnboardingThread_Handler,
		},
		{
			MethodName: "CreateTriggeredMessage",
			Handler:    _Threads_CreateTriggeredMessage_Handler,
		},
		{
			MethodName: "CreateSavedMessage",
			Handler:    _Threads_CreateSavedMessage_Handler,
		},
		{
			MethodName: "CreateScheduledMessage",
			Handler:    _Threads_CreateScheduledMessage_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _Threads_CreateThread_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Threads_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteTriggeredMessage",
			Handler:    _Threads_DeleteTriggeredMessage_Handler,
		},
		{
			MethodName: "DeleteSavedMessage",
			Handler:    _Threads_DeleteSavedMessage_Handler,
		},
		{
			MethodName: "DeleteSavedQueries",
			Handler:    _Threads_DeleteSavedQueries_Handler,
		},
		{
			MethodName: "DeleteScheduledMessage",
			Handler:    _Threads_DeleteScheduledMessage_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _Threads_DeleteThread_Handler,
		},
		{
			MethodName: "LinkedThread",
			Handler:    _Threads_LinkedThread_Handler,
		},
		{
			MethodName: "MarkThreadsAsRead",
			Handler:    _Threads_MarkThreadsAsRead_Handler,
		},
		{
			MethodName: "OnboardingThreadEvent",
			Handler:    _Threads_OnboardingThreadEvent_Handler,
		},
		{
			MethodName: "PostMessage",
			Handler:    _Threads_PostMessage_Handler,
		},
		{
			MethodName: "PostMessages",
			Handler:    _Threads_PostMessages_Handler,
		},
		{
			MethodName: "QueryThreads",
			Handler:    _Threads_QueryThreads_Handler,
		},
		{
			MethodName: "TriggeredMessages",
			Handler:    _Threads_TriggeredMessages_Handler,
		},
		{
			MethodName: "SavedMessages",
			Handler:    _Threads_SavedMessages_Handler,
		},
		{
			MethodName: "ScheduledMessages",
			Handler:    _Threads_ScheduledMessages_Handler,
		},
		{
			MethodName: "SavedQuery",
			Handler:    _Threads_SavedQuery_Handler,
		},
		{
			MethodName: "SavedQueries",
			Handler:    _Threads_SavedQueries_Handler,
		},
		{
			MethodName: "SavedQueryTemplates",
			Handler:    _Threads_SavedQueryTemplates_Handler,
		},
		{
			MethodName: "Tags",
			Handler:    _Threads_Tags_Handler,
		},
		{
			MethodName: "Thread",
			Handler:    _Threads_Thread_Handler,
		},
		{
			MethodName: "Threads",
			Handler:    _Threads_Threads_Handler,
		},
		{
			MethodName: "ThreadsForMember",
			Handler:    _Threads_ThreadsForMember_Handler,
		},
		{
			MethodName: "ThreadItem",
			Handler:    _Threads_ThreadItem_Handler,
		},
		{
			MethodName: "ThreadItems",
			Handler:    _Threads_ThreadItems_Handler,
		},
		{
			MethodName: "ThreadMembers",
			Handler:    _Threads_ThreadMembers_Handler,
		},
		{
			MethodName: "ThreadItemViewDetails",
			Handler:    _Threads_ThreadItemViewDetails_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Threads_UpdateMessage_Handler,
		},
		{
			MethodName: "UpdateSavedMessage",
			Handler:    _Threads_UpdateSavedMessage_Handler,
		},
		{
			MethodName: "UpdateSavedQuery",
			Handler:    _Threads_UpdateSavedQuery_Handler,
		},
		{
			MethodName: "UpdateTriggeredMessage",
			Handler:    _Threads_UpdateTriggeredMessage_Handler,
		},
		{
			MethodName: "UpdateThread",
			Handler:    _Threads_UpdateThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}

func (m *Iterator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Iterator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StartCursor) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.StartCursor)))
		i += copy(dAtA[i:], m.StartCursor)
	}
	if len(m.EndCursor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EndCursor)))
		i += copy(dAtA[i:], m.EndCursor)
	}
	if m.Direction != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Direction))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *Thread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thread) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.PrimaryEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PrimaryEntityID)))
		i += copy(dAtA[i:], m.PrimaryEntityID)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastMessageTimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.LastMessageTimestamp))
	}
	if len(m.LastMessageSummary) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.LastMessageSummary)))
		i += copy(dAtA[i:], m.LastMessageSummary)
	}
	if m.Unread {
		dAtA[i] = 0x38
		i++
		if m.Unread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LastPrimaryEntityEndpoints) > 0 {
		for _, msg := range m.LastPrimaryEntityEndpoints {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedTimestamp != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.CreatedTimestamp))
	}
	if m.MessageCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.MessageCount))
	}
	if m.Type != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.SystemTitle) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SystemTitle)))
		i += copy(dAtA[i:], m.SystemTitle)
	}
	if len(m.UserTitle) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UserTitle)))
		i += copy(dAtA[i:], m.UserTitle)
	}
	if m.UnreadReference {
		dAtA[i] = 0x70
		i++
		if m.UnreadReference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Origin != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Origin))
	}
	return i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	return i, nil
}

func (m *ThreadItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.CreatedTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.CreatedTimestamp))
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if m.Internal {
		dAtA[i] = 0x20
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x28
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if m.ModifiedTimestamp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ModifiedTimestamp))
	}
	if m.Item != nil {
		nn1, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ThreadItem_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n2, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ThreadItem_MessageUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MessageUpdate != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.MessageUpdate.Size()))
		n3, err := m.MessageUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ThreadItem_MessageDelete) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MessageDelete != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.MessageDelete.Size()))
		n4, err := m.MessageDelete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ThreadItemViewDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemViewDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadItemID)))
		i += copy(dAtA[i:], m.ThreadItemID)
	}
	if len(m.EntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	if m.ViewTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ViewTime))
	}
	return i, nil
}

func (m *Reference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Source != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Source.Size()))
		n5, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.TextRefs) > 0 {
		for _, msg := range m.TextRefs {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Summary) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Summary)))
		i += copy(dAtA[i:], m.Summary)
	}
	return i, nil
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Channel))
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	return i, nil
}

func (m *MessageUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadItemID)))
		i += copy(dAtA[i:], m.ThreadItemID)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n6, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MessageDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageDelete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadItemID)))
		i += copy(dAtA[i:], m.ThreadItemID)
	}
	return i, nil
}

func (m *SavedQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if m.Query != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Query.Size()))
		n7, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.ShortTitle) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ShortTitle)))
		i += copy(dAtA[i:], m.ShortTitle)
	}
	if m.Unread != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Unread))
	}
	if m.Total != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Total))
	}
	if m.Ordinal != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Ordinal))
	}
	if len(m.EntityID) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	if m.NotificationsEnabled {
		dAtA[i] = 0x48
		i++
		if m.NotificationsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Hidden {
		dAtA[i] = 0x50
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Template {
		dAtA[i] = 0x58
		i++
		if m.Template {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LongTitle) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.LongTitle)))
		i += copy(dAtA[i:], m.LongTitle)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.DefaultTemplate {
		dAtA[i] = 0x70
		i++
		if m.DefaultTemplate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Expressions) > 0 {
		for _, msg := range m.Expressions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Expr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Not {
		dAtA[i] = 0x8
		i++
		if m.Not {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Value != nil {
		nn8, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	return i, nil
}

func (m *Expr_Token) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	return i, nil
}
func (m *Expr_Flag_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintSvc(dAtA, i, uint64(m.Flag))
	return i, nil
}
func (m *Expr_ThreadType_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintSvc(dAtA, i, uint64(m.ThreadType))
	return i, nil
}
func (m *Expr_Tag) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.Tag)))
	i += copy(dAtA[i:], m.Tag)
	return i, nil
}
func (m *Attachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.UserTitle) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UserTitle)))
		i += copy(dAtA[i:], m.UserTitle)
	}
	if len(m.ContentID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ContentID)))
		i += copy(dAtA[i:], m.ContentID)
	}
	if m.Data != nil {
		nn9, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *Attachment_Image) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Image != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Image.Size()))
		n10, err := m.Image.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Attachment_Audio) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Audio != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Audio.Size()))
		n11, err := m.Audio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Attachment_GenericURL) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GenericURL != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.GenericURL.Size()))
		n12, err := m.GenericURL.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Attachment_Visit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Visit != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Visit.Size()))
		n13, err := m.Visit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Attachment_CarePlan) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CarePlan != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.CarePlan.Size()))
		n14, err := m.CarePlan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Attachment_Video) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Video != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Video.Size()))
		n15, err := m.Video.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Attachment_PaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PaymentRequest != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.PaymentRequest.Size()))
		n16, err := m.PaymentRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Attachment_Document) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Document != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Document.Size()))
		n17, err := m.Document.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ImageAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Mimetype)))
		i += copy(dAtA[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.MediaID)))
		i += copy(dAtA[i:], m.MediaID)
	}
	if m.Width != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *VideoAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Mimetype)))
		i += copy(dAtA[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.MediaID)))
		i += copy(dAtA[i:], m.MediaID)
	}
	if m.DurationNS != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.DurationNS))
	}
	return i, nil
}

func (m *AudioAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Mimetype)))
		i += copy(dAtA[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.MediaID)))
		i += copy(dAtA[i:], m.MediaID)
	}
	if m.DurationNS != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.DurationNS))
	}
	return i, nil
}

func (m *DocumentAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Mimetype)))
		i += copy(dAtA[i:], m.Mimetype)
	}
	if len(m.MediaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.MediaID)))
		i += copy(dAtA[i:], m.MediaID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GenericURLAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericURLAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mimetype) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Mimetype)))
		i += copy(dAtA[i:], m.Mimetype)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	return i, nil
}

func (m *VisitAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VisitAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.VisitID)))
		i += copy(dAtA[i:], m.VisitID)
	}
	if len(m.VisitName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.VisitName)))
		i += copy(dAtA[i:], m.VisitName)
	}
	return i, nil
}

func (m *CarePlanAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarePlanAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CarePlanID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.CarePlanID)))
		i += copy(dAtA[i:], m.CarePlanID)
	}
	if len(m.CarePlanName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.CarePlanName)))
		i += copy(dAtA[i:], m.CarePlanName)
	}
	return i, nil
}

func (m *PaymentRequestAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentRequestAttachment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PaymentID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PaymentID)))
		i += copy(dAtA[i:], m.PaymentID)
	}
	return i, nil
}

func (m *PublishedThreadItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishedThreadItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.PrimaryEntityID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PrimaryEntityID)))
		i += copy(dAtA[i:], m.PrimaryEntityID)
	}
	if m.Item != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Item.Size()))
		n18, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *MessagePost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePost) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Source.Size()))
		n19, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Internal {
		dAtA[i] = 0x18
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Summary) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Summary)))
		i += copy(dAtA[i:], m.Summary)
	}
	return i, nil
}

func (m *PostMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.FromEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.FromEntityID)))
		i += copy(dAtA[i:], m.FromEntityID)
	}
	if m.DeprecatedSource != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.DeprecatedSource.Size()))
		n20, err := m.DeprecatedSource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.DeprecatedDestinations) > 0 {
		for _, msg := range m.DeprecatedDestinations {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DeprecatedInternal {
		dAtA[i] = 0x30
		i++
		if m.DeprecatedInternal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DeprecatedText) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.DeprecatedText)))
		i += copy(dAtA[i:], m.DeprecatedText)
	}
	if len(m.DeprecatedAttachments) > 0 {
		for _, msg := range m.DeprecatedAttachments {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DeprecatedTitle) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.DeprecatedTitle)))
		i += copy(dAtA[i:], m.DeprecatedTitle)
	}
	if len(m.DeprecatedSummary) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.DeprecatedSummary)))
		i += copy(dAtA[i:], m.DeprecatedSummary)
	}
	if m.DontNotify {
		dAtA[i] = 0x58
		i++
		if m.DontNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Message != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n21, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *PostMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Item.Size()))
		n22, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Thread != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n23, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *PostMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.FromEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.FromEntityID)))
		i += copy(dAtA[i:], m.FromEntityID)
	}
	if m.DontNotify {
		dAtA[i] = 0x58
		i++
		if m.DontNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x62
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PostMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Thread != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n24, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *MarkThreadsAsReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkThreadsAsReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadWatermarks) > 0 {
		for _, msg := range m.ThreadWatermarks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Timestamp))
	}
	if m.Seen {
		dAtA[i] = 0x20
		i++
		if m.Seen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if m.LastMessageTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.LastMessageTimestamp))
	}
	return i, nil
}

func (m *MarkThreadsAsReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkThreadsAsReadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ThreadItemsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.ViewerEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ViewerEntityID)))
		i += copy(dAtA[i:], m.ViewerEntityID)
	}
	if m.Iterator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Iterator.Size()))
		n25, err := m.Iterator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *ThreadItemEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemEdge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Item.Size()))
		n26, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.Cursor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Cursor)))
		i += copy(dAtA[i:], m.Cursor)
	}
	return i, nil
}

func (m *ThreadItemsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasMore {
		dAtA[i] = 0x10
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *QueryThreadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThreadsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeprecatedOrganizationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.DeprecatedOrganizationID)))
		i += copy(dAtA[i:], m.DeprecatedOrganizationID)
	}
	if m.Iterator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Iterator.Size()))
		n27, err := m.Iterator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.ViewerEntityID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ViewerEntityID)))
		i += copy(dAtA[i:], m.ViewerEntityID)
	}
	if m.QueryType != nil {
		nn28, err := m.QueryType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn28
	}
	return i, nil
}

func (m *QueryThreadsRequest_Query) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Query != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Query.Size()))
		n29, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *QueryThreadsRequest_SavedQueryID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x5a
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.SavedQueryID)))
	i += copy(dAtA[i:], m.SavedQueryID)
	return i, nil
}
func (m *ThreadEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadEdge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n30, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.Cursor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Cursor)))
		i += copy(dAtA[i:], m.Cursor)
	}
	return i, nil
}

func (m *QueryThreadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThreadsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasMore {
		dAtA[i] = 0x10
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TotalType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.TotalType))
	}
	if m.Total != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *SavedQueriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQueriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	return i, nil
}

func (m *SavedQueriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQueriesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueries) > 0 {
		for _, msg := range m.SavedQueries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteSavedQueriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSavedQueriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueryIDs) > 0 {
		for _, s := range m.SavedQueryIDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DeleteSavedQueriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSavedQueriesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SavedQueryTemplatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQueryTemplatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	return i, nil
}

func (m *SavedQueryTemplatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQueryTemplatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueries) > 0 {
		for _, msg := range m.SavedQueries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.ViewerEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ViewerEntityID)))
		i += copy(dAtA[i:], m.ViewerEntityID)
	}
	return i, nil
}

func (m *ThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n31, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ThreadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadIDs) > 0 {
		for _, s := range m.ThreadIDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ViewerEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ViewerEntityID)))
		i += copy(dAtA[i:], m.ViewerEntityID)
	}
	return i, nil
}

func (m *ThreadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, msg := range m.Threads {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSavedQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSavedQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.EntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	if m.Query != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Query.Size()))
		n32, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if len(m.ShortTitle) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ShortTitle)))
		i += copy(dAtA[i:], m.ShortTitle)
	}
	if m.Ordinal != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Ordinal))
	}
	if m.NotificationsEnabled {
		dAtA[i] = 0x30
		i++
		if m.NotificationsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Hidden {
		dAtA[i] = 0x38
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Template {
		dAtA[i] = 0x40
		i++
		if m.Template {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LongTitle) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.LongTitle)))
		i += copy(dAtA[i:], m.LongTitle)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *CreateSavedQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSavedQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SavedQuery != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.SavedQuery.Size()))
		n33, err := m.SavedQuery.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *UpdateSavedQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSavedQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueryID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SavedQueryID)))
		i += copy(dAtA[i:], m.SavedQueryID)
	}
	if m.Query != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Query.Size()))
		n34, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if len(m.ShortTitle) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ShortTitle)))
		i += copy(dAtA[i:], m.ShortTitle)
	}
	if m.Ordinal != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Ordinal))
	}
	if m.ForceRebuild {
		dAtA[i] = 0x28
		i++
		if m.ForceRebuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NotificationsEnabled != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.NotificationsEnabled))
	}
	if len(m.LongTitle) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.LongTitle)))
		i += copy(dAtA[i:], m.LongTitle)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *UpdateSavedQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSavedQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Query != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Query.Size()))
		n35, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *DeleteMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if len(m.ThreadItemID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadItemID)))
		i += copy(dAtA[i:], m.ThreadItemID)
	}
	return i, nil
}

func (m *DeleteMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	return i, nil
}

func (m *DeleteThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if len(m.UserTitle) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UserTitle)))
		i += copy(dAtA[i:], m.UserTitle)
	}
	if len(m.AddMemberEntityIDs) > 0 {
		for _, s := range m.AddMemberEntityIDs {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RemoveMemberEntityIDs) > 0 {
		for _, s := range m.RemoveMemberEntityIDs {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SystemTitle) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SystemTitle)))
		i += copy(dAtA[i:], m.SystemTitle)
	}
	if len(m.AddFollowerEntityIDs) > 0 {
		for _, s := range m.AddFollowerEntityIDs {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RemoveFollowerEntityIDs) > 0 {
		for _, s := range m.RemoveFollowerEntityIDs {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AddTags) > 0 {
		for _, s := range m.AddTags {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RemoveTags) > 0 {
		for _, s := range m.RemoveTags {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UpdateThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n36, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *CreateThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.FromEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.FromEntityID)))
		i += copy(dAtA[i:], m.FromEntityID)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Message != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n37, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if len(m.UserTitle) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UserTitle)))
		i += copy(dAtA[i:], m.UserTitle)
	}
	if m.Type != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SystemTitle) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SystemTitle)))
		i += copy(dAtA[i:], m.SystemTitle)
	}
	if m.Origin != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Origin))
	}
	if m.DontNotify {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.DontNotify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if m.ThreadItem != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ThreadItem.Size()))
		n38, err := m.ThreadItem.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Thread != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n39, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *CreateEmptyThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEmptyThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.FromEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.FromEntityID)))
		i += copy(dAtA[i:], m.FromEntityID)
	}
	if len(m.PrimaryEntityID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PrimaryEntityID)))
		i += copy(dAtA[i:], m.PrimaryEntityID)
	}
	if len(m.Summary) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Summary)))
		i += copy(dAtA[i:], m.Summary)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.UserTitle) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UserTitle)))
		i += copy(dAtA[i:], m.UserTitle)
	}
	if m.Type != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SystemTitle) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SystemTitle)))
		i += copy(dAtA[i:], m.SystemTitle)
	}
	if m.Origin != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Origin))
	}
	return i, nil
}

func (m *CreateEmptyThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEmptyThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n40, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *ThreadMembersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadMembersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	return i, nil
}

func (m *ThreadMembersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadMembersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FollowerEntityIDs) > 0 {
		for _, s := range m.FollowerEntityIDs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ThreadsForMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadsForMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
		i += copy(dAtA[i:], m.EntityID)
	}
	if m.PrimaryOnly {
		dAtA[i] = 0x10
		i++
		if m.PrimaryOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ThreadsForMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadsForMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, msg := range m.Threads {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SavedQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedQueryID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SavedQueryID)))
		i += copy(dAtA[i:], m.SavedQueryID)
	}
	return i, nil
}

func (m *SavedQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SavedQuery != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.SavedQuery.Size()))
		n41, err := m.SavedQuery.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *ThreadItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ItemID)))
		i += copy(dAtA[i:], m.ItemID)
	}
	if len(m.ViewerEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ViewerEntityID)))
		i += copy(dAtA[i:], m.ViewerEntityID)
	}
	return i, nil
}

func (m *ThreadItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Item.Size()))
		n42, err := m.Item.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *ThreadItemViewDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemViewDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ItemID)))
		i += copy(dAtA[i:], m.ItemID)
	}
	return i, nil
}

func (m *ThreadItemViewDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadItemViewDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ItemViewDetails) > 0 {
		for _, msg := range m.ItemViewDetails {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateLinkedThreadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLinkedThreadsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organization1ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Organization1ID)))
		i += copy(dAtA[i:], m.Organization1ID)
	}
	if len(m.Organization2ID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Organization2ID)))
		i += copy(dAtA[i:], m.Organization2ID)
	}
	if len(m.PrimaryEntity1ID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PrimaryEntity1ID)))
		i += copy(dAtA[i:], m.PrimaryEntity1ID)
	}
	if len(m.PrimaryEntity2ID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PrimaryEntity2ID)))
		i += copy(dAtA[i:], m.PrimaryEntity2ID)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.MessageTitle) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.MessageTitle)))
		i += copy(dAtA[i:], m.MessageTitle)
	}
	if len(m.Summary) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Summary)))
		i += copy(dAtA[i:], m.Summary)
	}
	if m.PrependSenderThread1 {
		dAtA[i] = 0x40
		i++
		if m.PrependSenderThread1 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrependSenderThread2 {
		dAtA[i] = 0x48
		i++
		if m.PrependSenderThread2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Type != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Type))
	}
	if len(m.SystemTitle1) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SystemTitle1)))
		i += copy(dAtA[i:], m.SystemTitle1)
	}
	if len(m.SystemTitle2) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SystemTitle2)))
		i += copy(dAtA[i:], m.SystemTitle2)
	}
	return i, nil
}

func (m *CreateLinkedThreadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLinkedThreadsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread1.Size()))
		n43, err := m.Thread1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.Thread2 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread2.Size()))
		n44, err := m.Thread2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *CreateOnboardingThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOnboardingThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.PrimaryEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PrimaryEntityID)))
		i += copy(dAtA[i:], m.PrimaryEntityID)
	}
	if len(m.UserTitle) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.UserTitle)))
		i += copy(dAtA[i:], m.UserTitle)
	}
	return i, nil
}

func (m *CreateOnboardingThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOnboardingThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n45, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *LinkedThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkedThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	return i, nil
}

func (m *LinkedThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkedThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n46, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.PrependSender {
		dAtA[i] = 0x10
		i++
		if m.PrependSender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *GenericSetupEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericSetupEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProvisionedPhoneEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvisionedPhoneEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *OnboardingThreadEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnboardingThreadEventRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LookupByType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.LookupByType))
	}
	if m.LookupBy != nil {
		nn47, err := m.LookupBy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn47
	}
	if m.EventType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.EventType))
	}
	if m.Event != nil {
		nn48, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn48
	}
	return i, nil
}

func (m *OnboardingThreadEventRequest_ThreadID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
	i += copy(dAtA[i:], m.ThreadID)
	return i, nil
}
func (m *OnboardingThreadEventRequest_EntityID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.EntityID)))
	i += copy(dAtA[i:], m.EntityID)
	return i, nil
}
func (m *OnboardingThreadEventRequest_GenericSetup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GenericSetup != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.GenericSetup.Size()))
		n49, err := m.GenericSetup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	return i, nil
}
func (m *OnboardingThreadEventRequest_ProvisionedPhone) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProvisionedPhone != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ProvisionedPhone.Size()))
		n50, err := m.ProvisionedPhone.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *OnboardingThreadEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnboardingThreadEventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Thread != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Thread.Size()))
		n51, err := m.Thread.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *SavedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.CreatorEntityID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.CreatorEntityID)))
		i += copy(dAtA[i:], m.CreatorEntityID)
	}
	if len(m.OwnerEntityID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OwnerEntityID)))
		i += copy(dAtA[i:], m.OwnerEntityID)
	}
	if m.Internal {
		dAtA[i] = 0x30
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Created != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Modified))
	}
	if m.Content != nil {
		nn52, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn52
	}
	return i, nil
}

func (m *SavedMessage_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n53, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *IDList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *SavedMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.By != nil {
		nn54, err := m.By.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn54
	}
	return i, nil
}

func (m *SavedMessagesRequest_IDs) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IDs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.IDs.Size()))
		n55, err := m.IDs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *SavedMessagesRequest_EntityIDs) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EntityIDs != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.EntityIDs.Size()))
		n56, err := m.EntityIDs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *SavedMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedMessages) > 0 {
		for _, msg := range m.SavedMessages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateSavedMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSavedMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.CreatorEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.CreatorEntityID)))
		i += copy(dAtA[i:], m.CreatorEntityID)
	}
	if len(m.OwnerEntityID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OwnerEntityID)))
		i += copy(dAtA[i:], m.OwnerEntityID)
	}
	if m.Content != nil {
		nn57, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn57
	}
	return i, nil
}

func (m *CreateSavedMessageRequest_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n58, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *CreateSavedMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSavedMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SavedMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.SavedMessage.Size()))
		n59, err := m.SavedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}

func (m *DeleteSavedMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSavedMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedMessageID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SavedMessageID)))
		i += copy(dAtA[i:], m.SavedMessageID)
	}
	return i, nil
}

func (m *DeleteSavedMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSavedMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateSavedMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSavedMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SavedMessageID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SavedMessageID)))
		i += copy(dAtA[i:], m.SavedMessageID)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Content != nil {
		nn60, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn60
	}
	return i, nil
}

func (m *UpdateSavedMessageRequest_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n61, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *UpdateSavedMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSavedMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SavedMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.SavedMessage.Size()))
		n62, err := m.SavedMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}

func (m *ScheduledMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if m.Internal {
		dAtA[i] = 0x20
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ScheduledFor != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ScheduledFor))
	}
	if m.SentAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.SentAt))
	}
	if len(m.SentThreadItemID) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SentThreadItemID)))
		i += copy(dAtA[i:], m.SentThreadItemID)
	}
	if m.Created != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Modified))
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Status))
	}
	if m.Content != nil {
		nn63, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn63
	}
	return i, nil
}

func (m *ScheduledMessage_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n64, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *CreateScheduledMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateScheduledMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
		i += copy(dAtA[i:], m.ThreadID)
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if m.ScheduledFor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ScheduledFor))
	}
	if m.Content != nil {
		nn65, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn65
	}
	return i, nil
}

func (m *CreateScheduledMessageRequest_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n66, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *CreateScheduledMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateScheduledMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ScheduledMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ScheduledMessage.Size()))
		n67, err := m.ScheduledMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}

func (m *DeleteScheduledMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteScheduledMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ScheduledMessageID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ScheduledMessageID)))
		i += copy(dAtA[i:], m.ScheduledMessageID)
	}
	return i, nil
}

func (m *DeleteScheduledMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteScheduledMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ScheduledMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA69 := make([]byte, len(m.Status)*10)
		var j68 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA69[j68] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j68++
			}
			dAtA69[j68] = uint8(num)
			j68++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(j68))
		i += copy(dAtA[i:], dAtA69[:j68])
	}
	if m.LookupKey != nil {
		nn70, err := m.LookupKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn70
	}
	return i, nil
}

func (m *ScheduledMessagesRequest_ScheduledMessageID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.ScheduledMessageID)))
	i += copy(dAtA[i:], m.ScheduledMessageID)
	return i, nil
}
func (m *ScheduledMessagesRequest_ThreadID) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadID)))
	i += copy(dAtA[i:], m.ThreadID)
	return i, nil
}
func (m *ScheduledMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ScheduledMessages) > 0 {
		for _, msg := range m.ScheduledMessages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ThreadItemID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ThreadItemID)))
		i += copy(dAtA[i:], m.ThreadItemID)
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if m.Message != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n71, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}

func (m *UpdateMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationID)))
		i += copy(dAtA[i:], m.OrganizationID)
	}
	if len(m.Prefix) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Prefix)))
		i += copy(dAtA[i:], m.Prefix)
	}
	return i, nil
}

func (m *TagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Hidden {
		dAtA[i] = 0x10
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TriggeredMessageKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggeredMessageKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Key))
	}
	if len(m.Subkey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Subkey)))
		i += copy(dAtA[i:], m.Subkey)
	}
	return i, nil
}

func (m *TriggeredMessageItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggeredMessageItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.TriggeredMessageID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.TriggeredMessageID)))
		i += copy(dAtA[i:], m.TriggeredMessageID)
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if m.Internal {
		dAtA[i] = 0x20
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ordinal != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Ordinal))
	}
	if m.Created != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Modified))
	}
	if m.Content != nil {
		nn72, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn72
	}
	return i, nil
}

func (m *TriggeredMessageItem_Message) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Message != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Message.Size()))
		n73, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *TriggeredMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggeredMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.Enabled {
		dAtA[i] = 0x20
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Key != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Key.Size()))
		n74, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Created != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Modified))
	}
	return i, nil
}

func (m *CreateTriggeredMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTriggeredMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActorEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ActorEntityID)))
		i += copy(dAtA[i:], m.ActorEntityID)
	}
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.Key != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Key.Size()))
		n75, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Enabled {
		dAtA[i] = 0x28
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateTriggeredMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTriggeredMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TriggeredMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.TriggeredMessage.Size()))
		n76, err := m.TriggeredMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *TriggeredMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggeredMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.LookupKey != nil {
		nn77, err := m.LookupKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn77
	}
	return i, nil
}

func (m *TriggeredMessagesRequest_Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Key.Size()))
		n78, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *TriggeredMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggeredMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TriggeredMessages) > 0 {
		for _, msg := range m.TriggeredMessages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteTriggeredMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTriggeredMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TriggeredMessageID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.TriggeredMessageID)))
		i += copy(dAtA[i:], m.TriggeredMessageID)
	}
	return i, nil
}

func (m *DeleteTriggeredMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTriggeredMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateTriggeredMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTriggeredMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TriggeredMessageID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.TriggeredMessageID)))
		i += copy(dAtA[i:], m.TriggeredMessageID)
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateEnabled {
		dAtA[i] = 0x18
		i++
		if m.UpdateEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateTriggeredMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTriggeredMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TriggeredMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.TriggeredMessage.Size()))
		n79, err := m.TriggeredMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}

func (m *CloneAttachmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloneAttachmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.OwnerType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.OwnerType))
	}
	if len(m.OwnerID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OwnerID)))
		i += copy(dAtA[i:], m.OwnerID)
	}
	return i, nil
}

func (m *CloneAttachmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloneAttachmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attachments) > 0 {
		for _, msg := range m.Attachments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Svc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Iterator) Size() (n int) {
	var l int
	_ = l
	l = len(m.StartCursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EndCursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovSvc(uint64(m.Direction))
	}
	if m.Count != 0 {
		n += 1 + sovSvc(uint64(m.Count))
	}
	return n
}

func (m *Thread) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.LastMessageTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.LastMessageTimestamp))
	}
	l = len(m.LastMessageSummary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Unread {
		n += 2
	}
	if len(m.LastPrimaryEntityEndpoints) > 0 {
		for _, e := range m.LastPrimaryEntityEndpoints {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	if m.MessageCount != 0 {
		n += 1 + sovSvc(uint64(m.MessageCount))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UnreadReference {
		n += 2
	}
	if m.Origin != 0 {
		n += 1 + sovSvc(uint64(m.Origin))
	}
	return n
}

func (m *Member) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ModifiedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.ModifiedTimestamp))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	return n
}

func (m *ThreadItem_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ThreadItem_MessageUpdate) Size() (n int) {
	var l int
	_ = l
	if m.MessageUpdate != nil {
		l = m.MessageUpdate.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ThreadItem_MessageDelete) Size() (n int) {
	var l int
	_ = l
	if m.MessageDelete != nil {
		l = m.MessageDelete.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ThreadItemViewDetails) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ViewTime != 0 {
		n += 1 + sovSvc(uint64(m.ViewTime))
	}
	return n
}

func (m *Reference) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.TextRefs) > 0 {
		for _, e := range m.TextRefs {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Endpoint) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSvc(uint64(m.Channel))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MessageUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MessageDelete) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ShortTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Unread != 0 {
		n += 1 + sovSvc(uint64(m.Unread))
	}
	if m.Total != 0 {
		n += 1 + sovSvc(uint64(m.Total))
	}
	if m.Ordinal != 0 {
		n += 1 + sovSvc(uint64(m.Ordinal))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.NotificationsEnabled {
		n += 2
	}
	if m.Hidden {
		n += 2
	}
	if m.Template {
		n += 2
	}
	l = len(m.LongTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DefaultTemplate {
		n += 2
	}
	return n
}

func (m *Query) Size() (n int) {
	var l int
	_ = l
	if len(m.Expressions) > 0 {
		for _, e := range m.Expressions {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *Expr) Size() (n int) {
	var l int
	_ = l
	if m.Not {
		n += 2
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Expr_Token) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *Expr_Flag_) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSvc(uint64(m.Flag))
	return n
}
func (m *Expr_ThreadType_) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovSvc(uint64(m.ThreadType))
	return n
}
func (m *Expr_Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tag)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *Attachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ContentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Attachment_Image) Size() (n int) {
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Audio) Size() (n int) {
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_GenericURL) Size() (n int) {
	var l int
	_ = l
	if m.GenericURL != nil {
		l = m.GenericURL.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Visit) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_CarePlan) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Video) Size() (n int) {
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_PaymentRequest) Size() (n int) {
	var l int
	_ = l
	if m.PaymentRequest != nil {
		l = m.PaymentRequest.Size()
		n += 2 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Attachment_Document) Size() (n int) {
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 2 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *ImageAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovSvc(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovSvc(uint64(m.Height))
	}
	return n
}

func (m *VideoAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DurationNS != 0 {
		n += 1 + sovSvc(uint64(m.DurationNS))
	}
	return n
}

func (m *AudioAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DurationNS != 0 {
		n += 1 + sovSvc(uint64(m.DurationNS))
	}
	return n
}

func (m *DocumentAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GenericURLAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mimetype)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *VisitAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.VisitName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CarePlanAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.CarePlanID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CarePlanName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PaymentRequestAttachment) Size() (n int) {
	var l int
	_ = l
	l = len(m.PaymentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PublishedThreadItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MessagePost) Size() (n int) {
	var l int
	_ = l
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Internal {
		n += 2
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PostMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DeprecatedSource != nil {
		l = m.DeprecatedSource.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.DeprecatedDestinations) > 0 {
		for _, e := range m.DeprecatedDestinations {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.DeprecatedInternal {
		n += 2
	}
	l = len(m.DeprecatedText)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.DeprecatedAttachments) > 0 {
		for _, e := range m.DeprecatedAttachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.DeprecatedTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DeprecatedSummary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DontNotify {
		n += 2
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PostMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PostMessagesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DontNotify {
		n += 2
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *PostMessagesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MarkThreadsAsReadRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ThreadWatermarks) > 0 {
		for _, e := range m.ThreadWatermarks {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovSvc(uint64(m.Timestamp))
	}
	if m.Seen {
		n += 2
	}
	return n
}

func (m *MarkThreadsAsReadRequest_ThreadWatermark) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.LastMessageTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.LastMessageTimestamp))
	}
	return n
}

func (m *MarkThreadsAsReadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ThreadItemsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Iterator != nil {
		l = m.Iterator.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemEdge) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	return n
}

func (m *QueryThreadsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeprecatedOrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Iterator != nil {
		l = m.Iterator.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.QueryType != nil {
		n += m.QueryType.Size()
	}
	return n
}

func (m *QueryThreadsRequest_Query) Size() (n int) {
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *QueryThreadsRequest_SavedQueryID) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedQueryID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ThreadEdge) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *QueryThreadsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.HasMore {
		n += 2
	}
	if m.TotalType != 0 {
		n += 1 + sovSvc(uint64(m.TotalType))
	}
	if m.Total != 0 {
		n += 1 + sovSvc(uint64(m.Total))
	}
	return n
}

func (m *SavedQueriesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQueriesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.SavedQueries) > 0 {
		for _, e := range m.SavedQueries {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeleteSavedQueriesRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.SavedQueryIDs) > 0 {
		for _, s := range m.SavedQueryIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeleteSavedQueriesResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SavedQueryTemplatesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQueryTemplatesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.SavedQueries) > 0 {
		for _, e := range m.SavedQueries {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.ThreadIDs) > 0 {
		for _, s := range m.ThreadIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateSavedQueryRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ShortTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Ordinal != 0 {
		n += 1 + sovSvc(uint64(m.Ordinal))
	}
	if m.NotificationsEnabled {
		n += 2
	}
	if m.Hidden {
		n += 2
	}
	if m.Template {
		n += 2
	}
	l = len(m.LongTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateSavedQueryResponse) Size() (n int) {
	var l int
	_ = l
	if m.SavedQuery != nil {
		l = m.SavedQuery.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateSavedQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedQueryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ShortTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Ordinal != 0 {
		n += 1 + sovSvc(uint64(m.Ordinal))
	}
	if m.ForceRebuild {
		n += 2
	}
	if m.NotificationsEnabled != 0 {
		n += 1 + sovSvc(uint64(m.NotificationsEnabled))
	}
	l = len(m.LongTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateSavedQueryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteThreadResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.AddMemberEntityIDs) > 0 {
		for _, s := range m.AddMemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.RemoveMemberEntityIDs) > 0 {
		for _, s := range m.RemoveMemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.AddFollowerEntityIDs) > 0 {
		for _, s := range m.AddFollowerEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.RemoveFollowerEntityIDs) > 0 {
		for _, s := range m.RemoveFollowerEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.AddTags) > 0 {
		for _, s := range m.AddTags {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.RemoveTags) > 0 {
		for _, s := range m.RemoveTags {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *UpdateThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Origin != 0 {
		n += 2 + sovSvc(uint64(m.Origin))
	}
	if m.DontNotify {
		n += 3
	}
	return n
}

func (m *CreateThreadResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ThreadItem != nil {
		l = m.ThreadItem.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateEmptyThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FromEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if len(m.MemberEntityIDs) > 0 {
		for _, s := range m.MemberEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.SystemTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Origin != 0 {
		n += 1 + sovSvc(uint64(m.Origin))
	}
	return n
}

func (m *CreateEmptyThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadMembersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadMembersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.FollowerEntityIDs) > 0 {
		for _, s := range m.FollowerEntityIDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ThreadsForMemberRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.PrimaryOnly {
		n += 2
	}
	return n
}

func (m *ThreadsForMemberResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SavedQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedQueryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedQueryResponse) Size() (n int) {
	var l int
	_ = l
	if m.SavedQuery != nil {
		l = m.SavedQuery.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ViewerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemResponse) Size() (n int) {
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemViewDetailsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ThreadItemViewDetailsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ItemViewDetails) > 0 {
		for _, e := range m.ItemViewDetails {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateLinkedThreadsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Organization1ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Organization2ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntity1ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntity2ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MessageTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.PrependSenderThread1 {
		n += 2
	}
	if m.PrependSenderThread2 {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	l = len(m.SystemTitle1)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SystemTitle2)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateLinkedThreadsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread1 != nil {
		l = m.Thread1.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Thread2 != nil {
		l = m.Thread2.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateOnboardingThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PrimaryEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.UserTitle)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateOnboardingThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LinkedThreadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *LinkedThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.PrependSender {
		n += 2
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GenericSetupEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ProvisionedPhoneEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *OnboardingThreadEventRequest) Size() (n int) {
	var l int
	_ = l
	if m.LookupByType != 0 {
		n += 1 + sovSvc(uint64(m.LookupByType))
	}
	if m.LookupBy != nil {
		n += m.LookupBy.Size()
	}
	if m.EventType != 0 {
		n += 1 + sovSvc(uint64(m.EventType))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *OnboardingThreadEventRequest_ThreadID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *OnboardingThreadEventRequest_EntityID) Size() (n int) {
	var l int
	_ = l
	l = len(m.EntityID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *OnboardingThreadEventRequest_GenericSetup) Size() (n int) {
	var l int
	_ = l
	if m.GenericSetup != nil {
		l = m.GenericSetup.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *OnboardingThreadEventRequest_ProvisionedPhone) Size() (n int) {
	var l int
	_ = l
	if m.ProvisionedPhone != nil {
		l = m.ProvisionedPhone.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *OnboardingThreadEventResponse) Size() (n int) {
	var l int
	_ = l
	if m.Thread != nil {
		l = m.Thread.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SavedMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CreatorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OwnerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.Created != 0 {
		n += 1 + sovSvc(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 1 + sovSvc(uint64(m.Modified))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *SavedMessage_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *IDList) Size() (n int) {
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SavedMessagesRequest) Size() (n int) {
	var l int
	_ = l
	if m.By != nil {
		n += m.By.Size()
	}
	return n
}

func (m *SavedMessagesRequest_IDs) Size() (n int) {
	var l int
	_ = l
	if m.IDs != nil {
		l = m.IDs.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SavedMessagesRequest_EntityIDs) Size() (n int) {
	var l int
	_ = l
	if m.EntityIDs != nil {
		l = m.EntityIDs.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *SavedMessagesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.SavedMessages) > 0 {
		for _, e := range m.SavedMessages {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateSavedMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CreatorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OwnerEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *CreateSavedMessageRequest_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *CreateSavedMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.SavedMessage != nil {
		l = m.SavedMessage.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteSavedMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedMessageID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteSavedMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateSavedMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SavedMessageID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *UpdateSavedMessageRequest_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *UpdateSavedMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.SavedMessage != nil {
		l = m.SavedMessage.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ScheduledMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.ScheduledFor != 0 {
		n += 1 + sovSvc(uint64(m.ScheduledFor))
	}
	if m.SentAt != 0 {
		n += 1 + sovSvc(uint64(m.SentAt))
	}
	l = len(m.SentThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovSvc(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 1 + sovSvc(uint64(m.Modified))
	}
	if m.Status != 0 {
		n += 1 + sovSvc(uint64(m.Status))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *ScheduledMessage_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *CreateScheduledMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ScheduledFor != 0 {
		n += 1 + sovSvc(uint64(m.ScheduledFor))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *CreateScheduledMessageRequest_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *CreateScheduledMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.ScheduledMessage != nil {
		l = m.ScheduledMessage.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteScheduledMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ScheduledMessageID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteScheduledMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ScheduledMessagesRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovSvc(uint64(e))
		}
		n += 1 + sovSvc(uint64(l)) + l
	}
	if m.LookupKey != nil {
		n += m.LookupKey.Size()
	}
	return n
}

func (m *ScheduledMessagesRequest_ScheduledMessageID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ScheduledMessageID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ScheduledMessagesRequest_ThreadID) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *ScheduledMessagesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ScheduledMessages) > 0 {
		for _, e := range m.ScheduledMessages {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *UpdateMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ThreadItemID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TagsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TagsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Hidden {
		n += 2
	}
	return n
}

func (m *TriggeredMessageKey) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovSvc(uint64(m.Key))
	}
	l = len(m.Subkey)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TriggeredMessageItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.TriggeredMessageID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.Ordinal != 0 {
		n += 1 + sovSvc(uint64(m.Ordinal))
	}
	if m.Created != 0 {
		n += 1 + sovSvc(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 1 + sovSvc(uint64(m.Modified))
	}
	if m.Content != nil {
		n += m.Content.Size()
	}
	return n
}

func (m *TriggeredMessageItem_Message) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *TriggeredMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Created != 0 {
		n += 1 + sovSvc(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 1 + sovSvc(uint64(m.Modified))
	}
	return n
}

func (m *CreateTriggeredMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *CreateTriggeredMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.TriggeredMessage != nil {
		l = m.TriggeredMessage.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TriggeredMessagesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.LookupKey != nil {
		n += m.LookupKey.Size()
	}
	return n
}

func (m *TriggeredMessagesRequest_Key) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *TriggeredMessagesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.TriggeredMessages) > 0 {
		for _, e := range m.TriggeredMessages {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *DeleteTriggeredMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TriggeredMessageID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteTriggeredMessageResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateTriggeredMessageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.TriggeredMessageID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	if m.UpdateEnabled {
		n += 2
	}
	return n
}

func (m *UpdateTriggeredMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.TriggeredMessage != nil {
		l = m.TriggeredMessage.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CloneAttachmentsRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.OwnerType != 0 {
		n += 1 + sovSvc(uint64(m.OwnerType))
	}
	l = len(m.OwnerID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CloneAttachmentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Iterator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Iterator{`,
		`StartCursor:` + fmt.Sprintf("%v", this.StartCursor) + `,`,
		`EndCursor:` + fmt.Sprintf("%v", this.EndCursor) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Thread) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Thread{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`Tags:` + strings.Replace(fmt.Sprintf("%v", this.Tags), "Tag", "Tag", 1) + `,`,
		`LastMessageTimestamp:` + fmt.Sprintf("%v", this.LastMessageTimestamp) + `,`,
		`LastMessageSummary:` + fmt.Sprintf("%v", this.LastMessageSummary) + `,`,
		`Unread:` + fmt.Sprintf("%v", this.Unread) + `,`,
		`LastPrimaryEntityEndpoints:` + strings.Replace(fmt.Sprintf("%v", this.LastPrimaryEntityEndpoints), "Endpoint", "Endpoint", 1) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`MessageCount:` + fmt.Sprintf("%v", this.MessageCount) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`UnreadReference:` + fmt.Sprintf("%v", this.UnreadReference) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Member) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Member{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`ModifiedTimestamp:` + fmt.Sprintf("%v", this.ModifiedTimestamp) + `,`,
		`Item:` + fmt.Sprintf("%v", this.Item) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem_MessageUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem_MessageUpdate{`,
		`MessageUpdate:` + strings.Replace(fmt.Sprintf("%v", this.MessageUpdate), "MessageUpdate", "MessageUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItem_MessageDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItem_MessageDelete{`,
		`MessageDelete:` + strings.Replace(fmt.Sprintf("%v", this.MessageDelete), "MessageDelete", "MessageDelete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemViewDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemViewDetails{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`ViewTime:` + fmt.Sprintf("%v", this.ViewTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Reference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reference{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "Endpoint", "Endpoint", 1) + `,`,
		`Destinations:` + strings.Replace(fmt.Sprintf("%v", this.Destinations), "Endpoint", "Endpoint", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`TextRefs:` + strings.Replace(fmt.Sprintf("%v", this.TextRefs), "Reference", "Reference", 1) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Endpoint{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageUpdate{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageDelete{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQuery{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`ShortTitle:` + fmt.Sprintf("%v", this.ShortTitle) + `,`,
		`Unread:` + fmt.Sprintf("%v", this.Unread) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Ordinal:` + fmt.Sprintf("%v", this.Ordinal) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`NotificationsEnabled:` + fmt.Sprintf("%v", this.NotificationsEnabled) + `,`,
		`Hidden:` + fmt.Sprintf("%v", this.Hidden) + `,`,
		`Template:` + fmt.Sprintf("%v", this.Template) + `,`,
		`LongTitle:` + fmt.Sprintf("%v", this.LongTitle) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DefaultTemplate:` + fmt.Sprintf("%v", this.DefaultTemplate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query{`,
		`Expressions:` + strings.Replace(fmt.Sprintf("%v", this.Expressions), "Expr", "Expr", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expr) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expr{`,
		`Not:` + fmt.Sprintf("%v", this.Not) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expr_Token) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expr_Token{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expr_Flag_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expr_Flag_{`,
		`Flag:` + fmt.Sprintf("%v", this.Flag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expr_ThreadType_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expr_ThreadType_{`,
		`ThreadType:` + fmt.Sprintf("%v", this.ThreadType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Expr_Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Expr_Tag{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`ContentID:` + fmt.Sprintf("%v", this.ContentID) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Image) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Image{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageAttachment", "ImageAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Audio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Audio{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "AudioAttachment", "AudioAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_GenericURL) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_GenericURL{`,
		`GenericURL:` + strings.Replace(fmt.Sprintf("%v", this.GenericURL), "GenericURLAttachment", "GenericURLAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Visit{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "VisitAttachment", "VisitAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_CarePlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_CarePlan{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlanAttachment", "CarePlanAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Video) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Video{`,
		`Video:` + strings.Replace(fmt.Sprintf("%v", this.Video), "VideoAttachment", "VideoAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_PaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_PaymentRequest{`,
		`PaymentRequest:` + strings.Replace(fmt.Sprintf("%v", this.PaymentRequest), "PaymentRequestAttachment", "PaymentRequestAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment_Document) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment_Document{`,
		`Document:` + strings.Replace(fmt.Sprintf("%v", this.Document), "DocumentAttachment", "DocumentAttachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AudioAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`DurationNS:` + fmt.Sprintf("%v", this.DurationNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericURLAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericURLAttachment{`,
		`Mimetype:` + fmt.Sprintf("%v", this.Mimetype) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisitAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisitAttachment{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`VisitName:` + fmt.Sprintf("%v", this.VisitName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanAttachment{`,
		`CarePlanID:` + fmt.Sprintf("%v", this.CarePlanID) + `,`,
		`CarePlanName:` + fmt.Sprintf("%v", this.CarePlanName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaymentRequestAttachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaymentRequestAttachment{`,
		`PaymentID:` + fmt.Sprintf("%v", this.PaymentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishedThreadItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishedThreadItem{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessagePost) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessagePost{`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "Endpoint", "Endpoint", 1) + `,`,
		`Destinations:` + strings.Replace(fmt.Sprintf("%v", this.Destinations), "Endpoint", "Endpoint", 1) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostMessageRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`DeprecatedSource:` + strings.Replace(fmt.Sprintf("%v", this.DeprecatedSource), "Endpoint", "Endpoint", 1) + `,`,
		`DeprecatedDestinations:` + strings.Replace(fmt.Sprintf("%v", this.DeprecatedDestinations), "Endpoint", "Endpoint", 1) + `,`,
		`DeprecatedInternal:` + fmt.Sprintf("%v", this.DeprecatedInternal) + `,`,
		`DeprecatedText:` + fmt.Sprintf("%v", this.DeprecatedText) + `,`,
		`DeprecatedAttachments:` + strings.Replace(fmt.Sprintf("%v", this.DeprecatedAttachments), "Attachment", "Attachment", 1) + `,`,
		`DeprecatedTitle:` + fmt.Sprintf("%v", this.DeprecatedTitle) + `,`,
		`DeprecatedSummary:` + fmt.Sprintf("%v", this.DeprecatedSummary) + `,`,
		`DontNotify:` + fmt.Sprintf("%v", this.DontNotify) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessagePost", "MessagePost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostMessageResponse{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostMessagesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostMessagesRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`DontNotify:` + fmt.Sprintf("%v", this.DontNotify) + `,`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "MessagePost", "MessagePost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostMessagesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostMessagesResponse{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "ThreadItem", "ThreadItem", 1) + `,`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkThreadsAsReadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkThreadsAsReadRequest{`,
		`ThreadWatermarks:` + strings.Replace(fmt.Sprintf("%v", this.ThreadWatermarks), "MarkThreadsAsReadRequest_ThreadWatermark", "MarkThreadsAsReadRequest_ThreadWatermark", 1) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Seen:` + fmt.Sprintf("%v", this.Seen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkThreadsAsReadRequest_ThreadWatermark) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkThreadsAsReadRequest_ThreadWatermark{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`LastMessageTimestamp:` + fmt.Sprintf("%v", this.LastMessageTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkThreadsAsReadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkThreadsAsReadResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemsRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`Iterator:` + strings.Replace(fmt.Sprintf("%v", this.Iterator), "Iterator", "Iterator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemEdge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemEdge{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`Cursor:` + fmt.Sprintf("%v", this.Cursor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemsResponse{`,
		`Edges:` + strings.Replace(fmt.Sprintf("%v", this.Edges), "ThreadItemEdge", "ThreadItemEdge", 1) + `,`,
		`HasMore:` + fmt.Sprintf("%v", this.HasMore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsRequest{`,
		`DeprecatedOrganizationID:` + fmt.Sprintf("%v", this.DeprecatedOrganizationID) + `,`,
		`Iterator:` + strings.Replace(fmt.Sprintf("%v", this.Iterator), "Iterator", "Iterator", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`QueryType:` + fmt.Sprintf("%v", this.QueryType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsRequest_Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsRequest_Query{`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsRequest_SavedQueryID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsRequest_SavedQueryID{`,
		`SavedQueryID:` + fmt.Sprintf("%v", this.SavedQueryID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadEdge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadEdge{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`Cursor:` + fmt.Sprintf("%v", this.Cursor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryThreadsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryThreadsResponse{`,
		`Edges:` + strings.Replace(fmt.Sprintf("%v", this.Edges), "ThreadEdge", "ThreadEdge", 1) + `,`,
		`HasMore:` + fmt.Sprintf("%v", this.HasMore) + `,`,
		`TotalType:` + fmt.Sprintf("%v", this.TotalType) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueriesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueriesRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueriesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueriesResponse{`,
		`SavedQueries:` + strings.Replace(fmt.Sprintf("%v", this.SavedQueries), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteSavedQueriesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteSavedQueriesRequest{`,
		`SavedQueryIDs:` + fmt.Sprintf("%v", this.SavedQueryIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteSavedQueriesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteSavedQueriesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueryTemplatesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueryTemplatesRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueryTemplatesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueryTemplatesResponse{`,
		`SavedQueries:` + strings.Replace(fmt.Sprintf("%v", this.SavedQueries), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsRequest{`,
		`ThreadIDs:` + fmt.Sprintf("%v", this.ThreadIDs) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsResponse{`,
		`Threads:` + strings.Replace(fmt.Sprintf("%v", this.Threads), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedQueryRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`ShortTitle:` + fmt.Sprintf("%v", this.ShortTitle) + `,`,
		`Ordinal:` + fmt.Sprintf("%v", this.Ordinal) + `,`,
		`NotificationsEnabled:` + fmt.Sprintf("%v", this.NotificationsEnabled) + `,`,
		`Hidden:` + fmt.Sprintf("%v", this.Hidden) + `,`,
		`Template:` + fmt.Sprintf("%v", this.Template) + `,`,
		`LongTitle:` + fmt.Sprintf("%v", this.LongTitle) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedQueryResponse{`,
		`SavedQuery:` + strings.Replace(fmt.Sprintf("%v", this.SavedQuery), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedQueryRequest{`,
		`SavedQueryID:` + fmt.Sprintf("%v", this.SavedQueryID) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "Query", "Query", 1) + `,`,
		`ShortTitle:` + fmt.Sprintf("%v", this.ShortTitle) + `,`,
		`Ordinal:` + fmt.Sprintf("%v", this.Ordinal) + `,`,
		`ForceRebuild:` + fmt.Sprintf("%v", this.ForceRebuild) + `,`,
		`NotificationsEnabled:` + fmt.Sprintf("%v", this.NotificationsEnabled) + `,`,
		`LongTitle:` + fmt.Sprintf("%v", this.LongTitle) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedQueryResponse{`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMessageRequest{`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteThreadRequest{`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteThreadResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThreadRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`AddMemberEntityIDs:` + fmt.Sprintf("%v", this.AddMemberEntityIDs) + `,`,
		`RemoveMemberEntityIDs:` + fmt.Sprintf("%v", this.RemoveMemberEntityIDs) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`AddFollowerEntityIDs:` + fmt.Sprintf("%v", this.AddFollowerEntityIDs) + `,`,
		`RemoveFollowerEntityIDs:` + fmt.Sprintf("%v", this.RemoveFollowerEntityIDs) + `,`,
		`AddTags:` + fmt.Sprintf("%v", this.AddTags) + `,`,
		`RemoveTags:` + fmt.Sprintf("%v", this.RemoveTags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateThreadRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessagePost", "MessagePost", 1) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`MemberEntityIDs:` + fmt.Sprintf("%v", this.MemberEntityIDs) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`DontNotify:` + fmt.Sprintf("%v", this.DontNotify) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateThreadResponse{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ThreadItem:` + strings.Replace(fmt.Sprintf("%v", this.ThreadItem), "ThreadItem", "ThreadItem", 1) + `,`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEmptyThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEmptyThreadRequest{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`FromEntityID:` + fmt.Sprintf("%v", this.FromEntityID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`MemberEntityIDs:` + fmt.Sprintf("%v", this.MemberEntityIDs) + `,`,
		`SystemTitle:` + fmt.Sprintf("%v", this.SystemTitle) + `,`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateEmptyThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateEmptyThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadMembersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadMembersRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadMembersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadMembersResponse{`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Member", "Member", 1) + `,`,
		`FollowerEntityIDs:` + fmt.Sprintf("%v", this.FollowerEntityIDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsForMemberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsForMemberRequest{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`PrimaryOnly:` + fmt.Sprintf("%v", this.PrimaryOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadsForMemberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadsForMemberResponse{`,
		`Threads:` + strings.Replace(fmt.Sprintf("%v", this.Threads), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueryRequest{`,
		`SavedQueryID:` + fmt.Sprintf("%v", this.SavedQueryID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedQueryResponse{`,
		`SavedQuery:` + strings.Replace(fmt.Sprintf("%v", this.SavedQuery), "SavedQuery", "SavedQuery", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemRequest{`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`ViewerEntityID:` + fmt.Sprintf("%v", this.ViewerEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemResponse{`,
		`Item:` + strings.Replace(fmt.Sprintf("%v", this.Item), "ThreadItem", "ThreadItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemViewDetailsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemViewDetailsRequest{`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThreadItemViewDetailsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadItemViewDetailsResponse{`,
		`ItemViewDetails:` + strings.Replace(fmt.Sprintf("%v", this.ItemViewDetails), "ThreadItemViewDetails", "ThreadItemViewDetails", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLinkedThreadsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLinkedThreadsRequest{`,
		`Organization1ID:` + fmt.Sprintf("%v", this.Organization1ID) + `,`,
		`Organization2ID:` + fmt.Sprintf("%v", this.Organization2ID) + `,`,
		`PrimaryEntity1ID:` + fmt.Sprintf("%v", this.PrimaryEntity1ID) + `,`,
		`PrimaryEntity2ID:` + fmt.Sprintf("%v", this.PrimaryEntity2ID) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`MessageTitle:` + fmt.Sprintf("%v", this.MessageTitle) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`PrependSenderThread1:` + fmt.Sprintf("%v", this.PrependSenderThread1) + `,`,
		`PrependSenderThread2:` + fmt.Sprintf("%v", this.PrependSenderThread2) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SystemTitle1:` + fmt.Sprintf("%v", this.SystemTitle1) + `,`,
		`SystemTitle2:` + fmt.Sprintf("%v", this.SystemTitle2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLinkedThreadsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLinkedThreadsResponse{`,
		`Thread1:` + strings.Replace(fmt.Sprintf("%v", this.Thread1), "Thread", "Thread", 1) + `,`,
		`Thread2:` + strings.Replace(fmt.Sprintf("%v", this.Thread2), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOnboardingThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOnboardingThreadRequest{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`PrimaryEntityID:` + fmt.Sprintf("%v", this.PrimaryEntityID) + `,`,
		`UserTitle:` + fmt.Sprintf("%v", this.UserTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOnboardingThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOnboardingThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkedThreadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkedThreadRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkedThreadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkedThreadResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`PrependSender:` + fmt.Sprintf("%v", this.PrependSender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValue{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericSetupEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenericSetupEvent{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Attributes:` + strings.Replace(fmt.Sprintf("%v", this.Attributes), "KeyValue", "KeyValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProvisionedPhoneEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProvisionedPhoneEvent{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest{`,
		`LookupByType:` + fmt.Sprintf("%v", this.LookupByType) + `,`,
		`LookupBy:` + fmt.Sprintf("%v", this.LookupBy) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_ThreadID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_ThreadID{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_EntityID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_EntityID{`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_GenericSetup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_GenericSetup{`,
		`GenericSetup:` + strings.Replace(fmt.Sprintf("%v", this.GenericSetup), "GenericSetupEvent", "GenericSetupEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventRequest_ProvisionedPhone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventRequest_ProvisionedPhone{`,
		`ProvisionedPhone:` + strings.Replace(fmt.Sprintf("%v", this.ProvisionedPhone), "ProvisionedPhoneEvent", "ProvisionedPhoneEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnboardingThreadEventResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnboardingThreadEventResponse{`,
		`Thread:` + strings.Replace(fmt.Sprintf("%v", this.Thread), "Thread", "Thread", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`CreatorEntityID:` + fmt.Sprintf("%v", this.CreatorEntityID) + `,`,
		`OwnerEntityID:` + fmt.Sprintf("%v", this.OwnerEntityID) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Modified:` + fmt.Sprintf("%v", this.Modified) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedMessage_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedMessage_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IDList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IDList{`,
		`IDs:` + fmt.Sprintf("%v", this.IDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedMessagesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedMessagesRequest{`,
		`By:` + fmt.Sprintf("%v", this.By) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedMessagesRequest_IDs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedMessagesRequest_IDs{`,
		`IDs:` + strings.Replace(fmt.Sprintf("%v", this.IDs), "IDList", "IDList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedMessagesRequest_EntityIDs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedMessagesRequest_EntityIDs{`,
		`EntityIDs:` + strings.Replace(fmt.Sprintf("%v", this.EntityIDs), "IDList", "IDList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedMessagesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedMessagesResponse{`,
		`SavedMessages:` + strings.Replace(fmt.Sprintf("%v", this.SavedMessages), "SavedMessage", "SavedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedMessageRequest{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`CreatorEntityID:` + fmt.Sprintf("%v", this.CreatorEntityID) + `,`,
		`OwnerEntityID:` + fmt.Sprintf("%v", this.OwnerEntityID) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedMessageRequest_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedMessageRequest_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessagePost", "MessagePost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSavedMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSavedMessageResponse{`,
		`SavedMessage:` + strings.Replace(fmt.Sprintf("%v", this.SavedMessage), "SavedMessage", "SavedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteSavedMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteSavedMessageRequest{`,
		`SavedMessageID:` + fmt.Sprintf("%v", this.SavedMessageID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteSavedMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteSavedMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedMessageRequest{`,
		`SavedMessageID:` + fmt.Sprintf("%v", this.SavedMessageID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedMessageRequest_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedMessageRequest_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessagePost", "MessagePost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSavedMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSavedMessageResponse{`,
		`SavedMessage:` + strings.Replace(fmt.Sprintf("%v", this.SavedMessage), "SavedMessage", "SavedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`ScheduledFor:` + fmt.Sprintf("%v", this.ScheduledFor) + `,`,
		`SentAt:` + fmt.Sprintf("%v", this.SentAt) + `,`,
		`SentThreadItemID:` + fmt.Sprintf("%v", this.SentThreadItemID) + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Modified:` + fmt.Sprintf("%v", this.Modified) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledMessage_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledMessage_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateScheduledMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateScheduledMessageRequest{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`ScheduledFor:` + fmt.Sprintf("%v", this.ScheduledFor) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateScheduledMessageRequest_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateScheduledMessageRequest_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessagePost", "MessagePost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateScheduledMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateScheduledMessageResponse{`,
		`ScheduledMessage:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledMessage), "ScheduledMessage", "ScheduledMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteScheduledMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteScheduledMessageRequest{`,
		`ScheduledMessageID:` + fmt.Sprintf("%v", this.ScheduledMessageID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteScheduledMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteScheduledMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledMessagesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledMessagesRequest{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LookupKey:` + fmt.Sprintf("%v", this.LookupKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledMessagesRequest_ScheduledMessageID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledMessagesRequest_ScheduledMessageID{`,
		`ScheduledMessageID:` + fmt.Sprintf("%v", this.ScheduledMessageID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledMessagesRequest_ThreadID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledMessagesRequest_ThreadID{`,
		`ThreadID:` + fmt.Sprintf("%v", this.ThreadID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduledMessagesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduledMessagesResponse{`,
		`ScheduledMessages:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledMessages), "ScheduledMessage", "ScheduledMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageRequest{`,
		`ThreadItemID:` + fmt.Sprintf("%v", this.ThreadItemID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "MessagePost", "MessagePost", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TagsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagsRequest{`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagsResponse{`,
		`Tags:` + strings.Replace(fmt.Sprintf("%v", this.Tags), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Hidden:` + fmt.Sprintf("%v", this.Hidden) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessageKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessageKey{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Subkey:` + fmt.Sprintf("%v", this.Subkey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessageItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessageItem{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`TriggeredMessageID:` + fmt.Sprintf("%v", this.TriggeredMessageID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`Ordinal:` + fmt.Sprintf("%v", this.Ordinal) + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Modified:` + fmt.Sprintf("%v", this.Modified) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessageItem_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessageItem_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "TriggeredMessageKey", "TriggeredMessageKey", 1) + `,`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "TriggeredMessageItem", "TriggeredMessageItem", 1) + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Modified:` + fmt.Sprintf("%v", this.Modified) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTriggeredMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTriggeredMessageRequest{`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "TriggeredMessageKey", "TriggeredMessageKey", 1) + `,`,
		`Messages:` + strings.Replace(fmt.Sprintf("%v", this.Messages), "MessagePost", "MessagePost", 1) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTriggeredMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTriggeredMessageResponse{`,
		`TriggeredMessage:` + strings.Replace(fmt.Sprintf("%v", this.TriggeredMessage), "TriggeredMessage", "TriggeredMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessagesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessagesRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`LookupKey:` + fmt.Sprintf("%v", this.LookupKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessagesRequest_Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessagesRequest_Key{`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "TriggeredMessageKey", "TriggeredMessageKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggeredMessagesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggeredMessagesResponse{`,
		`TriggeredMessages:` + strings.Replace(fmt.Sprintf("%v", this.TriggeredMessages), "TriggeredMessage", "TriggeredMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTriggeredMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTriggeredMessageRequest{`,
		`TriggeredMessageID:` + fmt.Sprintf("%v", this.TriggeredMessageID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTriggeredMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTriggeredMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTriggeredMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTriggeredMessageRequest{`,
		`TriggeredMessageID:` + fmt.Sprintf("%v", this.TriggeredMessageID) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`UpdateEnabled:` + fmt.Sprintf("%v", this.UpdateEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTriggeredMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTriggeredMessageResponse{`,
		`TriggeredMessage:` + strings.Replace(fmt.Sprintf("%v", this.TriggeredMessage), "TriggeredMessage", "TriggeredMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloneAttachmentsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloneAttachmentsRequest{`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`OwnerType:` + fmt.Sprintf("%v", this.OwnerType) + `,`,
		`OwnerID:` + fmt.Sprintf("%v", this.OwnerID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloneAttachmentsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloneAttachmentsResponse{`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "Attachment", "Attachment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Iterator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Iterator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Iterator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartCursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndCursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndCursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= (Iterator_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Thread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageTimestamp", wireType)
			}
			m.LastMessageTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMessageSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unread = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrimaryEntityEndpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPrimaryEntityEndpoints = append(m.LastPrimaryEntityEndpoints, &Endpoint{})
			if err := m.LastPrimaryEntityEndpoints[len(m.LastPrimaryEntityEndpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCount", wireType)
			}
			m.MessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnreadReference = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (ThreadOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTimestamp", wireType)
			}
			m.ModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ThreadItem_Message{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ThreadItem_MessageUpdate{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &ThreadItem_MessageDelete{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemViewDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemViewDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemViewDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewTime", wireType)
			}
			m.ViewTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Reference_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Endpoint{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Endpoint{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TextRefs = append(m.TextRefs, &Reference{})
			if err := m.TextRefs[len(m.TextRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (Endpoint_Channel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SavedQueryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			m.Unread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unread |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordinal", wireType)
			}
			m.Ordinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordinal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotificationsEnabled = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Template = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTemplate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultTemplate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expressions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expressions = append(m.Expressions, &Expr{})
			if err := m.Expressions[len(m.Expressions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Not", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Not = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Expr_Token{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v Expr_Flag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Expr_Flag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Expr_Flag_{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadType", wireType)
			}
			var v Expr_ThreadType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Expr_ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Expr_ThreadType_{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Expr_Tag{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImageAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Image{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AudioAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Audio{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericURL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericURLAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_GenericURL{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VisitAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Visit{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CarePlanAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_CarePlan{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VideoAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Video{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PaymentRequestAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_PaymentRequest{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentAttachment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Attachment_Document{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationNS", wireType)
			}
			m.DurationNS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationNS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericURLAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericURLAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericURLAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisitAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarePlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarePlanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentRequestAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentRequestAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentRequestAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishedThreadItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishedThreadItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishedThreadItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Endpoint{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Endpoint{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeprecatedSource == nil {
				m.DeprecatedSource = &Endpoint{}
			}
			if err := m.DeprecatedSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedDestinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedDestinations = append(m.DeprecatedDestinations, &Endpoint{})
			if err := m.DeprecatedDestinations[len(m.DeprecatedDestinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedInternal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeprecatedInternal = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedAttachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedAttachments = append(m.DeprecatedAttachments, &Attachment{})
			if err := m.DeprecatedAttachments[len(m.DeprecatedAttachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontNotify = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessagePost{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontNotify = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &MessagePost{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ThreadItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkThreadsAsReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkThreadsAsReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkThreadsAsReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadWatermarks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadWatermarks = append(m.ThreadWatermarks, &MarkThreadsAsReadRequest_ThreadWatermark{})
			if err := m.ThreadWatermarks[len(m.ThreadWatermarks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkThreadsAsReadRequest_ThreadWatermark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadWatermark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadWatermark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageTimestamp", wireType)
			}
			m.LastMessageTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkThreadsAsReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkThreadsAsReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkThreadsAsReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iterator == nil {
				m.Iterator = &Iterator{}
			}
			if err := m.Iterator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &ThreadItemEdge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedOrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedOrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iterator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iterator == nil {
				m.Iterator = &Iterator{}
			}
			if err := m.Iterator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (QueryThreadsRequest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Query{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.QueryType = &QueryThreadsRequest_Query{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryType = &QueryThreadsRequest_SavedQueryID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, &ThreadEdge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalType", wireType)
			}
			m.TotalType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalType |= (ValueType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueries = append(m.SavedQueries, &SavedQuery{})
			if err := m.SavedQueries[len(m.SavedQueries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSavedQueriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSavedQueriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSavedQueriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueryIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueryIDs = append(m.SavedQueryIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSavedQueriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSavedQueriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSavedQueriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueryTemplatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueryTemplatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueryTemplatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueryTemplatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueryTemplatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueryTemplatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueries = append(m.SavedQueries, &SavedQuery{})
			if err := m.SavedQueries[len(m.SavedQueries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadIDs = append(m.ThreadIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &Thread{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSavedQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSavedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSavedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SavedQueryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordinal", wireType)
			}
			m.Ordinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordinal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotificationsEnabled = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Template = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSavedQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSavedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSavedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SavedQuery == nil {
				m.SavedQuery = &SavedQuery{}
			}
			if err := m.SavedQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSavedQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSavedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSavedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &Query{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordinal", wireType)
			}
			m.Ordinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordinal |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRebuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceRebuild = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsEnabled", wireType)
			}
			m.NotificationsEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationsEnabled |= (NotificationsEnabledUpdate(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSavedQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSavedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSavedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &SavedQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddMemberEntityIDs = append(m.AddMemberEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveMemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveMemberEntityIDs = append(m.RemoveMemberEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFollowerEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFollowerEntityIDs = append(m.AddFollowerEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFollowerEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFollowerEntityIDs = append(m.RemoveFollowerEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddTags = append(m.AddTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveTags = append(m.RemoveTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessagePost{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberEntityIDs = append(m.MemberEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (ThreadOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontNotify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontNotify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreadItem == nil {
				m.ThreadItem = &ThreadItem{}
			}
			if err := m.ThreadItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEmptyThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEmptyThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEmptyThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberEntityIDs = append(m.MemberEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (ThreadOrigin(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEmptyThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEmptyThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEmptyThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMembersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMembersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMembersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMembersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMembersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMembersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerEntityIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowerEntityIDs = append(m.FollowerEntityIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsForMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsForMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsForMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrimaryOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadsForMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadsForMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadsForMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &Thread{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQueryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedQueryID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SavedQuery == nil {
				m.SavedQuery = &SavedQuery{}
			}
			if err := m.SavedQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ViewerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &ThreadItem{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemViewDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemViewDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemViewDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadItemViewDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadItemViewDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadItemViewDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemViewDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemViewDetails = append(m.ItemViewDetails, &ThreadItemViewDetails{})
			if err := m.ItemViewDetails[len(m.ItemViewDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLinkedThreadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLinkedThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLinkedThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization1ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization1ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization2ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization2ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntity1ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntity1ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntity2ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntity2ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrependSenderThread1", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrependSenderThread1 = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrependSenderThread2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrependSenderThread2 = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ThreadType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemTitle2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemTitle2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLinkedThreadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLinkedThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLinkedThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread1 == nil {
				m.Thread1 = &Thread{}
			}
			if err := m.Thread1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread2 == nil {
				m.Thread2 = &Thread{}
			}
			if err := m.Thread2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOnboardingThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOnboardingThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOnboardingThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOnboardingThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOnboardingThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOnboardingThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkedThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkedThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkedThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkedThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkedThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkedThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrependSender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrependSender = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericSetupEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericSetupEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericSetupEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &KeyValue{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvisionedPhoneEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvisionedPhoneEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvisionedPhoneEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnboardingThreadEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnboardingThreadEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnboardingThreadEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupByType", wireType)
			}
			m.LookupByType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookupByType |= (OnboardingThreadEventRequest_LookupByType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupBy = &OnboardingThreadEventRequest_ThreadID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupBy = &OnboardingThreadEventRequest_EntityID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (OnboardingThreadEventRequest_EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericSetupEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OnboardingThreadEventRequest_GenericSetup{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisionedPhone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProvisionedPhoneEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &OnboardingThreadEventRequest_ProvisionedPhone{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnboardingThreadEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnboardingThreadEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnboardingThreadEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thread", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thread == nil {
				m.Thread = &Thread{}
			}
			if err := m.Thread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &SavedMessage_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IDList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.By = &SavedMessagesRequest_IDs{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IDList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.By = &SavedMessagesRequest_EntityIDs{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedMessages = append(m.SavedMessages, &SavedMessage{})
			if err := m.SavedMessages[len(m.SavedMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSavedMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSavedMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSavedMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessagePost{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &CreateSavedMessageRequest_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSavedMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSavedMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSavedMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SavedMessage == nil {
				m.SavedMessage = &SavedMessage{}
			}
			if err := m.SavedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSavedMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSavedMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSavedMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSavedMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSavedMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSavedMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSavedMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSavedMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSavedMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SavedMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessagePost{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &UpdateSavedMessageRequest_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSavedMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSavedMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSavedMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SavedMessage == nil {
				m.SavedMessage = &SavedMessage{}
			}
			if err := m.SavedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledFor", wireType)
			}
			m.ScheduledFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledFor |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAt", wireType)
			}
			m.SentAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentAt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentThreadItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ScheduledMessageStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &ScheduledMessage_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateScheduledMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateScheduledMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateScheduledMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledFor", wireType)
			}
			m.ScheduledFor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledFor |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessagePost{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &CreateScheduledMessageRequest_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateScheduledMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateScheduledMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateScheduledMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledMessage == nil {
				m.ScheduledMessage = &ScheduledMessage{}
			}
			if err := m.ScheduledMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteScheduledMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteScheduledMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteScheduledMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteScheduledMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteScheduledMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteScheduledMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSvc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ScheduledMessageStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ScheduledMessageStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else if wireType == 0 {
				var v ScheduledMessageStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ScheduledMessageStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKey = &ScheduledMessagesRequest_ScheduledMessageID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKey = &ScheduledMessagesRequest_ThreadID{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledMessages = append(m.ScheduledMessages, &ScheduledMessage{})
			if err := m.ScheduledMessages[len(m.ScheduledMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessagePost{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggeredMessageKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggeredMessageKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggeredMessageKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (TriggeredMessageKey_Key(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggeredMessageItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggeredMessageItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggeredMessageItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ordinal", wireType)
			}
			m.Ordinal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ordinal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Content = &TriggeredMessageItem_Message{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggeredMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggeredMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggeredMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &TriggeredMessageKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &TriggeredMessageItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTriggeredMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTriggeredMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTriggeredMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &TriggeredMessageKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &MessagePost{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTriggeredMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTriggeredMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTriggeredMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TriggeredMessage == nil {
				m.TriggeredMessage = &TriggeredMessage{}
			}
			if err := m.TriggeredMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggeredMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggeredMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggeredMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TriggeredMessageKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LookupKey = &TriggeredMessagesRequest_Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggeredMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggeredMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggeredMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredMessages = append(m.TriggeredMessages, &TriggeredMessage{})
			if err := m.TriggeredMessages[len(m.TriggeredMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTriggeredMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTriggeredMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTriggeredMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTriggeredMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTriggeredMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTriggeredMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTriggeredMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTriggeredMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTriggeredMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredMessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggeredMessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTriggeredMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTriggeredMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTriggeredMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggeredMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TriggeredMessage == nil {
				m.TriggeredMessage = &TriggeredMessage{}
			}
			if err := m.TriggeredMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneAttachmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneAttachmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneAttachmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerType", wireType)
			}
			m.OwnerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerType |= (CloneAttachmentsRequest_OwnerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneAttachmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneAttachmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneAttachmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc.proto", fileDescriptorSvc) }

var fileDescriptorSvc = []byte{
	// 6535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x7d, 0x4d, 0x6c, 0x1c, 0xc9,
	0x75, 0x30, 0x7b, 0x66, 0x48, 0xce, 0x3c, 0xfe, 0x35, 0x8b, 0x43, 0x72, 0x44, 0x49, 0x1c, 0xa9,
	0xb5, 0xda, 0x95, 0xb4, 0xbb, 0xdc, 0x15, 0x77, 0xbd, 0xfb, 0xd9, 0xbb, 0xb6, 0x77, 0x38, 0xd3,
	0x22, 0xdb, 0xa2, 0x66, 0xe8, 0x9e, 0x21, 0xb5, 0x5a, 0x7f, 0xd8, 0xf9, 0x5a, 0xec, 0x26, 0xd5,
	0xd6, 0xfc, 0xd0, 0xdd, 0x3d, 0xd2, 0xf2, 0xfb, 0xbe, 0x83, 0x93, 0x20, 0x7f, 0x48, 0x82, 0x04,
	0xb9, 0x18, 0x39, 0xe5, 0x92, 0x43, 0x6c, 0x24, 0xbe, 0xe5, 0x92, 0xe4, 0x10, 0xc0, 0x97, 0x5c,
	0x0c, 0xf8, 0x68, 0x24, 0x01, 0x11, 0x33, 0x39, 0x24, 0x08, 0x60, 0xf8, 0xb4, 0x87, 0x04, 0x08,
	0x82, 0xfa, 0xe9, 0xee, 0xaa, 0xfe, 0x19, 0x0e, 0x29, 0xad, 0xe1, 0xdb, 0xd4, 0xab, 0x57, 0x55,
	0xaf, 0xde, 0x7b, 0xf5, 0xea, 0xd5, 0xab, 0x57, 0x3d, 0x50, 0x70, 0x9f, 0xed, 0xaf, 0x1d, 0x39,
	0x7d, 0xaf, 0x8f, 0x0a, 0xde, 0x13, 0xc7, 0x32, 0x4c, 0xbb, 0x77, 0xb8, 0xf2, 0xe6, 0xa1, 0xed,
	0x3d, 0x19, 0x3c, 0x5e, 0xdb, 0xef, 0x77, 0xdf, 0x3a, 0xec, 0x1f, 0xf6, 0xdf, 0x22, 0x18, 0x8f,
	0x07, 0x07, 0xa4, 0x44, 0x0a, 0xe4, 0x17, 0x6d, 0xa9, 0xfc, 0x42, 0x82, 0xbc, 0xe6, 0x59, 0x8e,
	0xe1, 0xf5, 0x1d, 0x74, 0x1d, 0xa6, 0x5d, 0xcf, 0x70, 0xbc, 0xf6, 0xfe, 0xc0, 0x71, 0xfb, 0x4e,
	0x49, 0xba, 0x26, 0xdd, 0x2a, 0xe8, 0x53, 0x04, 0x56, 0x25, 0x20, 0x74, 0x15, 0xc0, 0xea, 0x99,
	0x3e, 0x42, 0x86, 0x20, 0x14, 0xac, 0x9e, 0xc9, 0xaa, 0x3f, 0x80, 0x82, 0x69, 0x3b, 0xd6, 0xbe,
	0x67, 0xf7, 0x7b, 0xa5, 0xec, 0x35, 0xe9, 0xd6, 0xec, 0xfa, 0xd5, 0xb5, 0x80, 0xb8, 0x35, 0x7f,
	0xa4, 0xb5, 0x9a, 0x8f, 0xa4, 0x87, 0xf8, 0xa8, 0x08, 0xe3, 0xfb, 0xfd, 0x41, 0xcf, 0x2b, 0xe5,
	0xae, 0x49, 0xb7, 0x66, 0x74, 0x5a, 0x50, 0x1a, 0x50, 0x08, 0xb0, 0xd1, 0x75, 0xb8, 0xaa, 0xb5,
	0x54, 0xbd, 0xd2, 0x6a, 0xe8, 0xed, 0x9a, 0xa6, 0xab, 0xd5, 0x96, 0xd6, 0xa8, 0xb7, 0xef, 0xe9,
	0x8d, 0x07, 0xed, 0x66, 0xab, 0xa2, 0xb7, 0xe4, 0x31, 0x54, 0x86, 0xcb, 0x69, 0x28, 0x6a, 0xbd,
	0x26, 0x4b, 0xca, 0x5f, 0x8d, 0xc3, 0x44, 0x8b, 0x90, 0x84, 0x96, 0x20, 0x63, 0x9b, 0x74, 0x9a,
	0x1b, 0x13, 0xa7, 0x27, 0xe5, 0x8c, 0x56, 0xd3, 0x33, 0xb6, 0x89, 0x3e, 0x80, 0xb9, 0xbe, 0x73,
	0x68, 0xf4, 0xec, 0xff, 0x6b, 0xe0, 0x61, 0xdb, 0xb6, 0x49, 0xa7, 0xba, 0x81, 0x4e, 0x4f, 0xca,
	0xb3, 0x0d, 0xae, 0x4a, 0xab, 0xe9, 0xb3, 0x3c, 0xaa, 0x66, 0xa2, 0xaf, 0xc3, 0xfc, 0x91, 0x63,
	0x77, 0x0d, 0xe7, 0xb8, 0x6d, 0xf5, 0x3c, 0xdb, 0x3b, 0xc6, 0xcd, 0xb3, 0xa4, 0xf9, 0xc2, 0xe9,
	0x49, 0x79, 0x6e, 0x87, 0x56, 0xaa, 0xa4, 0x4e, 0xab, 0xe9, 0x73, 0x47, 0x02, 0xc0, 0x44, 0x0a,
	0xe4, 0x3c, 0xe3, 0xd0, 0x2d, 0xe5, 0xae, 0x65, 0x6f, 0x4d, 0xad, 0xcf, 0x72, 0xfc, 0x6b, 0x19,
	0x87, 0x3a, 0xa9, 0x43, 0xef, 0xc2, 0x52, 0xc7, 0x70, 0xbd, 0x76, 0xd7, 0x72, 0x5d, 0xe3, 0xd0,
	0x6a, 0x7b, 0x76, 0xd7, 0x72, 0x3d, 0xa3, 0x7b, 0x54, 0x1a, 0xbf, 0x26, 0xdd, 0xca, 0xe9, 0x45,
	0x5c, 0xfb, 0x80, 0x56, 0xb6, 0xfc, 0x3a, 0xf4, 0x36, 0x14, 0x85, 0x56, 0xee, 0xa0, 0x8b, 0x47,
	0x2e, 0x4d, 0x10, 0x39, 0x22, 0xae, 0x4d, 0x93, 0xd6, 0xa0, 0x25, 0x98, 0x18, 0xf4, 0xf0, 0xf0,
	0xa5, 0xc9, 0x6b, 0xd2, 0xad, 0xbc, 0xce, 0x4a, 0x68, 0x0f, 0xae, 0x92, 0x9e, 0x22, 0x33, 0xb5,
	0x7a, 0xe6, 0x51, 0xdf, 0xee, 0x79, 0x6e, 0x29, 0x4f, 0x88, 0x5f, 0xe0, 0x88, 0x57, 0x59, 0x9d,
	0xbe, 0x82, 0x5b, 0x0a, 0x5c, 0xf0, 0xab, 0x5c, 0xf4, 0x3a, 0xcc, 0xef, 0x3b, 0x96, 0xe1, 0x59,
	0x26, 0x37, 0xa5, 0x02, 0x99, 0x92, 0xcc, 0x2a, 0xc2, 0xe9, 0xdc, 0x80, 0x19, 0x7f, 0x26, 0x54,
	0x71, 0xe0, 0x9a, 0x74, 0x6b, 0x5c, 0x9f, 0x66, 0xc0, 0x2a, 0x86, 0xa1, 0xdb, 0x90, 0xf3, 0x8e,
	0x8f, 0xac, 0xd2, 0x14, 0xd1, 0xc6, 0x45, 0x9e, 0x9b, 0xe4, 0x57, 0xeb, 0xf8, 0xc8, 0xd2, 0x09,
	0x0a, 0xd1, 0xff, 0x63, 0xd7, 0xb3, 0xba, 0x6d, 0xcf, 0xf6, 0x3a, 0x56, 0x69, 0x9a, 0xe9, 0x3f,
	0x81, 0xb5, 0x30, 0x08, 0xeb, 0xff, 0xc0, 0xb5, 0x1c, 0x86, 0x30, 0x43, 0xf5, 0x1f, 0x43, 0x68,
	0xf5, 0x6d, 0x90, 0x29, 0x83, 0xda, 0x8e, 0x75, 0x60, 0x39, 0x56, 0x6f, 0xdf, 0x2a, 0xcd, 0x12,
	0xc6, 0xcd, 0x51, 0xb8, 0xee, 0x83, 0xd1, 0x5b, 0x30, 0xd1, 0x77, 0xec, 0x43, 0xbb, 0x57, 0x9a,
	0x23, 0x94, 0x2d, 0xc7, 0x28, 0x6b, 0x90, 0x6a, 0x9d, 0xa1, 0x29, 0xef, 0xc0, 0xc4, 0x03, 0xab,
	0xfb, 0xd8, 0x72, 0xd0, 0x6d, 0x28, 0x84, 0x9a, 0x45, 0xb5, 0x77, 0xfa, 0xf4, 0xa4, 0x9c, 0x0f,
	0x54, 0x2a, 0x6f, 0x31, 0x5d, 0x52, 0xbe, 0x97, 0x03, 0xa0, 0xbd, 0x69, 0x9e, 0xd5, 0x4d, 0x55,
	0xf8, 0x44, 0xb6, 0x67, 0x52, 0xd8, 0xfe, 0x65, 0x98, 0x33, 0xf6, 0xbd, 0xbe, 0x13, 0x53, 0xef,
	0xf9, 0xd3, 0x93, 0xf2, 0x4c, 0x05, 0x57, 0x05, 0x94, 0xcc, 0x18, 0x5c, 0xd1, 0x44, 0x2b, 0x90,
	0xb7, 0x7b, 0x9e, 0xe5, 0xf4, 0x8c, 0x0e, 0x59, 0xe5, 0x79, 0x3d, 0x28, 0xa3, 0x12, 0x4c, 0x9a,
	0x56, 0xc7, 0xf2, 0x2c, 0x93, 0xe8, 0x70, 0x5e, 0xf7, 0x8b, 0x78, 0xbe, 0x94, 0x37, 0x78, 0xa8,
	0x89, 0x70, 0xbe, 0x6c, 0x62, 0x35, 0x3d, 0x4f, 0xab, 0xb5, 0xc4, 0x95, 0x3b, 0x39, 0xf2, 0xca,
	0x7d, 0x13, 0x50, 0xb7, 0x6f, 0xda, 0x07, 0xb6, 0xc0, 0x86, 0x3c, 0x61, 0xc3, 0xbc, 0x5f, 0x13,
	0xf2, 0x61, 0x0d, 0x26, 0x99, 0xa6, 0x11, 0xc5, 0x9b, 0x5a, 0x47, 0x9c, 0x08, 0xd9, 0x3a, 0xda,
	0x1a, 0xd3, 0x7d, 0x24, 0x54, 0x81, 0x59, 0x5f, 0x5d, 0x07, 0x47, 0xa6, 0xe1, 0x51, 0x9d, 0x9c,
	0x5a, 0x2f, 0xc5, 0x9b, 0xed, 0x92, 0xfa, 0xad, 0x31, 0xdd, 0x57, 0x70, 0x0a, 0xe0, 0xbb, 0xa0,
	0xcc, 0x21, 0x3a, 0x9a, 0xd8, 0x45, 0x8d, 0xd4, 0x73, 0x5d, 0x50, 0xc0, 0xc6, 0x04, 0xe4, 0x6c,
	0xcf, 0xea, 0x2a, 0xdf, 0x93, 0x60, 0x31, 0xd4, 0x8c, 0x3d, 0xdb, 0x7a, 0x5e, 0xb3, 0x3c, 0xc3,
	0xee, 0xb8, 0xe8, 0x3d, 0x98, 0xf5, 0xd9, 0x8d, 0xd7, 0x42, 0xa0, 0x30, 0xf2, 0xe9, 0x49, 0x79,
	0x3a, 0x6c, 0xa2, 0xd5, 0xf4, 0x69, 0x2f, 0x2c, 0x99, 0xa2, 0x5a, 0x66, 0x86, 0xa9, 0x25, 0xba,
	0x0c, 0x85, 0x67, 0xb6, 0xf5, 0x9c, 0x70, 0x99, 0x28, 0x4f, 0x4e, 0xcf, 0x63, 0x00, 0x66, 0xae,
	0x32, 0x80, 0x42, 0xb8, 0x4c, 0xde, 0x64, 0xcb, 0x57, 0x22, 0x8b, 0xe4, 0x12, 0x37, 0xcf, 0x00,
	0x67, 0x8d, 0x5b, 0xc2, 0x54, 0xc1, 0x33, 0x51, 0x05, 0x57, 0xae, 0x43, 0x0e, 0x63, 0xa1, 0x4b,
	0xb0, 0xa8, 0xab, 0xf7, 0x54, 0x5d, 0xad, 0x57, 0xd5, 0x76, 0xeb, 0xd1, 0x8e, 0xda, 0x56, 0xeb,
	0x2d, 0xad, 0xf5, 0x48, 0x1e, 0x53, 0xfe, 0x34, 0x03, 0x93, 0x8c, 0x77, 0x08, 0x41, 0xce, 0xb3,
	0x3e, 0xf3, 0xd8, 0x0e, 0x48, 0x7e, 0xa3, 0xf7, 0x61, 0xca, 0xf0, 0x3c, 0x63, 0xff, 0x49, 0xd7,
	0xc2, 0x06, 0x2e, 0x43, 0x0c, 0x1c, 0x6f, 0x4f, 0x2a, 0x41, 0xad, 0xce, 0x63, 0xa2, 0xd7, 0x61,
	0xc2, 0xed, 0x0f, 0x9c, 0x7d, 0x8b, 0xa8, 0x7c, 0x8a, 0x51, 0x64, 0x28, 0xe8, 0x7d, 0x98, 0x36,
	0x2d, 0xd7, 0xb3, 0x7b, 0x44, 0x29, 0xdd, 0xd2, 0x78, 0xba, 0x1d, 0x15, 0x10, 0xf1, 0xee, 0x49,
	0x8d, 0x52, 0x9e, 0xd0, 0x4c, 0x0b, 0xe8, 0x2e, 0x14, 0x30, 0xf1, 0xd8, 0x1c, 0xb9, 0xa5, 0x02,
	0xe9, 0xab, 0x98, 0xc4, 0x43, 0x3d, 0x8f, 0xd1, 0x74, 0xeb, 0xc0, 0xc5, 0xeb, 0xd0, 0xdf, 0x17,
	0x80, 0x74, 0xe5, 0x17, 0x95, 0x9f, 0x48, 0x90, 0xf7, 0x47, 0x47, 0x5f, 0x82, 0xc9, 0xfd, 0x27,
	0x46, 0xaf, 0x67, 0x75, 0x98, 0x6c, 0x2e, 0x27, 0xd0, 0xb8, 0x56, 0xa5, 0x28, 0xba, 0x8f, 0x9b,
	0x2a, 0xa0, 0x01, 0x4c, 0x32, 0x5c, 0x54, 0x82, 0xa2, 0x5a, 0xaf, 0xed, 0x34, 0xb4, 0x7a, 0xab,
	0x5d, 0xdd, 0xaa, 0xd4, 0xeb, 0xea, 0x76, 0xbb, 0xb2, 0xb3, 0x23, 0x8f, 0x25, 0xd6, 0x34, 0x1f,
	0x34, 0x65, 0x09, 0xad, 0xc0, 0x52, 0xac, 0x66, 0xaf, 0xa1, 0x55, 0x55, 0x39, 0x93, 0x58, 0xa7,
	0x3e, 0xa8, 0x68, 0xdb, 0x72, 0x56, 0x19, 0xc0, 0x8c, 0xb0, 0xe4, 0x2e, 0xac, 0xfc, 0x6f, 0x84,
	0xc6, 0x20, 0x93, 0x66, 0x0c, 0x02, 0x53, 0xa0, 0x6c, 0x06, 0xc3, 0xd2, 0x55, 0x79, 0xd1, 0x61,
	0x95, 0x7f, 0xcd, 0x02, 0x34, 0x8d, 0x67, 0x96, 0xf9, 0xcd, 0x81, 0x45, 0xb6, 0xeb, 0x64, 0xfb,
	0xee, 0xaf, 0xa2, 0x4c, 0x6c, 0x15, 0x85, 0x8d, 0xb9, 0x55, 0xf4, 0x2a, 0x8c, 0x7f, 0x07, 0x83,
	0xc8, 0xd2, 0x9c, 0x5a, 0x97, 0x39, 0x7c, 0x82, 0xaa, 0xd3, 0x6a, 0x54, 0x86, 0x29, 0xf7, 0x49,
	0xdf, 0xf1, 0xd8, 0x76, 0x98, 0x23, 0xea, 0x02, 0x04, 0x44, 0xf7, 0xc3, 0xd0, 0x7d, 0x18, 0x27,
	0x3e, 0x9d, 0xef, 0x3e, 0x60, 0x65, 0xed, 0x7b, 0x46, 0x87, 0x58, 0xf3, 0x19, 0x9d, 0x16, 0xb0,
	0xe6, 0xf5, 0x1d, 0xd3, 0xc6, 0x9b, 0xc3, 0x24, 0xd9, 0xc9, 0xfd, 0xa2, 0x68, 0x5a, 0xf2, 0x43,
	0x4d, 0xcb, 0x3b, 0xb0, 0xd8, 0xeb, 0x7b, 0xf6, 0x81, 0xbd, 0x4f, 0x17, 0x46, 0xdb, 0xea, 0x19,
	0x8f, 0x3b, 0x96, 0x49, 0xbc, 0x88, 0xbc, 0x5e, 0x14, 0x2a, 0x55, 0x5a, 0x87, 0xe9, 0x7c, 0x62,
	0x9b, 0xa6, 0xd5, 0x23, 0x2a, 0x9f, 0xd7, 0x59, 0x09, 0xef, 0x57, 0x9e, 0xd5, 0x3d, 0xea, 0xf8,
	0xc6, 0x3a, 0xaf, 0x07, 0x65, 0xec, 0x0a, 0x74, 0xfa, 0xbd, 0x43, 0xc1, 0x57, 0x28, 0x60, 0x08,
	0x9d, 0xfa, 0x35, 0x98, 0x32, 0x2d, 0x77, 0xdf, 0xb1, 0x8f, 0x88, 0x33, 0x4c, 0x5d, 0x05, 0x1e,
	0x84, 0x9d, 0x05, 0xd3, 0x3a, 0x30, 0x06, 0x1d, 0xaf, 0x1d, 0x0c, 0xc2, 0x9c, 0x05, 0x06, 0x6f,
	0x31, 0xb0, 0xf2, 0x15, 0x18, 0xa7, 0x02, 0xbe, 0x0b, 0x53, 0xd6, 0x67, 0x47, 0x8e, 0xe5, 0xba,
	0xc4, 0x3a, 0x48, 0x64, 0x45, 0xcf, 0xf1, 0x2b, 0xef, 0xb3, 0x23, 0x47, 0xe7, 0x71, 0x94, 0xcf,
	0xb3, 0x90, 0xc3, 0x50, 0x24, 0x43, 0xb6, 0xd7, 0xa7, 0x36, 0x2d, 0xaf, 0xe3, 0x9f, 0x68, 0x09,
	0x8b, 0xe1, 0xa9, 0xd5, 0xa3, 0xeb, 0x71, 0x6b, 0x4c, 0xa7, 0x45, 0x74, 0x07, 0x72, 0x07, 0x1d,
	0xe3, 0x90, 0x79, 0xf0, 0xc5, 0x48, 0xf7, 0x6b, 0xf7, 0x3a, 0xc6, 0xe1, 0xd6, 0x98, 0x4e, 0x70,
	0xd0, 0x57, 0x61, 0x8a, 0x69, 0x2e, 0xd1, 0xb0, 0x1c, 0x69, 0xb2, 0x12, 0x6d, 0x12, 0xfa, 0x5a,
	0x5b, 0x63, 0x3a, 0x78, 0x41, 0x09, 0x21, 0xc8, 0x7a, 0xc6, 0x21, 0x51, 0x0f, 0x4c, 0x00, 0x2e,
	0x28, 0x1d, 0xc8, 0xe1, 0x21, 0xd0, 0x22, 0xcc, 0xab, 0x1f, 0xef, 0xe8, 0xed, 0x7b, 0xdb, 0x95,
	0xcd, 0xb6, 0x56, 0xdf, 0xab, 0x6c, 0x6b, 0x35, 0x79, 0x0c, 0x15, 0x41, 0x0e, 0xc1, 0xbb, 0x75,
	0x5d, 0xad, 0xd4, 0x64, 0x09, 0xad, 0xc2, 0x4a, 0x14, 0xda, 0x0e, 0x4c, 0xbd, 0x9c, 0x41, 0xcb,
	0xb0, 0x10, 0xd6, 0xdf, 0x6b, 0x6c, 0x6f, 0x37, 0x1e, 0x6a, 0xf5, 0x4d, 0x39, 0xab, 0xfc, 0x58,
	0xf2, 0x5d, 0x24, 0x42, 0xd0, 0x15, 0x28, 0x11, 0xbc, 0xd6, 0x16, 0xe9, 0x82, 0xec, 0x11, 0xe1,
	0xd8, 0x49, 0xb5, 0x3b, 0x95, 0x96, 0xa6, 0xd6, 0x5b, 0xb2, 0x84, 0x77, 0x97, 0x58, 0x6d, 0x4b,
	0xad, 0x3c, 0x90, 0x33, 0x89, 0x0d, 0x9b, 0xbb, 0x3b, 0x3b, 0x0d, 0xbd, 0x25, 0x67, 0xd1, 0x0d,
	0x28, 0xa7, 0x75, 0xdb, 0x6e, 0xaa, 0xd5, 0x5d, 0x5d, 0x95, 0x73, 0xe8, 0x26, 0x5c, 0x4f, 0x47,
	0x6a, 0x55, 0xea, 0xb5, 0x8a, 0x5e, 0x93, 0xc7, 0x37, 0x26, 0x61, 0xfc, 0x99, 0xd1, 0x19, 0x58,
	0xca, 0xaf, 0x8d, 0x03, 0x84, 0x7b, 0x52, 0xb8, 0x41, 0x64, 0xf8, 0x0d, 0xe2, 0x12, 0x64, 0x07,
	0x4e, 0x87, 0x39, 0x70, 0x93, 0xa7, 0x27, 0xe5, 0xec, 0xae, 0xbe, 0xad, 0x63, 0x58, 0xc4, 0xd7,
	0xcd, 0x45, 0x7d, 0xdd, 0x37, 0x00, 0xf6, 0xfb, 0x3d, 0xcf, 0xea, 0x79, 0x78, 0x51, 0x12, 0x01,
	0x6e, 0xcc, 0x9c, 0x9e, 0x94, 0x0b, 0x55, 0x0a, 0xd5, 0x6a, 0x7a, 0x81, 0x21, 0x68, 0x26, 0x5a,
	0x87, 0x71, 0xbb, 0x1b, 0xba, 0x4a, 0xbc, 0x82, 0x68, 0x18, 0x1e, 0x12, 0x8a, 0xd5, 0x90, 0xa0,
	0xe2, 0x36, 0xc6, 0xc0, 0xb4, 0xfb, 0xcc, 0x4f, 0xe2, 0xdb, 0x54, 0x30, 0x5c, 0x6c, 0x43, 0x50,
	0x91, 0x0e, 0x53, 0x87, 0x56, 0xcf, 0x72, 0xec, 0xfd, 0x36, 0x9e, 0x17, 0x75, 0x8f, 0xca, 0x5c,
	0xcb, 0x4d, 0x5a, 0xbb, 0xab, 0x6f, 0x87, 0xcd, 0x37, 0x66, 0x4f, 0x4f, 0xca, 0x10, 0xd6, 0x60,
	0x1d, 0x65, 0xbd, 0xec, 0x3a, 0x1d, 0x4c, 0xc7, 0x33, 0xdb, 0xb5, 0x3d, 0xb2, 0x88, 0x45, 0x3a,
	0xf6, 0x30, 0x5c, 0xa4, 0x83, 0xa0, 0xa2, 0x0f, 0xa1, 0xb0, 0x6f, 0x38, 0x56, 0xfb, 0xa8, 0x63,
	0xf4, 0xc8, 0xaa, 0x9e, 0x12, 0x4e, 0xc2, 0x55, 0xc3, 0xb1, 0x76, 0x3a, 0x46, 0x4f, 0x68, 0x9a,
	0xdf, 0x67, 0x50, 0x3a, 0xa2, 0x69, 0xf5, 0xc9, 0xd9, 0x20, 0x3a, 0xa2, 0x69, 0xf5, 0xa3, 0x23,
	0x9a, 0x56, 0x1f, 0xd5, 0x61, 0xee, 0xc8, 0x38, 0xc6, 0xb0, 0xb6, 0x63, 0x7d, 0x67, 0x60, 0xb9,
	0x5e, 0x49, 0x26, 0xad, 0x6f, 0x70, 0xad, 0x77, 0x28, 0x86, 0x4e, 0x11, 0x84, 0x6e, 0x66, 0x8f,
	0x84, 0x3a, 0xf4, 0x01, 0xe4, 0xcd, 0xfe, 0xfe, 0x00, 0x83, 0x4a, 0xf3, 0xb1, 0x09, 0xd4, 0x58,
	0x95, 0x38, 0x01, 0xbf, 0x01, 0xf6, 0x32, 0x4d, 0xc3, 0x33, 0x94, 0xdf, 0x90, 0x60, 0x2e, 0x22,
	0x5f, 0x6c, 0x54, 0xbb, 0x76, 0xd7, 0x0a, 0xdc, 0xba, 0x82, 0x1e, 0x94, 0xd1, 0xab, 0x90, 0xef,
	0x5a, 0xa6, 0x6d, 0x84, 0x2e, 0xe4, 0xd4, 0xe9, 0x49, 0x79, 0xf2, 0x01, 0x86, 0x69, 0x35, 0xbc,
	0x81, 0xe2, 0x1f, 0x64, 0x03, 0x79, 0x6e, 0x9b, 0xde, 0x13, 0xa2, 0xb8, 0x33, 0x3a, 0x2d, 0x10,
	0x33, 0x6e, 0xd9, 0x87, 0x4f, 0xfc, 0x10, 0x02, 0x2b, 0x29, 0xbf, 0x29, 0xc1, 0x5c, 0x84, 0x6f,
	0x43, 0xa9, 0xb8, 0x09, 0x6c, 0xa0, 0xda, 0x10, 0x22, 0x6a, 0xe8, 0x2d, 0x98, 0x32, 0x07, 0x0e,
	0x3d, 0x68, 0xf4, 0x5c, 0x32, 0x66, 0x8e, 0xaa, 0x52, 0x8d, 0x81, 0xeb, 0x4d, 0x1d, 0x7c, 0x94,
	0xba, 0xab, 0xfc, 0x96, 0x04, 0x73, 0x11, 0xcd, 0x7d, 0x29, 0xdc, 0x38, 0x37, 0x21, 0x1d, 0x40,
	0x71, 0x01, 0xbe, 0x14, 0x52, 0x10, 0xe4, 0x7a, 0x06, 0x73, 0xea, 0x0b, 0x3a, 0xf9, 0xad, 0x3c,
	0x80, 0x62, 0xd2, 0xaa, 0x1b, 0x3a, 0x1e, 0xb3, 0x4b, 0x99, 0xb8, 0x5d, 0x52, 0x3e, 0xc6, 0xc2,
	0x14, 0x96, 0x1d, 0xa6, 0x8e, 0x2c, 0xbb, 0xd0, 0x71, 0x22, 0xd4, 0x11, 0x34, 0x4c, 0x1d, 0xa9,
	0xd4, 0x4c, 0x6c, 0xd2, 0x28, 0x1e, 0xa1, 0x91, 0x85, 0xaf, 0x08, 0xa4, 0x8e, 0x09, 0xed, 0x00,
	0x8a, 0x2f, 0x4c, 0xf4, 0x36, 0x4c, 0x07, 0x4b, 0x39, 0x1c, 0x80, 0xb0, 0xd7, 0xc7, 0xd6, 0x6a,
	0x3a, 0xf8, 0x8b, 0x57, 0x33, 0xd1, 0x2b, 0x30, 0x1b, 0xb6, 0xe0, 0x86, 0x9a, 0xf6, 0x71, 0xc8,
	0x68, 0x5b, 0x50, 0x4a, 0x5b, 0x8e, 0xd8, 0xb8, 0xfa, 0x8b, 0x39, 0x18, 0x91, 0x18, 0x57, 0xd6,
	0x02, 0x1b, 0x57, 0x86, 0xa0, 0x99, 0xca, 0x6f, 0x67, 0x60, 0x61, 0x67, 0xf0, 0xb8, 0x63, 0xbb,
	0x4f, 0x2c, 0x93, 0x3b, 0xee, 0x5f, 0x81, 0xdc, 0x60, 0x10, 0xb4, 0xcf, 0x9f, 0x9e, 0x94, 0x73,
	0xbb, 0xbb, 0x5a, 0x4d, 0x27, 0xd0, 0x17, 0x8b, 0x72, 0x09, 0x67, 0xf2, 0xec, 0xd0, 0x33, 0x79,
	0x62, 0x40, 0x2c, 0x77, 0x8e, 0x80, 0xd8, 0x6d, 0x7a, 0x64, 0x25, 0x7b, 0xcc, 0x54, 0x42, 0x08,
	0x07, 0xcf, 0x55, 0xa7, 0xa7, 0xda, 0xdf, 0xcf, 0xc0, 0x14, 0xf3, 0xac, 0x77, 0xfa, 0xae, 0xc7,
	0x9d, 0xbd, 0xa4, 0xf3, 0x9f, 0xbd, 0x32, 0xa3, 0x9e, 0xbd, 0xf8, 0xb0, 0x46, 0x36, 0x12, 0xd6,
	0xf0, 0x8f, 0x92, 0xb9, 0xf4, 0xa3, 0xe4, 0xf8, 0xc8, 0x47, 0xc9, 0x60, 0x0f, 0x9f, 0xe0, 0xf7,
	0x70, 0xee, 0xc4, 0x36, 0x29, 0x9e, 0xd8, 0xfe, 0x33, 0x07, 0x08, 0xf3, 0xc1, 0x3f, 0x80, 0x30,
	0xd3, 0x3e, 0x5c, 0x2f, 0x04, 0xd1, 0x66, 0x86, 0x8a, 0xf6, 0x3d, 0x98, 0x3d, 0x70, 0xfa, 0xdd,
	0x58, 0x24, 0x88, 0x1c, 0x5b, 0xee, 0x39, 0xfd, 0x6e, 0x20, 0xd4, 0xe9, 0x83, 0xb0, 0x64, 0xa2,
	0x8f, 0x60, 0xde, 0xb4, 0x8e, 0x1c, 0x6b, 0x9f, 0x84, 0x9c, 0xce, 0x3e, 0x1d, 0xcb, 0x21, 0x76,
	0x93, 0xca, 0x6a, 0x1b, 0x96, 0xb9, 0x1e, 0x46, 0x3d, 0x32, 0x2f, 0x85, 0x6d, 0x6a, 0xbc, 0x00,
	0xdf, 0x82, 0x05, 0xae, 0xb7, 0x40, 0x96, 0x13, 0x44, 0x96, 0x28, 0xac, 0xd2, 0x7c, 0xa9, 0xbe,
	0x06, 0x73, 0x5c, 0x03, 0x22, 0x60, 0xca, 0xfa, 0xd9, 0x10, 0xdc, 0xc2, 0xa2, 0xde, 0x06, 0x6e,
	0xcc, 0x36, 0x2f, 0xf5, 0xfc, 0x30, 0xa9, 0x2f, 0x86, 0x8d, 0x2a, 0x9c, 0xfc, 0xc9, 0x91, 0x21,
	0x1c, 0x96, 0xa8, 0x42, 0x81, 0x8c, 0xcb, 0x91, 0x43, 0xdd, 0xb3, 0x37, 0x01, 0xf1, 0x2c, 0x16,
	0x4e, 0xf4, 0x1c, 0xf3, 0xfd, 0x40, 0x6f, 0x19, 0xa6, 0xcc, 0x7e, 0xcf, 0x6b, 0x93, 0xe3, 0xd1,
	0x31, 0x3b, 0xec, 0x00, 0x06, 0xd5, 0x09, 0x04, 0xbd, 0x1d, 0x1e, 0x70, 0xa9, 0x53, 0xb5, 0x14,
	0x3f, 0xe0, 0x62, 0x55, 0x0b, 0x0f, 0xb9, 0x4f, 0x61, 0x41, 0xd0, 0x3d, 0xf7, 0xa8, 0xdf, 0x73,
	0xad, 0x60, 0x35, 0x4b, 0x67, 0xae, 0x66, 0x74, 0x1b, 0x26, 0x68, 0x2d, 0x3b, 0x53, 0xcf, 0xc7,
	0x90, 0x75, 0x86, 0xa0, 0xfc, 0x87, 0x24, 0x8c, 0xe6, 0xfe, 0xca, 0xa8, 0xfa, 0x99, 0x8c, 0x5d,
	0xc7, 0x3b, 0x2b, 0x25, 0xba, 0x34, 0x4d, 0x74, 0x22, 0x8d, 0xb3, 0x01, 0x9e, 0xd2, 0x83, 0xa2,
	0x38, 0x59, 0xc6, 0xdb, 0xd7, 0x61, 0x1c, 0x33, 0xce, 0x3f, 0x18, 0xa6, 0x30, 0x97, 0xe2, 0x9c,
	0x87, 0xbb, 0x3f, 0xce, 0x40, 0xe9, 0x81, 0xe1, 0x3c, 0xa5, 0x60, 0xb7, 0xe2, 0xea, 0x24, 0x96,
	0x4d, 0x59, 0xfc, 0x7f, 0x60, 0x9e, 0x31, 0xf1, 0xb9, 0xe1, 0x59, 0x4e, 0xd7, 0x70, 0x9e, 0xfa,
	0x04, 0xbc, 0xc3, 0xcf, 0x24, 0xa5, 0x3d, 0x1b, 0xeb, 0xa1, 0xdf, 0x56, 0x97, 0x3d, 0x11, 0xe0,
	0x9e, 0x27, 0xb2, 0x78, 0x05, 0x0a, 0x61, 0xe8, 0x96, 0x46, 0x16, 0x43, 0x00, 0x36, 0xc6, 0xae,
	0x65, 0xf5, 0x58, 0xec, 0x99, 0xfc, 0x5e, 0x71, 0x60, 0x2e, 0x42, 0x81, 0xa8, 0x16, 0xd2, 0x50,
	0xb5, 0x48, 0xbf, 0x88, 0xc9, 0xa4, 0x5f, 0xc4, 0x28, 0x97, 0xe1, 0x52, 0x02, 0x3b, 0xa8, 0x10,
	0x95, 0x1f, 0x4a, 0x80, 0x42, 0x69, 0x05, 0x9a, 0x7c, 0x0e, 0xa2, 0x3e, 0x04, 0xf9, 0x99, 0x6d,
	0x3d, 0xb7, 0xf8, 0x10, 0x3d, 0xb7, 0xb5, 0xef, 0x91, 0xba, 0x80, 0x79, 0xb3, 0xcf, 0xf8, 0x32,
	0xf6, 0x26, 0xf3, 0x36, 0xbb, 0xa8, 0x63, 0x01, 0xa0, 0x85, 0x84, 0x3b, 0x3c, 0x3d, 0x40, 0x52,
	0x9a, 0x30, 0x1b, 0xd2, 0xab, 0x9a, 0x87, 0xe7, 0x5a, 0xe3, 0x4b, 0x30, 0x21, 0xdc, 0x26, 0xb2,
	0x92, 0x62, 0xc0, 0x82, 0xc0, 0x04, 0xa6, 0xe1, 0x6f, 0xc1, 0xb8, 0x65, 0xe2, 0xa5, 0x42, 0x15,
	0xec, 0x52, 0x62, 0xd7, 0x98, 0x06, 0x9d, 0xe2, 0xa1, 0x4b, 0x90, 0x7f, 0x62, 0xb8, 0xed, 0x6e,
	0xdf, 0xa1, 0x5e, 0x58, 0x5e, 0x9f, 0x7c, 0x62, 0xb8, 0x0f, 0xfa, 0x8e, 0xa5, 0x7c, 0x9e, 0x85,
	0x05, 0x1a, 0xfa, 0xa2, 0x72, 0xf0, 0x39, 0xfd, 0x09, 0xac, 0x70, 0xa6, 0x33, 0xea, 0x23, 0x51,
	0xd6, 0x5f, 0x39, 0x3d, 0x29, 0x97, 0x6a, 0x01, 0x56, 0xc4, 0x5b, 0x2a, 0x99, 0xc9, 0x35, 0x22,
	0x73, 0x33, 0x23, 0x30, 0x17, 0xbd, 0xcf, 0x42, 0x77, 0x34, 0x16, 0x73, 0x23, 0x1a, 0x8a, 0x13,
	0x49, 0xe7, 0x43, 0xe1, 0x49, 0x4a, 0x90, 0x1b, 0x59, 0x09, 0x6e, 0xf9, 0x21, 0x40, 0x48, 0x0e,
	0x01, 0xe2, 0x73, 0x27, 0x0d, 0x02, 0xfe, 0x2f, 0x98, 0x75, 0x8d, 0x67, 0x96, 0xd9, 0x26, 0x45,
	0x3c, 0xca, 0x54, 0x68, 0x18, 0xc3, 0xf0, 0xa2, 0x56, 0xdb, 0x1a, 0xd3, 0xa7, 0xdd, 0xb0, 0x6c,
	0x2a, 0x36, 0x0b, 0xca, 0x5f, 0x81, 0xd2, 0x37, 0x77, 0x55, 0xfd, 0x11, 0x8b, 0x6c, 0x34, 0x69,
	0x68, 0xa3, 0x52, 0xdb, 0x6a, 0x54, 0x69, 0xc8, 0x25, 0xa1, 0xb6, 0x59, 0xd9, 0x53, 0x6b, 0xb2,
	0x84, 0x6e, 0xc2, 0xf5, 0xa4, 0xb6, 0xdb, 0xdb, 0xed, 0x7b, 0x0d, 0xbd, 0xbd, 0xa7, 0xa9, 0x0f,
	0x55, 0x5d, 0xce, 0x6c, 0x4c, 0x03, 0x50, 0xf2, 0x30, 0x6b, 0x94, 0x86, 0x1f, 0xf1, 0x61, 0xca,
	0xea, 0xdb, 0x41, 0xe9, 0x0c, 0x3b, 0x98, 0xaa, 0xac, 0xdf, 0x97, 0xa0, 0x28, 0x8a, 0x23, 0x34,
	0xc8, 0xbc, 0xba, 0xc6, 0x57, 0xc2, 0x68, 0xaa, 0x8a, 0xde, 0x01, 0x20, 0x31, 0xd2, 0x36, 0xa7,
	0x0b, 0x7c, 0x5c, 0x6e, 0xcf, 0xe8, 0x0c, 0x2c, 0x22, 0xfc, 0x02, 0xc1, 0x23, 0x7c, 0x0d, 0xa2,
	0xac, 0x39, 0x2e, 0xca, 0xaa, 0x7c, 0x04, 0x0b, 0x81, 0x54, 0x6c, 0x8b, 0x37, 0x2f, 0xa3, 0x5e,
	0x2a, 0xea, 0x50, 0x14, 0x7b, 0x60, 0x93, 0xfd, 0x0a, 0xcc, 0x84, 0x9a, 0x60, 0x27, 0x4e, 0x3a,
	0xd4, 0x07, 0x4e, 0x17, 0x6c, 0xcb, 0x55, 0xf6, 0xe0, 0x12, 0x0d, 0x85, 0x27, 0xd1, 0xf6, 0x65,
	0x98, 0x13, 0x55, 0x8c, 0x76, 0xcd, 0x6e, 0x1c, 0x79, 0x1d, 0x73, 0xf5, 0x19, 0x5e, 0xc5, 0x5c,
	0xe5, 0x0a, 0xac, 0x24, 0xf5, 0xcb, 0x4c, 0xed, 0x26, 0xac, 0x70, 0x01, 0x70, 0x16, 0x6d, 0xbd,
	0x08, 0x4b, 0x1e, 0xc1, 0xe5, 0xc4, 0x8e, 0x5e, 0x02, 0x67, 0x3e, 0x83, 0x19, 0xa6, 0x85, 0xbf,
	0xe4, 0x8d, 0x40, 0xf9, 0xc0, 0xb7, 0xeb, 0x9c, 0xef, 0x36, 0xea, 0x52, 0x51, 0xfe, 0xbf, 0xdf,
	0x38, 0x60, 0xe7, 0x1b, 0x00, 0x01, 0xdd, 0xbe, 0x00, 0xc9, 0x99, 0xd6, 0x27, 0xdc, 0xd5, 0x0b,
	0x3e, 0xe5, 0xee, 0x0b, 0x92, 0xfe, 0x35, 0x7f, 0x53, 0xe7, 0x97, 0xe2, 0x24, 0xed, 0xdd, 0xe7,
	0x7e, 0x02, 0xf1, 0x3e, 0x86, 0xf2, 0xdd, 0x2c, 0x2c, 0x57, 0xc9, 0xc5, 0x37, 0x27, 0x17, 0x36,
	0x8f, 0xf4, 0x2b, 0xc9, 0xc4, 0xcb, 0x94, 0x73, 0x38, 0x2f, 0x2f, 0xed, 0xde, 0x85, 0xbb, 0x49,
	0x19, 0x17, 0x6f, 0x52, 0x52, 0xaf, 0x47, 0x26, 0x46, 0xba, 0x1e, 0x99, 0x4c, 0xbd, 0x1e, 0xc9,
	0x0f, 0xbd, 0x1e, 0x29, 0x9c, 0x71, 0x3d, 0x02, 0xb1, 0xeb, 0x11, 0x45, 0x87, 0x52, 0x5c, 0x02,
	0x4c, 0x96, 0xef, 0xc1, 0x14, 0x67, 0x10, 0x12, 0xdc, 0x0c, 0xae, 0x0d, 0x84, 0x06, 0x41, 0xf9,
	0x3c, 0x03, 0xcb, 0xf4, 0xa2, 0x2f, 0x2e, 0xd6, 0xf7, 0x62, 0xfb, 0x98, 0x94, 0xbc, 0x8f, 0x89,
	0xbb, 0x58, 0x28, 0xb4, 0xcc, 0xb9, 0x84, 0x96, 0x1d, 0x26, 0xb4, 0x9c, 0x28, 0xb4, 0x1b, 0x30,
	0x73, 0xd0, 0x77, 0xf6, 0xad, 0xb6, 0x63, 0x3d, 0x1e, 0xd8, 0x1d, 0x3f, 0x41, 0x62, 0x9a, 0x00,
	0x75, 0x0a, 0x43, 0x9f, 0x0c, 0x93, 0xec, 0xec, 0xfa, 0x4d, 0x8e, 0xae, 0x7a, 0x82, 0x90, 0x29,
	0x5b, 0x52, 0x14, 0x40, 0x14, 0xe6, 0xe4, 0x19, 0xc2, 0xcc, 0xc7, 0x85, 0xb9, 0x09, 0xa5, 0x38,
	0xdf, 0xc3, 0x3d, 0x72, 0x04, 0x31, 0x52, 0x1c, 0xe5, 0x77, 0x25, 0x28, 0x52, 0x83, 0x1e, 0x89,
	0x69, 0x24, 0x64, 0xa5, 0x48, 0x23, 0x66, 0xa5, 0xc4, 0x2f, 0x5f, 0x33, 0x23, 0x5d, 0xbe, 0x2e,
	0xc3, 0x62, 0x84, 0x14, 0xb6, 0xad, 0xfc, 0x3f, 0x58, 0xa0, 0x15, 0xa2, 0xe1, 0x7e, 0x01, 0x12,
	0x47, 0x3f, 0xa8, 0x2a, 0x4b, 0x3e, 0x83, 0x44, 0xdb, 0xad, 0xfc, 0x28, 0x07, 0x0b, 0x54, 0x06,
	0x17, 0xde, 0x4e, 0x12, 0x26, 0x90, 0x19, 0x71, 0x02, 0xe2, 0x65, 0x52, 0x36, 0x7a, 0x99, 0xa4,
	0xc1, 0xa2, 0x61, 0x9a, 0xed, 0x2e, 0x49, 0x70, 0x0a, 0xbb, 0xa7, 0x49, 0x70, 0x85, 0x8d, 0xa5,
	0xd3, 0x93, 0x32, 0xaa, 0x98, 0x26, 0x4d, 0x80, 0xf2, 0xc7, 0x70, 0x75, 0x64, 0x44, 0x60, 0xa6,
	0x8b, 0x74, 0x28, 0x39, 0x56, 0xb7, 0xff, 0xcc, 0x4a, 0xe8, 0x6d, 0x9c, 0xf4, 0x76, 0xe9, 0xf4,
	0xa4, 0xbc, 0xa8, 0x13, 0x9c, 0x68, 0x87, 0x8b, 0x4e, 0x1c, 0x6c, 0xba, 0xb1, 0xcc, 0xb0, 0x89,
	0x78, 0x66, 0x58, 0x03, 0x96, 0xf1, 0x0c, 0x0e, 0xfa, 0x9d, 0x4e, 0xff, 0xb9, 0x38, 0xea, 0x24,
	0x19, 0xb5, 0x74, 0x7a, 0x52, 0x2e, 0x56, 0x4c, 0xf3, 0x1e, 0xc3, 0x08, 0x07, 0x2d, 0x1a, 0x31,
	0xa8, 0xe9, 0xa2, 0x8f, 0x61, 0x85, 0xcd, 0x23, 0xa9, 0xcf, 0x3c, 0xe9, 0xf3, 0xf2, 0xe9, 0x49,
	0x79, 0x99, 0xce, 0x24, 0xde, 0xed, 0xb2, 0x93, 0x54, 0x61, 0x12, 0x3f, 0x13, 0x93, 0x4a, 0x92,
	0x0c, 0x0b, 0xb8, 0x1f, 0x7d, 0xd2, 0x30, 0xcd, 0x96, 0x71, 0xe8, 0x62, 0x23, 0xc5, 0x06, 0x25,
	0xb5, 0x40, 0x6a, 0x81, 0x82, 0x30, 0x82, 0x52, 0x81, 0xa2, 0xa8, 0x44, 0xe7, 0xf7, 0x0c, 0x7e,
	0x9e, 0x85, 0x05, 0x6a, 0xd9, 0x45, 0x45, 0xfc, 0x02, 0xa3, 0xd5, 0x17, 0x0d, 0xde, 0x20, 0x2e,
	0x15, 0xb3, 0xc0, 0x52, 0x2f, 0xb9, 0x40, 0xd8, 0xd4, 0x48, 0x81, 0xb0, 0x88, 0xee, 0x4f, 0xc7,
	0x93, 0x06, 0xa9, 0x3f, 0x31, 0x73, 0x76, 0x86, 0xe2, 0xd7, 0x61, 0x3e, 0xae, 0xd4, 0xb3, 0x44,
	0x15, 0x48, 0x28, 0x3d, 0xaa, 0xce, 0x73, 0xdd, 0x33, 0x14, 0x79, 0x2e, 0xae, 0xc8, 0x61, 0x62,
	0xa2, 0x3c, 0x52, 0x62, 0x62, 0x34, 0xc2, 0x35, 0x1f, 0x8d, 0x70, 0x29, 0x7f, 0x26, 0x41, 0x51,
	0x14, 0x78, 0xa0, 0x34, 0x23, 0x9b, 0x9e, 0xf7, 0x82, 0x34, 0x03, 0x12, 0x58, 0xc8, 0x0c, 0x0b,
	0x2c, 0x40, 0x68, 0xa5, 0x39, 0xbd, 0xcc, 0x9e, 0xa5, 0x97, 0xff, 0x95, 0xf5, 0x3d, 0x0e, 0xb5,
	0x7b, 0xe4, 0x1d, 0xff, 0xca, 0x2b, 0x67, 0xe2, 0xbd, 0xca, 0xf8, 0x39, 0xee, 0x55, 0xb8, 0x7b,
	0x83, 0x09, 0xe1, 0xde, 0x20, 0xd0, 0xfb, 0x49, 0x4e, 0xef, 0x45, 0x2d, 0xce, 0xa7, 0x69, 0x71,
	0xe1, 0x82, 0x5a, 0x0c, 0x2f, 0xa0, 0xc5, 0x53, 0xc3, 0xb4, 0x78, 0x7a, 0xb4, 0xf4, 0xda, 0x7b,
	0x70, 0x29, 0x41, 0xf8, 0xe7, 0xb7, 0x6e, 0x15, 0x28, 0x52, 0x08, 0x9d, 0xc5, 0x05, 0xc2, 0x77,
	0xca, 0xef, 0x05, 0xa9, 0x99, 0x41, 0x1f, 0xe1, 0x19, 0x86, 0xf2, 0x22, 0xe9, 0x0c, 0x43, 0x91,
	0x75, 0x1f, 0x03, 0xa9, 0xb0, 0x90, 0xb4, 0x73, 0x64, 0x08, 0xa3, 0x17, 0x4f, 0x4f, 0xca, 0xf3,
	0xf1, 0x3d, 0x63, 0xfe, 0x20, 0xba, 0x5b, 0x28, 0x87, 0xb0, 0xcc, 0x8e, 0x52, 0xf7, 0xfa, 0x0e,
	0x1b, 0xe3, 0xdc, 0x07, 0x64, 0x2c, 0x32, 0x5f, 0x59, 0xfb, 0xbd, 0xce, 0x31, 0x8b, 0x6f, 0x4c,
	0x31, 0x58, 0xa3, 0xd7, 0x39, 0xc6, 0x3e, 0x62, 0x7c, 0xa0, 0x8b, 0x1c, 0xde, 0xee, 0xc3, 0xfc,
	0x4b, 0x73, 0xef, 0x95, 0x6d, 0x40, 0x2f, 0xf1, 0x00, 0xf2, 0x0c, 0xe6, 0x39, 0x43, 0xc5, 0x48,
	0xbb, 0x01, 0x93, 0x62, 0xd6, 0x1f, 0x9c, 0x9e, 0x94, 0x27, 0x98, 0xcb, 0x39, 0x61, 0xd3, 0x04,
	0xc3, 0x17, 0x3b, 0x0f, 0x7f, 0x9d, 0x0f, 0x29, 0x5f, 0xe0, 0x2a, 0x46, 0xa9, 0xc2, 0x95, 0xc4,
	0x6c, 0xe1, 0xf3, 0xcc, 0x41, 0xe9, 0xc2, 0xd5, 0x94, 0x4e, 0x18, 0x41, 0xdb, 0x30, 0x4f, 0x7a,
	0x21, 0xc9, 0xc1, 0x26, 0xad, 0x64, 0x02, 0xbf, 0x96, 0x48, 0x1d, 0xdf, 0xc9, 0x9c, 0x2d, 0x02,
	0x94, 0x9f, 0xe6, 0x60, 0x85, 0xae, 0xe9, 0x6d, 0xbb, 0xf7, 0xd4, 0xbf, 0x19, 0x0f, 0x48, 0xfe,
	0x1a, 0xc8, 0xbc, 0x25, 0xbe, 0x1b, 0xd2, 0x4e, 0xac, 0x10, 0x6f, 0xb5, 0xef, 0x62, 0xf3, 0x29,
	0x20, 0x6b, 0x66, 0xb4, 0xfd, 0x7a, 0x28, 0x91, 0x58, 0xfb, 0xf5, 0x68, 0xfb, 0x75, 0xcd, 0x44,
	0x1b, 0x80, 0x44, 0xfb, 0x7d, 0x37, 0xb4, 0xfd, 0xc5, 0xd3, 0x93, 0xb2, 0x2c, 0x18, 0x70, 0x4c,
	0x82, 0x7c, 0x24, 0x42, 0x12, 0xfa, 0x58, 0x0f, 0xc3, 0xbc, 0xf1, 0x3e, 0xd6, 0x63, 0x7d, 0xac,
	0x33, 0x27, 0xc7, 0xfa, 0xcc, 0xa3, 0x5b, 0x07, 0xbb, 0xa1, 0xe6, 0x9e, 0x56, 0xf0, 0x1e, 0xaf,
	0xff, 0xb4, 0xa2, 0x35, 0xfc, 0xde, 0x19, 0xbd, 0x0b, 0x4b, 0x47, 0x8e, 0x75, 0x64, 0xf5, 0xcc,
	0xb6, 0x6b, 0xf5, 0x4c, 0xbc, 0x6b, 0x10, 0xde, 0xdf, 0x65, 0x61, 0x82, 0x22, 0xab, 0x6d, 0x92,
	0x4a, 0x2a, 0x97, 0xbb, 0xa9, 0xad, 0xd6, 0xfd, 0xdc, 0xcd, 0x84, 0x56, 0xeb, 0xc1, 0xc6, 0x03,
	0x67, 0x6f, 0x3c, 0x37, 0x60, 0x86, 0xdf, 0x37, 0xee, 0xb2, 0x8d, 0x63, 0x9a, 0xdb, 0x38, 0xee,
	0x46, 0x91, 0xd6, 0x59, 0xea, 0x26, 0x8f, 0xb4, 0xae, 0x3c, 0x87, 0xcb, 0x89, 0x9a, 0x15, 0x35,
	0x57, 0x77, 0xd3, 0x37, 0x0c, 0x1f, 0x23, 0x44, 0x5e, 0x4f, 0xbf, 0x88, 0xf3, 0x31, 0x94, 0xbf,
	0x95, 0xe0, 0x2a, 0x1d, 0xb9, 0xd1, 0x7b, 0xdc, 0x37, 0x1c, 0x8c, 0x24, 0x7a, 0x2a, 0x09, 0xbe,
	0x88, 0xf4, 0x62, 0x8f, 0x97, 0x32, 0xe7, 0xf0, 0x29, 0x86, 0x27, 0x0d, 0x2a, 0xf7, 0x61, 0x35,
	0x8d, 0xfa, 0xf3, 0x6f, 0xb5, 0x1f, 0xc1, 0x02, 0xcf, 0xfe, 0x0b, 0xec, 0xb4, 0x87, 0x50, 0x14,
	0x7b, 0x38, 0x37, 0x11, 0xe8, 0x15, 0x98, 0x11, 0xd4, 0x92, 0xed, 0x6c, 0x22, 0x50, 0x59, 0x87,
	0xfc, 0x7d, 0xeb, 0x98, 0x44, 0xe9, 0x91, 0x0c, 0xd9, 0xa7, 0xd6, 0x31, 0xcb, 0x78, 0xc2, 0x3f,
	0x51, 0x91, 0xa5, 0x6c, 0xfa, 0xa9, 0x99, 0x34, 0x7f, 0xf3, 0x7f, 0xc3, 0x3c, 0x4b, 0x9b, 0x6a,
	0x5a, 0xde, 0xe0, 0x48, 0x7d, 0x66, 0xf5, 0xbc, 0x20, 0xbf, 0x4a, 0x0a, 0xf3, 0xab, 0xd0, 0x3b,
	0x00, 0x86, 0xe7, 0x39, 0xf6, 0xe3, 0x81, 0x67, 0x25, 0x65, 0xad, 0xf8, 0x23, 0xeb, 0x1c, 0x9a,
	0xf2, 0x15, 0x58, 0xdc, 0x71, 0xfa, 0xcf, 0x6c, 0xd7, 0xee, 0xf7, 0x2c, 0x73, 0xe7, 0x49, 0xbf,
	0x67, 0xd1, 0x11, 0xf0, 0x4e, 0x8d, 0x4b, 0xed, 0xde, 0x00, 0x6f, 0xc1, 0xfe, 0x2b, 0x40, 0x02,
	0xab, 0x13, 0x90, 0xf2, 0xdf, 0xe3, 0x70, 0x25, 0x2a, 0x40, 0xd2, 0x38, 0xbc, 0x41, 0x9b, 0xed,
	0xf4, 0xfb, 0x4f, 0x07, 0x47, 0xed, 0xc7, 0xf4, 0xca, 0x85, 0x05, 0x4b, 0xdf, 0xe5, 0xa8, 0x1a,
	0xd6, 0xc1, 0xda, 0x36, 0x69, 0xbd, 0x41, 0xe3, 0xa8, 0xd3, 0x1d, 0xae, 0x84, 0x5e, 0x3f, 0x23,
	0x14, 0xb2, 0x35, 0xc6, 0x1d, 0x1b, 0x5e, 0xe7, 0x3d, 0x94, 0x6c, 0xdc, 0x43, 0xc1, 0xc8, 0x81,
	0x8f, 0xb2, 0x03, 0x60, 0x61, 0x22, 0xf8, 0x4c, 0xe6, 0xbb, 0xa3, 0x52, 0x4c, 0x0a, 0xf4, 0x06,
	0xc6, 0xf2, 0x7f, 0xa2, 0x2a, 0xcc, 0xf8, 0xd9, 0xa8, 0x2e, 0x96, 0x21, 0x4b, 0x61, 0xba, 0x12,
	0xcf, 0x47, 0x0d, 0x45, 0xbc, 0x25, 0xe9, 0xd3, 0x87, 0x1c, 0x10, 0x35, 0xf0, 0x9a, 0x0c, 0x24,
	0xd5, 0x26, 0x82, 0x20, 0xf6, 0x58, 0xdc, 0x14, 0x13, 0xa5, 0xb9, 0x25, 0x61, 0x83, 0x2f, 0x56,
	0x28, 0x7f, 0x20, 0xc1, 0x34, 0xcf, 0x60, 0xf4, 0x1a, 0xdc, 0x68, 0xd4, 0x37, 0x1a, 0x15, 0xbd,
	0xa6, 0xd5, 0x37, 0xfd, 0xfc, 0xe2, 0xed, 0x46, 0xe3, 0xfe, 0xee, 0x4e, 0x7b, 0xe3, 0x11, 0x97,
	0xfe, 0x7c, 0x1b, 0x6e, 0x0e, 0x43, 0x64, 0x00, 0xad, 0x26, 0x4b, 0x67, 0xa1, 0xd2, 0x67, 0x37,
	0x18, 0x35, 0xa3, 0xfc, 0x89, 0x04, 0x85, 0x80, 0x7d, 0xe8, 0x16, 0xbc, 0x12, 0x6f, 0xa8, 0xee,
	0xa9, 0xf5, 0x56, 0x34, 0x19, 0x7b, 0x0d, 0xee, 0x0c, 0xc5, 0xdc, 0x54, 0xeb, 0xaa, 0xae, 0x55,
	0xdb, 0x4d, 0xb5, 0xb5, 0xbb, 0x23, 0x4b, 0x68, 0x1d, 0xd6, 0x86, 0xe2, 0xef, 0xe8, 0x8d, 0x3d,
	0xad, 0xa9, 0x35, 0xea, 0x6a, 0xad, 0xbd, 0xb3, 0xd5, 0xa8, 0xab, 0x72, 0x66, 0x63, 0x0a, 0x0a,
	0x81, 0x26, 0x6f, 0x4c, 0xc2, 0x38, 0x91, 0xad, 0xf2, 0x0d, 0xb8, 0x9a, 0xa2, 0x0c, 0xe7, 0xb7,
	0x62, 0xbf, 0x9e, 0x05, 0xea, 0x7f, 0xfa, 0x8f, 0x8f, 0xd2, 0x1e, 0x71, 0x24, 0x27, 0x70, 0x27,
	0x98, 0xfb, 0xec, 0x79, 0xcc, 0x3d, 0x79, 0xde, 0xd7, 0x77, 0x92, 0x53, 0xf3, 0xaa, 0xb4, 0x32,
	0x34, 0xf7, 0xfb, 0x02, 0x80, 0x44, 0x04, 0xfb, 0xcf, 0x7b, 0x82, 0x53, 0x3a, 0x1e, 0x46, 0x04,
	0x1b, 0xb8, 0x2a, 0x8c, 0x08, 0xf6, 0xb9, 0xa2, 0xf8, 0x16, 0x70, 0x22, 0xfe, 0x16, 0x90, 0x3d,
	0x3b, 0x24, 0x9e, 0x45, 0x4e, 0xf7, 0x8b, 0x24, 0x67, 0x94, 0xbd, 0xc4, 0x63, 0x2f, 0xf3, 0x82,
	0xf2, 0x79, 0x1f, 0xe4, 0x6d, 0x14, 0x60, 0x92, 0x25, 0xa8, 0x2b, 0x37, 0x60, 0x42, 0xab, 0x6d,
	0xdb, 0xae, 0x87, 0x2e, 0x41, 0x36, 0xbc, 0x9e, 0x22, 0x89, 0xa7, 0xf8, 0x5c, 0x84, 0x61, 0xca,
	0x1f, 0x4a, 0xec, 0xe2, 0x33, 0x9a, 0x64, 0xb4, 0xe6, 0xb7, 0x89, 0x8a, 0x9a, 0xf6, 0x19, 0x74,
	0xb3, 0x35, 0x46, 0x3a, 0x42, 0x15, 0x00, 0xe1, 0x40, 0x96, 0xd2, 0x8c, 0x5c, 0x8e, 0x05, 0x67,
	0xb3, 0xad, 0x31, 0xbd, 0xe0, 0x9b, 0x2a, 0x77, 0x23, 0x07, 0x99, 0xc7, 0xc7, 0xca, 0x43, 0x58,
	0x8c, 0x10, 0xc4, 0xf4, 0xef, 0x6b, 0xfe, 0x69, 0x27, 0x48, 0x2d, 0xa2, 0x5e, 0xf4, 0x72, 0xf4,
	0x88, 0xe2, 0x87, 0xae, 0xe9, 0xfd, 0xa4, 0xdf, 0x8f, 0xf2, 0xfd, 0x8c, 0x7f, 0x1c, 0x16, 0xb0,
	0xd8, 0x7c, 0x03, 0x4d, 0x94, 0xce, 0xd0, 0xc4, 0xcc, 0x8b, 0x69, 0x62, 0xf6, 0xc5, 0x34, 0x31,
	0x37, 0xa2, 0x26, 0xae, 0x47, 0xf5, 0x26, 0x25, 0xa2, 0x97, 0xa2, 0x3b, 0x9f, 0xf8, 0xa7, 0x0c,
	0x91, 0x55, 0x4c, 0x12, 0x1f, 0xfa, 0x57, 0xbf, 0xfe, 0x10, 0x54, 0x4b, 0x52, 0x05, 0x31, 0xcd,
	0x0b, 0x42, 0x79, 0x24, 0x5c, 0x8b, 0x47, 0xc4, 0xf0, 0x21, 0xc8, 0x42, 0xd7, 0x11, 0x57, 0x8f,
	0x6f, 0x82, 0x39, 0xce, 0x77, 0xac, 0x99, 0x91, 0x9b, 0xf1, 0xe8, 0x15, 0xc6, 0x0f, 0x25, 0xb8,
	0xc4, 0xdd, 0xd8, 0xbc, 0xcc, 0x91, 0x53, 0x0c, 0xd9, 0x8b, 0x4b, 0x21, 0x89, 0xde, 0x97, 0x22,
	0x85, 0x7f, 0xcc, 0x82, 0xdc, 0xdc, 0x7f, 0x62, 0x99, 0x83, 0xce, 0xd9, 0x66, 0xfa, 0x1c, 0x39,
	0x85, 0x5f, 0xd0, 0x4b, 0x6a, 0x7c, 0x82, 0xf1, 0xa9, 0x6d, 0x1f, 0xf4, 0x1d, 0xf6, 0x4d, 0x80,
	0xe9, 0x00, 0x78, 0xaf, 0xef, 0xa0, 0x65, 0x98, 0x74, 0xb1, 0xaf, 0x63, 0x78, 0xc4, 0xfa, 0xe6,
	0xf4, 0x09, 0x97, 0xbc, 0x06, 0x40, 0x55, 0x58, 0x20, 0x15, 0x91, 0x2b, 0xb1, 0xc9, 0xf0, 0x4c,
	0xd9, 0xc4, 0x5b, 0x35, 0x7f, 0x2d, 0x26, 0xbb, 0x22, 0xc4, 0xe4, 0x0d, 0x78, 0x3e, 0xdd, 0x80,
	0x17, 0x22, 0x06, 0xfc, 0xcb, 0x30, 0xe1, 0x7a, 0x86, 0x37, 0x70, 0xd9, 0x61, 0xee, 0x3a, 0x2f,
	0x9e, 0x08, 0xff, 0x9b, 0x04, 0x51, 0x67, 0x0d, 0x78, 0xdb, 0x3f, 0x75, 0x4e, 0xdb, 0xff, 0xef,
	0xc1, 0x91, 0x2a, 0x3a, 0xc6, 0x2f, 0xf7, 0x8a, 0x2c, 0x26, 0xb6, 0x6c, 0x82, 0xd8, 0xb8, 0x55,
	0x92, 0xbb, 0xc0, 0x2a, 0xf9, 0xb6, 0x7f, 0xfe, 0x8a, 0x4f, 0x95, 0xad, 0x94, 0x2d, 0x98, 0x0f,
	0xa9, 0x10, 0x57, 0xcb, 0xe5, 0x21, 0xe2, 0xd0, 0x65, 0x37, 0x02, 0x51, 0x6c, 0xb8, 0xca, 0x0c,
	0x4c, 0x0a, 0x5b, 0xb7, 0xa0, 0x18, 0x1b, 0x2a, 0xe4, 0x30, 0xb9, 0xf3, 0x8b, 0x36, 0xd5, 0x6a,
	0x3a, 0x8a, 0x0e, 0xa4, 0x99, 0xca, 0x35, 0x58, 0x4d, 0x1b, 0x8a, 0xd9, 0xb3, 0x7f, 0x92, 0xa0,
	0x14, 0xad, 0xe4, 0xf2, 0x8b, 0x7c, 0xbd, 0xc3, 0xbb, 0xe4, 0xb9, 0xf4, 0xee, 0x1b, 0x29, 0x73,
	0xc8, 0x0c, 0x9b, 0xc3, 0xd6, 0x58, 0xd2, 0x2c, 0xc4, 0x93, 0x4d, 0x76, 0xf8, 0xc9, 0x66, 0x63,
	0x1a, 0x80, 0x39, 0xa6, 0x4f, 0xad, 0x63, 0xe5, 0x10, 0x2e, 0x25, 0xcc, 0x8e, 0x89, 0xf4, 0x1b,
	0x80, 0x62, 0x34, 0xfa, 0x0e, 0xc1, 0x50, 0x99, 0xce, 0x47, 0x89, 0x74, 0x95, 0xbf, 0x91, 0xfc,
	0x0b, 0xc0, 0x88, 0x30, 0x2f, 0xfa, 0x70, 0xfa, 0x05, 0x16, 0x0c, 0x77, 0x13, 0x97, 0x1d, 0x2d,
	0x25, 0x7d, 0x19, 0x16, 0x23, 0xc4, 0x33, 0xf5, 0x78, 0x0c, 0x53, 0x2d, 0xe3, 0xd0, 0x7d, 0x29,
	0x31, 0x94, 0x25, 0x98, 0x38, 0x72, 0xac, 0x03, 0xfb, 0x33, 0x3f, 0x49, 0x90, 0x96, 0x94, 0x75,
	0x98, 0xa6, 0x63, 0x30, 0xb1, 0xf8, 0xdf, 0x79, 0x91, 0xd2, 0xbf, 0xf3, 0xa2, 0xdc, 0x85, 0x6c,
	0xcb, 0x38, 0x4c, 0x3c, 0xf5, 0x87, 0x49, 0x39, 0x19, 0x3e, 0x29, 0x07, 0x6b, 0xfa, 0x42, 0xcb,
	0xb1, 0x0f, 0x0f, 0x2d, 0x27, 0x90, 0xdb, 0x7d, 0xeb, 0x18, 0xbd, 0x1b, 0x86, 0x1d, 0x66, 0xd7,
	0x15, 0x7e, 0xb4, 0x38, 0xf2, 0xda, 0x7d, 0xeb, 0x98, 0x86, 0x26, 0x96, 0x60, 0xc2, 0x1d, 0x3c,
	0xc6, 0x0d, 0xd9, 0x64, 0x68, 0x49, 0x79, 0x0e, 0x59, 0xdc, 0xe9, 0x75, 0xb8, 0xda, 0xd2, 0xb5,
	0xcd, 0x4d, 0x55, 0x57, 0x6b, 0xed, 0x07, 0x6a, 0xb3, 0x59, 0xd9, 0x54, 0xdb, 0xf7, 0x55, 0xfe,
	0xcc, 0x78, 0x13, 0xae, 0x27, 0xa3, 0xd4, 0xd5, 0x87, 0xdc, 0xdb, 0xd9, 0x57, 0x41, 0x49, 0x46,
	0xab, 0x3c, 0xac, 0x3c, 0xf2, 0x01, 0x72, 0x46, 0xf9, 0x87, 0x0c, 0x14, 0xa3, 0x14, 0x0f, 0xfd,
	0xb6, 0xc9, 0x16, 0x14, 0x3d, 0x1f, 0x3f, 0x65, 0x85, 0xc6, 0xfa, 0xab, 0xe9, 0xc8, 0x8b, 0xc2,
	0xcc, 0x2f, 0xf0, 0xc3, 0x27, 0x7c, 0xb2, 0x56, 0x36, 0xcc, 0xfb, 0x79, 0xe1, 0x63, 0x50, 0xe1,
	0x9c, 0x5b, 0xe1, 0xcf, 0x33, 0x20, 0x47, 0x99, 0x91, 0xca, 0xd8, 0x17, 0x58, 0xb9, 0x75, 0x58,
	0x12, 0xd6, 0x57, 0x94, 0xa1, 0x24, 0x57, 0x82, 0x5f, 0x66, 0x41, 0x47, 0xc5, 0x7e, 0x1c, 0x4a,
	0xdc, 0x0d, 0x3f, 0xdb, 0x89, 0x72, 0xd7, 0x2f, 0xa2, 0xb7, 0xa9, 0xd6, 0xd3, 0xb8, 0xcb, 0xea,
	0x70, 0xad, 0xa7, 0x1a, 0xff, 0x25, 0xff, 0x0d, 0xc5, 0x04, 0x59, 0x97, 0xe5, 0x21, 0x6d, 0xf8,
	0xd7, 0x14, 0x17, 0x92, 0x95, 0xf2, 0x83, 0x8c, 0xef, 0x7b, 0x44, 0xfb, 0x7e, 0x09, 0x49, 0x43,
	0xe9, 0x5c, 0xce, 0x5c, 0x88, 0xcb, 0x8c, 0x97, 0xd9, 0xd1, 0x79, 0xc9, 0xbf, 0x6d, 0xc9, 0x8d,
	0xf6, 0xb6, 0x85, 0x97, 0xe5, 0xb8, 0x20, 0xcb, 0xd0, 0x79, 0x89, 0xf3, 0x2a, 0x74, 0x5e, 0x62,
	0x6b, 0x3d, 0xc1, 0x79, 0x89, 0xb5, 0x97, 0xa3, 0xab, 0x5d, 0xf9, 0x0b, 0x09, 0x4a, 0x51, 0xb4,
	0x60, 0x7b, 0x48, 0x67, 0xac, 0x74, 0x21, 0xc6, 0xae, 0x53, 0xc6, 0x66, 0x46, 0x61, 0xec, 0xd6,
	0x18, 0x61, 0x6d, 0x7c, 0xff, 0x4f, 0xa0, 0x36, 0xdc, 0xff, 0x63, 0x5c, 0x49, 0xda, 0xff, 0x63,
	0x6c, 0x99, 0x8f, 0xb2, 0xc5, 0x0d, 0x9d, 0xba, 0x34, 0x7d, 0x4d, 0x33, 0xb7, 0xd2, 0x79, 0xcd,
	0x6d, 0xe8, 0xd4, 0xa5, 0x89, 0x5b, 0xf9, 0x81, 0x04, 0x57, 0x59, 0x36, 0xd2, 0x17, 0x4d, 0x0d,
	0xaf, 0x96, 0x19, 0xd1, 0xc4, 0xdc, 0x84, 0x59, 0xfa, 0x3d, 0xa7, 0x20, 0xe3, 0x92, 0xbe, 0x01,
	0x9d, 0xa1, 0x50, 0x35, 0xd4, 0xde, 0x34, 0x5a, 0x5f, 0xba, 0xf6, 0xfe, 0x5d, 0x16, 0x96, 0xab,
	0x9d, 0x7e, 0x8f, 0x7b, 0x76, 0x1f, 0x28, 0x6f, 0xe4, 0xf1, 0xa9, 0x34, 0xf2, 0xe3, 0xd3, 0xfb,
	0x00, 0x34, 0xc2, 0xc2, 0x7d, 0x4a, 0xe6, 0x0d, 0xfe, 0x9b, 0x06, 0xc9, 0x03, 0xae, 0x91, 0xd8,
	0x0b, 0x8d, 0x8c, 0xf7, 0xfd, 0x9f, 0xe8, 0x55, 0xc8, 0xd3, 0xce, 0x02, 0x9b, 0x4f, 0x5e, 0x6c,
	0x13, 0x5c, 0xad, 0xa6, 0x4f, 0x92, 0x4a, 0xcd, 0x54, 0x3e, 0x97, 0xa0, 0x10, 0x74, 0x80, 0x6e,
	0x40, 0xb9, 0xba, 0x4d, 0xe2, 0xb3, 0x95, 0x56, 0xab, 0x52, 0xdd, 0x7a, 0xa0, 0xd6, 0x5b, 0xed,
	0xc6, 0xc3, 0xba, 0xaa, 0x73, 0x0e, 0xc7, 0x10, 0xa4, 0x4a, 0xb5, 0xda, 0xd8, 0x25, 0xee, 0xc6,
	0x9b, 0x70, 0x3b, 0x0d, 0x29, 0xe6, 0x86, 0xc8, 0x19, 0x74, 0x1b, 0x6e, 0xa6, 0xa1, 0x93, 0x97,
	0x28, 0x01, 0x6a, 0x16, 0x29, 0xb0, 0x9a, 0xda, 0x33, 0x09, 0x39, 0xcb, 0x39, 0xec, 0x36, 0xa5,
	0xe1, 0xec, 0x69, 0x4d, 0xad, 0x25, 0x8f, 0x2b, 0x4d, 0x28, 0xc5, 0x19, 0xca, 0x14, 0xe5, 0xa2,
	0x22, 0xbc, 0xf3, 0x23, 0xf1, 0x5b, 0x27, 0xcb, 0xb0, 0x90, 0xfc, 0x99, 0x93, 0x12, 0x14, 0xf9,
	0x0a, 0xf5, 0xe3, 0x96, 0xaa, 0xd7, 0x2b, 0xdb, 0xb2, 0x84, 0x8a, 0x20, 0x27, 0x7c, 0xdd, 0x64,
	0x11, 0xe6, 0x85, 0x0f, 0x9b, 0x90, 0x80, 0x7b, 0x36, 0xda, 0xbf, 0xff, 0xbd, 0x93, 0x1c, 0xba,
	0x0c, 0xcb, 0x7c, 0xc5, 0xb6, 0xba, 0x59, 0xa9, 0x3e, 0xa2, 0x9d, 0x8d, 0xa3, 0x32, 0x5c, 0x16,
	0x3b, 0xab, 0xee, 0xea, 0x1c, 0x0d, 0x13, 0x77, 0x7e, 0x47, 0x82, 0x69, 0x3e, 0x87, 0x07, 0x5d,
	0x82, 0x45, 0xd6, 0xa2, 0xa1, 0x6b, 0x9b, 0x5a, 0xbd, 0xbd, 0x5b, 0xbf, 0x5f, 0x6f, 0x3c, 0xac,
	0xcb, 0x63, 0xe8, 0x1a, 0x5c, 0x11, 0xab, 0xfc, 0x2f, 0xa6, 0x68, 0xf5, 0x3d, 0xad, 0xa5, 0xca,
	0x12, 0x56, 0x17, 0x11, 0xa3, 0xa1, 0x6f, 0x56, 0xea, 0xda, 0x27, 0x15, 0xf2, 0xe1, 0xc8, 0x6a,
	0xa3, 0x86, 0xe5, 0xbf, 0x04, 0x48, 0x44, 0x6a, 0x3e, 0xaa, 0x57, 0xe5, 0xec, 0x9d, 0x3e, 0xcc,
	0x8a, 0x49, 0xff, 0xe8, 0x0a, 0x94, 0xa8, 0x46, 0xb0, 0x67, 0x49, 0x22, 0x63, 0x2f, 0xc3, 0x72,
	0xac, 0xb6, 0xde, 0xd0, 0x1f, 0x10, 0xde, 0x2a, 0xb0, 0x9a, 0x50, 0xd9, 0xd2, 0xee, 0x69, 0x55,
	0x42, 0x4c, 0x53, 0xce, 0xdc, 0xa9, 0x43, 0x21, 0x78, 0xeb, 0x83, 0xa9, 0xda, 0xab, 0x6c, 0xef,
	0xb2, 0x2f, 0x99, 0x85, 0x93, 0x2e, 0x82, 0xcc, 0xc1, 0xd5, 0x8f, 0x2b, 0x55, 0xac, 0xf2, 0x0b,
	0x30, 0xc7, 0x41, 0x1f, 0x54, 0xea, 0x8f, 0xe4, 0xcc, 0x9d, 0x3f, 0x96, 0x60, 0x25, 0x3d, 0x1d,
	0x1c, 0x3b, 0xef, 0x02, 0x05, 0x6d, 0xb5, 0x5e, 0xd9, 0xd8, 0x56, 0x6b, 0xed, 0xdd, 0x9d, 0x5a,
	0xa5, 0x85, 0xc9, 0xab, 0xab, 0xd4, 0xc7, 0x1f, 0x8a, 0xd6, 0xd2, 0x77, 0x55, 0xea, 0xe3, 0x0f,
	0x45, 0xbb, 0x57, 0xd9, 0x6e, 0xaa, 0x72, 0xe6, 0xce, 0x5f, 0x4a, 0xb0, 0x94, 0x7c, 0xee, 0x46,
	0xaf, 0xc0, 0xb5, 0x66, 0x75, 0x4b, 0xad, 0xed, 0x6e, 0x73, 0xc7, 0x84, 0x66, 0xab, 0xd2, 0xda,
	0x6d, 0x72, 0x0c, 0x18, 0x86, 0xb5, 0xa3, 0xd6, 0x6b, 0x5a, 0x7d, 0x53, 0x96, 0xf0, 0x2a, 0x4c,
	0xc5, 0x6a, 0xe2, 0x53, 0x49, 0x66, 0x68, 0x47, 0x35, 0x75, 0x5b, 0x6d, 0xa9, 0x35, 0x39, 0xbb,
	0xfe, 0xd7, 0x57, 0x60, 0x92, 0xa5, 0x00, 0xa0, 0x6f, 0x81, 0x1c, 0x5d, 0xb7, 0x48, 0x39, 0xdb,
	0x4a, 0xae, 0xdc, 0x18, 0x8a, 0xc3, 0x16, 0xfe, 0xa7, 0x30, 0x1f, 0x4b, 0x52, 0x43, 0x42, 0xcb,
	0x94, 0xfc, 0xc5, 0x95, 0x57, 0x86, 0x23, 0xb1, 0xfe, 0x31, 0xf1, 0x91, 0x37, 0x17, 0x22, 0xf1,
	0xc9, 0x4f, 0x62, 0x56, 0x6e, 0x0c, 0xc5, 0x61, 0x9d, 0x9b, 0x7e, 0xda, 0xaf, 0x90, 0x33, 0x81,
	0x6e, 0xc6, 0xda, 0x26, 0x65, 0xeb, 0xac, 0xbc, 0x7a, 0x16, 0x1a, 0x1b, 0xa5, 0x0b, 0x4b, 0xc9,
	0x19, 0x06, 0xe8, 0x56, 0xac, 0x87, 0x94, 0x14, 0x8a, 0x95, 0xdb, 0x23, 0x60, 0x46, 0x87, 0x8b,
	0x1d, 0x9b, 0xe2, 0xc3, 0xa5, 0x38, 0x29, 0x09, 0xc3, 0xa5, 0xba, 0x08, 0x06, 0xa0, 0xf8, 0x5d,
	0x03, 0x7a, 0x25, 0x99, 0xfd, 0x91, 0x61, 0x6e, 0x9e, 0x81, 0x15, 0x9d, 0x51, 0x2c, 0xe2, 0x1d,
	0x9f, 0x51, 0x4a, 0x64, 0x2f, 0x61, 0x46, 0xa9, 0xf1, 0xc6, 0x06, 0x4c, 0xf3, 0xb9, 0xc1, 0x68,
	0x35, 0xce, 0x0c, 0x41, 0x36, 0xe5, 0xd4, 0x7a, 0xd6, 0xa1, 0x0e, 0x33, 0xc2, 0xab, 0x0c, 0xc4,
	0xb7, 0x48, 0x7a, 0x3a, 0xb2, 0x72, 0x2d, 0x1d, 0x21, 0xe4, 0x49, 0xb2, 0x2b, 0x2a, 0xf0, 0x64,
	0xa8, 0x63, 0x2c, 0xf0, 0x64, 0xb8, 0x5f, 0x8b, 0xa5, 0x1c, 0xbf, 0x9a, 0x11, 0xa4, 0x9c, 0x7a,
	0x29, 0x24, 0x48, 0x39, 0xfd, 0x7e, 0x27, 0x32, 0x04, 0x7b, 0x6b, 0x98, 0x36, 0x84, 0xf8, 0x1c,
	0x33, 0x6d, 0x88, 0xe8, 0x73, 0xd0, 0x80, 0x69, 0x43, 0x15, 0x69, 0x68, 0x88, 0x38, 0x81, 0x69,
	0xc3, 0x14, 0x89, 0x7f, 0xf7, 0x22, 0x28, 0x52, 0xc2, 0x6b, 0x9c, 0x95, 0x72, 0x6a, 0x7d, 0xd8,
	0x21, 0x6f, 0x62, 0x84, 0x0e, 0x13, 0xf2, 0x8e, 0x84, 0x0e, 0x13, 0xb3, 0x8a, 0x3e, 0x85, 0xf9,
	0xd8, 0xab, 0x7f, 0xc1, 0x7a, 0xa7, 0x7d, 0x22, 0x41, 0xb0, 0xde, 0xa9, 0x1f, 0x0e, 0x40, 0xdf,
	0x86, 0xc5, 0xc4, 0xac, 0x04, 0xf4, 0xda, 0x88, 0x49, 0x2c, 0x2b, 0xb7, 0xce, 0x46, 0x0c, 0x32,
	0x35, 0xa7, 0xb8, 0x2f, 0x50, 0x20, 0xfe, 0xd3, 0x60, 0xf1, 0x0f, 0xce, 0xac, 0xac, 0xa6, 0x55,
	0x87, 0xac, 0xe6, 0xbf, 0x67, 0x81, 0x52, 0xf0, 0xdd, 0x24, 0x56, 0x27, 0x7e, 0x08, 0xa3, 0x01,
	0xd3, 0xfc, 0x7b, 0x6c, 0xa1, 0xc3, 0x84, 0x77, 0xf3, 0x42, 0x87, 0x89, 0x0f, 0xb9, 0x3f, 0x85,
	0xf9, 0xd8, 0x01, 0x5b, 0x90, 0x5d, 0x5a, 0xb0, 0x40, 0x90, 0x5d, 0xfa, 0x19, 0x5d, 0x87, 0x19,
	0xe1, 0x26, 0x5f, 0xb0, 0x5a, 0x49, 0x49, 0x07, 0x82, 0xd5, 0x4a, 0x4e, 0x02, 0xf8, 0x14, 0xe6,
	0x63, 0x97, 0x02, 0x02, 0xcd, 0x69, 0x17, 0x22, 0x02, 0xcd, 0xe9, 0xf7, 0x0a, 0x9a, 0xf0, 0xed,
	0xd1, 0x2b, 0xc9, 0xd9, 0xcf, 0xac, 0xc7, 0xab, 0x29, 0xb5, 0xa1, 0xbc, 0x04, 0x43, 0xb4, 0x9a,
	0x84, 0x6e, 0x27, 0x2b, 0x40, 0xa2, 0xf1, 0x31, 0xb9, 0x57, 0xee, 0xe1, 0x83, 0x6c, 0xc1, 0xd9,
	0x48, 0x7f, 0xf9, 0x2d, 0x38, 0x1b, 0xc3, 0xde, 0x75, 0xbf, 0x0f, 0x39, 0xf2, 0x6c, 0x6a, 0x49,
	0x0c, 0xde, 0x07, 0xfd, 0x2c, 0xc7, 0xe0, 0xac, 0xe1, 0x57, 0x83, 0x6f, 0xd0, 0x97, 0xe2, 0x99,
	0x41, 0xac, 0xf1, 0xa5, 0x84, 0x1a, 0xd6, 0xfc, 0xa3, 0xd0, 0xdf, 0x8c, 0x63, 0x05, 0xa3, 0xaf,
	0x24, 0x55, 0x85, 0x9e, 0x5e, 0x34, 0xd9, 0x5e, 0xf0, 0xf4, 0x52, 0x52, 0xfe, 0x05, 0x4f, 0x2f,
	0x35, 0x5b, 0x5f, 0x13, 0x3e, 0x3a, 0x7e, 0x25, 0x39, 0xaf, 0x3c, 0x41, 0x31, 0x12, 0x52, 0xd4,
	0xb7, 0x61, 0x8a, 0xfb, 0x0c, 0x08, 0x4a, 0xc6, 0x76, 0x93, 0xec, 0x4c, 0xd2, 0xd7, 0x43, 0x74,
	0xff, 0x2d, 0x3d, 0x7b, 0x58, 0x21, 0xac, 0xb2, 0xa4, 0x67, 0x1b, 0x2b, 0xd7, 0xd2, 0x11, 0x42,
	0xab, 0x9b, 0xfc, 0x1d, 0xed, 0xd7, 0xce, 0xcc, 0x58, 0x4f, 0xb0, 0xba, 0xc3, 0xf3, 0xe3, 0x75,
	0x98, 0x11, 0xee, 0xaf, 0x04, 0xfa, 0x93, 0xae, 0xe5, 0x04, 0xfa, 0x13, 0xaf, 0xbe, 0xb0, 0x27,
	0x10, 0x4f, 0x9c, 0x10, 0x3c, 0x81, 0xd4, 0x3c, 0x10, 0xc1, 0x13, 0x18, 0x92, 0x7d, 0xf1, 0x2d,
	0x90, 0xa3, 0xaf, 0x7f, 0x05, 0x65, 0x4b, 0x79, 0x92, 0x2d, 0x28, 0x5b, 0xea, 0xf3, 0xe1, 0x2e,
	0x2c, 0x25, 0xc7, 0xd5, 0x04, 0x37, 0x63, 0x68, 0x98, 0x50, 0x70, 0x33, 0xce, 0x08, 0xd2, 0x35,
	0x60, 0x9a, 0x7f, 0x00, 0x29, 0x58, 0xaa, 0x84, 0xe7, 0xb5, 0x2b, 0xe5, 0xd4, 0x7a, 0xda, 0xe1,
	0xc6, 0x1b, 0x3f, 0xf9, 0xd9, 0xea, 0xd8, 0x4f, 0x7f, 0xb6, 0x3a, 0xf6, 0x8b, 0x9f, 0xad, 0x4a,
	0xdf, 0x3d, 0x5d, 0x95, 0xfe, 0xfc, 0x74, 0x55, 0xfa, 0xfb, 0xd3, 0x55, 0xe9, 0x27, 0xa7, 0xab,
	0xd2, 0x3f, 0x9f, 0xae, 0x4a, 0xff, 0x76, 0xba, 0x3a, 0xf6, 0x8b, 0xd3, 0x55, 0xe9, 0x8f, 0xfe,
	0x65, 0x75, 0xec, 0xf1, 0x04, 0xf9, 0xdf, 0x8e, 0x77, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0xe6, 0x84, 0x60, 0xfe, 0x63, 0x00, 0x00,
}
