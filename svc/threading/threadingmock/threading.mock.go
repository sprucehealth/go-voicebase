// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/threading (interfaces: ThreadsClient)

package threadingmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	threading "github.com/sprucehealth/backend/svc/threading"
	grpc "google.golang.org/grpc"
)

// Mock of ThreadsClient interface
type MockThreadsClient struct {
	ctrl     *gomock.Controller
	recorder *_MockThreadsClientRecorder
}

// Recorder for MockThreadsClient (not exported)
type _MockThreadsClientRecorder struct {
	mock *MockThreadsClient
}

func NewMockThreadsClient(ctrl *gomock.Controller) *MockThreadsClient {
	mock := &MockThreadsClient{ctrl: ctrl}
	mock.recorder = &_MockThreadsClientRecorder{mock}
	return mock
}

func (_m *MockThreadsClient) EXPECT() *_MockThreadsClientRecorder {
	return _m.recorder
}

func (_m *MockThreadsClient) CreateEmptyThread(_param0 context.Context, _param1 *threading.CreateEmptyThreadRequest, _param2 ...grpc.CallOption) (*threading.CreateEmptyThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateEmptyThread", _s...)
	ret0, _ := ret[0].(*threading.CreateEmptyThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateEmptyThread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEmptyThread", _s...)
}

func (_m *MockThreadsClient) CreateLinkedThreads(_param0 context.Context, _param1 *threading.CreateLinkedThreadsRequest, _param2 ...grpc.CallOption) (*threading.CreateLinkedThreadsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateLinkedThreads", _s...)
	ret0, _ := ret[0].(*threading.CreateLinkedThreadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateLinkedThreads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLinkedThreads", _s...)
}

func (_m *MockThreadsClient) CreateOnboardingThread(_param0 context.Context, _param1 *threading.CreateOnboardingThreadRequest, _param2 ...grpc.CallOption) (*threading.CreateOnboardingThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateOnboardingThread", _s...)
	ret0, _ := ret[0].(*threading.CreateOnboardingThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateOnboardingThread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOnboardingThread", _s...)
}

func (_m *MockThreadsClient) CreateSavedMessage(_param0 context.Context, _param1 *threading.CreateSavedMessageRequest, _param2 ...grpc.CallOption) (*threading.CreateSavedMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateSavedMessage", _s...)
	ret0, _ := ret[0].(*threading.CreateSavedMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateSavedMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSavedMessage", _s...)
}

func (_m *MockThreadsClient) CreateSavedQuery(_param0 context.Context, _param1 *threading.CreateSavedQueryRequest, _param2 ...grpc.CallOption) (*threading.CreateSavedQueryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateSavedQuery", _s...)
	ret0, _ := ret[0].(*threading.CreateSavedQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateSavedQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSavedQuery", _s...)
}

func (_m *MockThreadsClient) CreateScheduledMessage(_param0 context.Context, _param1 *threading.CreateScheduledMessageRequest, _param2 ...grpc.CallOption) (*threading.CreateScheduledMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateScheduledMessage", _s...)
	ret0, _ := ret[0].(*threading.CreateScheduledMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateScheduledMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateScheduledMessage", _s...)
}

func (_m *MockThreadsClient) CreateThread(_param0 context.Context, _param1 *threading.CreateThreadRequest, _param2 ...grpc.CallOption) (*threading.CreateThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateThread", _s...)
	ret0, _ := ret[0].(*threading.CreateThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateThread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThread", _s...)
}

func (_m *MockThreadsClient) CreateTriggeredMessage(_param0 context.Context, _param1 *threading.CreateTriggeredMessageRequest, _param2 ...grpc.CallOption) (*threading.CreateTriggeredMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateTriggeredMessage", _s...)
	ret0, _ := ret[0].(*threading.CreateTriggeredMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) CreateTriggeredMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTriggeredMessage", _s...)
}

func (_m *MockThreadsClient) DeleteMessage(_param0 context.Context, _param1 *threading.DeleteMessageRequest, _param2 ...grpc.CallOption) (*threading.DeleteMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteMessage", _s...)
	ret0, _ := ret[0].(*threading.DeleteMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) DeleteMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMessage", _s...)
}

func (_m *MockThreadsClient) DeleteSavedMessage(_param0 context.Context, _param1 *threading.DeleteSavedMessageRequest, _param2 ...grpc.CallOption) (*threading.DeleteSavedMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteSavedMessage", _s...)
	ret0, _ := ret[0].(*threading.DeleteSavedMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) DeleteSavedMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSavedMessage", _s...)
}

func (_m *MockThreadsClient) DeleteSavedQueries(_param0 context.Context, _param1 *threading.DeleteSavedQueriesRequest, _param2 ...grpc.CallOption) (*threading.DeleteSavedQueriesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteSavedQueries", _s...)
	ret0, _ := ret[0].(*threading.DeleteSavedQueriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) DeleteSavedQueries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSavedQueries", _s...)
}

func (_m *MockThreadsClient) DeleteScheduledMessage(_param0 context.Context, _param1 *threading.DeleteScheduledMessageRequest, _param2 ...grpc.CallOption) (*threading.DeleteScheduledMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteScheduledMessage", _s...)
	ret0, _ := ret[0].(*threading.DeleteScheduledMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) DeleteScheduledMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteScheduledMessage", _s...)
}

func (_m *MockThreadsClient) DeleteThread(_param0 context.Context, _param1 *threading.DeleteThreadRequest, _param2 ...grpc.CallOption) (*threading.DeleteThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteThread", _s...)
	ret0, _ := ret[0].(*threading.DeleteThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) DeleteThread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteThread", _s...)
}

func (_m *MockThreadsClient) DeleteTriggeredMessage(_param0 context.Context, _param1 *threading.DeleteTriggeredMessageRequest, _param2 ...grpc.CallOption) (*threading.DeleteTriggeredMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteTriggeredMessage", _s...)
	ret0, _ := ret[0].(*threading.DeleteTriggeredMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) DeleteTriggeredMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTriggeredMessage", _s...)
}

func (_m *MockThreadsClient) LinkedThread(_param0 context.Context, _param1 *threading.LinkedThreadRequest, _param2 ...grpc.CallOption) (*threading.LinkedThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LinkedThread", _s...)
	ret0, _ := ret[0].(*threading.LinkedThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) LinkedThread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LinkedThread", _s...)
}

func (_m *MockThreadsClient) MarkThreadsAsRead(_param0 context.Context, _param1 *threading.MarkThreadsAsReadRequest, _param2 ...grpc.CallOption) (*threading.MarkThreadsAsReadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "MarkThreadsAsRead", _s...)
	ret0, _ := ret[0].(*threading.MarkThreadsAsReadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) MarkThreadsAsRead(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkThreadsAsRead", _s...)
}

func (_m *MockThreadsClient) OnboardingThreadEvent(_param0 context.Context, _param1 *threading.OnboardingThreadEventRequest, _param2 ...grpc.CallOption) (*threading.OnboardingThreadEventResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "OnboardingThreadEvent", _s...)
	ret0, _ := ret[0].(*threading.OnboardingThreadEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) OnboardingThreadEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnboardingThreadEvent", _s...)
}

func (_m *MockThreadsClient) PostMessage(_param0 context.Context, _param1 *threading.PostMessageRequest, _param2 ...grpc.CallOption) (*threading.PostMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PostMessage", _s...)
	ret0, _ := ret[0].(*threading.PostMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) PostMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostMessage", _s...)
}

func (_m *MockThreadsClient) PostMessages(_param0 context.Context, _param1 *threading.PostMessagesRequest, _param2 ...grpc.CallOption) (*threading.PostMessagesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PostMessages", _s...)
	ret0, _ := ret[0].(*threading.PostMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) PostMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostMessages", _s...)
}

func (_m *MockThreadsClient) QueryThreads(_param0 context.Context, _param1 *threading.QueryThreadsRequest, _param2 ...grpc.CallOption) (*threading.QueryThreadsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "QueryThreads", _s...)
	ret0, _ := ret[0].(*threading.QueryThreadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) QueryThreads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryThreads", _s...)
}

func (_m *MockThreadsClient) SavedMessages(_param0 context.Context, _param1 *threading.SavedMessagesRequest, _param2 ...grpc.CallOption) (*threading.SavedMessagesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SavedMessages", _s...)
	ret0, _ := ret[0].(*threading.SavedMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) SavedMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SavedMessages", _s...)
}

func (_m *MockThreadsClient) SavedQueries(_param0 context.Context, _param1 *threading.SavedQueriesRequest, _param2 ...grpc.CallOption) (*threading.SavedQueriesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SavedQueries", _s...)
	ret0, _ := ret[0].(*threading.SavedQueriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) SavedQueries(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SavedQueries", _s...)
}

func (_m *MockThreadsClient) SavedQuery(_param0 context.Context, _param1 *threading.SavedQueryRequest, _param2 ...grpc.CallOption) (*threading.SavedQueryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SavedQuery", _s...)
	ret0, _ := ret[0].(*threading.SavedQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) SavedQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SavedQuery", _s...)
}

func (_m *MockThreadsClient) SavedQueryTemplates(_param0 context.Context, _param1 *threading.SavedQueryTemplatesRequest, _param2 ...grpc.CallOption) (*threading.SavedQueryTemplatesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SavedQueryTemplates", _s...)
	ret0, _ := ret[0].(*threading.SavedQueryTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) SavedQueryTemplates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SavedQueryTemplates", _s...)
}

func (_m *MockThreadsClient) ScheduledMessages(_param0 context.Context, _param1 *threading.ScheduledMessagesRequest, _param2 ...grpc.CallOption) (*threading.ScheduledMessagesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ScheduledMessages", _s...)
	ret0, _ := ret[0].(*threading.ScheduledMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) ScheduledMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScheduledMessages", _s...)
}

func (_m *MockThreadsClient) Tags(_param0 context.Context, _param1 *threading.TagsRequest, _param2 ...grpc.CallOption) (*threading.TagsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Tags", _s...)
	ret0, _ := ret[0].(*threading.TagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) Tags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tags", _s...)
}

func (_m *MockThreadsClient) Thread(_param0 context.Context, _param1 *threading.ThreadRequest, _param2 ...grpc.CallOption) (*threading.ThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Thread", _s...)
	ret0, _ := ret[0].(*threading.ThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) Thread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Thread", _s...)
}

func (_m *MockThreadsClient) ThreadItem(_param0 context.Context, _param1 *threading.ThreadItemRequest, _param2 ...grpc.CallOption) (*threading.ThreadItemResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ThreadItem", _s...)
	ret0, _ := ret[0].(*threading.ThreadItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) ThreadItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThreadItem", _s...)
}

func (_m *MockThreadsClient) ThreadItemViewDetails(_param0 context.Context, _param1 *threading.ThreadItemViewDetailsRequest, _param2 ...grpc.CallOption) (*threading.ThreadItemViewDetailsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ThreadItemViewDetails", _s...)
	ret0, _ := ret[0].(*threading.ThreadItemViewDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) ThreadItemViewDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThreadItemViewDetails", _s...)
}

func (_m *MockThreadsClient) ThreadItems(_param0 context.Context, _param1 *threading.ThreadItemsRequest, _param2 ...grpc.CallOption) (*threading.ThreadItemsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ThreadItems", _s...)
	ret0, _ := ret[0].(*threading.ThreadItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) ThreadItems(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThreadItems", _s...)
}

func (_m *MockThreadsClient) ThreadMembers(_param0 context.Context, _param1 *threading.ThreadMembersRequest, _param2 ...grpc.CallOption) (*threading.ThreadMembersResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ThreadMembers", _s...)
	ret0, _ := ret[0].(*threading.ThreadMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) ThreadMembers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThreadMembers", _s...)
}

func (_m *MockThreadsClient) Threads(_param0 context.Context, _param1 *threading.ThreadsRequest, _param2 ...grpc.CallOption) (*threading.ThreadsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Threads", _s...)
	ret0, _ := ret[0].(*threading.ThreadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) Threads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Threads", _s...)
}

func (_m *MockThreadsClient) ThreadsForMember(_param0 context.Context, _param1 *threading.ThreadsForMemberRequest, _param2 ...grpc.CallOption) (*threading.ThreadsForMemberResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ThreadsForMember", _s...)
	ret0, _ := ret[0].(*threading.ThreadsForMemberResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) ThreadsForMember(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ThreadsForMember", _s...)
}

func (_m *MockThreadsClient) TriggeredMessages(_param0 context.Context, _param1 *threading.TriggeredMessagesRequest, _param2 ...grpc.CallOption) (*threading.TriggeredMessagesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TriggeredMessages", _s...)
	ret0, _ := ret[0].(*threading.TriggeredMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) TriggeredMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TriggeredMessages", _s...)
}

func (_m *MockThreadsClient) UpdateMessage(_param0 context.Context, _param1 *threading.UpdateMessageRequest, _param2 ...grpc.CallOption) (*threading.UpdateMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateMessage", _s...)
	ret0, _ := ret[0].(*threading.UpdateMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) UpdateMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMessage", _s...)
}

func (_m *MockThreadsClient) UpdateSavedMessage(_param0 context.Context, _param1 *threading.UpdateSavedMessageRequest, _param2 ...grpc.CallOption) (*threading.UpdateSavedMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateSavedMessage", _s...)
	ret0, _ := ret[0].(*threading.UpdateSavedMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) UpdateSavedMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSavedMessage", _s...)
}

func (_m *MockThreadsClient) UpdateSavedQuery(_param0 context.Context, _param1 *threading.UpdateSavedQueryRequest, _param2 ...grpc.CallOption) (*threading.UpdateSavedQueryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateSavedQuery", _s...)
	ret0, _ := ret[0].(*threading.UpdateSavedQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) UpdateSavedQuery(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSavedQuery", _s...)
}

func (_m *MockThreadsClient) UpdateThread(_param0 context.Context, _param1 *threading.UpdateThreadRequest, _param2 ...grpc.CallOption) (*threading.UpdateThreadResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateThread", _s...)
	ret0, _ := ret[0].(*threading.UpdateThreadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) UpdateThread(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateThread", _s...)
}

func (_m *MockThreadsClient) UpdateTriggeredMessage(_param0 context.Context, _param1 *threading.UpdateTriggeredMessageRequest, _param2 ...grpc.CallOption) (*threading.UpdateTriggeredMessageResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateTriggeredMessage", _s...)
	ret0, _ := ret[0].(*threading.UpdateTriggeredMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockThreadsClientRecorder) UpdateTriggeredMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTriggeredMessage", _s...)
}
