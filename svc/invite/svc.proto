syntax = "proto3";

package invite;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

message Colleague {
	string email = 1;
	string phone_number = 2;
	string first_name = 3;
}

message InviteColleaguesRequest {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
	string inviter_entity_id = 2 [(gogoproto.customname) = "InviterEntityID"];
	repeated Colleague colleagues = 3;
}

message InviteColleaguesResponse {
}


message ColleagueInvite {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
	string inviter_entity_id = 2 [(gogoproto.customname) = "InviterEntityID"];
	Colleague colleague = 3;
}

message Patient {
	// First name is only used when inviting a patient. It is not stored and not returned by LookupInvite
	string first_name = 1;
	// Phone number is only used when inviting a patient. It is not stored and not returned by LookupInvite
	string phone_number = 2;
	string parked_entity_id = 3 [(gogoproto.customname) = "ParkedEntityID"];
}

message InvitePatientsRequest {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
	string inviter_entity_id = 2 [(gogoproto.customname) = "InviterEntityID"];
	repeated Patient patients = 3;
}

message InvitePatientsResponse {
}


message PatientInvite {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
	string inviter_entity_id = 2 [(gogoproto.customname) = "InviterEntityID"];
	Patient patient = 3;
}

message Organization {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
}

message CreateOrganizationInviteRequest {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
}

message CreateOrganizationInviteResponse {
	OrganizationInvite organization = 1;
}


message OrganizationInvite {
	string organization_entity_id = 1 [(gogoproto.customname) = "OrganizationEntityID"];
	string token = 2;
}

message MarkInviteConsumedRequest {
	string token = 1;
}

message MarkInviteConsumedResponse {}

message LookupInviteRequest {
	enum LookupKeyType {
		UNKNOWN = 0;
		TOKEN = 1;
		ORGANIZATION_ENTITY_ID = 2;
	}

	LookupKeyType lookup_key_type = 1;
	oneof lookup_key_oneof {
		string token = 2;
		string organization_entity_id = 3 [(gogoproto.customname) = "OrganizationEntityID"];
	}
}

message LookupInviteResponse {
	enum Type {
		COLLEAGUE = 0;
		PATIENT = 1;
		ORGANIZATION_CODE = 2;
	}
	Type type = 1;
	oneof invite {
		ColleagueInvite colleague = 10;
		PatientInvite patient = 11;
		OrganizationInvite organization = 12;
	}
	repeated AttributionValue values = 2;
}

message AttributionValue {
	string key = 1;
	string value = 2;
}

message SetAttributionDataRequest {
	string device_id = 1 [(gogoproto.customname) = "DeviceID"];
	repeated AttributionValue values = 2;
}

message SetAttributionDataResponse {
}

message AttributionDataRequest {
	string device_id = 1 [(gogoproto.customname) = "DeviceID"];
}

message AttributionDataResponse {
	repeated AttributionValue values = 1;
}

service Invite {
	// AttributionData returns the attribution data for a device
	rpc AttributionData(AttributionDataRequest) returns (AttributionDataResponse);
	// CreateOrganizationInvite creates and returns an invite code for the organization
	rpc CreateOrganizationInvite(CreateOrganizationInviteRequest) returns (CreateOrganizationInviteResponse);
	// InviteColleagues sends invites to people to join an organization
	rpc InviteColleagues(InviteColleaguesRequest) returns (InviteColleaguesResponse);
	// InvitePatients sends invites to people to join an organization
	rpc InvitePatients(InvitePatientsRequest) returns (InvitePatientsResponse);
	// LookupInvite returns information about an invite by token
	rpc LookupInvite(LookupInviteRequest) returns (LookupInviteResponse);
	// MarkInviteConsumed deletes the associated invite and records it's consumption
	rpc MarkInviteConsumed(MarkInviteConsumedRequest) returns (MarkInviteConsumedResponse);
	// SetAttributionData associate attribution data with a device
	rpc SetAttributionData(SetAttributionDataRequest) returns (SetAttributionDataResponse);
}
