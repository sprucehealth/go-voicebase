// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/invite (interfaces: InviteClient)

package invitemock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	invite "github.com/sprucehealth/backend/svc/invite"
	grpc "google.golang.org/grpc"
)

// Mock of InviteClient interface
type MockInviteClient struct {
	ctrl     *gomock.Controller
	recorder *_MockInviteClientRecorder
}

// Recorder for MockInviteClient (not exported)
type _MockInviteClientRecorder struct {
	mock *MockInviteClient
}

func NewMockInviteClient(ctrl *gomock.Controller) *MockInviteClient {
	mock := &MockInviteClient{ctrl: ctrl}
	mock.recorder = &_MockInviteClientRecorder{mock}
	return mock
}

func (_m *MockInviteClient) EXPECT() *_MockInviteClientRecorder {
	return _m.recorder
}

func (_m *MockInviteClient) AttributionData(_param0 context.Context, _param1 *invite.AttributionDataRequest, _param2 ...grpc.CallOption) (*invite.AttributionDataResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AttributionData", _s...)
	ret0, _ := ret[0].(*invite.AttributionDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) AttributionData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AttributionData", _s...)
}

func (_m *MockInviteClient) CreateOrganizationInvite(_param0 context.Context, _param1 *invite.CreateOrganizationInviteRequest, _param2 ...grpc.CallOption) (*invite.CreateOrganizationInviteResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateOrganizationInvite", _s...)
	ret0, _ := ret[0].(*invite.CreateOrganizationInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) CreateOrganizationInvite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOrganizationInvite", _s...)
}

func (_m *MockInviteClient) DeleteInvite(_param0 context.Context, _param1 *invite.DeleteInviteRequest, _param2 ...grpc.CallOption) (*invite.DeleteInviteResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteInvite", _s...)
	ret0, _ := ret[0].(*invite.DeleteInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) DeleteInvite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInvite", _s...)
}

func (_m *MockInviteClient) InviteColleagues(_param0 context.Context, _param1 *invite.InviteColleaguesRequest, _param2 ...grpc.CallOption) (*invite.InviteColleaguesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InviteColleagues", _s...)
	ret0, _ := ret[0].(*invite.InviteColleaguesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) InviteColleagues(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InviteColleagues", _s...)
}

func (_m *MockInviteClient) InvitePatients(_param0 context.Context, _param1 *invite.InvitePatientsRequest, _param2 ...grpc.CallOption) (*invite.InvitePatientsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InvitePatients", _s...)
	ret0, _ := ret[0].(*invite.InvitePatientsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) InvitePatients(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InvitePatients", _s...)
}

func (_m *MockInviteClient) LookupInvite(_param0 context.Context, _param1 *invite.LookupInviteRequest, _param2 ...grpc.CallOption) (*invite.LookupInviteResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupInvite", _s...)
	ret0, _ := ret[0].(*invite.LookupInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) LookupInvite(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupInvite", _s...)
}

func (_m *MockInviteClient) LookupInvites(_param0 context.Context, _param1 *invite.LookupInvitesRequest, _param2 ...grpc.CallOption) (*invite.LookupInvitesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupInvites", _s...)
	ret0, _ := ret[0].(*invite.LookupInvitesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) LookupInvites(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupInvites", _s...)
}

func (_m *MockInviteClient) LookupOrganizationInvites(_param0 context.Context, _param1 *invite.LookupOrganizationInvitesRequest, _param2 ...grpc.CallOption) (*invite.LookupOrganizationInvitesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupOrganizationInvites", _s...)
	ret0, _ := ret[0].(*invite.LookupOrganizationInvitesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) LookupOrganizationInvites(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupOrganizationInvites", _s...)
}

func (_m *MockInviteClient) MarkInviteConsumed(_param0 context.Context, _param1 *invite.MarkInviteConsumedRequest, _param2 ...grpc.CallOption) (*invite.MarkInviteConsumedResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "MarkInviteConsumed", _s...)
	ret0, _ := ret[0].(*invite.MarkInviteConsumedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) MarkInviteConsumed(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MarkInviteConsumed", _s...)
}

func (_m *MockInviteClient) SetAttributionData(_param0 context.Context, _param1 *invite.SetAttributionDataRequest, _param2 ...grpc.CallOption) (*invite.SetAttributionDataResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SetAttributionData", _s...)
	ret0, _ := ret[0].(*invite.SetAttributionDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInviteClientRecorder) SetAttributionData(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetAttributionData", _s...)
}
