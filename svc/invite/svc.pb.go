// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package invite is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		Colleague
		InviteColleaguesRequest
		InviteColleaguesResponse
		ColleagueInvite
		Patient
		InvitePatientsRequest
		InvitePatientsResponse
		PatientInvite
		Organization
		CreateOrganizationInviteRequest
		CreateOrganizationInviteResponse
		OrganizationInvite
		MarkInviteConsumedRequest
		MarkInviteConsumedResponse
		LookupInviteRequest
		LookupInviteResponse
		AttributionValue
		SetAttributionDataRequest
		SetAttributionDataResponse
		AttributionDataRequest
		AttributionDataResponse
*/
package invite

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type LookupInviteRequest_LookupKeyType int32

const (
	LookupInviteRequest_UNKNOWN                LookupInviteRequest_LookupKeyType = 0
	LookupInviteRequest_TOKEN                  LookupInviteRequest_LookupKeyType = 1
	LookupInviteRequest_ORGANIZATION_ENTITY_ID LookupInviteRequest_LookupKeyType = 2
)

var LookupInviteRequest_LookupKeyType_name = map[int32]string{
	0: "UNKNOWN",
	1: "TOKEN",
	2: "ORGANIZATION_ENTITY_ID",
}
var LookupInviteRequest_LookupKeyType_value = map[string]int32{
	"UNKNOWN":                0,
	"TOKEN":                  1,
	"ORGANIZATION_ENTITY_ID": 2,
}

func (LookupInviteRequest_LookupKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{14, 0}
}

type LookupInviteResponse_Type int32

const (
	LookupInviteResponse_COLLEAGUE         LookupInviteResponse_Type = 0
	LookupInviteResponse_PATIENT           LookupInviteResponse_Type = 1
	LookupInviteResponse_ORGANIZATION_CODE LookupInviteResponse_Type = 2
)

var LookupInviteResponse_Type_name = map[int32]string{
	0: "COLLEAGUE",
	1: "PATIENT",
	2: "ORGANIZATION_CODE",
}
var LookupInviteResponse_Type_value = map[string]int32{
	"COLLEAGUE":         0,
	"PATIENT":           1,
	"ORGANIZATION_CODE": 2,
}

func (LookupInviteResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{15, 0}
}

type Colleague struct {
	Email       string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
	FirstName   string `protobuf:"bytes,3,opt,name=first_name,proto3" json:"first_name,omitempty"`
}

func (m *Colleague) Reset()                    { *m = Colleague{} }
func (*Colleague) ProtoMessage()               {}
func (*Colleague) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type InviteColleaguesRequest struct {
	OrganizationEntityID string       `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	InviterEntityID      string       `protobuf:"bytes,2,opt,name=inviter_entity_id,proto3" json:"inviter_entity_id,omitempty"`
	Colleagues           []*Colleague `protobuf:"bytes,3,rep,name=colleagues" json:"colleagues,omitempty"`
}

func (m *InviteColleaguesRequest) Reset()                    { *m = InviteColleaguesRequest{} }
func (*InviteColleaguesRequest) ProtoMessage()               {}
func (*InviteColleaguesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

func (m *InviteColleaguesRequest) GetColleagues() []*Colleague {
	if m != nil {
		return m.Colleagues
	}
	return nil
}

type InviteColleaguesResponse struct {
}

func (m *InviteColleaguesResponse) Reset()                    { *m = InviteColleaguesResponse{} }
func (*InviteColleaguesResponse) ProtoMessage()               {}
func (*InviteColleaguesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type ColleagueInvite struct {
	OrganizationEntityID string     `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	InviterEntityID      string     `protobuf:"bytes,2,opt,name=inviter_entity_id,proto3" json:"inviter_entity_id,omitempty"`
	Colleague            *Colleague `protobuf:"bytes,3,opt,name=colleague" json:"colleague,omitempty"`
}

func (m *ColleagueInvite) Reset()                    { *m = ColleagueInvite{} }
func (*ColleagueInvite) ProtoMessage()               {}
func (*ColleagueInvite) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

func (m *ColleagueInvite) GetColleague() *Colleague {
	if m != nil {
		return m.Colleague
	}
	return nil
}

type Patient struct {
	// First name is only used when inviting a patient. It is not stored and not returned by LookupInvite
	FirstName string `protobuf:"bytes,1,opt,name=first_name,proto3" json:"first_name,omitempty"`
	// Phone number is only used when inviting a patient. It is not stored and not returned by LookupInvite
	PhoneNumber    string `protobuf:"bytes,2,opt,name=phone_number,proto3" json:"phone_number,omitempty"`
	ParkedEntityID string `protobuf:"bytes,3,opt,name=parked_entity_id,proto3" json:"parked_entity_id,omitempty"`
}

func (m *Patient) Reset()                    { *m = Patient{} }
func (*Patient) ProtoMessage()               {}
func (*Patient) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

type InvitePatientsRequest struct {
	OrganizationEntityID string     `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	InviterEntityID      string     `protobuf:"bytes,2,opt,name=inviter_entity_id,proto3" json:"inviter_entity_id,omitempty"`
	Patients             []*Patient `protobuf:"bytes,3,rep,name=patients" json:"patients,omitempty"`
}

func (m *InvitePatientsRequest) Reset()                    { *m = InvitePatientsRequest{} }
func (*InvitePatientsRequest) ProtoMessage()               {}
func (*InvitePatientsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

func (m *InvitePatientsRequest) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

type InvitePatientsResponse struct {
}

func (m *InvitePatientsResponse) Reset()                    { *m = InvitePatientsResponse{} }
func (*InvitePatientsResponse) ProtoMessage()               {}
func (*InvitePatientsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

type PatientInvite struct {
	OrganizationEntityID string   `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	InviterEntityID      string   `protobuf:"bytes,2,opt,name=inviter_entity_id,proto3" json:"inviter_entity_id,omitempty"`
	Patient              *Patient `protobuf:"bytes,3,opt,name=patient" json:"patient,omitempty"`
}

func (m *PatientInvite) Reset()                    { *m = PatientInvite{} }
func (*PatientInvite) ProtoMessage()               {}
func (*PatientInvite) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

func (m *PatientInvite) GetPatient() *Patient {
	if m != nil {
		return m.Patient
	}
	return nil
}

type Organization struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
}

func (m *Organization) Reset()                    { *m = Organization{} }
func (*Organization) ProtoMessage()               {}
func (*Organization) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

type CreateOrganizationInviteRequest struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
}

func (m *CreateOrganizationInviteRequest) Reset()      { *m = CreateOrganizationInviteRequest{} }
func (*CreateOrganizationInviteRequest) ProtoMessage() {}
func (*CreateOrganizationInviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{9}
}

type CreateOrganizationInviteResponse struct {
	Organization *OrganizationInvite `protobuf:"bytes,1,opt,name=organization" json:"organization,omitempty"`
}

func (m *CreateOrganizationInviteResponse) Reset()      { *m = CreateOrganizationInviteResponse{} }
func (*CreateOrganizationInviteResponse) ProtoMessage() {}
func (*CreateOrganizationInviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{10}
}

func (m *CreateOrganizationInviteResponse) GetOrganization() *OrganizationInvite {
	if m != nil {
		return m.Organization
	}
	return nil
}

type OrganizationInvite struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,proto3" json:"organization_entity_id,omitempty"`
	Token                string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *OrganizationInvite) Reset()                    { *m = OrganizationInvite{} }
func (*OrganizationInvite) ProtoMessage()               {}
func (*OrganizationInvite) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

type MarkInviteConsumedRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *MarkInviteConsumedRequest) Reset()                    { *m = MarkInviteConsumedRequest{} }
func (*MarkInviteConsumedRequest) ProtoMessage()               {}
func (*MarkInviteConsumedRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

type MarkInviteConsumedResponse struct {
}

func (m *MarkInviteConsumedResponse) Reset()                    { *m = MarkInviteConsumedResponse{} }
func (*MarkInviteConsumedResponse) ProtoMessage()               {}
func (*MarkInviteConsumedResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

type LookupInviteRequest struct {
	LookupKeyType LookupInviteRequest_LookupKeyType `protobuf:"varint,1,opt,name=lookup_key_type,proto3,enum=invite.LookupInviteRequest_LookupKeyType" json:"lookup_key_type,omitempty"`
	// Types that are valid to be assigned to LookupKeyOneof:
	//	*LookupInviteRequest_Token
	//	*LookupInviteRequest_OrganizationEntityID
	LookupKeyOneof isLookupInviteRequest_LookupKeyOneof `protobuf_oneof:"lookup_key_oneof"`
}

func (m *LookupInviteRequest) Reset()                    { *m = LookupInviteRequest{} }
func (*LookupInviteRequest) ProtoMessage()               {}
func (*LookupInviteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

type isLookupInviteRequest_LookupKeyOneof interface {
	isLookupInviteRequest_LookupKeyOneof()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LookupInviteRequest_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}
type LookupInviteRequest_OrganizationEntityID struct {
	OrganizationEntityID string `protobuf:"bytes,3,opt,name=organization_entity_id,proto3,oneof"`
}

func (*LookupInviteRequest_Token) isLookupInviteRequest_LookupKeyOneof()                {}
func (*LookupInviteRequest_OrganizationEntityID) isLookupInviteRequest_LookupKeyOneof() {}

func (m *LookupInviteRequest) GetLookupKeyOneof() isLookupInviteRequest_LookupKeyOneof {
	if m != nil {
		return m.LookupKeyOneof
	}
	return nil
}

func (m *LookupInviteRequest) GetToken() string {
	if x, ok := m.GetLookupKeyOneof().(*LookupInviteRequest_Token); ok {
		return x.Token
	}
	return ""
}

func (m *LookupInviteRequest) GetOrganizationEntityID() string {
	if x, ok := m.GetLookupKeyOneof().(*LookupInviteRequest_OrganizationEntityID); ok {
		return x.OrganizationEntityID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LookupInviteRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LookupInviteRequest_OneofMarshaler, _LookupInviteRequest_OneofUnmarshaler, _LookupInviteRequest_OneofSizer, []interface{}{
		(*LookupInviteRequest_Token)(nil),
		(*LookupInviteRequest_OrganizationEntityID)(nil),
	}
}

func _LookupInviteRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LookupInviteRequest)
	// lookup_key_oneof
	switch x := m.LookupKeyOneof.(type) {
	case *LookupInviteRequest_Token:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Token)
	case *LookupInviteRequest_OrganizationEntityID:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.OrganizationEntityID)
	case nil:
	default:
		return fmt.Errorf("LookupInviteRequest.LookupKeyOneof has unexpected type %T", x)
	}
	return nil
}

func _LookupInviteRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LookupInviteRequest)
	switch tag {
	case 2: // lookup_key_oneof.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &LookupInviteRequest_Token{x}
		return true, err
	case 3: // lookup_key_oneof.organization_entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.LookupKeyOneof = &LookupInviteRequest_OrganizationEntityID{x}
		return true, err
	default:
		return false, nil
	}
}

func _LookupInviteRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LookupInviteRequest)
	// lookup_key_oneof
	switch x := m.LookupKeyOneof.(type) {
	case *LookupInviteRequest_Token:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Token)))
		n += len(x.Token)
	case *LookupInviteRequest_OrganizationEntityID:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.OrganizationEntityID)))
		n += len(x.OrganizationEntityID)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LookupInviteResponse struct {
	Type LookupInviteResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=invite.LookupInviteResponse_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Invite:
	//	*LookupInviteResponse_Colleague
	//	*LookupInviteResponse_Patient
	//	*LookupInviteResponse_Organization
	Invite isLookupInviteResponse_Invite `protobuf_oneof:"invite"`
	Values []*AttributionValue           `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *LookupInviteResponse) Reset()                    { *m = LookupInviteResponse{} }
func (*LookupInviteResponse) ProtoMessage()               {}
func (*LookupInviteResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

type isLookupInviteResponse_Invite interface {
	isLookupInviteResponse_Invite()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LookupInviteResponse_Colleague struct {
	Colleague *ColleagueInvite `protobuf:"bytes,10,opt,name=colleague,oneof"`
}
type LookupInviteResponse_Patient struct {
	Patient *PatientInvite `protobuf:"bytes,11,opt,name=patient,oneof"`
}
type LookupInviteResponse_Organization struct {
	Organization *OrganizationInvite `protobuf:"bytes,12,opt,name=organization,oneof"`
}

func (*LookupInviteResponse_Colleague) isLookupInviteResponse_Invite()    {}
func (*LookupInviteResponse_Patient) isLookupInviteResponse_Invite()      {}
func (*LookupInviteResponse_Organization) isLookupInviteResponse_Invite() {}

func (m *LookupInviteResponse) GetInvite() isLookupInviteResponse_Invite {
	if m != nil {
		return m.Invite
	}
	return nil
}

func (m *LookupInviteResponse) GetColleague() *ColleagueInvite {
	if x, ok := m.GetInvite().(*LookupInviteResponse_Colleague); ok {
		return x.Colleague
	}
	return nil
}

func (m *LookupInviteResponse) GetPatient() *PatientInvite {
	if x, ok := m.GetInvite().(*LookupInviteResponse_Patient); ok {
		return x.Patient
	}
	return nil
}

func (m *LookupInviteResponse) GetOrganization() *OrganizationInvite {
	if x, ok := m.GetInvite().(*LookupInviteResponse_Organization); ok {
		return x.Organization
	}
	return nil
}

func (m *LookupInviteResponse) GetValues() []*AttributionValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LookupInviteResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LookupInviteResponse_OneofMarshaler, _LookupInviteResponse_OneofUnmarshaler, _LookupInviteResponse_OneofSizer, []interface{}{
		(*LookupInviteResponse_Colleague)(nil),
		(*LookupInviteResponse_Patient)(nil),
		(*LookupInviteResponse_Organization)(nil),
	}
}

func _LookupInviteResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LookupInviteResponse)
	// invite
	switch x := m.Invite.(type) {
	case *LookupInviteResponse_Colleague:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Colleague); err != nil {
			return err
		}
	case *LookupInviteResponse_Patient:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Patient); err != nil {
			return err
		}
	case *LookupInviteResponse_Organization:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Organization); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LookupInviteResponse.Invite has unexpected type %T", x)
	}
	return nil
}

func _LookupInviteResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LookupInviteResponse)
	switch tag {
	case 10: // invite.colleague
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ColleagueInvite)
		err := b.DecodeMessage(msg)
		m.Invite = &LookupInviteResponse_Colleague{msg}
		return true, err
	case 11: // invite.patient
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PatientInvite)
		err := b.DecodeMessage(msg)
		m.Invite = &LookupInviteResponse_Patient{msg}
		return true, err
	case 12: // invite.organization
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrganizationInvite)
		err := b.DecodeMessage(msg)
		m.Invite = &LookupInviteResponse_Organization{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LookupInviteResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LookupInviteResponse)
	// invite
	switch x := m.Invite.(type) {
	case *LookupInviteResponse_Colleague:
		s := proto.Size(x.Colleague)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LookupInviteResponse_Patient:
		s := proto.Size(x.Patient)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LookupInviteResponse_Organization:
		s := proto.Size(x.Organization)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AttributionValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *AttributionValue) Reset()                    { *m = AttributionValue{} }
func (*AttributionValue) ProtoMessage()               {}
func (*AttributionValue) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

type SetAttributionDataRequest struct {
	DeviceID string              `protobuf:"bytes,1,opt,name=device_id,proto3" json:"device_id,omitempty"`
	Values   []*AttributionValue `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *SetAttributionDataRequest) Reset()                    { *m = SetAttributionDataRequest{} }
func (*SetAttributionDataRequest) ProtoMessage()               {}
func (*SetAttributionDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

func (m *SetAttributionDataRequest) GetValues() []*AttributionValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type SetAttributionDataResponse struct {
}

func (m *SetAttributionDataResponse) Reset()                    { *m = SetAttributionDataResponse{} }
func (*SetAttributionDataResponse) ProtoMessage()               {}
func (*SetAttributionDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{18} }

type AttributionDataRequest struct {
	DeviceID string `protobuf:"bytes,1,opt,name=device_id,proto3" json:"device_id,omitempty"`
}

func (m *AttributionDataRequest) Reset()                    { *m = AttributionDataRequest{} }
func (*AttributionDataRequest) ProtoMessage()               {}
func (*AttributionDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

type AttributionDataResponse struct {
	Values []*AttributionValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *AttributionDataResponse) Reset()                    { *m = AttributionDataResponse{} }
func (*AttributionDataResponse) ProtoMessage()               {}
func (*AttributionDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

func (m *AttributionDataResponse) GetValues() []*AttributionValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*Colleague)(nil), "invite.Colleague")
	proto.RegisterType((*InviteColleaguesRequest)(nil), "invite.InviteColleaguesRequest")
	proto.RegisterType((*InviteColleaguesResponse)(nil), "invite.InviteColleaguesResponse")
	proto.RegisterType((*ColleagueInvite)(nil), "invite.ColleagueInvite")
	proto.RegisterType((*Patient)(nil), "invite.Patient")
	proto.RegisterType((*InvitePatientsRequest)(nil), "invite.InvitePatientsRequest")
	proto.RegisterType((*InvitePatientsResponse)(nil), "invite.InvitePatientsResponse")
	proto.RegisterType((*PatientInvite)(nil), "invite.PatientInvite")
	proto.RegisterType((*Organization)(nil), "invite.Organization")
	proto.RegisterType((*CreateOrganizationInviteRequest)(nil), "invite.CreateOrganizationInviteRequest")
	proto.RegisterType((*CreateOrganizationInviteResponse)(nil), "invite.CreateOrganizationInviteResponse")
	proto.RegisterType((*OrganizationInvite)(nil), "invite.OrganizationInvite")
	proto.RegisterType((*MarkInviteConsumedRequest)(nil), "invite.MarkInviteConsumedRequest")
	proto.RegisterType((*MarkInviteConsumedResponse)(nil), "invite.MarkInviteConsumedResponse")
	proto.RegisterType((*LookupInviteRequest)(nil), "invite.LookupInviteRequest")
	proto.RegisterType((*LookupInviteResponse)(nil), "invite.LookupInviteResponse")
	proto.RegisterType((*AttributionValue)(nil), "invite.AttributionValue")
	proto.RegisterType((*SetAttributionDataRequest)(nil), "invite.SetAttributionDataRequest")
	proto.RegisterType((*SetAttributionDataResponse)(nil), "invite.SetAttributionDataResponse")
	proto.RegisterType((*AttributionDataRequest)(nil), "invite.AttributionDataRequest")
	proto.RegisterType((*AttributionDataResponse)(nil), "invite.AttributionDataResponse")
	proto.RegisterEnum("invite.LookupInviteRequest_LookupKeyType", LookupInviteRequest_LookupKeyType_name, LookupInviteRequest_LookupKeyType_value)
	proto.RegisterEnum("invite.LookupInviteResponse_Type", LookupInviteResponse_Type_name, LookupInviteResponse_Type_value)
}
func (x LookupInviteRequest_LookupKeyType) String() string {
	s, ok := LookupInviteRequest_LookupKeyType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LookupInviteResponse_Type) String() string {
	s, ok := LookupInviteResponse_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Colleague) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Colleague)
	if !ok {
		that2, ok := that.(Colleague)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	return true
}
func (this *InviteColleaguesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteColleaguesRequest)
	if !ok {
		that2, ok := that.(InviteColleaguesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.InviterEntityID != that1.InviterEntityID {
		return false
	}
	if len(this.Colleagues) != len(that1.Colleagues) {
		return false
	}
	for i := range this.Colleagues {
		if !this.Colleagues[i].Equal(that1.Colleagues[i]) {
			return false
		}
	}
	return true
}
func (this *InviteColleaguesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteColleaguesResponse)
	if !ok {
		that2, ok := that.(InviteColleaguesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ColleagueInvite) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ColleagueInvite)
	if !ok {
		that2, ok := that.(ColleagueInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.InviterEntityID != that1.InviterEntityID {
		return false
	}
	if !this.Colleague.Equal(that1.Colleague) {
		return false
	}
	return true
}
func (this *Patient) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Patient)
	if !ok {
		that2, ok := that.(Patient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.ParkedEntityID != that1.ParkedEntityID {
		return false
	}
	return true
}
func (this *InvitePatientsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InvitePatientsRequest)
	if !ok {
		that2, ok := that.(InvitePatientsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.InviterEntityID != that1.InviterEntityID {
		return false
	}
	if len(this.Patients) != len(that1.Patients) {
		return false
	}
	for i := range this.Patients {
		if !this.Patients[i].Equal(that1.Patients[i]) {
			return false
		}
	}
	return true
}
func (this *InvitePatientsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InvitePatientsResponse)
	if !ok {
		that2, ok := that.(InvitePatientsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *PatientInvite) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PatientInvite)
	if !ok {
		that2, ok := that.(PatientInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.InviterEntityID != that1.InviterEntityID {
		return false
	}
	if !this.Patient.Equal(that1.Patient) {
		return false
	}
	return true
}
func (this *Organization) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Organization)
	if !ok {
		that2, ok := that.(Organization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	return true
}
func (this *CreateOrganizationInviteRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateOrganizationInviteRequest)
	if !ok {
		that2, ok := that.(CreateOrganizationInviteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	return true
}
func (this *CreateOrganizationInviteResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateOrganizationInviteResponse)
	if !ok {
		that2, ok := that.(CreateOrganizationInviteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(that1.Organization) {
		return false
	}
	return true
}
func (this *OrganizationInvite) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrganizationInvite)
	if !ok {
		that2, ok := that.(OrganizationInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *MarkInviteConsumedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkInviteConsumedRequest)
	if !ok {
		that2, ok := that.(MarkInviteConsumedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *MarkInviteConsumedResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MarkInviteConsumedResponse)
	if !ok {
		that2, ok := that.(MarkInviteConsumedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *LookupInviteRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteRequest)
	if !ok {
		that2, ok := that.(LookupInviteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LookupKeyType != that1.LookupKeyType {
		return false
	}
	if that1.LookupKeyOneof == nil {
		if this.LookupKeyOneof != nil {
			return false
		}
	} else if this.LookupKeyOneof == nil {
		return false
	} else if !this.LookupKeyOneof.Equal(that1.LookupKeyOneof) {
		return false
	}
	return true
}
func (this *LookupInviteRequest_Token) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteRequest_Token)
	if !ok {
		that2, ok := that.(LookupInviteRequest_Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *LookupInviteRequest_OrganizationEntityID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteRequest_OrganizationEntityID)
	if !ok {
		that2, ok := that.(LookupInviteRequest_OrganizationEntityID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	return true
}
func (this *LookupInviteResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteResponse)
	if !ok {
		that2, ok := that.(LookupInviteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Invite == nil {
		if this.Invite != nil {
			return false
		}
	} else if this.Invite == nil {
		return false
	} else if !this.Invite.Equal(that1.Invite) {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *LookupInviteResponse_Colleague) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteResponse_Colleague)
	if !ok {
		that2, ok := that.(LookupInviteResponse_Colleague)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Colleague.Equal(that1.Colleague) {
		return false
	}
	return true
}
func (this *LookupInviteResponse_Patient) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteResponse_Patient)
	if !ok {
		that2, ok := that.(LookupInviteResponse_Patient)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Patient.Equal(that1.Patient) {
		return false
	}
	return true
}
func (this *LookupInviteResponse_Organization) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupInviteResponse_Organization)
	if !ok {
		that2, ok := that.(LookupInviteResponse_Organization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(that1.Organization) {
		return false
	}
	return true
}
func (this *AttributionValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AttributionValue)
	if !ok {
		that2, ok := that.(AttributionValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SetAttributionDataRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetAttributionDataRequest)
	if !ok {
		that2, ok := that.(SetAttributionDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *SetAttributionDataResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetAttributionDataResponse)
	if !ok {
		that2, ok := that.(SetAttributionDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *AttributionDataRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AttributionDataRequest)
	if !ok {
		that2, ok := that.(AttributionDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeviceID != that1.DeviceID {
		return false
	}
	return true
}
func (this *AttributionDataResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AttributionDataResponse)
	if !ok {
		that2, ok := that.(AttributionDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *Colleague) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.Colleague{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteColleaguesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.InviteColleaguesRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "InviterEntityID: "+fmt.Sprintf("%#v", this.InviterEntityID)+",\n")
	if this.Colleagues != nil {
		s = append(s, "Colleagues: "+fmt.Sprintf("%#v", this.Colleagues)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteColleaguesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&invite.InviteColleaguesResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ColleagueInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.ColleagueInvite{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "InviterEntityID: "+fmt.Sprintf("%#v", this.InviterEntityID)+",\n")
	if this.Colleague != nil {
		s = append(s, "Colleague: "+fmt.Sprintf("%#v", this.Colleague)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Patient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.Patient{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "ParkedEntityID: "+fmt.Sprintf("%#v", this.ParkedEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvitePatientsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.InvitePatientsRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "InviterEntityID: "+fmt.Sprintf("%#v", this.InviterEntityID)+",\n")
	if this.Patients != nil {
		s = append(s, "Patients: "+fmt.Sprintf("%#v", this.Patients)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvitePatientsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&invite.InvitePatientsResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PatientInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.PatientInvite{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "InviterEntityID: "+fmt.Sprintf("%#v", this.InviterEntityID)+",\n")
	if this.Patient != nil {
		s = append(s, "Patient: "+fmt.Sprintf("%#v", this.Patient)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Organization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&invite.Organization{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrganizationInviteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&invite.CreateOrganizationInviteRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrganizationInviteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&invite.CreateOrganizationInviteResponse{")
	if this.Organization != nil {
		s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrganizationInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&invite.OrganizationInvite{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkInviteConsumedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&invite.MarkInviteConsumedRequest{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkInviteConsumedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&invite.MarkInviteConsumedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupInviteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&invite.LookupInviteRequest{")
	s = append(s, "LookupKeyType: "+fmt.Sprintf("%#v", this.LookupKeyType)+",\n")
	if this.LookupKeyOneof != nil {
		s = append(s, "LookupKeyOneof: "+fmt.Sprintf("%#v", this.LookupKeyOneof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupInviteRequest_Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&invite.LookupInviteRequest_Token{` +
		`Token:` + fmt.Sprintf("%#v", this.Token) + `}`}, ", ")
	return s
}
func (this *LookupInviteRequest_OrganizationEntityID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&invite.LookupInviteRequest_OrganizationEntityID{` +
		`OrganizationEntityID:` + fmt.Sprintf("%#v", this.OrganizationEntityID) + `}`}, ", ")
	return s
}
func (this *LookupInviteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&invite.LookupInviteResponse{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Invite != nil {
		s = append(s, "Invite: "+fmt.Sprintf("%#v", this.Invite)+",\n")
	}
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupInviteResponse_Colleague) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&invite.LookupInviteResponse_Colleague{` +
		`Colleague:` + fmt.Sprintf("%#v", this.Colleague) + `}`}, ", ")
	return s
}
func (this *LookupInviteResponse_Patient) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&invite.LookupInviteResponse_Patient{` +
		`Patient:` + fmt.Sprintf("%#v", this.Patient) + `}`}, ", ")
	return s
}
func (this *LookupInviteResponse_Organization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&invite.LookupInviteResponse_Organization{` +
		`Organization:` + fmt.Sprintf("%#v", this.Organization) + `}`}, ", ")
	return s
}
func (this *AttributionValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&invite.AttributionValue{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetAttributionDataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&invite.SetAttributionDataRequest{")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetAttributionDataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&invite.SetAttributionDataResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AttributionDataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&invite.AttributionDataRequest{")
	s = append(s, "DeviceID: "+fmt.Sprintf("%#v", this.DeviceID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AttributionDataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&invite.AttributionDataResponse{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Invite service

type InviteClient interface {
	// AttributionData returns the attribution data for a device
	AttributionData(ctx context.Context, in *AttributionDataRequest, opts ...grpc.CallOption) (*AttributionDataResponse, error)
	// CreateOrganizationInvite creates and returns an invite code for the organization
	CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error)
	// InviteColleagues sends invites to people to join an organization
	InviteColleagues(ctx context.Context, in *InviteColleaguesRequest, opts ...grpc.CallOption) (*InviteColleaguesResponse, error)
	// InvitePatients sends invites to people to join an organization
	InvitePatients(ctx context.Context, in *InvitePatientsRequest, opts ...grpc.CallOption) (*InvitePatientsResponse, error)
	// LookupInvite returns information about an invite by token
	LookupInvite(ctx context.Context, in *LookupInviteRequest, opts ...grpc.CallOption) (*LookupInviteResponse, error)
	// MarkInviteConsumed deletes the associated invite and records it's consumption
	MarkInviteConsumed(ctx context.Context, in *MarkInviteConsumedRequest, opts ...grpc.CallOption) (*MarkInviteConsumedResponse, error)
	// SetAttributionData associate attribution data with a device
	SetAttributionData(ctx context.Context, in *SetAttributionDataRequest, opts ...grpc.CallOption) (*SetAttributionDataResponse, error)
}

type inviteClient struct {
	cc *grpc.ClientConn
}

func NewInviteClient(cc *grpc.ClientConn) InviteClient {
	return &inviteClient{cc}
}

func (c *inviteClient) AttributionData(ctx context.Context, in *AttributionDataRequest, opts ...grpc.CallOption) (*AttributionDataResponse, error) {
	out := new(AttributionDataResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/AttributionData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) CreateOrganizationInvite(ctx context.Context, in *CreateOrganizationInviteRequest, opts ...grpc.CallOption) (*CreateOrganizationInviteResponse, error) {
	out := new(CreateOrganizationInviteResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/CreateOrganizationInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) InviteColleagues(ctx context.Context, in *InviteColleaguesRequest, opts ...grpc.CallOption) (*InviteColleaguesResponse, error) {
	out := new(InviteColleaguesResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/InviteColleagues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) InvitePatients(ctx context.Context, in *InvitePatientsRequest, opts ...grpc.CallOption) (*InvitePatientsResponse, error) {
	out := new(InvitePatientsResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/InvitePatients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) LookupInvite(ctx context.Context, in *LookupInviteRequest, opts ...grpc.CallOption) (*LookupInviteResponse, error) {
	out := new(LookupInviteResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/LookupInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) MarkInviteConsumed(ctx context.Context, in *MarkInviteConsumedRequest, opts ...grpc.CallOption) (*MarkInviteConsumedResponse, error) {
	out := new(MarkInviteConsumedResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/MarkInviteConsumed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inviteClient) SetAttributionData(ctx context.Context, in *SetAttributionDataRequest, opts ...grpc.CallOption) (*SetAttributionDataResponse, error) {
	out := new(SetAttributionDataResponse)
	err := grpc.Invoke(ctx, "/invite.Invite/SetAttributionData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Invite service

type InviteServer interface {
	// AttributionData returns the attribution data for a device
	AttributionData(context.Context, *AttributionDataRequest) (*AttributionDataResponse, error)
	// CreateOrganizationInvite creates and returns an invite code for the organization
	CreateOrganizationInvite(context.Context, *CreateOrganizationInviteRequest) (*CreateOrganizationInviteResponse, error)
	// InviteColleagues sends invites to people to join an organization
	InviteColleagues(context.Context, *InviteColleaguesRequest) (*InviteColleaguesResponse, error)
	// InvitePatients sends invites to people to join an organization
	InvitePatients(context.Context, *InvitePatientsRequest) (*InvitePatientsResponse, error)
	// LookupInvite returns information about an invite by token
	LookupInvite(context.Context, *LookupInviteRequest) (*LookupInviteResponse, error)
	// MarkInviteConsumed deletes the associated invite and records it's consumption
	MarkInviteConsumed(context.Context, *MarkInviteConsumedRequest) (*MarkInviteConsumedResponse, error)
	// SetAttributionData associate attribution data with a device
	SetAttributionData(context.Context, *SetAttributionDataRequest) (*SetAttributionDataResponse, error)
}

func RegisterInviteServer(s *grpc.Server, srv InviteServer) {
	s.RegisterService(&_Invite_serviceDesc, srv)
}

func _Invite_AttributionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).AttributionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/AttributionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).AttributionData(ctx, req.(*AttributionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_CreateOrganizationInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).CreateOrganizationInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/CreateOrganizationInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).CreateOrganizationInvite(ctx, req.(*CreateOrganizationInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_InviteColleagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteColleaguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).InviteColleagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/InviteColleagues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).InviteColleagues(ctx, req.(*InviteColleaguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_InvitePatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitePatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).InvitePatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/InvitePatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).InvitePatients(ctx, req.(*InvitePatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_LookupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).LookupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/LookupInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).LookupInvite(ctx, req.(*LookupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_MarkInviteConsumed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInviteConsumedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).MarkInviteConsumed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/MarkInviteConsumed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).MarkInviteConsumed(ctx, req.(*MarkInviteConsumedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invite_SetAttributionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAttributionDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InviteServer).SetAttributionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invite.Invite/SetAttributionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InviteServer).SetAttributionData(ctx, req.(*SetAttributionDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Invite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "invite.Invite",
	HandlerType: (*InviteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttributionData",
			Handler:    _Invite_AttributionData_Handler,
		},
		{
			MethodName: "CreateOrganizationInvite",
			Handler:    _Invite_CreateOrganizationInvite_Handler,
		},
		{
			MethodName: "InviteColleagues",
			Handler:    _Invite_InviteColleagues_Handler,
		},
		{
			MethodName: "InvitePatients",
			Handler:    _Invite_InvitePatients_Handler,
		},
		{
			MethodName: "LookupInvite",
			Handler:    _Invite_LookupInvite_Handler,
		},
		{
			MethodName: "MarkInviteConsumed",
			Handler:    _Invite_MarkInviteConsumed_Handler,
		},
		{
			MethodName: "SetAttributionData",
			Handler:    _Invite_SetAttributionData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Colleague) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Colleague) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.FirstName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	return i, nil
}

func (m *InviteColleaguesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InviteColleaguesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	if len(m.InviterEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InviterEntityID)))
		i += copy(data[i:], m.InviterEntityID)
	}
	if len(m.Colleagues) > 0 {
		for _, msg := range m.Colleagues {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InviteColleaguesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InviteColleaguesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ColleagueInvite) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ColleagueInvite) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	if len(m.InviterEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InviterEntityID)))
		i += copy(data[i:], m.InviterEntityID)
	}
	if m.Colleague != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Colleague.Size()))
		n1, err := m.Colleague.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Patient) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Patient) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FirstName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.PhoneNumber) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PhoneNumber)))
		i += copy(data[i:], m.PhoneNumber)
	}
	if len(m.ParkedEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ParkedEntityID)))
		i += copy(data[i:], m.ParkedEntityID)
	}
	return i, nil
}

func (m *InvitePatientsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InvitePatientsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	if len(m.InviterEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InviterEntityID)))
		i += copy(data[i:], m.InviterEntityID)
	}
	if len(m.Patients) > 0 {
		for _, msg := range m.Patients {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InvitePatientsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InvitePatientsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PatientInvite) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PatientInvite) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	if len(m.InviterEntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InviterEntityID)))
		i += copy(data[i:], m.InviterEntityID)
	}
	if m.Patient != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Patient.Size()))
		n2, err := m.Patient.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Organization) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Organization) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	return i, nil
}

func (m *CreateOrganizationInviteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOrganizationInviteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	return i, nil
}

func (m *CreateOrganizationInviteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateOrganizationInviteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Organization != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Organization.Size()))
		n3, err := m.Organization.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *OrganizationInvite) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *OrganizationInvite) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
		i += copy(data[i:], m.OrganizationEntityID)
	}
	if len(m.Token) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *MarkInviteConsumedRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MarkInviteConsumedRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	return i, nil
}

func (m *MarkInviteConsumedResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MarkInviteConsumedResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LookupInviteRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupInviteRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LookupKeyType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.LookupKeyType))
	}
	if m.LookupKeyOneof != nil {
		nn4, err := m.LookupKeyOneof.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *LookupInviteRequest_Token) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x12
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.Token)))
	i += copy(data[i:], m.Token)
	return i, nil
}
func (m *LookupInviteRequest_OrganizationEntityID) MarshalTo(data []byte) (int, error) {
	i := 0
	data[i] = 0x1a
	i++
	i = encodeVarintSvc(data, i, uint64(len(m.OrganizationEntityID)))
	i += copy(data[i:], m.OrganizationEntityID)
	return i, nil
}
func (m *LookupInviteResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LookupInviteResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.Type))
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Invite != nil {
		nn5, err := m.Invite.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *LookupInviteResponse_Colleague) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Colleague != nil {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(m.Colleague.Size()))
		n6, err := m.Colleague.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *LookupInviteResponse_Patient) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Patient != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Patient.Size()))
		n7, err := m.Patient.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *LookupInviteResponse_Organization) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Organization != nil {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(m.Organization.Size()))
		n8, err := m.Organization.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *AttributionValue) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AttributionValue) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *SetAttributionDataRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetAttributionDataRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeviceID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SetAttributionDataResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SetAttributionDataResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AttributionDataRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AttributionDataRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeviceID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DeviceID)))
		i += copy(data[i:], m.DeviceID)
	}
	return i, nil
}

func (m *AttributionDataResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AttributionDataResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Colleague) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *InviteColleaguesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InviterEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Colleagues) > 0 {
		for _, e := range m.Colleagues {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *InviteColleaguesResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ColleagueInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InviterEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Colleague != nil {
		l = m.Colleague.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Patient) Size() (n int) {
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ParkedEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *InvitePatientsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InviterEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Patients) > 0 {
		for _, e := range m.Patients {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *InvitePatientsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PatientInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InviterEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Patient != nil {
		l = m.Patient.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Organization) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateOrganizationInviteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateOrganizationInviteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *OrganizationInvite) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MarkInviteConsumedRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MarkInviteConsumedResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LookupInviteRequest) Size() (n int) {
	var l int
	_ = l
	if m.LookupKeyType != 0 {
		n += 1 + sovSvc(uint64(m.LookupKeyType))
	}
	if m.LookupKeyOneof != nil {
		n += m.LookupKeyOneof.Size()
	}
	return n
}

func (m *LookupInviteRequest_Token) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *LookupInviteRequest_OrganizationEntityID) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	n += 1 + l + sovSvc(uint64(l))
	return n
}
func (m *LookupInviteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSvc(uint64(m.Type))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.Invite != nil {
		n += m.Invite.Size()
	}
	return n
}

func (m *LookupInviteResponse_Colleague) Size() (n int) {
	var l int
	_ = l
	if m.Colleague != nil {
		l = m.Colleague.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *LookupInviteResponse_Patient) Size() (n int) {
	var l int
	_ = l
	if m.Patient != nil {
		l = m.Patient.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *LookupInviteResponse_Organization) Size() (n int) {
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *AttributionValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SetAttributionDataRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SetAttributionDataResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AttributionDataRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AttributionDataResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Colleague) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Colleague{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteColleaguesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteColleaguesRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`InviterEntityID:` + fmt.Sprintf("%v", this.InviterEntityID) + `,`,
		`Colleagues:` + strings.Replace(fmt.Sprintf("%v", this.Colleagues), "Colleague", "Colleague", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteColleaguesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteColleaguesResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ColleagueInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ColleagueInvite{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`InviterEntityID:` + fmt.Sprintf("%v", this.InviterEntityID) + `,`,
		`Colleague:` + strings.Replace(fmt.Sprintf("%v", this.Colleague), "Colleague", "Colleague", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Patient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Patient{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`ParkedEntityID:` + fmt.Sprintf("%v", this.ParkedEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvitePatientsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvitePatientsRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`InviterEntityID:` + fmt.Sprintf("%v", this.InviterEntityID) + `,`,
		`Patients:` + strings.Replace(fmt.Sprintf("%v", this.Patients), "Patient", "Patient", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvitePatientsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvitePatientsResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PatientInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PatientInvite{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`InviterEntityID:` + fmt.Sprintf("%v", this.InviterEntityID) + `,`,
		`Patient:` + strings.Replace(fmt.Sprintf("%v", this.Patient), "Patient", "Patient", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Organization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Organization{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrganizationInviteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrganizationInviteRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrganizationInviteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrganizationInviteResponse{`,
		`Organization:` + strings.Replace(fmt.Sprintf("%v", this.Organization), "OrganizationInvite", "OrganizationInvite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrganizationInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrganizationInvite{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkInviteConsumedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkInviteConsumedRequest{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkInviteConsumedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkInviteConsumedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteRequest{`,
		`LookupKeyType:` + fmt.Sprintf("%v", this.LookupKeyType) + `,`,
		`LookupKeyOneof:` + fmt.Sprintf("%v", this.LookupKeyOneof) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteRequest_Token) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteRequest_Token{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteRequest_OrganizationEntityID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteRequest_OrganizationEntityID{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteResponse{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "AttributionValue", "AttributionValue", 1) + `,`,
		`Invite:` + fmt.Sprintf("%v", this.Invite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteResponse_Colleague) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteResponse_Colleague{`,
		`Colleague:` + strings.Replace(fmt.Sprintf("%v", this.Colleague), "ColleagueInvite", "ColleagueInvite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteResponse_Patient) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteResponse_Patient{`,
		`Patient:` + strings.Replace(fmt.Sprintf("%v", this.Patient), "PatientInvite", "PatientInvite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupInviteResponse_Organization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupInviteResponse_Organization{`,
		`Organization:` + strings.Replace(fmt.Sprintf("%v", this.Organization), "OrganizationInvite", "OrganizationInvite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttributionValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttributionValue{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetAttributionDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetAttributionDataRequest{`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "AttributionValue", "AttributionValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetAttributionDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetAttributionDataResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AttributionDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttributionDataRequest{`,
		`DeviceID:` + fmt.Sprintf("%v", this.DeviceID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttributionDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttributionDataResponse{`,
		`Values:` + strings.Replace(fmt.Sprintf("%v", this.Values), "AttributionValue", "AttributionValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Colleague) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Colleague: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Colleague: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteColleaguesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteColleaguesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteColleaguesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colleagues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Colleagues = append(m.Colleagues, &Colleague{})
			if err := m.Colleagues[len(m.Colleagues)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteColleaguesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteColleaguesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteColleaguesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ColleagueInvite) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColleagueInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColleagueInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colleague", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Colleague == nil {
				m.Colleague = &Colleague{}
			}
			if err := m.Colleague.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patient) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkedEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParkedEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitePatientsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitePatientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitePatientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patients = append(m.Patients, &Patient{})
			if err := m.Patients[len(m.Patients)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitePatientsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitePatientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitePatientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientInvite) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Patient == nil {
				m.Patient = &Patient{}
			}
			if err := m.Patient.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrganizationInviteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrganizationInviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrganizationInviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrganizationInviteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrganizationInviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrganizationInviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &OrganizationInvite{}
			}
			if err := m.Organization.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationInvite) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkInviteConsumedRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkInviteConsumedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkInviteConsumedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkInviteConsumedResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkInviteConsumedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkInviteConsumedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupInviteRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupInviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupInviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupKeyType", wireType)
			}
			m.LookupKeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LookupKeyType |= (LookupInviteRequest_LookupKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &LookupInviteRequest_Token{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupKeyOneof = &LookupInviteRequest_OrganizationEntityID{string(data[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupInviteResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupInviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupInviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (LookupInviteResponse_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &AttributionValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colleague", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ColleagueInvite{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Invite = &LookupInviteResponse_Colleague{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PatientInvite{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Invite = &LookupInviteResponse_Patient{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrganizationInvite{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Invite = &LookupInviteResponse_Organization{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributionValue) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributionValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributionValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAttributionDataRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAttributionDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAttributionDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &AttributionValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAttributionDataResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAttributionDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAttributionDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributionDataRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributionDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributionDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributionDataResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributionDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributionDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &AttributionValue{})
			if err := m.Values[len(m.Values)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSvc = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x56, 0x4b, 0x6f, 0xe3, 0x54,
	0x14, 0x8e, 0xdb, 0x4e, 0xdb, 0x9c, 0x24, 0x4d, 0x7a, 0xa7, 0x4d, 0x3d, 0x66, 0x48, 0x32, 0x16,
	0x88, 0x80, 0x86, 0x14, 0x85, 0x0d, 0xc3, 0x2e, 0x2f, 0x4d, 0xa3, 0x96, 0xb8, 0x2a, 0x29, 0x08,
	0x46, 0xc8, 0x72, 0x92, 0x9b, 0x8c, 0x95, 0xc4, 0x0e, 0x8e, 0x13, 0x29, 0xac, 0xf8, 0x09, 0xec,
	0x59, 0x21, 0xb1, 0x40, 0xfc, 0x0c, 0x56, 0x2c, 0x67, 0xc9, 0x0a, 0x31, 0x65, 0xc3, 0x92, 0x25,
	0x3b, 0x38, 0xb9, 0xbe, 0x76, 0x9c, 0x38, 0xce, 0xa0, 0x19, 0xa9, 0xb3, 0x70, 0x53, 0x9f, 0x7b,
	0x1e, 0xdf, 0xf9, 0xce, 0xe3, 0x1a, 0xa2, 0xe3, 0x69, 0xbb, 0x30, 0xb2, 0x4c, 0xdb, 0x24, 0xbb,
	0xba, 0x31, 0xd5, 0x6d, 0x2a, 0xbd, 0xdf, 0xd3, 0xed, 0xa7, 0x93, 0x56, 0xa1, 0x6d, 0x0e, 0x4f,
	0x7b, 0x66, 0xcf, 0x3c, 0x65, 0xc7, 0xad, 0x49, 0x97, 0xbd, 0xb1, 0x17, 0xf6, 0x9f, 0x63, 0x26,
	0x57, 0x21, 0x5a, 0x31, 0x07, 0x03, 0xaa, 0xf5, 0x26, 0x94, 0x24, 0xe0, 0x0e, 0x1d, 0x6a, 0xfa,
	0x40, 0x14, 0x72, 0x42, 0x3e, 0x4a, 0x8e, 0x20, 0x3e, 0x7a, 0x6a, 0x1a, 0x54, 0x35, 0x26, 0xc3,
	0x16, 0xb5, 0xc4, 0x2d, 0x26, 0x25, 0x00, 0x5d, 0xdd, 0x1a, 0xdb, 0xaa, 0xa1, 0x0d, 0xa9, 0xb8,
	0x3d, 0x97, 0xc9, 0x3f, 0x0b, 0x70, 0x52, 0x67, 0xf1, 0x3d, 0x67, 0xe3, 0x2b, 0xfa, 0x35, 0xfe,
	0xb5, 0xc9, 0x47, 0x90, 0x36, 0xad, 0x9e, 0x66, 0xe8, 0xdf, 0x68, 0xb6, 0x6e, 0x1a, 0x2a, 0x35,
	0x6c, 0xdd, 0x9e, 0xa9, 0x7a, 0xc7, 0x89, 0x52, 0x16, 0x6f, 0x7e, 0xcf, 0x1e, 0x29, 0x3e, 0x8d,
	0x1a, 0x53, 0xa8, 0x57, 0x49, 0x01, 0x0e, 0x9d, 0xa4, 0x2c, 0x9f, 0x11, 0x03, 0x51, 0xbe, 0x8b,
	0x46, 0x49, 0x27, 0xa2, 0xe5, 0xe9, 0xbf, 0x0d, 0xd0, 0xf6, 0xc2, 0x23, 0xb2, 0xed, 0x7c, 0xac,
	0x78, 0x58, 0x70, 0x5c, 0x14, 0x3c, 0x60, 0xb2, 0x04, 0x62, 0x10, 0xeb, 0x78, 0x64, 0x1a, 0x63,
	0x2a, 0xff, 0x20, 0x40, 0xd2, 0x13, 0x3b, 0x5a, 0xb7, 0x98, 0xc0, 0x5b, 0x10, 0xf5, 0x12, 0x60,
	0xcc, 0xae, 0xc5, 0xaf, 0xc1, 0xde, 0x25, 0xc6, 0x41, 0x8f, 0x2b, 0xb5, 0xd8, 0x54, 0xb5, 0x87,
	0x90, 0x1a, 0x69, 0x56, 0x9f, 0x76, 0x7c, 0x48, 0x58, 0xed, 0xca, 0x04, 0x91, 0x1c, 0x5c, 0xb2,
	0x33, 0x17, 0x88, 0xfc, 0xa3, 0x00, 0xc7, 0x0e, 0x38, 0x1e, 0xe9, 0x35, 0x54, 0xf3, 0x01, 0xec,
	0x8f, 0x78, 0x70, 0x5e, 0xcb, 0xa4, 0xcb, 0x05, 0x07, 0x25, 0x8b, 0x90, 0x5e, 0x45, 0xc9, 0xeb,
	0xf8, 0xbd, 0x00, 0x09, 0x2e, 0xbc, 0xf5, 0x2a, 0xe6, 0x60, 0x8f, 0x03, 0xe7, 0x35, 0x0c, 0xe0,
	0x3e, 0x83, 0xb8, 0x3f, 0xd2, 0xcb, 0x63, 0x93, 0x9f, 0x40, 0xb6, 0x62, 0x51, 0xcd, 0xa6, 0xfe,
	0x53, 0x07, 0xd0, 0x2b, 0x57, 0x4c, 0x6e, 0x42, 0x2e, 0xdc, 0xb9, 0x43, 0x34, 0xf9, 0x00, 0xe2,
	0x7e, 0xef, 0xcc, 0x67, 0xac, 0x28, 0xb9, 0x19, 0x07, 0x2d, 0xe5, 0xaf, 0x80, 0x04, 0xa5, 0xaf,
	0x50, 0x1e, 0x5c, 0x5a, 0xb6, 0xd9, 0xa7, 0x86, 0x53, 0x12, 0xf9, 0x3d, 0xb8, 0xf7, 0x09, 0x36,
	0xb3, 0x3b, 0xe1, 0xc6, 0x78, 0x32, 0xa4, 0x1d, 0x97, 0x0b, 0x4f, 0x97, 0x39, 0x95, 0xef, 0x83,
	0xb4, 0x4e, 0x97, 0xf7, 0xd0, 0xbf, 0x02, 0xdc, 0xbd, 0x30, 0xcd, 0xfe, 0x64, 0xb4, 0x4c, 0x68,
	0x19, 0x92, 0x03, 0x26, 0x56, 0xfb, 0x74, 0xa6, 0xda, 0xb3, 0x91, 0x33, 0x79, 0x07, 0xc5, 0x77,
	0xdd, 0xac, 0xd7, 0x58, 0x71, 0xd9, 0x39, 0x9d, 0x35, 0xd1, 0x80, 0x24, 0x97, 0x40, 0x9f, 0x45,
	0xc8, 0xc7, 0xa1, 0xf9, 0x6f, 0x6f, 0xce, 0xff, 0x2c, 0x22, 0x57, 0x20, 0xb1, 0xec, 0x3d, 0x06,
	0x7b, 0xd7, 0x8d, 0xf3, 0x86, 0xf2, 0x79, 0x23, 0x15, 0x21, 0x51, 0xb8, 0xd3, 0x54, 0xce, 0x6b,
	0x8d, 0x94, 0x40, 0x24, 0x48, 0x2b, 0x57, 0x8f, 0x4b, 0x8d, 0xfa, 0x97, 0xa5, 0x66, 0x5d, 0x69,
	0xa8, 0xb5, 0x46, 0xb3, 0xde, 0xfc, 0x42, 0xad, 0x57, 0x53, 0x5b, 0x65, 0x02, 0x29, 0x5f, 0x56,
	0xb8, 0x3f, 0xcc, 0xae, 0xfc, 0xcb, 0x16, 0x1c, 0x2d, 0xe7, 0xc2, 0xab, 0x7e, 0x0a, 0x3b, 0xbe,
	0xbc, 0x1f, 0xac, 0xcf, 0xdb, 0xd1, 0x2d, 0x30, 0x44, 0x79, 0xd8, 0x9d, 0x6a, 0x83, 0xf9, 0x5a,
	0xde, 0x62, 0xa3, 0x2c, 0xba, 0x26, 0x25, 0xdb, 0xb6, 0xf4, 0xd6, 0x64, 0x9e, 0xd1, 0x67, 0x73,
	0x05, 0x5c, 0x54, 0xbe, 0x1d, 0x08, 0xac, 0x9b, 0x4e, 0x02, 0x3b, 0xd0, 0x09, 0x81, 0xb4, 0xe5,
	0x17, 0xb3, 0x16, 0x63, 0xba, 0xc7, 0x2b, 0xb3, 0xe6, 0x69, 0x16, 0x57, 0x1a, 0x35, 0xfe, 0xa2,
	0x46, 0x45, 0x62, 0x1f, 0xc1, 0x0e, 0x43, 0x9f, 0xc0, 0x4b, 0x52, 0xb9, 0xb8, 0xa8, 0x95, 0x1e,
	0x5f, 0xd7, 0x90, 0x51, 0xa4, 0xf7, 0x12, 0x09, 0x44, 0xf6, 0x90, 0xd3, 0x63, 0x38, 0x5c, 0xe2,
	0xb4, 0xa2, 0x54, 0x6b, 0x48, 0xe7, 0x3e, 0xf0, 0x0b, 0x59, 0x2e, 0x40, 0x2a, 0x90, 0x64, 0x0c,
	0xb6, 0x91, 0x65, 0xbe, 0xb0, 0xb1, 0x29, 0x19, 0x37, 0xbc, 0x81, 0xbb, 0x70, 0xef, 0x53, 0x6a,
	0xfb, 0x4c, 0xaa, 0x9a, 0xad, 0xb9, 0xbd, 0x97, 0x85, 0x68, 0x87, 0x4e, 0xf5, 0x36, 0x5d, 0x4c,
	0x46, 0x1c, 0x3b, 0x63, 0xbf, 0xca, 0x84, 0x38, 0x0d, 0xff, 0x9b, 0xe8, 0x79, 0xf3, 0xaf, 0x8b,
	0xc3, 0x9b, 0xff, 0x11, 0xa4, 0x5f, 0x12, 0x02, 0xb6, 0xe3, 0x49, 0x88, 0x57, 0x1f, 0x3a, 0x61,
	0x33, 0xba, 0xe2, 0x3f, 0x3b, 0xb0, 0xcb, 0x57, 0xc3, 0x15, 0x24, 0x57, 0xfc, 0x91, 0xcc, 0x1a,
	0x3b, 0x1f, 0x46, 0x29, 0x1b, 0x7a, 0xce, 0x81, 0x0c, 0x41, 0x0c, 0x5b, 0x6d, 0xe4, 0x1d, 0xaf,
	0xdd, 0x36, 0x6f, 0x56, 0x29, 0xff, 0x62, 0x45, 0x1e, 0xee, 0x1a, 0x52, 0xab, 0x9f, 0x1c, 0xc4,
	0xc3, 0x18, 0xf2, 0xe1, 0x24, 0xe5, 0xc2, 0x15, 0xb8, 0x5b, 0x05, 0x0e, 0x96, 0xef, 0x3f, 0xf2,
	0xe6, 0xb2, 0xcd, 0xca, 0xed, 0x2d, 0x65, 0xc2, 0x8e, 0xb9, 0xc3, 0x3a, 0xc4, 0xfd, 0x33, 0x4c,
	0xde, 0xd8, 0xb0, 0xd1, 0xa4, 0xfb, 0x9b, 0xc6, 0x9e, 0x3c, 0x01, 0x12, 0xdc, 0xad, 0xc4, 0x5b,
	0x15, 0xa1, 0x3b, 0x5a, 0x92, 0x37, 0xa9, 0x2c, 0x9c, 0x07, 0x7b, 0x77, 0xe1, 0x3c, 0x74, 0x7e,
	0x16, 0xce, 0xc3, 0x5b, 0xbf, 0xfc, 0xf0, 0xd9, 0xf3, 0x8c, 0xf0, 0xdb, 0xf3, 0x4c, 0xe4, 0x6f,
	0xfc, 0xfd, 0xf6, 0x26, 0x23, 0xfc, 0x84, 0xcf, 0xaf, 0xf8, 0x3c, 0xc3, 0xe7, 0x0f, 0x7c, 0xfe,
	0xba, 0xc1, 0x33, 0xfc, 0xfd, 0xee, 0xcf, 0x4c, 0xa4, 0xb5, 0xcb, 0xbe, 0xa3, 0x3f, 0xfc, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xc1, 0x46, 0x69, 0x07, 0x8b, 0x0b, 0x00, 0x00,
}
