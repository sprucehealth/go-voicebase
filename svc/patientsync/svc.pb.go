// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package patientsync is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		InitiateSyncRequest
		InitiateSyncResponse
		ConfigureSyncRequest
		ConfigureSyncResponse
		LookupSyncConfigurationRequest
		LookupSyncConfigurationResponse
*/
package patientsync

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Source int32

const (
	SOURCE_UNKNOWN  Source = 0
	SOURCE_DRCHRONO Source = 1
	SOURCE_HINT     Source = 2
	SOURCE_ELATION  Source = 3
	SOURCE_CSV      Source = 4
)

var Source_name = map[int32]string{
	0: "SOURCE_UNKNOWN",
	1: "SOURCE_DRCHRONO",
	2: "SOURCE_HINT",
	3: "SOURCE_ELATION",
	4: "SOURCE_CSV",
}
var Source_value = map[string]int32{
	"SOURCE_UNKNOWN":  0,
	"SOURCE_DRCHRONO": 1,
	"SOURCE_HINT":     2,
	"SOURCE_ELATION":  3,
	"SOURCE_CSV":      4,
}

func (Source) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type ThreadCreationType int32

const (
	THREAD_CREATION_TYPE_INVALID  ThreadCreationType = 0
	THREAD_CREATION_TYPE_SECURE   ThreadCreationType = 1
	THREAD_CREATION_TYPE_STANDARD ThreadCreationType = 2
)

var ThreadCreationType_name = map[int32]string{
	0: "THREAD_CREATION_TYPE_INVALID",
	1: "THREAD_CREATION_TYPE_SECURE",
	2: "THREAD_CREATION_TYPE_STANDARD",
}
var ThreadCreationType_value = map[string]int32{
	"THREAD_CREATION_TYPE_INVALID":  0,
	"THREAD_CREATION_TYPE_SECURE":   1,
	"THREAD_CREATION_TYPE_STANDARD": 2,
}

func (ThreadCreationType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type InitiateSyncRequest struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,json=organizationEntityId,proto3" json:"organization_entity_id,omitempty"`
	Source               Source `protobuf:"varint,2,opt,name=source,proto3,enum=patientsync.Source" json:"source,omitempty"`
}

func (m *InitiateSyncRequest) Reset()                    { *m = InitiateSyncRequest{} }
func (*InitiateSyncRequest) ProtoMessage()               {}
func (*InitiateSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

type InitiateSyncResponse struct {
}

func (m *InitiateSyncResponse) Reset()                    { *m = InitiateSyncResponse{} }
func (*InitiateSyncResponse) ProtoMessage()               {}
func (*InitiateSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type ConfigureSyncRequest struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,json=organizationEntityId,proto3" json:"organization_entity_id,omitempty"`
	Source               Source `protobuf:"varint,2,opt,name=source,proto3,enum=patientsync.Source" json:"source,omitempty"`
	Token                string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ConfigureSyncRequest) Reset()                    { *m = ConfigureSyncRequest{} }
func (*ConfigureSyncRequest) ProtoMessage()               {}
func (*ConfigureSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type ConfigureSyncResponse struct {
}

func (m *ConfigureSyncResponse) Reset()                    { *m = ConfigureSyncResponse{} }
func (*ConfigureSyncResponse) ProtoMessage()               {}
func (*ConfigureSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type LookupSyncConfigurationRequest struct {
	OrganizationEntityID string `protobuf:"bytes,1,opt,name=organization_entity_id,json=organizationEntityId,proto3" json:"organization_entity_id,omitempty"`
	Source               Source `protobuf:"varint,2,opt,name=source,proto3,enum=patientsync.Source" json:"source,omitempty"`
}

func (m *LookupSyncConfigurationRequest) Reset()      { *m = LookupSyncConfigurationRequest{} }
func (*LookupSyncConfigurationRequest) ProtoMessage() {}
func (*LookupSyncConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{4}
}

type LookupSyncConfigurationResponse struct {
	PracticeID         string             `protobuf:"bytes,1,opt,name=practice_id,json=practiceId,proto3" json:"practice_id,omitempty"`
	ThreadCreationType ThreadCreationType `protobuf:"varint,2,opt,name=thread_creation_type,json=threadCreationType,proto3,enum=patientsync.ThreadCreationType" json:"thread_creation_type,omitempty"`
}

func (m *LookupSyncConfigurationResponse) Reset()      { *m = LookupSyncConfigurationResponse{} }
func (*LookupSyncConfigurationResponse) ProtoMessage() {}
func (*LookupSyncConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{5}
}

func init() {
	proto.RegisterType((*InitiateSyncRequest)(nil), "patientsync.InitiateSyncRequest")
	proto.RegisterType((*InitiateSyncResponse)(nil), "patientsync.InitiateSyncResponse")
	proto.RegisterType((*ConfigureSyncRequest)(nil), "patientsync.ConfigureSyncRequest")
	proto.RegisterType((*ConfigureSyncResponse)(nil), "patientsync.ConfigureSyncResponse")
	proto.RegisterType((*LookupSyncConfigurationRequest)(nil), "patientsync.LookupSyncConfigurationRequest")
	proto.RegisterType((*LookupSyncConfigurationResponse)(nil), "patientsync.LookupSyncConfigurationResponse")
	proto.RegisterEnum("patientsync.Source", Source_name, Source_value)
	proto.RegisterEnum("patientsync.ThreadCreationType", ThreadCreationType_name, ThreadCreationType_value)
}
func (x Source) String() string {
	s, ok := Source_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ThreadCreationType) String() string {
	s, ok := ThreadCreationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *InitiateSyncRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiateSyncRequest)
	if !ok {
		that2, ok := that.(InitiateSyncRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (this *InitiateSyncResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InitiateSyncResponse)
	if !ok {
		that2, ok := that.(InitiateSyncResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ConfigureSyncRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConfigureSyncRequest)
	if !ok {
		that2, ok := that.(ConfigureSyncRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ConfigureSyncResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConfigureSyncResponse)
	if !ok {
		that2, ok := that.(ConfigureSyncResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *LookupSyncConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupSyncConfigurationRequest)
	if !ok {
		that2, ok := that.(LookupSyncConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrganizationEntityID != that1.OrganizationEntityID {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (this *LookupSyncConfigurationResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LookupSyncConfigurationResponse)
	if !ok {
		that2, ok := that.(LookupSyncConfigurationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PracticeID != that1.PracticeID {
		return false
	}
	if this.ThreadCreationType != that1.ThreadCreationType {
		return false
	}
	return true
}
func (this *InitiateSyncRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&patientsync.InitiateSyncRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitiateSyncResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&patientsync.InitiateSyncResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigureSyncRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&patientsync.ConfigureSyncRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfigureSyncResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&patientsync.ConfigureSyncResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSyncConfigurationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&patientsync.LookupSyncConfigurationRequest{")
	s = append(s, "OrganizationEntityID: "+fmt.Sprintf("%#v", this.OrganizationEntityID)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LookupSyncConfigurationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&patientsync.LookupSyncConfigurationResponse{")
	s = append(s, "PracticeID: "+fmt.Sprintf("%#v", this.PracticeID)+",\n")
	s = append(s, "ThreadCreationType: "+fmt.Sprintf("%#v", this.ThreadCreationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PatientSync service

type PatientSyncClient interface {
	// ConfigureSync sets up a patient sync for a practice.
	ConfigureSync(ctx context.Context, in *ConfigureSyncRequest, opts ...grpc.CallOption) (*ConfigureSyncResponse, error)
	// InitiateSync kicks off the initial sync for a practice. It assumes that
	// sync has already been configured. Calling this will ensure that all existing
	// patients from the source are synced in to the practice account on Spruce, and that
	// the account is in a connected state on a move forward basis for all new patients
	// created in the source.
	InitiateSync(ctx context.Context, in *InitiateSyncRequest, opts ...grpc.CallOption) (*InitiateSyncResponse, error)
	// LookupSyncConfiguration enables the looking up of sync configuration for an organization from a particular source.
	LookupSyncConfiguration(ctx context.Context, in *LookupSyncConfigurationRequest, opts ...grpc.CallOption) (*LookupSyncConfigurationResponse, error)
}

type patientSyncClient struct {
	cc *grpc.ClientConn
}

func NewPatientSyncClient(cc *grpc.ClientConn) PatientSyncClient {
	return &patientSyncClient{cc}
}

func (c *patientSyncClient) ConfigureSync(ctx context.Context, in *ConfigureSyncRequest, opts ...grpc.CallOption) (*ConfigureSyncResponse, error) {
	out := new(ConfigureSyncResponse)
	err := grpc.Invoke(ctx, "/patientsync.PatientSync/ConfigureSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientSyncClient) InitiateSync(ctx context.Context, in *InitiateSyncRequest, opts ...grpc.CallOption) (*InitiateSyncResponse, error) {
	out := new(InitiateSyncResponse)
	err := grpc.Invoke(ctx, "/patientsync.PatientSync/InitiateSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientSyncClient) LookupSyncConfiguration(ctx context.Context, in *LookupSyncConfigurationRequest, opts ...grpc.CallOption) (*LookupSyncConfigurationResponse, error) {
	out := new(LookupSyncConfigurationResponse)
	err := grpc.Invoke(ctx, "/patientsync.PatientSync/LookupSyncConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PatientSync service

type PatientSyncServer interface {
	// ConfigureSync sets up a patient sync for a practice.
	ConfigureSync(context.Context, *ConfigureSyncRequest) (*ConfigureSyncResponse, error)
	// InitiateSync kicks off the initial sync for a practice. It assumes that
	// sync has already been configured. Calling this will ensure that all existing
	// patients from the source are synced in to the practice account on Spruce, and that
	// the account is in a connected state on a move forward basis for all new patients
	// created in the source.
	InitiateSync(context.Context, *InitiateSyncRequest) (*InitiateSyncResponse, error)
	// LookupSyncConfiguration enables the looking up of sync configuration for an organization from a particular source.
	LookupSyncConfiguration(context.Context, *LookupSyncConfigurationRequest) (*LookupSyncConfigurationResponse, error)
}

func RegisterPatientSyncServer(s *grpc.Server, srv PatientSyncServer) {
	s.RegisterService(&_PatientSync_serviceDesc, srv)
}

func _PatientSync_ConfigureSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientSyncServer).ConfigureSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/patientsync.PatientSync/ConfigureSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientSyncServer).ConfigureSync(ctx, req.(*ConfigureSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientSync_InitiateSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientSyncServer).InitiateSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/patientsync.PatientSync/InitiateSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientSyncServer).InitiateSync(ctx, req.(*InitiateSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientSync_LookupSyncConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupSyncConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientSyncServer).LookupSyncConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/patientsync.PatientSync/LookupSyncConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientSyncServer).LookupSyncConfiguration(ctx, req.(*LookupSyncConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PatientSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "patientsync.PatientSync",
	HandlerType: (*PatientSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureSync",
			Handler:    _PatientSync_ConfigureSync_Handler,
		},
		{
			MethodName: "InitiateSync",
			Handler:    _PatientSync_InitiateSync_Handler,
		},
		{
			MethodName: "LookupSyncConfiguration",
			Handler:    _PatientSync_LookupSyncConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}

func (m *InitiateSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.Source != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Source))
	}
	return i, nil
}

func (m *InitiateSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ConfigureSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.Source != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Source))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ConfigureSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LookupSyncConfigurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSyncConfigurationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrganizationEntityID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.OrganizationEntityID)))
		i += copy(dAtA[i:], m.OrganizationEntityID)
	}
	if m.Source != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Source))
	}
	return i, nil
}

func (m *LookupSyncConfigurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupSyncConfigurationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PracticeID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PracticeID)))
		i += copy(dAtA[i:], m.PracticeID)
	}
	if m.ThreadCreationType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.ThreadCreationType))
	}
	return i, nil
}

func encodeFixed64Svc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InitiateSyncRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovSvc(uint64(m.Source))
	}
	return n
}

func (m *InitiateSyncResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ConfigureSyncRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovSvc(uint64(m.Source))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ConfigureSyncResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LookupSyncConfigurationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrganizationEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovSvc(uint64(m.Source))
	}
	return n
}

func (m *LookupSyncConfigurationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PracticeID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.ThreadCreationType != 0 {
		n += 1 + sovSvc(uint64(m.ThreadCreationType))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InitiateSyncRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiateSyncRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InitiateSyncResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitiateSyncResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ConfigureSyncRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigureSyncRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigureSyncResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigureSyncResponse{`,
		`}`,
	}, "")
	return s
}
func (this *LookupSyncConfigurationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupSyncConfigurationRequest{`,
		`OrganizationEntityID:` + fmt.Sprintf("%v", this.OrganizationEntityID) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LookupSyncConfigurationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LookupSyncConfigurationResponse{`,
		`PracticeID:` + fmt.Sprintf("%v", this.PracticeID) + `,`,
		`ThreadCreationType:` + fmt.Sprintf("%v", this.ThreadCreationType) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InitiateSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSyncConfigurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSyncConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSyncConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationEntityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (Source(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupSyncConfigurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupSyncConfigurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupSyncConfigurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PracticeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PracticeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadCreationType", wireType)
			}
			m.ThreadCreationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadCreationType |= (ThreadCreationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("svc.proto", fileDescriptorSvc) }

var fileDescriptorSvc = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x94, 0x41, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0x3b, 0x8b, 0x92, 0xf0, 0x56, 0x97, 0x66, 0xa8, 0xb0, 0x59, 0x75, 0x76, 0xd9, 0x13,
	0x01, 0x5c, 0x12, 0xfc, 0x04, 0x4b, 0xdb, 0x84, 0x46, 0xd2, 0xe2, 0xb4, 0x60, 0x3c, 0x35, 0xa5,
	0x3b, 0x2c, 0x0d, 0xb1, 0x53, 0xdb, 0xa9, 0xc9, 0x72, 0xf2, 0x23, 0x18, 0xef, 0x1e, 0x4d, 0xf4,
	0xe6, 0xc7, 0xf0, 0xc8, 0xd1, 0x13, 0x91, 0x7a, 0xf1, 0xc8, 0x47, 0x30, 0xb4, 0x25, 0x6e, 0xdd,
	0x65, 0xe3, 0x91, 0xdb, 0xbe, 0xff, 0xfe, 0x5e, 0xdf, 0xff, 0xbd, 0x99, 0x37, 0xb0, 0x90, 0xbc,
	0xf3, 0x7b, 0x51, 0xcc, 0x05, 0xc7, 0xf5, 0xc8, 0x13, 0x01, 0x0b, 0x45, 0x32, 0x0a, 0xfd, 0xd6,
	0xb3, 0x61, 0x20, 0x4e, 0xd2, 0xa3, 0x9e, 0xcf, 0xdf, 0x6c, 0x0d, 0xf9, 0x90, 0x6f, 0xe5, 0xcc,
	0x51, 0x7a, 0x9c, 0x47, 0x79, 0x90, 0xff, 0x2a, 0x72, 0xbb, 0x1f, 0x11, 0x2c, 0x19, 0x61, 0x20,
	0x02, 0x4f, 0x30, 0x7b, 0x14, 0xfa, 0x94, 0xbd, 0x4d, 0x59, 0x22, 0xb0, 0x09, 0xcb, 0x3c, 0x1e,
	0x7a, 0x61, 0x70, 0xe6, 0x89, 0x80, 0x87, 0x2e, 0x0b, 0x45, 0x20, 0x46, 0x6e, 0x30, 0x68, 0xa2,
	0x0e, 0x5a, 0x5b, 0xd8, 0x69, 0x66, 0x17, 0x6d, 0xc5, 0x1a, 0x23, 0xf4, 0x1c, 0x30, 0x34, 0xaa,
	0xf0, 0x49, 0x75, 0x80, 0x37, 0x60, 0x3e, 0xe1, 0x69, 0xec, 0xb3, 0x66, 0xad, 0x83, 0xd6, 0x1a,
	0xdb, 0x4b, 0xbd, 0x31, 0xd3, 0x3d, 0x3b, 0xff, 0x8b, 0x96, 0x48, 0x77, 0x19, 0x94, 0xaa, 0xa7,
	0x24, 0xe2, 0x61, 0xc2, 0xba, 0x5f, 0x11, 0x28, 0x2a, 0x0f, 0x8f, 0x83, 0x61, 0x1a, 0xdf, 0x19,
	0xb7, 0x58, 0x81, 0xfb, 0x82, 0x9f, 0xb2, 0xb0, 0x39, 0x77, 0x5d, 0x8b, 0x16, 0x41, 0x77, 0x05,
	0x1e, 0xfd, 0x63, 0xb5, 0x6c, 0xe2, 0x13, 0x02, 0xb2, 0xc7, 0xf9, 0x69, 0x1a, 0x5d, 0xcb, 0x37,
	0x4c, 0x5e, 0xff, 0x4e, 0x0c, 0xff, 0x33, 0x82, 0xf6, 0xad, 0xfe, 0x8a, 0x1e, 0xf0, 0x16, 0xd4,
	0xa3, 0xd8, 0xf3, 0x45, 0xe0, 0xb3, 0xbf, 0xae, 0x1a, 0xd9, 0x45, 0x1b, 0xf6, 0x4b, 0xd9, 0xd0,
	0x28, 0xdc, 0x20, 0xc6, 0x00, 0xbf, 0x04, 0x45, 0x9c, 0xc4, 0xcc, 0x1b, 0xb8, 0x7e, 0xcc, 0x8a,
	0xa6, 0xc4, 0x28, 0xba, 0xf1, 0xd3, 0xae, 0xf8, 0x71, 0x72, 0x50, 0x2d, 0x39, 0x67, 0x14, 0x31,
	0x8a, 0xc5, 0x84, 0xb6, 0x7e, 0x0c, 0xf3, 0x85, 0x73, 0x8c, 0xa1, 0x61, 0x5b, 0x07, 0x54, 0xd5,
	0xdd, 0x03, 0xf3, 0x85, 0x69, 0xbd, 0x32, 0x65, 0x09, 0x2f, 0xc1, 0x62, 0xa9, 0x69, 0x54, 0xdd,
	0xa5, 0x96, 0x69, 0xc9, 0x08, 0x2f, 0x42, 0xbd, 0x14, 0x77, 0x0d, 0xd3, 0x91, 0x6b, 0x63, 0x99,
	0xfa, 0x5e, 0xdf, 0x31, 0x2c, 0x53, 0x9e, 0xc3, 0x0d, 0x80, 0x52, 0x53, 0xed, 0x43, 0xf9, 0xde,
	0xfa, 0x19, 0xe0, 0x49, 0x47, 0xb8, 0x03, 0x4f, 0x9c, 0x5d, 0xaa, 0xf7, 0x35, 0x57, 0xa5, 0x7a,
	0x9e, 0xea, 0x3a, 0xaf, 0xf7, 0x75, 0xd7, 0x30, 0x0f, 0xfb, 0x7b, 0x86, 0x26, 0x4b, 0xb8, 0x0d,
	0x8f, 0xa7, 0x12, 0xb6, 0xae, 0x1e, 0x50, 0x5d, 0x46, 0x78, 0x15, 0x9e, 0x4e, 0x07, 0x9c, 0xbe,
	0xa9, 0xf5, 0xa9, 0x26, 0xd7, 0xb6, 0xbf, 0xd5, 0xa0, 0xbe, 0x5f, 0x8c, 0xe6, 0xfa, 0x30, 0xf0,
	0x21, 0x3c, 0xac, 0x5c, 0x2a, 0xbc, 0x5a, 0x99, 0xdc, 0xb4, 0xdd, 0x68, 0x75, 0x67, 0x21, 0xe5,
	0x79, 0xda, 0xf0, 0x60, 0x7c, 0xe1, 0x70, 0xa7, 0x92, 0x33, 0xe5, 0x7d, 0x68, 0xad, 0xce, 0x20,
	0xca, 0x8f, 0x0a, 0x58, 0xb9, 0xe5, 0x1e, 0xe1, 0x8d, 0x4a, 0xf6, 0xec, 0x6d, 0x68, 0x6d, 0xfe,
	0x1f, 0x5c, 0x54, 0xdd, 0xd9, 0x3c, 0xbf, 0x24, 0xd2, 0x8f, 0x4b, 0x22, 0x5d, 0x5d, 0x12, 0xf4,
	0x3e, 0x23, 0xe8, 0x4b, 0x46, 0xd0, 0xf7, 0x8c, 0xa0, 0xf3, 0x8c, 0xa0, 0x9f, 0x19, 0x41, 0xbf,
	0x33, 0x22, 0x5d, 0x65, 0x04, 0x7d, 0xf8, 0x45, 0xa4, 0xa3, 0xf9, 0xfc, 0x15, 0x7c, 0xfe, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x07, 0x0f, 0x33, 0x80, 0x4e, 0x05, 0x00, 0x00,
}
