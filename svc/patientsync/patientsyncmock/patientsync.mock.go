// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/patientsync (interfaces: PatientSyncClient)

package patientsyncmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	patientsync "github.com/sprucehealth/backend/svc/patientsync"
	grpc "google.golang.org/grpc"
)

// Mock of PatientSyncClient interface
type MockPatientSyncClient struct {
	ctrl     *gomock.Controller
	recorder *_MockPatientSyncClientRecorder
}

// Recorder for MockPatientSyncClient (not exported)
type _MockPatientSyncClientRecorder struct {
	mock *MockPatientSyncClient
}

func NewMockPatientSyncClient(ctrl *gomock.Controller) *MockPatientSyncClient {
	mock := &MockPatientSyncClient{ctrl: ctrl}
	mock.recorder = &_MockPatientSyncClientRecorder{mock}
	return mock
}

func (_m *MockPatientSyncClient) EXPECT() *_MockPatientSyncClientRecorder {
	return _m.recorder
}

func (_m *MockPatientSyncClient) ConfigureSync(_param0 context.Context, _param1 *patientsync.ConfigureSyncRequest, _param2 ...grpc.CallOption) (*patientsync.ConfigureSyncResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ConfigureSync", _s...)
	ret0, _ := ret[0].(*patientsync.ConfigureSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPatientSyncClientRecorder) ConfigureSync(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConfigureSync", _s...)
}

func (_m *MockPatientSyncClient) InitiateSync(_param0 context.Context, _param1 *patientsync.InitiateSyncRequest, _param2 ...grpc.CallOption) (*patientsync.InitiateSyncResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InitiateSync", _s...)
	ret0, _ := ret[0].(*patientsync.InitiateSyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPatientSyncClientRecorder) InitiateSync(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InitiateSync", _s...)
}

func (_m *MockPatientSyncClient) LookupSyncConfiguration(_param0 context.Context, _param1 *patientsync.LookupSyncConfigurationRequest, _param2 ...grpc.CallOption) (*patientsync.LookupSyncConfigurationResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LookupSyncConfiguration", _s...)
	ret0, _ := ret[0].(*patientsync.LookupSyncConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPatientSyncClientRecorder) LookupSyncConfiguration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LookupSyncConfiguration", _s...)
}
