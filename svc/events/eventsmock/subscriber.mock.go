// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/events (interfaces: Subscriber)

package eventsmock

import (
	gomock "github.com/golang/mock/gomock"
	events "github.com/sprucehealth/backend/svc/events"
)

// Mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *_MockSubscriberRecorder
}

// Recorder for MockSubscriber (not exported)
type _MockSubscriberRecorder struct {
	mock *MockSubscriber
}

func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &_MockSubscriberRecorder{mock}
	return mock
}

func (_m *MockSubscriber) EXPECT() *_MockSubscriberRecorder {
	return _m.recorder
}

func (_m *MockSubscriber) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockSubscriberRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockSubscriber) Subscribe(_param0 string, _param1 []events.Unmarshaler, _param2 func(events.Unmarshaler) error) error {
	ret := _m.ctrl.Call(_m, "Subscribe", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSubscriberRecorder) Subscribe(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0, arg1, arg2)
}
