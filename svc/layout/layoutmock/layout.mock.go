// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/layout (interfaces: LayoutClient)

package layoutmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	layout "github.com/sprucehealth/backend/svc/layout"
	grpc "google.golang.org/grpc"
)

// Mock of LayoutClient interface
type MockLayoutClient struct {
	ctrl     *gomock.Controller
	recorder *_MockLayoutClientRecorder
}

// Recorder for MockLayoutClient (not exported)
type _MockLayoutClientRecorder struct {
	mock *MockLayoutClient
}

func NewMockLayoutClient(ctrl *gomock.Controller) *MockLayoutClient {
	mock := &MockLayoutClient{ctrl: ctrl}
	mock.recorder = &_MockLayoutClientRecorder{mock}
	return mock
}

func (_m *MockLayoutClient) EXPECT() *_MockLayoutClientRecorder {
	return _m.recorder
}

func (_m *MockLayoutClient) CreateVisitCategory(_param0 context.Context, _param1 *layout.CreateVisitCategoryRequest, _param2 ...grpc.CallOption) (*layout.CreateVisitCategoryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateVisitCategory", _s...)
	ret0, _ := ret[0].(*layout.CreateVisitCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) CreateVisitCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVisitCategory", _s...)
}

func (_m *MockLayoutClient) CreateVisitLayout(_param0 context.Context, _param1 *layout.CreateVisitLayoutRequest, _param2 ...grpc.CallOption) (*layout.CreateVisitLayoutResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateVisitLayout", _s...)
	ret0, _ := ret[0].(*layout.CreateVisitLayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) CreateVisitLayout(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVisitLayout", _s...)
}

func (_m *MockLayoutClient) DeleteVisitCategory(_param0 context.Context, _param1 *layout.DeleteVisitCategoryRequest, _param2 ...grpc.CallOption) (*layout.DeleteVisitCategoryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteVisitCategory", _s...)
	ret0, _ := ret[0].(*layout.DeleteVisitCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) DeleteVisitCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVisitCategory", _s...)
}

func (_m *MockLayoutClient) DeleteVisitLayout(_param0 context.Context, _param1 *layout.DeleteVisitLayoutRequest, _param2 ...grpc.CallOption) (*layout.DeleteVisitLayoutResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteVisitLayout", _s...)
	ret0, _ := ret[0].(*layout.DeleteVisitLayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) DeleteVisitLayout(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVisitLayout", _s...)
}

func (_m *MockLayoutClient) GetVisitCategory(_param0 context.Context, _param1 *layout.GetVisitCategoryRequest, _param2 ...grpc.CallOption) (*layout.GetVisitCategoryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetVisitCategory", _s...)
	ret0, _ := ret[0].(*layout.GetVisitCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) GetVisitCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVisitCategory", _s...)
}

func (_m *MockLayoutClient) GetVisitLayout(_param0 context.Context, _param1 *layout.GetVisitLayoutRequest, _param2 ...grpc.CallOption) (*layout.GetVisitLayoutResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetVisitLayout", _s...)
	ret0, _ := ret[0].(*layout.GetVisitLayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) GetVisitLayout(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVisitLayout", _s...)
}

func (_m *MockLayoutClient) GetVisitLayoutByVersion(_param0 context.Context, _param1 *layout.GetVisitLayoutByVersionRequest, _param2 ...grpc.CallOption) (*layout.GetVisitLayoutByVersionResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetVisitLayoutByVersion", _s...)
	ret0, _ := ret[0].(*layout.GetVisitLayoutByVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) GetVisitLayoutByVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVisitLayoutByVersion", _s...)
}

func (_m *MockLayoutClient) GetVisitLayoutVersion(_param0 context.Context, _param1 *layout.GetVisitLayoutVersionRequest, _param2 ...grpc.CallOption) (*layout.GetVisitLayoutVersionResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetVisitLayoutVersion", _s...)
	ret0, _ := ret[0].(*layout.GetVisitLayoutVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) GetVisitLayoutVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVisitLayoutVersion", _s...)
}

func (_m *MockLayoutClient) ListVisitCategories(_param0 context.Context, _param1 *layout.ListVisitCategoriesRequest, _param2 ...grpc.CallOption) (*layout.ListVisitCategoriesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListVisitCategories", _s...)
	ret0, _ := ret[0].(*layout.ListVisitCategoriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) ListVisitCategories(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVisitCategories", _s...)
}

func (_m *MockLayoutClient) ListVisitLayouts(_param0 context.Context, _param1 *layout.ListVisitLayoutsRequest, _param2 ...grpc.CallOption) (*layout.ListVisitLayoutsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListVisitLayouts", _s...)
	ret0, _ := ret[0].(*layout.ListVisitLayoutsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) ListVisitLayouts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListVisitLayouts", _s...)
}

func (_m *MockLayoutClient) UpdateVisitCategory(_param0 context.Context, _param1 *layout.UpdateVisitCategoryRequest, _param2 ...grpc.CallOption) (*layout.UpdateVisitCategoryResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateVisitCategory", _s...)
	ret0, _ := ret[0].(*layout.UpdateVisitCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) UpdateVisitCategory(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateVisitCategory", _s...)
}

func (_m *MockLayoutClient) UpdateVisitLayout(_param0 context.Context, _param1 *layout.UpdateVisitLayoutRequest, _param2 ...grpc.CallOption) (*layout.UpdateVisitLayoutResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateVisitLayout", _s...)
	ret0, _ := ret[0].(*layout.UpdateVisitLayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLayoutClientRecorder) UpdateVisitLayout(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateVisitLayout", _s...)
}
