// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package layout is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		VisitLayout
		VisitLayoutVersion
		VisitCategory
		ListVisitLayoutsRequest
		ListVisitLayoutsResponse
		ListVisitCategoriesRequest
		ListVisitCategoriesResponse
		CreateVisitLayoutRequest
		CreateVisitLayoutResponse
		GetVisitLayoutRequest
		GetVisitLayoutResponse
		GetVisitLayoutByVersionRequest
		GetVisitLayoutByVersionResponse
		UpdateVisitLayoutRequest
		UpdateVisitLayoutResponse
		DeleteVisitLayoutRequest
		DeleteVisitLayoutResponse
		CreateVisitCategoryRequest
		CreateVisitCategoryResponse
		UpdateVisitCategoryRequest
		UpdateVisitCategoryResponse
		DeleteVisitCategoryRequest
		DeleteVisitCategoryResponse
		GetVisitLayoutVersionRequest
		GetVisitLayoutVersionResponse
		GetVisitCategoryRequest
		GetVisitCategoryResponse
*/
package layout

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type VisitLayout struct {
	ID           string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CategoryID   string              `protobuf:"bytes,3,opt,name=category_id,proto3" json:"category_id,omitempty"`
	Version      *VisitLayoutVersion `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	InternalName string              `protobuf:"bytes,5,opt,name=internal_name,proto3" json:"internal_name,omitempty"`
}

func (m *VisitLayout) Reset()                    { *m = VisitLayout{} }
func (*VisitLayout) ProtoMessage()               {}
func (*VisitLayout) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

func (m *VisitLayout) GetVersion() *VisitLayoutVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

type VisitLayoutVersion struct {
	ID                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SAMLLocation         string `protobuf:"bytes,2,opt,name=saml_location,proto3" json:"saml_location,omitempty"`
	IntakeLayoutLocation string `protobuf:"bytes,3,opt,name=intake_layout_location,proto3" json:"intake_layout_location,omitempty"`
	ReviewLayoutLocation string `protobuf:"bytes,4,opt,name=review_layout_location,proto3" json:"review_layout_location,omitempty"`
}

func (m *VisitLayoutVersion) Reset()                    { *m = VisitLayoutVersion{} }
func (*VisitLayoutVersion) ProtoMessage()               {}
func (*VisitLayoutVersion) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type VisitCategory struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *VisitCategory) Reset()                    { *m = VisitCategory{} }
func (*VisitCategory) ProtoMessage()               {}
func (*VisitCategory) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

type ListVisitLayoutsRequest struct {
	VisitCategoryID string `protobuf:"bytes,1,opt,name=visit_category_id,proto3" json:"visit_category_id,omitempty"`
}

func (m *ListVisitLayoutsRequest) Reset()                    { *m = ListVisitLayoutsRequest{} }
func (*ListVisitLayoutsRequest) ProtoMessage()               {}
func (*ListVisitLayoutsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

type ListVisitLayoutsResponse struct {
	VisitLayouts []*VisitLayout `protobuf:"bytes,1,rep,name=visitLayouts" json:"visitLayouts,omitempty"`
}

func (m *ListVisitLayoutsResponse) Reset()                    { *m = ListVisitLayoutsResponse{} }
func (*ListVisitLayoutsResponse) ProtoMessage()               {}
func (*ListVisitLayoutsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

func (m *ListVisitLayoutsResponse) GetVisitLayouts() []*VisitLayout {
	if m != nil {
		return m.VisitLayouts
	}
	return nil
}

type ListVisitCategoriesRequest struct {
}

func (m *ListVisitCategoriesRequest) Reset()                    { *m = ListVisitCategoriesRequest{} }
func (*ListVisitCategoriesRequest) ProtoMessage()               {}
func (*ListVisitCategoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

type ListVisitCategoriesResponse struct {
	Categories []*VisitCategory `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (m *ListVisitCategoriesResponse) Reset()                    { *m = ListVisitCategoriesResponse{} }
func (*ListVisitCategoriesResponse) ProtoMessage()               {}
func (*ListVisitCategoriesResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

func (m *ListVisitCategoriesResponse) GetCategories() []*VisitCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

type CreateVisitLayoutRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CategoryID   string `protobuf:"bytes,2,opt,name=category_id,proto3" json:"category_id,omitempty"`
	SAML         string `protobuf:"bytes,3,opt,name=saml,proto3" json:"saml,omitempty"`
	InternalName string `protobuf:"bytes,4,opt,name=internal_name,proto3" json:"internal_name,omitempty"`
}

func (m *CreateVisitLayoutRequest) Reset()                    { *m = CreateVisitLayoutRequest{} }
func (*CreateVisitLayoutRequest) ProtoMessage()               {}
func (*CreateVisitLayoutRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

type CreateVisitLayoutResponse struct {
	VisitLayout *VisitLayout `protobuf:"bytes,1,opt,name=visit_layout" json:"visit_layout,omitempty"`
}

func (m *CreateVisitLayoutResponse) Reset()                    { *m = CreateVisitLayoutResponse{} }
func (*CreateVisitLayoutResponse) ProtoMessage()               {}
func (*CreateVisitLayoutResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

func (m *CreateVisitLayoutResponse) GetVisitLayout() *VisitLayout {
	if m != nil {
		return m.VisitLayout
	}
	return nil
}

type GetVisitLayoutRequest struct {
	ID                        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IncludeVersionInformation bool   `protobuf:"varint,3,opt,name=include_version_information,proto3" json:"include_version_information,omitempty"`
}

func (m *GetVisitLayoutRequest) Reset()                    { *m = GetVisitLayoutRequest{} }
func (*GetVisitLayoutRequest) ProtoMessage()               {}
func (*GetVisitLayoutRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

type GetVisitLayoutResponse struct {
	VisitLayout *VisitLayout `protobuf:"bytes,1,opt,name=visit_layout" json:"visit_layout,omitempty"`
}

func (m *GetVisitLayoutResponse) Reset()                    { *m = GetVisitLayoutResponse{} }
func (*GetVisitLayoutResponse) ProtoMessage()               {}
func (*GetVisitLayoutResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

func (m *GetVisitLayoutResponse) GetVisitLayout() *VisitLayout {
	if m != nil {
		return m.VisitLayout
	}
	return nil
}

type GetVisitLayoutByVersionRequest struct {
	VisitLayoutVersionID string `protobuf:"bytes,1,opt,name=visit_layout_version_id,proto3" json:"visit_layout_version_id,omitempty"`
}

func (m *GetVisitLayoutByVersionRequest) Reset()      { *m = GetVisitLayoutByVersionRequest{} }
func (*GetVisitLayoutByVersionRequest) ProtoMessage() {}
func (*GetVisitLayoutByVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{11}
}

type GetVisitLayoutByVersionResponse struct {
	VisitLayout *VisitLayout `protobuf:"bytes,1,opt,name=visit_layout" json:"visit_layout,omitempty"`
}

func (m *GetVisitLayoutByVersionResponse) Reset()      { *m = GetVisitLayoutByVersionResponse{} }
func (*GetVisitLayoutByVersionResponse) ProtoMessage() {}
func (*GetVisitLayoutByVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{12}
}

func (m *GetVisitLayoutByVersionResponse) GetVisitLayout() *VisitLayout {
	if m != nil {
		return m.VisitLayout
	}
	return nil
}

type UpdateVisitLayoutRequest struct {
	VisitLayoutID      string `protobuf:"bytes,1,opt,name=visit_layout_id,proto3" json:"visit_layout_id,omitempty"`
	UpdateName         bool   `protobuf:"varint,2,opt,name=update_name,proto3" json:"update_name,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UpdateCategory     bool   `protobuf:"varint,4,opt,name=update_category,proto3" json:"update_category,omitempty"`
	CategoryID         string `protobuf:"bytes,5,opt,name=category_id,proto3" json:"category_id,omitempty"`
	UpdateSAML         bool   `protobuf:"varint,6,opt,name=update_saml,proto3" json:"update_saml,omitempty"`
	SAML               string `protobuf:"bytes,7,opt,name=saml,proto3" json:"saml,omitempty"`
	UpdateInternalName bool   `protobuf:"varint,8,opt,name=update_internal_name,proto3" json:"update_internal_name,omitempty"`
	InternalName       string `protobuf:"bytes,9,opt,name=internal_name,proto3" json:"internal_name,omitempty"`
}

func (m *UpdateVisitLayoutRequest) Reset()                    { *m = UpdateVisitLayoutRequest{} }
func (*UpdateVisitLayoutRequest) ProtoMessage()               {}
func (*UpdateVisitLayoutRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

type UpdateVisitLayoutResponse struct {
	VisitLayout *VisitLayout `protobuf:"bytes,1,opt,name=visit_layout" json:"visit_layout,omitempty"`
}

func (m *UpdateVisitLayoutResponse) Reset()                    { *m = UpdateVisitLayoutResponse{} }
func (*UpdateVisitLayoutResponse) ProtoMessage()               {}
func (*UpdateVisitLayoutResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

func (m *UpdateVisitLayoutResponse) GetVisitLayout() *VisitLayout {
	if m != nil {
		return m.VisitLayout
	}
	return nil
}

type DeleteVisitLayoutRequest struct {
	VisitLayoutID string `protobuf:"bytes,1,opt,name=visit_layout_id,proto3" json:"visit_layout_id,omitempty"`
}

func (m *DeleteVisitLayoutRequest) Reset()                    { *m = DeleteVisitLayoutRequest{} }
func (*DeleteVisitLayoutRequest) ProtoMessage()               {}
func (*DeleteVisitLayoutRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

type DeleteVisitLayoutResponse struct {
}

func (m *DeleteVisitLayoutResponse) Reset()                    { *m = DeleteVisitLayoutResponse{} }
func (*DeleteVisitLayoutResponse) ProtoMessage()               {}
func (*DeleteVisitLayoutResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

type CreateVisitCategoryRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateVisitCategoryRequest) Reset()                    { *m = CreateVisitCategoryRequest{} }
func (*CreateVisitCategoryRequest) ProtoMessage()               {}
func (*CreateVisitCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

type CreateVisitCategoryResponse struct {
	Category *VisitCategory `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *CreateVisitCategoryResponse) Reset()                    { *m = CreateVisitCategoryResponse{} }
func (*CreateVisitCategoryResponse) ProtoMessage()               {}
func (*CreateVisitCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{18} }

func (m *CreateVisitCategoryResponse) GetCategory() *VisitCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

type UpdateVisitCategoryRequest struct {
	VisitCategoryID string `protobuf:"bytes,1,opt,name=visit_category_id,proto3" json:"visit_category_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UpdateVisitCategoryRequest) Reset()                    { *m = UpdateVisitCategoryRequest{} }
func (*UpdateVisitCategoryRequest) ProtoMessage()               {}
func (*UpdateVisitCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

type UpdateVisitCategoryResponse struct {
	Category *VisitCategory `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
}

func (m *UpdateVisitCategoryResponse) Reset()                    { *m = UpdateVisitCategoryResponse{} }
func (*UpdateVisitCategoryResponse) ProtoMessage()               {}
func (*UpdateVisitCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

func (m *UpdateVisitCategoryResponse) GetCategory() *VisitCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

type DeleteVisitCategoryRequest struct {
	VisitCategoryID string `protobuf:"bytes,1,opt,name=visit_category_id,proto3" json:"visit_category_id,omitempty"`
}

func (m *DeleteVisitCategoryRequest) Reset()                    { *m = DeleteVisitCategoryRequest{} }
func (*DeleteVisitCategoryRequest) ProtoMessage()               {}
func (*DeleteVisitCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

type DeleteVisitCategoryResponse struct {
}

func (m *DeleteVisitCategoryResponse) Reset()                    { *m = DeleteVisitCategoryResponse{} }
func (*DeleteVisitCategoryResponse) ProtoMessage()               {}
func (*DeleteVisitCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{22} }

type GetVisitLayoutVersionRequest struct {
	ID            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VisitLayoutID string `protobuf:"bytes,2,opt,name=visit_layout_id,proto3" json:"visit_layout_id,omitempty"`
}

func (m *GetVisitLayoutVersionRequest) Reset()                    { *m = GetVisitLayoutVersionRequest{} }
func (*GetVisitLayoutVersionRequest) ProtoMessage()               {}
func (*GetVisitLayoutVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

type GetVisitLayoutVersionResponse struct {
	VisitLayoutVersion *VisitLayoutVersion `protobuf:"bytes,1,opt,name=visit_layout_version" json:"visit_layout_version,omitempty"`
}

func (m *GetVisitLayoutVersionResponse) Reset()      { *m = GetVisitLayoutVersionResponse{} }
func (*GetVisitLayoutVersionResponse) ProtoMessage() {}
func (*GetVisitLayoutVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{24}
}

func (m *GetVisitLayoutVersionResponse) GetVisitLayoutVersion() *VisitLayoutVersion {
	if m != nil {
		return m.VisitLayoutVersion
	}
	return nil
}

type GetVisitCategoryRequest struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetVisitCategoryRequest) Reset()                    { *m = GetVisitCategoryRequest{} }
func (*GetVisitCategoryRequest) ProtoMessage()               {}
func (*GetVisitCategoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

type GetVisitCategoryResponse struct {
	VisitCategory *VisitCategory `protobuf:"bytes,1,opt,name=visit_category" json:"visit_category,omitempty"`
}

func (m *GetVisitCategoryResponse) Reset()                    { *m = GetVisitCategoryResponse{} }
func (*GetVisitCategoryResponse) ProtoMessage()               {}
func (*GetVisitCategoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

func (m *GetVisitCategoryResponse) GetVisitCategory() *VisitCategory {
	if m != nil {
		return m.VisitCategory
	}
	return nil
}

func init() {
	proto.RegisterType((*VisitLayout)(nil), "layout.VisitLayout")
	proto.RegisterType((*VisitLayoutVersion)(nil), "layout.VisitLayoutVersion")
	proto.RegisterType((*VisitCategory)(nil), "layout.VisitCategory")
	proto.RegisterType((*ListVisitLayoutsRequest)(nil), "layout.ListVisitLayoutsRequest")
	proto.RegisterType((*ListVisitLayoutsResponse)(nil), "layout.ListVisitLayoutsResponse")
	proto.RegisterType((*ListVisitCategoriesRequest)(nil), "layout.ListVisitCategoriesRequest")
	proto.RegisterType((*ListVisitCategoriesResponse)(nil), "layout.ListVisitCategoriesResponse")
	proto.RegisterType((*CreateVisitLayoutRequest)(nil), "layout.CreateVisitLayoutRequest")
	proto.RegisterType((*CreateVisitLayoutResponse)(nil), "layout.CreateVisitLayoutResponse")
	proto.RegisterType((*GetVisitLayoutRequest)(nil), "layout.GetVisitLayoutRequest")
	proto.RegisterType((*GetVisitLayoutResponse)(nil), "layout.GetVisitLayoutResponse")
	proto.RegisterType((*GetVisitLayoutByVersionRequest)(nil), "layout.GetVisitLayoutByVersionRequest")
	proto.RegisterType((*GetVisitLayoutByVersionResponse)(nil), "layout.GetVisitLayoutByVersionResponse")
	proto.RegisterType((*UpdateVisitLayoutRequest)(nil), "layout.UpdateVisitLayoutRequest")
	proto.RegisterType((*UpdateVisitLayoutResponse)(nil), "layout.UpdateVisitLayoutResponse")
	proto.RegisterType((*DeleteVisitLayoutRequest)(nil), "layout.DeleteVisitLayoutRequest")
	proto.RegisterType((*DeleteVisitLayoutResponse)(nil), "layout.DeleteVisitLayoutResponse")
	proto.RegisterType((*CreateVisitCategoryRequest)(nil), "layout.CreateVisitCategoryRequest")
	proto.RegisterType((*CreateVisitCategoryResponse)(nil), "layout.CreateVisitCategoryResponse")
	proto.RegisterType((*UpdateVisitCategoryRequest)(nil), "layout.UpdateVisitCategoryRequest")
	proto.RegisterType((*UpdateVisitCategoryResponse)(nil), "layout.UpdateVisitCategoryResponse")
	proto.RegisterType((*DeleteVisitCategoryRequest)(nil), "layout.DeleteVisitCategoryRequest")
	proto.RegisterType((*DeleteVisitCategoryResponse)(nil), "layout.DeleteVisitCategoryResponse")
	proto.RegisterType((*GetVisitLayoutVersionRequest)(nil), "layout.GetVisitLayoutVersionRequest")
	proto.RegisterType((*GetVisitLayoutVersionResponse)(nil), "layout.GetVisitLayoutVersionResponse")
	proto.RegisterType((*GetVisitCategoryRequest)(nil), "layout.GetVisitCategoryRequest")
	proto.RegisterType((*GetVisitCategoryResponse)(nil), "layout.GetVisitCategoryResponse")
}
func (this *VisitLayout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VisitLayout)
	if !ok {
		that2, ok := that.(VisitLayout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CategoryID != that1.CategoryID {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if this.InternalName != that1.InternalName {
		return false
	}
	return true
}
func (this *VisitLayoutVersion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VisitLayoutVersion)
	if !ok {
		that2, ok := that.(VisitLayoutVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.SAMLLocation != that1.SAMLLocation {
		return false
	}
	if this.IntakeLayoutLocation != that1.IntakeLayoutLocation {
		return false
	}
	if this.ReviewLayoutLocation != that1.ReviewLayoutLocation {
		return false
	}
	return true
}
func (this *VisitCategory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VisitCategory)
	if !ok {
		that2, ok := that.(VisitCategory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListVisitLayoutsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListVisitLayoutsRequest)
	if !ok {
		that2, ok := that.(ListVisitLayoutsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitCategoryID != that1.VisitCategoryID {
		return false
	}
	return true
}
func (this *ListVisitLayoutsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListVisitLayoutsResponse)
	if !ok {
		that2, ok := that.(ListVisitLayoutsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.VisitLayouts) != len(that1.VisitLayouts) {
		return false
	}
	for i := range this.VisitLayouts {
		if !this.VisitLayouts[i].Equal(that1.VisitLayouts[i]) {
			return false
		}
	}
	return true
}
func (this *ListVisitCategoriesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListVisitCategoriesRequest)
	if !ok {
		that2, ok := that.(ListVisitCategoriesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListVisitCategoriesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListVisitCategoriesResponse)
	if !ok {
		that2, ok := that.(ListVisitCategoriesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Categories) != len(that1.Categories) {
		return false
	}
	for i := range this.Categories {
		if !this.Categories[i].Equal(that1.Categories[i]) {
			return false
		}
	}
	return true
}
func (this *CreateVisitLayoutRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitLayoutRequest)
	if !ok {
		that2, ok := that.(CreateVisitLayoutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CategoryID != that1.CategoryID {
		return false
	}
	if this.SAML != that1.SAML {
		return false
	}
	if this.InternalName != that1.InternalName {
		return false
	}
	return true
}
func (this *CreateVisitLayoutResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitLayoutResponse)
	if !ok {
		that2, ok := that.(CreateVisitLayoutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VisitLayout.Equal(that1.VisitLayout) {
		return false
	}
	return true
}
func (this *GetVisitLayoutRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitLayoutRequest)
	if !ok {
		that2, ok := that.(GetVisitLayoutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.IncludeVersionInformation != that1.IncludeVersionInformation {
		return false
	}
	return true
}
func (this *GetVisitLayoutResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitLayoutResponse)
	if !ok {
		that2, ok := that.(GetVisitLayoutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VisitLayout.Equal(that1.VisitLayout) {
		return false
	}
	return true
}
func (this *GetVisitLayoutByVersionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitLayoutByVersionRequest)
	if !ok {
		that2, ok := that.(GetVisitLayoutByVersionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitLayoutVersionID != that1.VisitLayoutVersionID {
		return false
	}
	return true
}
func (this *GetVisitLayoutByVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitLayoutByVersionResponse)
	if !ok {
		that2, ok := that.(GetVisitLayoutByVersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VisitLayout.Equal(that1.VisitLayout) {
		return false
	}
	return true
}
func (this *UpdateVisitLayoutRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateVisitLayoutRequest)
	if !ok {
		that2, ok := that.(UpdateVisitLayoutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitLayoutID != that1.VisitLayoutID {
		return false
	}
	if this.UpdateName != that1.UpdateName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.UpdateCategory != that1.UpdateCategory {
		return false
	}
	if this.CategoryID != that1.CategoryID {
		return false
	}
	if this.UpdateSAML != that1.UpdateSAML {
		return false
	}
	if this.SAML != that1.SAML {
		return false
	}
	if this.UpdateInternalName != that1.UpdateInternalName {
		return false
	}
	if this.InternalName != that1.InternalName {
		return false
	}
	return true
}
func (this *UpdateVisitLayoutResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateVisitLayoutResponse)
	if !ok {
		that2, ok := that.(UpdateVisitLayoutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VisitLayout.Equal(that1.VisitLayout) {
		return false
	}
	return true
}
func (this *DeleteVisitLayoutRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteVisitLayoutRequest)
	if !ok {
		that2, ok := that.(DeleteVisitLayoutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitLayoutID != that1.VisitLayoutID {
		return false
	}
	return true
}
func (this *DeleteVisitLayoutResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteVisitLayoutResponse)
	if !ok {
		that2, ok := that.(DeleteVisitLayoutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateVisitCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitCategoryRequest)
	if !ok {
		that2, ok := that.(CreateVisitCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateVisitCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitCategoryResponse)
	if !ok {
		that2, ok := that.(CreateVisitCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *UpdateVisitCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateVisitCategoryRequest)
	if !ok {
		that2, ok := that.(UpdateVisitCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitCategoryID != that1.VisitCategoryID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UpdateVisitCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UpdateVisitCategoryResponse)
	if !ok {
		that2, ok := that.(UpdateVisitCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Category.Equal(that1.Category) {
		return false
	}
	return true
}
func (this *DeleteVisitCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteVisitCategoryRequest)
	if !ok {
		that2, ok := that.(DeleteVisitCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitCategoryID != that1.VisitCategoryID {
		return false
	}
	return true
}
func (this *DeleteVisitCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteVisitCategoryResponse)
	if !ok {
		that2, ok := that.(DeleteVisitCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetVisitLayoutVersionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitLayoutVersionRequest)
	if !ok {
		that2, ok := that.(GetVisitLayoutVersionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.VisitLayoutID != that1.VisitLayoutID {
		return false
	}
	return true
}
func (this *GetVisitLayoutVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitLayoutVersionResponse)
	if !ok {
		that2, ok := that.(GetVisitLayoutVersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VisitLayoutVersion.Equal(that1.VisitLayoutVersion) {
		return false
	}
	return true
}
func (this *GetVisitCategoryRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitCategoryRequest)
	if !ok {
		that2, ok := that.(GetVisitCategoryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *GetVisitCategoryResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitCategoryResponse)
	if !ok {
		that2, ok := that.(GetVisitCategoryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VisitCategory.Equal(that1.VisitCategory) {
		return false
	}
	return true
}
func (this *VisitLayout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&layout.VisitLayout{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CategoryID: "+fmt.Sprintf("%#v", this.CategoryID)+",\n")
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	s = append(s, "InternalName: "+fmt.Sprintf("%#v", this.InternalName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisitLayoutVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&layout.VisitLayoutVersion{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "SAMLLocation: "+fmt.Sprintf("%#v", this.SAMLLocation)+",\n")
	s = append(s, "IntakeLayoutLocation: "+fmt.Sprintf("%#v", this.IntakeLayoutLocation)+",\n")
	s = append(s, "ReviewLayoutLocation: "+fmt.Sprintf("%#v", this.ReviewLayoutLocation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VisitCategory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&layout.VisitCategory{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListVisitLayoutsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.ListVisitLayoutsRequest{")
	s = append(s, "VisitCategoryID: "+fmt.Sprintf("%#v", this.VisitCategoryID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListVisitLayoutsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.ListVisitLayoutsResponse{")
	if this.VisitLayouts != nil {
		s = append(s, "VisitLayouts: "+fmt.Sprintf("%#v", this.VisitLayouts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListVisitCategoriesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&layout.ListVisitCategoriesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListVisitCategoriesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.ListVisitCategoriesResponse{")
	if this.Categories != nil {
		s = append(s, "Categories: "+fmt.Sprintf("%#v", this.Categories)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitLayoutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&layout.CreateVisitLayoutRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CategoryID: "+fmt.Sprintf("%#v", this.CategoryID)+",\n")
	s = append(s, "SAML: "+fmt.Sprintf("%#v", this.SAML)+",\n")
	s = append(s, "InternalName: "+fmt.Sprintf("%#v", this.InternalName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitLayoutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.CreateVisitLayoutResponse{")
	if this.VisitLayout != nil {
		s = append(s, "VisitLayout: "+fmt.Sprintf("%#v", this.VisitLayout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitLayoutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&layout.GetVisitLayoutRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "IncludeVersionInformation: "+fmt.Sprintf("%#v", this.IncludeVersionInformation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitLayoutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.GetVisitLayoutResponse{")
	if this.VisitLayout != nil {
		s = append(s, "VisitLayout: "+fmt.Sprintf("%#v", this.VisitLayout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitLayoutByVersionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.GetVisitLayoutByVersionRequest{")
	s = append(s, "VisitLayoutVersionID: "+fmt.Sprintf("%#v", this.VisitLayoutVersionID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitLayoutByVersionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.GetVisitLayoutByVersionResponse{")
	if this.VisitLayout != nil {
		s = append(s, "VisitLayout: "+fmt.Sprintf("%#v", this.VisitLayout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVisitLayoutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&layout.UpdateVisitLayoutRequest{")
	s = append(s, "VisitLayoutID: "+fmt.Sprintf("%#v", this.VisitLayoutID)+",\n")
	s = append(s, "UpdateName: "+fmt.Sprintf("%#v", this.UpdateName)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "UpdateCategory: "+fmt.Sprintf("%#v", this.UpdateCategory)+",\n")
	s = append(s, "CategoryID: "+fmt.Sprintf("%#v", this.CategoryID)+",\n")
	s = append(s, "UpdateSAML: "+fmt.Sprintf("%#v", this.UpdateSAML)+",\n")
	s = append(s, "SAML: "+fmt.Sprintf("%#v", this.SAML)+",\n")
	s = append(s, "UpdateInternalName: "+fmt.Sprintf("%#v", this.UpdateInternalName)+",\n")
	s = append(s, "InternalName: "+fmt.Sprintf("%#v", this.InternalName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVisitLayoutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.UpdateVisitLayoutResponse{")
	if this.VisitLayout != nil {
		s = append(s, "VisitLayout: "+fmt.Sprintf("%#v", this.VisitLayout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteVisitLayoutRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.DeleteVisitLayoutRequest{")
	s = append(s, "VisitLayoutID: "+fmt.Sprintf("%#v", this.VisitLayoutID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteVisitLayoutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&layout.DeleteVisitLayoutResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.CreateVisitCategoryRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.CreateVisitCategoryResponse{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVisitCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&layout.UpdateVisitCategoryRequest{")
	s = append(s, "VisitCategoryID: "+fmt.Sprintf("%#v", this.VisitCategoryID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateVisitCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.UpdateVisitCategoryResponse{")
	if this.Category != nil {
		s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteVisitCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.DeleteVisitCategoryRequest{")
	s = append(s, "VisitCategoryID: "+fmt.Sprintf("%#v", this.VisitCategoryID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteVisitCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&layout.DeleteVisitCategoryResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitLayoutVersionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&layout.GetVisitLayoutVersionRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "VisitLayoutID: "+fmt.Sprintf("%#v", this.VisitLayoutID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitLayoutVersionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.GetVisitLayoutVersionResponse{")
	if this.VisitLayoutVersion != nil {
		s = append(s, "VisitLayoutVersion: "+fmt.Sprintf("%#v", this.VisitLayoutVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitCategoryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.GetVisitCategoryRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitCategoryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&layout.GetVisitCategoryResponse{")
	if this.VisitCategory != nil {
		s = append(s, "VisitCategory: "+fmt.Sprintf("%#v", this.VisitCategory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Layout service

type LayoutClient interface {
	ListVisitLayouts(ctx context.Context, in *ListVisitLayoutsRequest, opts ...grpc.CallOption) (*ListVisitLayoutsResponse, error)
	ListVisitCategories(ctx context.Context, in *ListVisitCategoriesRequest, opts ...grpc.CallOption) (*ListVisitCategoriesResponse, error)
	CreateVisitLayout(ctx context.Context, in *CreateVisitLayoutRequest, opts ...grpc.CallOption) (*CreateVisitLayoutResponse, error)
	GetVisitCategory(ctx context.Context, in *GetVisitCategoryRequest, opts ...grpc.CallOption) (*GetVisitCategoryResponse, error)
	GetVisitLayout(ctx context.Context, in *GetVisitLayoutRequest, opts ...grpc.CallOption) (*GetVisitLayoutResponse, error)
	GetVisitLayoutByVersion(ctx context.Context, in *GetVisitLayoutByVersionRequest, opts ...grpc.CallOption) (*GetVisitLayoutByVersionResponse, error)
	GetVisitLayoutVersion(ctx context.Context, in *GetVisitLayoutVersionRequest, opts ...grpc.CallOption) (*GetVisitLayoutVersionResponse, error)
	UpdateVisitLayout(ctx context.Context, in *UpdateVisitLayoutRequest, opts ...grpc.CallOption) (*UpdateVisitLayoutResponse, error)
	DeleteVisitLayout(ctx context.Context, in *DeleteVisitLayoutRequest, opts ...grpc.CallOption) (*DeleteVisitLayoutResponse, error)
	CreateVisitCategory(ctx context.Context, in *CreateVisitCategoryRequest, opts ...grpc.CallOption) (*CreateVisitCategoryResponse, error)
	UpdateVisitCategory(ctx context.Context, in *UpdateVisitCategoryRequest, opts ...grpc.CallOption) (*UpdateVisitCategoryResponse, error)
	DeleteVisitCategory(ctx context.Context, in *DeleteVisitCategoryRequest, opts ...grpc.CallOption) (*DeleteVisitCategoryResponse, error)
}

type layoutClient struct {
	cc *grpc.ClientConn
}

func NewLayoutClient(cc *grpc.ClientConn) LayoutClient {
	return &layoutClient{cc}
}

func (c *layoutClient) ListVisitLayouts(ctx context.Context, in *ListVisitLayoutsRequest, opts ...grpc.CallOption) (*ListVisitLayoutsResponse, error) {
	out := new(ListVisitLayoutsResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/ListVisitLayouts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) ListVisitCategories(ctx context.Context, in *ListVisitCategoriesRequest, opts ...grpc.CallOption) (*ListVisitCategoriesResponse, error) {
	out := new(ListVisitCategoriesResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/ListVisitCategories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) CreateVisitLayout(ctx context.Context, in *CreateVisitLayoutRequest, opts ...grpc.CallOption) (*CreateVisitLayoutResponse, error) {
	out := new(CreateVisitLayoutResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/CreateVisitLayout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) GetVisitCategory(ctx context.Context, in *GetVisitCategoryRequest, opts ...grpc.CallOption) (*GetVisitCategoryResponse, error) {
	out := new(GetVisitCategoryResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/GetVisitCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) GetVisitLayout(ctx context.Context, in *GetVisitLayoutRequest, opts ...grpc.CallOption) (*GetVisitLayoutResponse, error) {
	out := new(GetVisitLayoutResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/GetVisitLayout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) GetVisitLayoutByVersion(ctx context.Context, in *GetVisitLayoutByVersionRequest, opts ...grpc.CallOption) (*GetVisitLayoutByVersionResponse, error) {
	out := new(GetVisitLayoutByVersionResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/GetVisitLayoutByVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) GetVisitLayoutVersion(ctx context.Context, in *GetVisitLayoutVersionRequest, opts ...grpc.CallOption) (*GetVisitLayoutVersionResponse, error) {
	out := new(GetVisitLayoutVersionResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/GetVisitLayoutVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) UpdateVisitLayout(ctx context.Context, in *UpdateVisitLayoutRequest, opts ...grpc.CallOption) (*UpdateVisitLayoutResponse, error) {
	out := new(UpdateVisitLayoutResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/UpdateVisitLayout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) DeleteVisitLayout(ctx context.Context, in *DeleteVisitLayoutRequest, opts ...grpc.CallOption) (*DeleteVisitLayoutResponse, error) {
	out := new(DeleteVisitLayoutResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/DeleteVisitLayout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) CreateVisitCategory(ctx context.Context, in *CreateVisitCategoryRequest, opts ...grpc.CallOption) (*CreateVisitCategoryResponse, error) {
	out := new(CreateVisitCategoryResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/CreateVisitCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) UpdateVisitCategory(ctx context.Context, in *UpdateVisitCategoryRequest, opts ...grpc.CallOption) (*UpdateVisitCategoryResponse, error) {
	out := new(UpdateVisitCategoryResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/UpdateVisitCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layoutClient) DeleteVisitCategory(ctx context.Context, in *DeleteVisitCategoryRequest, opts ...grpc.CallOption) (*DeleteVisitCategoryResponse, error) {
	out := new(DeleteVisitCategoryResponse)
	err := grpc.Invoke(ctx, "/layout.Layout/DeleteVisitCategory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Layout service

type LayoutServer interface {
	ListVisitLayouts(context.Context, *ListVisitLayoutsRequest) (*ListVisitLayoutsResponse, error)
	ListVisitCategories(context.Context, *ListVisitCategoriesRequest) (*ListVisitCategoriesResponse, error)
	CreateVisitLayout(context.Context, *CreateVisitLayoutRequest) (*CreateVisitLayoutResponse, error)
	GetVisitCategory(context.Context, *GetVisitCategoryRequest) (*GetVisitCategoryResponse, error)
	GetVisitLayout(context.Context, *GetVisitLayoutRequest) (*GetVisitLayoutResponse, error)
	GetVisitLayoutByVersion(context.Context, *GetVisitLayoutByVersionRequest) (*GetVisitLayoutByVersionResponse, error)
	GetVisitLayoutVersion(context.Context, *GetVisitLayoutVersionRequest) (*GetVisitLayoutVersionResponse, error)
	UpdateVisitLayout(context.Context, *UpdateVisitLayoutRequest) (*UpdateVisitLayoutResponse, error)
	DeleteVisitLayout(context.Context, *DeleteVisitLayoutRequest) (*DeleteVisitLayoutResponse, error)
	CreateVisitCategory(context.Context, *CreateVisitCategoryRequest) (*CreateVisitCategoryResponse, error)
	UpdateVisitCategory(context.Context, *UpdateVisitCategoryRequest) (*UpdateVisitCategoryResponse, error)
	DeleteVisitCategory(context.Context, *DeleteVisitCategoryRequest) (*DeleteVisitCategoryResponse, error)
}

func RegisterLayoutServer(s *grpc.Server, srv LayoutServer) {
	s.RegisterService(&_Layout_serviceDesc, srv)
}

func _Layout_ListVisitLayouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisitLayoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).ListVisitLayouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/ListVisitLayouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).ListVisitLayouts(ctx, req.(*ListVisitLayoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_ListVisitCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisitCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).ListVisitCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/ListVisitCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).ListVisitCategories(ctx, req.(*ListVisitCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_CreateVisitLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisitLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).CreateVisitLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/CreateVisitLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).CreateVisitLayout(ctx, req.(*CreateVisitLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_GetVisitCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).GetVisitCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/GetVisitCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).GetVisitCategory(ctx, req.(*GetVisitCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_GetVisitLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).GetVisitLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/GetVisitLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).GetVisitLayout(ctx, req.(*GetVisitLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_GetVisitLayoutByVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitLayoutByVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).GetVisitLayoutByVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/GetVisitLayoutByVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).GetVisitLayoutByVersion(ctx, req.(*GetVisitLayoutByVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_GetVisitLayoutVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitLayoutVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).GetVisitLayoutVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/GetVisitLayoutVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).GetVisitLayoutVersion(ctx, req.(*GetVisitLayoutVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_UpdateVisitLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisitLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).UpdateVisitLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/UpdateVisitLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).UpdateVisitLayout(ctx, req.(*UpdateVisitLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_DeleteVisitLayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVisitLayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).DeleteVisitLayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/DeleteVisitLayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).DeleteVisitLayout(ctx, req.(*DeleteVisitLayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_CreateVisitCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisitCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).CreateVisitCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/CreateVisitCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).CreateVisitCategory(ctx, req.(*CreateVisitCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_UpdateVisitCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVisitCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).UpdateVisitCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/UpdateVisitCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).UpdateVisitCategory(ctx, req.(*UpdateVisitCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Layout_DeleteVisitCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVisitCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayoutServer).DeleteVisitCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layout.Layout/DeleteVisitCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayoutServer).DeleteVisitCategory(ctx, req.(*DeleteVisitCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Layout_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layout.Layout",
	HandlerType: (*LayoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVisitLayouts",
			Handler:    _Layout_ListVisitLayouts_Handler,
		},
		{
			MethodName: "ListVisitCategories",
			Handler:    _Layout_ListVisitCategories_Handler,
		},
		{
			MethodName: "CreateVisitLayout",
			Handler:    _Layout_CreateVisitLayout_Handler,
		},
		{
			MethodName: "GetVisitCategory",
			Handler:    _Layout_GetVisitCategory_Handler,
		},
		{
			MethodName: "GetVisitLayout",
			Handler:    _Layout_GetVisitLayout_Handler,
		},
		{
			MethodName: "GetVisitLayoutByVersion",
			Handler:    _Layout_GetVisitLayoutByVersion_Handler,
		},
		{
			MethodName: "GetVisitLayoutVersion",
			Handler:    _Layout_GetVisitLayoutVersion_Handler,
		},
		{
			MethodName: "UpdateVisitLayout",
			Handler:    _Layout_UpdateVisitLayout_Handler,
		},
		{
			MethodName: "DeleteVisitLayout",
			Handler:    _Layout_DeleteVisitLayout_Handler,
		},
		{
			MethodName: "CreateVisitCategory",
			Handler:    _Layout_CreateVisitCategory_Handler,
		},
		{
			MethodName: "UpdateVisitCategory",
			Handler:    _Layout_UpdateVisitCategory_Handler,
		},
		{
			MethodName: "DeleteVisitCategory",
			Handler:    _Layout_DeleteVisitCategory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *VisitLayout) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VisitLayout) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.CategoryID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CategoryID)))
		i += copy(data[i:], m.CategoryID)
	}
	if m.Version != nil {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(m.Version.Size()))
		n1, err := m.Version.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.InternalName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InternalName)))
		i += copy(data[i:], m.InternalName)
	}
	return i, nil
}

func (m *VisitLayoutVersion) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VisitLayoutVersion) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.SAMLLocation) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SAMLLocation)))
		i += copy(data[i:], m.SAMLLocation)
	}
	if len(m.IntakeLayoutLocation) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.IntakeLayoutLocation)))
		i += copy(data[i:], m.IntakeLayoutLocation)
	}
	if len(m.ReviewLayoutLocation) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ReviewLayoutLocation)))
		i += copy(data[i:], m.ReviewLayoutLocation)
	}
	return i, nil
}

func (m *VisitCategory) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *VisitCategory) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *ListVisitLayoutsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListVisitLayoutsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitCategoryID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitCategoryID)))
		i += copy(data[i:], m.VisitCategoryID)
	}
	return i, nil
}

func (m *ListVisitLayoutsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListVisitLayoutsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitLayouts) > 0 {
		for _, msg := range m.VisitLayouts {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListVisitCategoriesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListVisitCategoriesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListVisitCategoriesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListVisitCategoriesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, msg := range m.Categories {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateVisitLayoutRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitLayoutRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.CategoryID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CategoryID)))
		i += copy(data[i:], m.CategoryID)
	}
	if len(m.SAML) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SAML)))
		i += copy(data[i:], m.SAML)
	}
	if len(m.InternalName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InternalName)))
		i += copy(data[i:], m.InternalName)
	}
	return i, nil
}

func (m *CreateVisitLayoutResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitLayoutResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitLayout != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VisitLayout.Size()))
		n2, err := m.VisitLayout.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetVisitLayoutRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitLayoutRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if m.IncludeVersionInformation {
		data[i] = 0x18
		i++
		if m.IncludeVersionInformation {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetVisitLayoutResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitLayoutResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitLayout != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VisitLayout.Size()))
		n3, err := m.VisitLayout.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *GetVisitLayoutByVersionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitLayoutByVersionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitLayoutVersionID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitLayoutVersionID)))
		i += copy(data[i:], m.VisitLayoutVersionID)
	}
	return i, nil
}

func (m *GetVisitLayoutByVersionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitLayoutByVersionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitLayout != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VisitLayout.Size()))
		n4, err := m.VisitLayout.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UpdateVisitLayoutRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateVisitLayoutRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitLayoutID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitLayoutID)))
		i += copy(data[i:], m.VisitLayoutID)
	}
	if m.UpdateName {
		data[i] = 0x10
		i++
		if m.UpdateName {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.UpdateCategory {
		data[i] = 0x20
		i++
		if m.UpdateCategory {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.CategoryID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CategoryID)))
		i += copy(data[i:], m.CategoryID)
	}
	if m.UpdateSAML {
		data[i] = 0x30
		i++
		if m.UpdateSAML {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.SAML) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SAML)))
		i += copy(data[i:], m.SAML)
	}
	if m.UpdateInternalName {
		data[i] = 0x40
		i++
		if m.UpdateInternalName {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.InternalName) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.InternalName)))
		i += copy(data[i:], m.InternalName)
	}
	return i, nil
}

func (m *UpdateVisitLayoutResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateVisitLayoutResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitLayout != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VisitLayout.Size()))
		n5, err := m.VisitLayout.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *DeleteVisitLayoutRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteVisitLayoutRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitLayoutID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitLayoutID)))
		i += copy(data[i:], m.VisitLayoutID)
	}
	return i, nil
}

func (m *DeleteVisitLayoutResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteVisitLayoutResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateVisitCategoryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitCategoryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *CreateVisitCategoryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitCategoryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Category.Size()))
		n6, err := m.Category.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *UpdateVisitCategoryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateVisitCategoryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitCategoryID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitCategoryID)))
		i += copy(data[i:], m.VisitCategoryID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	return i, nil
}

func (m *UpdateVisitCategoryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UpdateVisitCategoryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Category != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Category.Size()))
		n7, err := m.Category.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *DeleteVisitCategoryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteVisitCategoryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitCategoryID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitCategoryID)))
		i += copy(data[i:], m.VisitCategoryID)
	}
	return i, nil
}

func (m *DeleteVisitCategoryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DeleteVisitCategoryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetVisitLayoutVersionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitLayoutVersionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.VisitLayoutID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitLayoutID)))
		i += copy(data[i:], m.VisitLayoutID)
	}
	return i, nil
}

func (m *GetVisitLayoutVersionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitLayoutVersionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitLayoutVersion != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VisitLayoutVersion.Size()))
		n8, err := m.VisitLayoutVersion.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *GetVisitCategoryRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitCategoryRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *GetVisitCategoryResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitCategoryResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VisitCategory != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.VisitCategory.Size()))
		n9, err := m.VisitCategory.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *VisitLayout) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CategoryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *VisitLayoutVersion) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SAMLLocation)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.IntakeLayoutLocation)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ReviewLayoutLocation)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *VisitCategory) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ListVisitLayoutsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitCategoryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *ListVisitLayoutsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.VisitLayouts) > 0 {
		for _, e := range m.VisitLayouts {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *ListVisitCategoriesRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListVisitCategoriesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CreateVisitLayoutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CategoryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.SAML)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitLayoutResponse) Size() (n int) {
	var l int
	_ = l
	if m.VisitLayout != nil {
		l = m.VisitLayout.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitLayoutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.IncludeVersionInformation {
		n += 2
	}
	return n
}

func (m *GetVisitLayoutResponse) Size() (n int) {
	var l int
	_ = l
	if m.VisitLayout != nil {
		l = m.VisitLayout.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitLayoutByVersionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitLayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitLayoutByVersionResponse) Size() (n int) {
	var l int
	_ = l
	if m.VisitLayout != nil {
		l = m.VisitLayout.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateVisitLayoutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitLayoutID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UpdateName {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UpdateCategory {
		n += 2
	}
	l = len(m.CategoryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UpdateSAML {
		n += 2
	}
	l = len(m.SAML)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.UpdateInternalName {
		n += 2
	}
	l = len(m.InternalName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateVisitLayoutResponse) Size() (n int) {
	var l int
	_ = l
	if m.VisitLayout != nil {
		l = m.VisitLayout.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteVisitLayoutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitLayoutID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteVisitLayoutResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateVisitCategoryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateVisitCategoryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitCategoryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *UpdateVisitCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteVisitCategoryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitCategoryID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DeleteVisitCategoryResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetVisitLayoutVersionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.VisitLayoutID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitLayoutVersionResponse) Size() (n int) {
	var l int
	_ = l
	if m.VisitLayoutVersion != nil {
		l = m.VisitLayoutVersion.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitCategoryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitCategoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.VisitCategory != nil {
		l = m.VisitCategory.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VisitLayout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisitLayout{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CategoryID:` + fmt.Sprintf("%v", this.CategoryID) + `,`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "VisitLayoutVersion", "VisitLayoutVersion", 1) + `,`,
		`InternalName:` + fmt.Sprintf("%v", this.InternalName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisitLayoutVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisitLayoutVersion{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`SAMLLocation:` + fmt.Sprintf("%v", this.SAMLLocation) + `,`,
		`IntakeLayoutLocation:` + fmt.Sprintf("%v", this.IntakeLayoutLocation) + `,`,
		`ReviewLayoutLocation:` + fmt.Sprintf("%v", this.ReviewLayoutLocation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VisitCategory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VisitCategory{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListVisitLayoutsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListVisitLayoutsRequest{`,
		`VisitCategoryID:` + fmt.Sprintf("%v", this.VisitCategoryID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListVisitLayoutsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListVisitLayoutsResponse{`,
		`VisitLayouts:` + strings.Replace(fmt.Sprintf("%v", this.VisitLayouts), "VisitLayout", "VisitLayout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListVisitCategoriesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListVisitCategoriesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListVisitCategoriesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListVisitCategoriesResponse{`,
		`Categories:` + strings.Replace(fmt.Sprintf("%v", this.Categories), "VisitCategory", "VisitCategory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitLayoutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitLayoutRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CategoryID:` + fmt.Sprintf("%v", this.CategoryID) + `,`,
		`SAML:` + fmt.Sprintf("%v", this.SAML) + `,`,
		`InternalName:` + fmt.Sprintf("%v", this.InternalName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitLayoutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitLayoutResponse{`,
		`VisitLayout:` + strings.Replace(fmt.Sprintf("%v", this.VisitLayout), "VisitLayout", "VisitLayout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitLayoutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitLayoutRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`IncludeVersionInformation:` + fmt.Sprintf("%v", this.IncludeVersionInformation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitLayoutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitLayoutResponse{`,
		`VisitLayout:` + strings.Replace(fmt.Sprintf("%v", this.VisitLayout), "VisitLayout", "VisitLayout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitLayoutByVersionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitLayoutByVersionRequest{`,
		`VisitLayoutVersionID:` + fmt.Sprintf("%v", this.VisitLayoutVersionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitLayoutByVersionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitLayoutByVersionResponse{`,
		`VisitLayout:` + strings.Replace(fmt.Sprintf("%v", this.VisitLayout), "VisitLayout", "VisitLayout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVisitLayoutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVisitLayoutRequest{`,
		`VisitLayoutID:` + fmt.Sprintf("%v", this.VisitLayoutID) + `,`,
		`UpdateName:` + fmt.Sprintf("%v", this.UpdateName) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`UpdateCategory:` + fmt.Sprintf("%v", this.UpdateCategory) + `,`,
		`CategoryID:` + fmt.Sprintf("%v", this.CategoryID) + `,`,
		`UpdateSAML:` + fmt.Sprintf("%v", this.UpdateSAML) + `,`,
		`SAML:` + fmt.Sprintf("%v", this.SAML) + `,`,
		`UpdateInternalName:` + fmt.Sprintf("%v", this.UpdateInternalName) + `,`,
		`InternalName:` + fmt.Sprintf("%v", this.InternalName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVisitLayoutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVisitLayoutResponse{`,
		`VisitLayout:` + strings.Replace(fmt.Sprintf("%v", this.VisitLayout), "VisitLayout", "VisitLayout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteVisitLayoutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteVisitLayoutRequest{`,
		`VisitLayoutID:` + fmt.Sprintf("%v", this.VisitLayoutID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteVisitLayoutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteVisitLayoutResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitCategoryRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitCategoryResponse{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "VisitCategory", "VisitCategory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVisitCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVisitCategoryRequest{`,
		`VisitCategoryID:` + fmt.Sprintf("%v", this.VisitCategoryID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateVisitCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateVisitCategoryResponse{`,
		`Category:` + strings.Replace(fmt.Sprintf("%v", this.Category), "VisitCategory", "VisitCategory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteVisitCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteVisitCategoryRequest{`,
		`VisitCategoryID:` + fmt.Sprintf("%v", this.VisitCategoryID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteVisitCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteVisitCategoryResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitLayoutVersionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitLayoutVersionRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`VisitLayoutID:` + fmt.Sprintf("%v", this.VisitLayoutID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitLayoutVersionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitLayoutVersionResponse{`,
		`VisitLayoutVersion:` + strings.Replace(fmt.Sprintf("%v", this.VisitLayoutVersion), "VisitLayoutVersion", "VisitLayoutVersion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitCategoryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitCategoryRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitCategoryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitCategoryResponse{`,
		`VisitCategory:` + strings.Replace(fmt.Sprintf("%v", this.VisitCategory), "VisitCategory", "VisitCategory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VisitLayout) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitLayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitLayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &VisitLayoutVersion{}
			}
			if err := m.Version.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisitLayoutVersion) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitLayoutVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitLayoutVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SAMLLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SAMLLocation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntakeLayoutLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntakeLayoutLocation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReviewLayoutLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReviewLayoutLocation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VisitCategory) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VisitCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VisitCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVisitLayoutsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVisitLayoutsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVisitLayoutsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitCategoryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitCategoryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVisitLayoutsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVisitLayoutsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVisitLayoutsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitLayouts = append(m.VisitLayouts, &VisitLayout{})
			if err := m.VisitLayouts[len(m.VisitLayouts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVisitCategoriesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVisitCategoriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVisitCategoriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListVisitCategoriesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListVisitCategoriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListVisitCategoriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &VisitCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitLayoutRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitLayoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitLayoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SAML", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SAML = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitLayoutResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitLayoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitLayoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisitLayout == nil {
				m.VisitLayout = &VisitLayout{}
			}
			if err := m.VisitLayout.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitLayoutRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitLayoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitLayoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeVersionInformation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeVersionInformation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitLayoutResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitLayoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitLayoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisitLayout == nil {
				m.VisitLayout = &VisitLayout{}
			}
			if err := m.VisitLayout.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitLayoutByVersionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitLayoutByVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitLayoutByVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitLayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitLayoutByVersionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitLayoutByVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitLayoutByVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisitLayout == nil {
				m.VisitLayout = &VisitLayout{}
			}
			if err := m.VisitLayout.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVisitLayoutRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVisitLayoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVisitLayoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayoutID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitLayoutID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateName = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCategory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateCategory = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSAML", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateSAML = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SAML", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SAML = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInternalName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateInternalName = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVisitLayoutResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVisitLayoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVisitLayoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisitLayout == nil {
				m.VisitLayout = &VisitLayout{}
			}
			if err := m.VisitLayout.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteVisitLayoutRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteVisitLayoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteVisitLayoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayoutID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitLayoutID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteVisitLayoutResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteVisitLayoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteVisitLayoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitCategoryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitCategoryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &VisitCategory{}
			}
			if err := m.Category.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVisitCategoryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVisitCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVisitCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitCategoryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitCategoryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateVisitCategoryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateVisitCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateVisitCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &VisitCategory{}
			}
			if err := m.Category.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteVisitCategoryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteVisitCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteVisitCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitCategoryID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitCategoryID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteVisitCategoryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteVisitCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteVisitCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitLayoutVersionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitLayoutVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitLayoutVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayoutID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitLayoutID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitLayoutVersionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitLayoutVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitLayoutVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitLayoutVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisitLayoutVersion == nil {
				m.VisitLayoutVersion = &VisitLayoutVersion{}
			}
			if err := m.VisitLayoutVersion.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitCategoryRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitCategoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitCategoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitCategoryResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitCategoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitCategoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisitCategory == nil {
				m.VisitCategory = &VisitCategory{}
			}
			if err := m.VisitCategory.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSvc = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0x4d, 0x53, 0xd3, 0x40,
	0x18, 0xa6, 0xa5, 0x94, 0xf2, 0x96, 0xf2, 0x91, 0x02, 0x0d, 0x29, 0x14, 0x4c, 0x55, 0x14, 0xa5,
	0x8c, 0x78, 0xd1, 0xa3, 0x05, 0x51, 0x66, 0xea, 0xe8, 0xe8, 0xc0, 0xf8, 0x31, 0x43, 0xa6, 0xb4,
	0x4b, 0x8d, 0xb6, 0x0d, 0x36, 0x69, 0x1d, 0x66, 0x3c, 0xf8, 0x13, 0xf4, 0xa6, 0xff, 0xc0, 0x9f,
	0xe2, 0x91, 0xa3, 0x27, 0x47, 0xf0, 0xa0, 0x47, 0x7f, 0x82, 0x9b, 0xcd, 0x26, 0x9b, 0x8f, 0xdd,
	0x32, 0x1d, 0x0e, 0x99, 0x9a, 0xec, 0xbb, 0xcf, 0xfb, 0xec, 0xf3, 0x3e, 0xfb, 0xbe, 0x02, 0x63,
	0x66, 0xaf, 0x56, 0x3a, 0xea, 0x18, 0x96, 0x21, 0x25, 0x9b, 0xd5, 0x63, 0xa3, 0x6b, 0x29, 0x6b,
	0x0d, 0xdd, 0x7a, 0xdd, 0x3d, 0x28, 0xd5, 0x8c, 0xd6, 0x7a, 0xc3, 0x68, 0x18, 0xeb, 0x64, 0xf9,
	0xa0, 0x7b, 0x48, 0xde, 0xc8, 0x0b, 0xf9, 0x97, 0xb3, 0x4d, 0xfd, 0x12, 0x83, 0xf4, 0x9e, 0x6e,
	0xea, 0x56, 0x85, 0x6c, 0x97, 0x24, 0x88, 0xeb, 0x75, 0x39, 0xb6, 0x1c, 0xbb, 0x36, 0x56, 0x4e,
	0x9e, 0xfd, 0x5c, 0x8a, 0xef, 0x6c, 0x49, 0xe3, 0x90, 0x68, 0x57, 0x5b, 0x48, 0x8e, 0xdb, 0x5f,
	0xa5, 0x22, 0xa4, 0x6b, 0x55, 0x0b, 0x35, 0x8c, 0xce, 0xb1, 0x86, 0x43, 0x87, 0x49, 0xe8, 0x04,
	0x0e, 0x85, 0x4d, 0xfa, 0x19, 0x6f, 0xb9, 0x01, 0xa3, 0x3d, 0xd4, 0x31, 0x75, 0xa3, 0x2d, 0x27,
	0x70, 0x40, 0x7a, 0x43, 0x29, 0x39, 0xfc, 0x4a, 0xbe, 0x64, 0x7b, 0x4e, 0x84, 0x34, 0x0b, 0x19,
	0xbd, 0x6d, 0xa1, 0x4e, 0xbb, 0xda, 0xd4, 0x48, 0xa2, 0x11, 0x1b, 0x53, 0xfd, 0x1c, 0x03, 0x89,
	0x13, 0xcd, 0x63, 0xb8, 0x02, 0x19, 0xb3, 0xda, 0x6a, 0x6a, 0x4d, 0x03, 0x53, 0xb3, 0x93, 0x12,
	0xaa, 0xe5, 0x29, 0xbc, 0x3c, 0xfe, 0xec, 0xde, 0xa3, 0x4a, 0x85, 0x7e, 0x97, 0x0a, 0x30, 0x87,
	0x53, 0x55, 0xdf, 0x22, 0xcd, 0xa1, 0xc3, 0x76, 0x90, 0x73, 0xd8, 0xeb, 0x1d, 0xd4, 0xd3, 0xd1,
	0xfb, 0xc8, 0x7a, 0x82, 0x70, 0xba, 0x05, 0x19, 0x42, 0xc9, 0x3d, 0xea, 0xf9, 0x7a, 0xa9, 0x3b,
	0x90, 0xab, 0xe8, 0xa6, 0xe5, 0x3b, 0x89, 0xf9, 0x14, 0xbd, 0xeb, 0x22, 0xd3, 0x92, 0x4a, 0x30,
	0xdd, 0xb3, 0x3f, 0x6b, 0x7e, 0x41, 0x1d, 0xac, 0x2c, 0xc6, 0x9a, 0x0c, 0xa4, 0xda, 0xd9, 0x52,
	0xef, 0x83, 0x1c, 0x85, 0x32, 0x8f, 0x8c, 0xb6, 0x89, 0xa4, 0xeb, 0x30, 0xde, 0xf3, 0x7d, 0xc7,
	0x30, 0xc3, 0x58, 0xf6, 0x2c, 0x47, 0x76, 0x75, 0x01, 0x14, 0x0f, 0x86, 0xa2, 0xeb, 0xc8, 0x25,
	0xa5, 0x3e, 0x84, 0x3c, 0x77, 0xd5, 0xcb, 0x03, 0x35, 0xef, 0x2b, 0xcd, 0x32, 0x1b, 0xc8, 0xe2,
	0x12, 0x56, 0x3f, 0x80, 0xbc, 0xd9, 0x41, 0xf8, 0xcd, 0x97, 0xdc, 0x3d, 0xba, 0xab, 0x51, 0x8c,
	0xe7, 0xa9, 0x38, 0xd7, 0x53, 0x73, 0x90, 0xb0, 0x8b, 0x4c, 0x1d, 0x97, 0xc2, 0xab, 0x09, 0xbb,
	0xb6, 0x51, 0xfb, 0x38, 0xa5, 0xda, 0x86, 0x79, 0x4e, 0xf6, 0x90, 0x5a, 0xb4, 0xcc, 0x84, 0x86,
	0x40, 0xad, 0x27, 0x30, 0xfb, 0x00, 0x59, 0x9c, 0x23, 0xf0, 0x4a, 0x5f, 0x84, 0xbc, 0xde, 0xae,
	0x35, 0xbb, 0x75, 0xa4, 0x51, 0xff, 0x6b, 0x7a, 0xfb, 0xd0, 0xe8, 0xb4, 0x98, 0xc9, 0x52, 0xea,
	0x26, 0xcc, 0x85, 0x11, 0x07, 0xa7, 0xf5, 0x0a, 0x0a, 0x41, 0x90, 0xf2, 0x31, 0xbd, 0x21, 0x2e,
	0xbf, 0xbb, 0x90, 0xf3, 0x83, 0x31, 0x42, 0x2e, 0x69, 0x19, 0x93, 0x9e, 0x89, 0xde, 0x30, 0x6c,
	0xb4, 0x0a, 0x2c, 0x09, 0xc1, 0x07, 0xa7, 0xfa, 0x35, 0x0e, 0xf2, 0xee, 0x51, 0x9d, 0x6f, 0x84,
	0x55, 0x98, 0x0c, 0xb0, 0xf4, 0xd8, 0x4d, 0x63, 0x76, 0x19, 0xdf, 0x06, 0xac, 0x6e, 0x16, 0xd2,
	0x5d, 0x82, 0xa3, 0x79, 0xf7, 0x2b, 0xe5, 0x39, 0xc9, 0xb9, 0xc0, 0x39, 0x98, 0xa4, 0x21, 0xae,
	0xa1, 0x88, 0x1d, 0x52, 0x61, 0x8b, 0x8d, 0x70, 0x2d, 0x56, 0xf4, 0x12, 0x10, 0xa7, 0x25, 0xed,
	0x9d, 0x4e, 0x90, 0xc3, 0x9f, 0xf8, 0xcd, 0xf5, 0xe1, 0x68, 0xc8, 0x87, 0x0b, 0x30, 0x43, 0x37,
	0x07, 0xed, 0x98, 0x22, 0xf9, 0x23, 0x2e, 0x1d, 0x73, 0x5d, 0xca, 0x91, 0x66, 0x70, 0x8d, 0xb7,
	0x41, 0xde, 0x42, 0x4d, 0x74, 0x51, 0x89, 0xd5, 0x3c, 0xcc, 0x73, 0x70, 0x1c, 0x3e, 0xea, 0x2a,
	0x28, 0xbe, 0x2b, 0xe5, 0xea, 0xc6, 0xbd, 0xd2, 0x98, 0x50, 0x9e, 0x1b, 0x4b, 0x8f, 0xb6, 0x02,
	0x29, 0xaf, 0x40, 0xce, 0xb1, 0x04, 0x4d, 0xe4, 0x25, 0x28, 0x3e, 0x81, 0xc2, 0x39, 0x07, 0xec,
	0xa0, 0xa1, 0xd6, 0x8c, 0x39, 0x72, 0xb1, 0x07, 0xe5, 0x58, 0x01, 0xc5, 0x27, 0xda, 0x05, 0x39,
	0xaa, 0x8b, 0x90, 0xe7, 0xa2, 0xd1, 0x22, 0xec, 0xc3, 0x42, 0xf0, 0x6e, 0x86, 0xae, 0x3d, 0xaf,
	0x2d, 0x71, 0x1c, 0x10, 0x17, 0x39, 0xe0, 0x05, 0x2c, 0x0a, 0xf0, 0xa9, 0x2c, 0x77, 0x60, 0x86,
	0xd7, 0x57, 0xa8, 0x44, 0x7d, 0x06, 0xbd, 0xba, 0x06, 0x39, 0x17, 0x3a, 0x2c, 0x12, 0x87, 0x35,
	0x9e, 0x9c, 0x72, 0x34, 0x9c, 0x92, 0x58, 0x83, 0x89, 0xa0, 0xa8, 0x7d, 0x2b, 0xb4, 0xf1, 0x27,
	0x05, 0x49, 0xfa, 0x3f, 0x9c, 0x5d, 0x98, 0x0a, 0x0f, 0x51, 0x69, 0xc9, 0xdd, 0x25, 0x98, 0xd4,
	0xca, 0xb2, 0x38, 0x80, 0x12, 0xda, 0x87, 0x2c, 0x67, 0x6c, 0x4a, 0x6a, 0x64, 0x63, 0x64, 0xe2,
	0x2a, 0xc5, 0xbe, 0x31, 0x14, 0xff, 0x39, 0x4c, 0x47, 0xc6, 0x99, 0xe4, 0xd1, 0x12, 0xcd, 0x59,
	0xe5, 0x52, 0x9f, 0x08, 0x8a, 0x8c, 0x05, 0x09, 0xcb, 0xcc, 0x04, 0x11, 0xd4, 0x8b, 0x09, 0x22,
	0xac, 0xd0, 0x63, 0x98, 0x08, 0xfa, 0x48, 0x5a, 0x0c, 0xef, 0x09, 0x52, 0x2d, 0x88, 0x96, 0x29,
	0xe0, 0x1b, 0xe6, 0x9e, 0xd0, 0x50, 0x92, 0xae, 0xf2, 0xb7, 0x86, 0x47, 0xa2, 0xb2, 0x72, 0x6e,
	0x1c, 0xcd, 0x55, 0x0f, 0x0f, 0x7d, 0x37, 0xd3, 0x65, 0x3e, 0x42, 0x28, 0xcf, 0x95, 0x73, 0xa2,
	0x58, 0x4d, 0x23, 0xcd, 0x9f, 0xd5, 0x54, 0x34, 0x32, 0x59, 0x4d, 0xc5, 0x93, 0x03, 0x23, 0x47,
	0xda, 0x38, 0x43, 0x16, 0x4d, 0x0a, 0x86, 0x2c, 0x9c, 0x01, 0xb6, 0xcf, 0x39, 0x7d, 0x9d, 0xf9,
	0x5c, 0x3c, 0x20, 0x98, 0xcf, 0xfb, 0x0d, 0x06, 0x8c, 0xcf, 0xe9, 0xc9, 0x0c, 0x5f, 0x3c, 0x0c,
	0x18, 0x7e, 0xbf, 0xa6, 0x8e, 0xf1, 0x39, 0xdd, 0x95, 0xe1, 0x8b, 0x1b, 0x39, 0xc3, 0xef, 0xd3,
	0x9e, 0xcb, 0x37, 0x4f, 0x4e, 0x0b, 0xb1, 0x1f, 0xa7, 0x85, 0xa1, 0x7f, 0xf8, 0xf7, 0xe3, 0x59,
	0x21, 0xf6, 0x0d, 0x3f, 0xdf, 0xf1, 0x73, 0x82, 0x9f, 0x5f, 0xf8, 0xf9, 0x7b, 0x86, 0xd7, 0xf0,
	0xef, 0xa7, 0xdf, 0x85, 0xa1, 0x83, 0x24, 0xf9, 0x2b, 0xec, 0xf6, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7e, 0x99, 0xfb, 0x99, 0xc9, 0x0d, 0x00, 0x00,
}
