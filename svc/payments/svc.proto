syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

package payments;

enum VendorAccountType {
	VENDOR_ACCOUNT_TYPE_UNKNOWN = 0;
	VENDOR_ACCOUNT_TYPE_STRIPE = 1;
}

enum VendorAccountLifecycle {
	VENDOR_ACCOUNT_LIFECYCLE_UNKNOWN = 0;
	VENDOR_ACCOUNT_LIFECYCLE_CONNECTED = 1;
	VENDOR_ACCOUNT_LIFECYCLE_DISCONNECTED = 2;
}

enum VendorAccountChangeState {
	VENDOR_ACCOUNT_CHANGE_STATE_UNKNOWN = 0;
	VENDOR_ACCOUNT_CHANGE_STATE_NONE = 1;
	VENDOR_ACCOUNT_CHANGE_STATE_PENDING = 2;
}

message StripeAccount {
	string user_id = 1 [(gogoproto.customname) = "UserID"];
	string scope = 2;

}

message VendorAccount {
	string id = 1 [(gogoproto.customname) = "ID"];
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
	VendorAccountLifecycle   lifecycle = 3;
	VendorAccountChangeState change_state = 4;
	bool live = 5;

	VendorAccountType type = 6;
	oneof vendor_account_oneof {
		StripeAccount stripe_account = 7;
	}
}

enum PaymentMethodType {
	PAYMENT_METHOD_TYPE_UNKNOWN = 0;
	PAYMENT_METHOD_TYPE_CARD = 1;
}

enum PaymentMethodStorageType {
	PAYMENT_METHOD_STORAGE_TYPE_UNKNOWN = 0;
	PAYMENT_METHOD_STORAGE_TYPE_STRIPE = 1;
}

enum PaymentMethodLifecycle {
	PAYMENT_METHOD_LIFECYCLE_UNKNOWN = 0;
	PAYMENT_METHOD_LIFECYCLE_ACTIVE = 1;
	PAYMENT_METHOD_LIFECYCLE_DELETED = 2;
}

enum PaymentMethodChangeState {
	PAYMENT_METHOD_CHANGE_STATE_UNKNOWN = 0;
	PAYMENT_METHOD_CHANGE_STATE_NONE = 1;
	PAYMENT_METHOD_CHANGE_STATE_PENDING = 2;
}

message StripeCard {
	string id = 1 [(gogoproto.customname) = "ID"];
	string tokenization_method = 2;
	string brand = 3;
	string last4 = 4;
}

message Customer {
	string id = 1 [(gogoproto.customname) = "ID"];
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
}

message PaymentMethod {
	string id = 1 [(gogoproto.customname) = "ID"];
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
	bool   default = 3;
	PaymentMethodLifecycle   lifecycle = 4;
	PaymentMethodChangeState change_state = 5;

	PaymentMethodStorageType storage_type = 6;
	PaymentMethodType type = 7;
	oneof payment_method_oneof {
		StripeCard stripe_card = 8;
	}
}

enum PaymentLifecycle {
	PAYMENT_LIFECYCLE_UNKNOWN = 0;
	PAYMENT_LIFECYCLE_SUBMITTED = 1;
	PAYMENT_LIFECYCLE_ACCEPTED = 2;
	PAYMENT_LIFECYCLE_PROCESSING = 3;
	PAYMENT_LIFECYCLE_ERROR_PROCESSING = 4;
	PAYMENT_LIFECYCLE_COMPLETED = 5;
}

enum PaymentChangeState {
	PAYMENT_CHANGE_STATE_UNKNOWN = 0;
	PAYMENT_CHANGE_STATE_NONE = 1;
	PAYMENT_CHANGE_STATE_PENDING = 2;
}

message Payment {
	string id = 1 [(gogoproto.customname) = "ID"];
	string requesting_entity_id = 2 [(gogoproto.customname) = "RequestingEntityID"];
	PaymentMethod payment_method = 3;
	PaymentLifecycle   lifecycle = 4;
	PaymentChangeState change_state = 5;
	uint64 amount = 6;
	string currency = 7;
	uint64 created = 8;
	uint64 modified = 9;
	string thread_id = 10 [(gogoproto.customname) = "ThreadID"];
	string processor_transaction_id = 11 [(gogoproto.customname) = "ProcessorTransactionID"];
	string processor_status_message = 12;
}

message StripeAccountConnectRequest {
	string code = 1;
}

message ConnectVendorAccountRequest {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];

	VendorAccountType type = 2;
	oneof connect_vendor_account_oneof {
		StripeAccountConnectRequest stripe_request = 3;
	}
}

message ConnectVendorAccountResponse {
	repeated VendorAccount vendor_accounts = 1;
}

message VendorAccountsRequest {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
}

message VendorAccountsResponse {
	repeated VendorAccount vendor_accounts = 1;
}

message UpdateVendorAccountRequest {
	string                   vendor_account_id = 1 [(gogoproto.customname) = "VendorAccountID"];
	VendorAccountLifecycle   lifecycle = 2;
	VendorAccountChangeState change_state = 3;
}

message UpdateVendorAccountResponse {}

message StripeCardCreateRequest {
	string token = 1;
}

message CreatePaymentMethodRequest {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
	bool   default = 2;

	PaymentMethodStorageType storage_type = 3;
	PaymentMethodType        type = 4;
	oneof create_payment_method_oneof {
		StripeCardCreateRequest stripe_card = 5;
	}
}

message CreatePaymentMethodResponse {
	repeated PaymentMethod payment_methods = 1;
}

message PaymentMethodsRequest {
	string entity_id = 1 [(gogoproto.customname) = "EntityID"];
}

message PaymentMethodsResponse {
	repeated PaymentMethod payment_methods = 1;
}

message DeletePaymentMethodRequest {
	string payment_method_id = 1 [(gogoproto.customname) = "PaymentMethodID"];
}

message DeletePaymentMethodResponse {
	repeated PaymentMethod payment_methods = 1;
}

message CreatePaymentRequest {
	string requesting_entity_id = 1 [(gogoproto.customname) = "RequestingEntityID"];
	uint64 amount = 3;
	string currency = 4;
}

message CreatePaymentResponse {
	Payment payment = 1;
}

message PaymentRequest {
	string payment_id = 1 [(gogoproto.customname) = "PaymentID"];
}

message PaymentResponse {
	Payment payment = 1;
}

message SubmitPaymentRequest {
	string payment_id = 1 [(gogoproto.customname) = "PaymentID"];
	string thread_id = 3 [(gogoproto.customname) = "ThreadID"];
}

message SubmitPaymentResponse {
	Payment payment = 1;
}

message AcceptPaymentRequest {
	string payment_id = 1 [(gogoproto.customname) = "PaymentID"];
	string payment_method_id = 2 [(gogoproto.customname) = "PaymentMethodID"];
}

message AcceptPaymentResponse {
	Payment payment = 1;
}

message PaymentMethodRequest {
	string payment_method_id = 1 [(gogoproto.customname) = "PaymentMethodID"];
}

message PaymentMethodResponse {
	PaymentMethod payment_method = 1;
}

service Payments {
	rpc AcceptPayment (AcceptPaymentRequest) returns (AcceptPaymentResponse);
	rpc ConnectVendorAccount (ConnectVendorAccountRequest) returns (ConnectVendorAccountResponse);
	rpc CreatePayment (CreatePaymentRequest) returns (CreatePaymentResponse);
	rpc CreatePaymentMethod (CreatePaymentMethodRequest) returns (CreatePaymentMethodResponse);
	rpc DeletePaymentMethod (DeletePaymentMethodRequest) returns (DeletePaymentMethodResponse);
	rpc PaymentMethod (PaymentMethodRequest) returns (PaymentMethodResponse);
	rpc PaymentMethods (PaymentMethodsRequest) returns (PaymentMethodsResponse);
	rpc Payment (PaymentRequest) returns (PaymentResponse);
	rpc SubmitPayment (SubmitPaymentRequest) returns (SubmitPaymentResponse);
	rpc UpdateVendorAccount (UpdateVendorAccountRequest) returns (UpdateVendorAccountResponse);
	rpc VendorAccounts (VendorAccountsRequest) returns (VendorAccountsResponse);
}