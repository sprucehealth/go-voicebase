// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/payments (interfaces: PaymentsClient)

package paymentsmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	payments "github.com/sprucehealth/backend/svc/payments"
	grpc "google.golang.org/grpc"
)

// Mock of PaymentsClient interface
type MockPaymentsClient struct {
	ctrl     *gomock.Controller
	recorder *_MockPaymentsClientRecorder
}

// Recorder for MockPaymentsClient (not exported)
type _MockPaymentsClientRecorder struct {
	mock *MockPaymentsClient
}

func NewMockPaymentsClient(ctrl *gomock.Controller) *MockPaymentsClient {
	mock := &MockPaymentsClient{ctrl: ctrl}
	mock.recorder = &_MockPaymentsClientRecorder{mock}
	return mock
}

func (_m *MockPaymentsClient) EXPECT() *_MockPaymentsClientRecorder {
	return _m.recorder
}

func (_m *MockPaymentsClient) AcceptPayment(_param0 context.Context, _param1 *payments.AcceptPaymentRequest, _param2 ...grpc.CallOption) (*payments.AcceptPaymentResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AcceptPayment", _s...)
	ret0, _ := ret[0].(*payments.AcceptPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) AcceptPayment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AcceptPayment", _s...)
}

func (_m *MockPaymentsClient) ConnectVendorAccount(_param0 context.Context, _param1 *payments.ConnectVendorAccountRequest, _param2 ...grpc.CallOption) (*payments.ConnectVendorAccountResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ConnectVendorAccount", _s...)
	ret0, _ := ret[0].(*payments.ConnectVendorAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) ConnectVendorAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConnectVendorAccount", _s...)
}

func (_m *MockPaymentsClient) CreatePayment(_param0 context.Context, _param1 *payments.CreatePaymentRequest, _param2 ...grpc.CallOption) (*payments.CreatePaymentResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreatePayment", _s...)
	ret0, _ := ret[0].(*payments.CreatePaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) CreatePayment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePayment", _s...)
}

func (_m *MockPaymentsClient) CreatePaymentMethod(_param0 context.Context, _param1 *payments.CreatePaymentMethodRequest, _param2 ...grpc.CallOption) (*payments.CreatePaymentMethodResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreatePaymentMethod", _s...)
	ret0, _ := ret[0].(*payments.CreatePaymentMethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) CreatePaymentMethod(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePaymentMethod", _s...)
}

func (_m *MockPaymentsClient) DeletePaymentMethod(_param0 context.Context, _param1 *payments.DeletePaymentMethodRequest, _param2 ...grpc.CallOption) (*payments.DeletePaymentMethodResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeletePaymentMethod", _s...)
	ret0, _ := ret[0].(*payments.DeletePaymentMethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) DeletePaymentMethod(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePaymentMethod", _s...)
}

func (_m *MockPaymentsClient) Payment(_param0 context.Context, _param1 *payments.PaymentRequest, _param2 ...grpc.CallOption) (*payments.PaymentResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Payment", _s...)
	ret0, _ := ret[0].(*payments.PaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) Payment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Payment", _s...)
}

func (_m *MockPaymentsClient) PaymentMethod(_param0 context.Context, _param1 *payments.PaymentMethodRequest, _param2 ...grpc.CallOption) (*payments.PaymentMethodResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PaymentMethod", _s...)
	ret0, _ := ret[0].(*payments.PaymentMethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) PaymentMethod(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PaymentMethod", _s...)
}

func (_m *MockPaymentsClient) PaymentMethods(_param0 context.Context, _param1 *payments.PaymentMethodsRequest, _param2 ...grpc.CallOption) (*payments.PaymentMethodsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PaymentMethods", _s...)
	ret0, _ := ret[0].(*payments.PaymentMethodsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) PaymentMethods(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PaymentMethods", _s...)
}

func (_m *MockPaymentsClient) SubmitPayment(_param0 context.Context, _param1 *payments.SubmitPaymentRequest, _param2 ...grpc.CallOption) (*payments.SubmitPaymentResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SubmitPayment", _s...)
	ret0, _ := ret[0].(*payments.SubmitPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) SubmitPayment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitPayment", _s...)
}

func (_m *MockPaymentsClient) UpdateVendorAccount(_param0 context.Context, _param1 *payments.UpdateVendorAccountRequest, _param2 ...grpc.CallOption) (*payments.UpdateVendorAccountResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateVendorAccount", _s...)
	ret0, _ := ret[0].(*payments.UpdateVendorAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) UpdateVendorAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateVendorAccount", _s...)
}

func (_m *MockPaymentsClient) VendorAccounts(_param0 context.Context, _param1 *payments.VendorAccountsRequest, _param2 ...grpc.CallOption) (*payments.VendorAccountsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "VendorAccounts", _s...)
	ret0, _ := ret[0].(*payments.VendorAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPaymentsClientRecorder) VendorAccounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VendorAccounts", _s...)
}
