// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sprucehealth/backend/svc/care (interfaces: CareClient)

package caremock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	care "github.com/sprucehealth/backend/svc/care"
	grpc "google.golang.org/grpc"
)

// Mock of CareClient interface
type MockCareClient struct {
	ctrl     *gomock.Controller
	recorder *_MockCareClientRecorder
}

// Recorder for MockCareClient (not exported)
type _MockCareClientRecorder struct {
	mock *MockCareClient
}

func NewMockCareClient(ctrl *gomock.Controller) *MockCareClient {
	mock := &MockCareClient{ctrl: ctrl}
	mock.recorder = &_MockCareClientRecorder{mock}
	return mock
}

func (_m *MockCareClient) EXPECT() *_MockCareClientRecorder {
	return _m.recorder
}

func (_m *MockCareClient) CarePlan(_param0 context.Context, _param1 *care.CarePlanRequest, _param2 ...grpc.CallOption) (*care.CarePlanResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CarePlan", _s...)
	ret0, _ := ret[0].(*care.CarePlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) CarePlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CarePlan", _s...)
}

func (_m *MockCareClient) CreateCarePlan(_param0 context.Context, _param1 *care.CreateCarePlanRequest, _param2 ...grpc.CallOption) (*care.CreateCarePlanResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateCarePlan", _s...)
	ret0, _ := ret[0].(*care.CreateCarePlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) CreateCarePlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCarePlan", _s...)
}

func (_m *MockCareClient) CreateVisit(_param0 context.Context, _param1 *care.CreateVisitRequest, _param2 ...grpc.CallOption) (*care.CreateVisitResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateVisit", _s...)
	ret0, _ := ret[0].(*care.CreateVisitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) CreateVisit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVisit", _s...)
}

func (_m *MockCareClient) CreateVisitAnswers(_param0 context.Context, _param1 *care.CreateVisitAnswersRequest, _param2 ...grpc.CallOption) (*care.CreateVisitAnswersResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateVisitAnswers", _s...)
	ret0, _ := ret[0].(*care.CreateVisitAnswersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) CreateVisitAnswers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVisitAnswers", _s...)
}

func (_m *MockCareClient) GetAnswersForVisit(_param0 context.Context, _param1 *care.GetAnswersForVisitRequest, _param2 ...grpc.CallOption) (*care.GetAnswersForVisitResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAnswersForVisit", _s...)
	ret0, _ := ret[0].(*care.GetAnswersForVisitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) GetAnswersForVisit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAnswersForVisit", _s...)
}

func (_m *MockCareClient) GetVisit(_param0 context.Context, _param1 *care.GetVisitRequest, _param2 ...grpc.CallOption) (*care.GetVisitResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetVisit", _s...)
	ret0, _ := ret[0].(*care.GetVisitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) GetVisit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVisit", _s...)
}

func (_m *MockCareClient) SearchAllergyMedications(_param0 context.Context, _param1 *care.SearchAllergyMedicationsRequest, _param2 ...grpc.CallOption) (*care.SearchAllergyMedicationsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SearchAllergyMedications", _s...)
	ret0, _ := ret[0].(*care.SearchAllergyMedicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) SearchAllergyMedications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchAllergyMedications", _s...)
}

func (_m *MockCareClient) SearchMedications(_param0 context.Context, _param1 *care.SearchMedicationsRequest, _param2 ...grpc.CallOption) (*care.SearchMedicationsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SearchMedications", _s...)
	ret0, _ := ret[0].(*care.SearchMedicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) SearchMedications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchMedications", _s...)
}

func (_m *MockCareClient) SearchSelfReportedMedications(_param0 context.Context, _param1 *care.SearchSelfReportedMedicationsRequest, _param2 ...grpc.CallOption) (*care.SearchSelfReportedMedicationsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SearchSelfReportedMedications", _s...)
	ret0, _ := ret[0].(*care.SearchSelfReportedMedicationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) SearchSelfReportedMedications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchSelfReportedMedications", _s...)
}

func (_m *MockCareClient) SubmitCarePlan(_param0 context.Context, _param1 *care.SubmitCarePlanRequest, _param2 ...grpc.CallOption) (*care.SubmitCarePlanResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SubmitCarePlan", _s...)
	ret0, _ := ret[0].(*care.SubmitCarePlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) SubmitCarePlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitCarePlan", _s...)
}

func (_m *MockCareClient) SubmitVisit(_param0 context.Context, _param1 *care.SubmitVisitRequest, _param2 ...grpc.CallOption) (*care.SubmitVisitResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SubmitVisit", _s...)
	ret0, _ := ret[0].(*care.SubmitVisitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) SubmitVisit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SubmitVisit", _s...)
}

func (_m *MockCareClient) TriageVisit(_param0 context.Context, _param1 *care.TriageVisitRequest, _param2 ...grpc.CallOption) (*care.TriageVisitResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TriageVisit", _s...)
	ret0, _ := ret[0].(*care.TriageVisitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) TriageVisit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TriageVisit", _s...)
}

func (_m *MockCareClient) UpdateCarePlan(_param0 context.Context, _param1 *care.UpdateCarePlanRequest, _param2 ...grpc.CallOption) (*care.UpdateCarePlanResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateCarePlan", _s...)
	ret0, _ := ret[0].(*care.UpdateCarePlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCareClientRecorder) UpdateCarePlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateCarePlan", _s...)
}
