// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package care is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		Visit
		CreateVisitRequest
		CreateVisitResponse
		GetVisitRequest
		GetVisitResponse
		CreateVisitAnswersRequest
		CreateVisitAnswersResponse
		GetAnswersForVisitRequest
		GetAnswersForVisitResponse
		SubmitVisitRequest
		SubmitVisitResponse
		CarePlan
		CarePlanTreatment
		CarePlanInstruction
		CarePlanRequest
		CarePlanResponse
		CreateCarePlanRequest
		CreateCarePlanResponse
		SubmitCarePlanRequest
		SubmitCarePlanResponse
		Medication
		MedicationStrength
		SearchMedicationsRequest
		SearchMedicationsResponse
*/
package care

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CarePlanTreatment_Availability int32

const (
	CarePlanTreatment_UNKNOWN CarePlanTreatment_Availability = 0
	CarePlanTreatment_OTC     CarePlanTreatment_Availability = 1
	CarePlanTreatment_RX      CarePlanTreatment_Availability = 2
)

var CarePlanTreatment_Availability_name = map[int32]string{
	0: "UNKNOWN",
	1: "OTC",
	2: "RX",
}
var CarePlanTreatment_Availability_value = map[string]int32{
	"UNKNOWN": 0,
	"OTC":     1,
	"RX":      2,
}

type Visit struct {
	ID              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LayoutVersionID string `protobuf:"bytes,3,opt,name=layout_version_id,proto3" json:"layout_version_id,omitempty"`
	EntityID        string `protobuf:"bytes,4,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Submitted       bool   `protobuf:"varint,5,opt,name=submitted,proto3" json:"submitted,omitempty"`
	OrganizationID  string `protobuf:"bytes,6,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
}

func (m *Visit) Reset()      { *m = Visit{} }
func (*Visit) ProtoMessage() {}

type CreateVisitRequest struct {
	LayoutVersionID string `protobuf:"bytes,1,opt,name=layout_version_id,proto3" json:"layout_version_id,omitempty"`
	EntityID        string `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationID  string `protobuf:"bytes,4,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
}

func (m *CreateVisitRequest) Reset()      { *m = CreateVisitRequest{} }
func (*CreateVisitRequest) ProtoMessage() {}

type CreateVisitResponse struct {
	Visit *Visit `protobuf:"bytes,1,opt,name=visit" json:"visit,omitempty"`
}

func (m *CreateVisitResponse) Reset()      { *m = CreateVisitResponse{} }
func (*CreateVisitResponse) ProtoMessage() {}

func (m *CreateVisitResponse) GetVisit() *Visit {
	if m != nil {
		return m.Visit
	}
	return nil
}

type GetVisitRequest struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetVisitRequest) Reset()      { *m = GetVisitRequest{} }
func (*GetVisitRequest) ProtoMessage() {}

type GetVisitResponse struct {
	Visit *Visit `protobuf:"bytes,1,opt,name=visit" json:"visit,omitempty"`
}

func (m *GetVisitResponse) Reset()      { *m = GetVisitResponse{} }
func (*GetVisitResponse) ProtoMessage() {}

func (m *GetVisitResponse) GetVisit() *Visit {
	if m != nil {
		return m.Visit
	}
	return nil
}

type CreateVisitAnswersRequest struct {
	VisitID       string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
	AnswersJSON   string `protobuf:"bytes,2,opt,name=answers_json,proto3" json:"answers_json,omitempty"`
	ActorEntityID string `protobuf:"bytes,3,opt,name=actory_entity_id,proto3" json:"actory_entity_id,omitempty"`
}

func (m *CreateVisitAnswersRequest) Reset()      { *m = CreateVisitAnswersRequest{} }
func (*CreateVisitAnswersRequest) ProtoMessage() {}

type CreateVisitAnswersResponse struct {
}

func (m *CreateVisitAnswersResponse) Reset()      { *m = CreateVisitAnswersResponse{} }
func (*CreateVisitAnswersResponse) ProtoMessage() {}

type GetAnswersForVisitRequest struct {
	VisitID string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
}

func (m *GetAnswersForVisitRequest) Reset()      { *m = GetAnswersForVisitRequest{} }
func (*GetAnswersForVisitRequest) ProtoMessage() {}

type GetAnswersForVisitResponse struct {
	AnswersJSON string `protobuf:"bytes,1,opt,name=answers_json,proto3" json:"answers_json,omitempty"`
}

func (m *GetAnswersForVisitResponse) Reset()      { *m = GetAnswersForVisitResponse{} }
func (*GetAnswersForVisitResponse) ProtoMessage() {}

type SubmitVisitRequest struct {
	VisitID string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
}

func (m *SubmitVisitRequest) Reset()      { *m = SubmitVisitRequest{} }
func (*SubmitVisitRequest) ProtoMessage() {}

type SubmitVisitResponse struct {
}

func (m *SubmitVisitResponse) Reset()      { *m = SubmitVisitResponse{} }
func (*SubmitVisitResponse) ProtoMessage() {}

type CarePlan struct {
	ID                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Treatments         []*CarePlanTreatment   `protobuf:"bytes,3,rep,name=treatments" json:"treatments,omitempty"`
	Instructions       []*CarePlanInstruction `protobuf:"bytes,4,rep,name=instructions" json:"instructions,omitempty"`
	CreatedTimestamp   uint64                 `protobuf:"varint,5,opt,name=created_timestamp,proto3" json:"created_timestamp,omitempty"`
	CreatorID          string                 `protobuf:"bytes,6,opt,name=creator_id,proto3" json:"creator_id,omitempty"`
	Submitted          bool                   `protobuf:"varint,7,opt,name=submitted,proto3" json:"submitted,omitempty"`
	ParentID           string                 `protobuf:"bytes,8,opt,name=parent_id,proto3" json:"parent_id,omitempty"`
	SubmittedTimestamp uint64                 `protobuf:"varint,9,opt,name=submitted_timestamp,proto3" json:"submitted_timestamp,omitempty"`
}

func (m *CarePlan) Reset()      { *m = CarePlan{} }
func (*CarePlan) ProtoMessage() {}

func (m *CarePlan) GetTreatments() []*CarePlanTreatment {
	if m != nil {
		return m.Treatments
	}
	return nil
}

func (m *CarePlan) GetInstructions() []*CarePlanInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type CarePlanTreatment struct {
	EPrescribe           bool                           `protobuf:"varint,1,opt,name=ePrescribe,proto3" json:"ePrescribe,omitempty"`
	Availability         CarePlanTreatment_Availability `protobuf:"varint,2,opt,name=availability,proto3,enum=care.CarePlanTreatment_Availability" json:"availability,omitempty"`
	Name                 string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Route                string                         `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
	Form                 string                         `protobuf:"bytes,5,opt,name=form,proto3" json:"form,omitempty"`
	MedicationID         string                         `protobuf:"bytes,6,opt,name=medication_id,proto3" json:"medication_id,omitempty"`
	Dosage               string                         `protobuf:"bytes,7,opt,name=dosage,proto3" json:"dosage,omitempty"`
	DispenseType         string                         `protobuf:"bytes,8,opt,name=dispense_type,proto3" json:"dispense_type,omitempty"`
	DispenseNumber       uint32                         `protobuf:"varint,9,opt,name=dispense_number,proto3" json:"dispense_number,omitempty"`
	Refills              uint32                         `protobuf:"varint,10,opt,name=refills,proto3" json:"refills,omitempty"`
	SubstitutionsAllowed bool                           `protobuf:"varint,11,opt,name=substitutions_allowed,proto3" json:"substitutions_allowed,omitempty"`
	DaysSupply           uint32                         `protobuf:"varint,12,opt,name=days_supply,proto3" json:"days_supply,omitempty"`
	Sig                  string                         `protobuf:"bytes,13,opt,name=sig,proto3" json:"sig,omitempty"`
	PharmacyID           string                         `protobuf:"bytes,14,opt,name=pharmacy_id,proto3" json:"pharmacy_id,omitempty"`
	PharmacyInstructions string                         `protobuf:"bytes,15,opt,name=pharmacy_instructions,proto3" json:"pharmacy_instructions,omitempty"`
}

func (m *CarePlanTreatment) Reset()      { *m = CarePlanTreatment{} }
func (*CarePlanTreatment) ProtoMessage() {}

type CarePlanInstruction struct {
	Title string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Steps []string `protobuf:"bytes,2,rep,name=steps" json:"steps,omitempty"`
}

func (m *CarePlanInstruction) Reset()      { *m = CarePlanInstruction{} }
func (*CarePlanInstruction) ProtoMessage() {}

type CarePlanRequest struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CarePlanRequest) Reset()      { *m = CarePlanRequest{} }
func (*CarePlanRequest) ProtoMessage() {}

type CarePlanResponse struct {
	CarePlan *CarePlan `protobuf:"bytes,1,opt,name=care_plan" json:"care_plan,omitempty"`
}

func (m *CarePlanResponse) Reset()      { *m = CarePlanResponse{} }
func (*CarePlanResponse) ProtoMessage() {}

func (m *CarePlanResponse) GetCarePlan() *CarePlan {
	if m != nil {
		return m.CarePlan
	}
	return nil
}

type CreateCarePlanRequest struct {
	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Treatments   []*CarePlanTreatment   `protobuf:"bytes,2,rep,name=treatments" json:"treatments,omitempty"`
	Instructions []*CarePlanInstruction `protobuf:"bytes,3,rep,name=instructions" json:"instructions,omitempty"`
	CreatorID    string                 `protobuf:"bytes,4,opt,name=creator_id,proto3" json:"creator_id,omitempty"`
}

func (m *CreateCarePlanRequest) Reset()      { *m = CreateCarePlanRequest{} }
func (*CreateCarePlanRequest) ProtoMessage() {}

func (m *CreateCarePlanRequest) GetTreatments() []*CarePlanTreatment {
	if m != nil {
		return m.Treatments
	}
	return nil
}

func (m *CreateCarePlanRequest) GetInstructions() []*CarePlanInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type CreateCarePlanResponse struct {
	CarePlan *CarePlan `protobuf:"bytes,1,opt,name=care_plan" json:"care_plan,omitempty"`
}

func (m *CreateCarePlanResponse) Reset()      { *m = CreateCarePlanResponse{} }
func (*CreateCarePlanResponse) ProtoMessage() {}

func (m *CreateCarePlanResponse) GetCarePlan() *CarePlan {
	if m != nil {
		return m.CarePlan
	}
	return nil
}

type SubmitCarePlanRequest struct {
	ID       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID string `protobuf:"bytes,2,opt,name=parent_id,proto3" json:"parent_id,omitempty"`
}

func (m *SubmitCarePlanRequest) Reset()      { *m = SubmitCarePlanRequest{} }
func (*SubmitCarePlanRequest) ProtoMessage() {}

type SubmitCarePlanResponse struct {
	CarePlan *CarePlan `protobuf:"bytes,1,opt,name=care_plan" json:"care_plan,omitempty"`
}

func (m *SubmitCarePlanResponse) Reset()      { *m = SubmitCarePlanResponse{} }
func (*SubmitCarePlanResponse) ProtoMessage() {}

func (m *SubmitCarePlanResponse) GetCarePlan() *CarePlan {
	if m != nil {
		return m.CarePlan
	}
	return nil
}

type Medication struct {
	ID        string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Route     string                `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	Form      string                `protobuf:"bytes,4,opt,name=form,proto3" json:"form,omitempty"`
	Strengths []*MedicationStrength `protobuf:"bytes,5,rep,name=strengths" json:"strengths,omitempty"`
}

func (m *Medication) Reset()      { *m = Medication{} }
func (*Medication) ProtoMessage() {}

func (m *Medication) GetStrengths() []*MedicationStrength {
	if m != nil {
		return m.Strengths
	}
	return nil
}

type MedicationStrength struct {
	OTC               bool   `protobuf:"varint,1,opt,name=otc,proto3" json:"otc,omitempty"`
	Schedule          uint32 `protobuf:"varint,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Strength          string `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	DispenseUnit      string `protobuf:"bytes,4,opt,name=dispense_unit,proto3" json:"dispense_unit,omitempty"`
	GenericName       string `protobuf:"bytes,5,opt,name=generic_name,proto3" json:"generic_name,omitempty"`
	LexiGenProductID  uint64 `protobuf:"varint,6,opt,name=lexi_gen_product_id,proto3" json:"lexi_gen_product_id,omitempty"`
	LexiDrugSynID     uint64 `protobuf:"varint,7,opt,name=lexi_drug_syn_id,proto3" json:"lexi_drug_syn_id,omitempty"`
	LexiSynonymTypeID uint64 `protobuf:"varint,8,opt,name=lexi_synonym_type_id,proto3" json:"lexi_synonym_type_id,omitempty"`
	NDC               string `protobuf:"bytes,9,opt,name=ndc,proto3" json:"ndc,omitempty"`
}

func (m *MedicationStrength) Reset()      { *m = MedicationStrength{} }
func (*MedicationStrength) ProtoMessage() {}

type SearchMedicationsRequest struct {
	ClinicID    uint64 `protobuf:"varint,1,opt,name=clinic_id,proto3" json:"clinic_id,omitempty"`
	ClinicianID uint64 `protobuf:"varint,2,opt,name=clinician_id,proto3" json:"clinician_id,omitempty"`
	Query       string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchMedicationsRequest) Reset()      { *m = SearchMedicationsRequest{} }
func (*SearchMedicationsRequest) ProtoMessage() {}

type SearchMedicationsResponse struct {
	Medications []*Medication `protobuf:"bytes,1,rep,name=medications" json:"medications,omitempty"`
}

func (m *SearchMedicationsResponse) Reset()      { *m = SearchMedicationsResponse{} }
func (*SearchMedicationsResponse) ProtoMessage() {}

func (m *SearchMedicationsResponse) GetMedications() []*Medication {
	if m != nil {
		return m.Medications
	}
	return nil
}

func init() {
	proto.RegisterType((*Visit)(nil), "care.Visit")
	proto.RegisterType((*CreateVisitRequest)(nil), "care.CreateVisitRequest")
	proto.RegisterType((*CreateVisitResponse)(nil), "care.CreateVisitResponse")
	proto.RegisterType((*GetVisitRequest)(nil), "care.GetVisitRequest")
	proto.RegisterType((*GetVisitResponse)(nil), "care.GetVisitResponse")
	proto.RegisterType((*CreateVisitAnswersRequest)(nil), "care.CreateVisitAnswersRequest")
	proto.RegisterType((*CreateVisitAnswersResponse)(nil), "care.CreateVisitAnswersResponse")
	proto.RegisterType((*GetAnswersForVisitRequest)(nil), "care.GetAnswersForVisitRequest")
	proto.RegisterType((*GetAnswersForVisitResponse)(nil), "care.GetAnswersForVisitResponse")
	proto.RegisterType((*SubmitVisitRequest)(nil), "care.SubmitVisitRequest")
	proto.RegisterType((*SubmitVisitResponse)(nil), "care.SubmitVisitResponse")
	proto.RegisterType((*CarePlan)(nil), "care.CarePlan")
	proto.RegisterType((*CarePlanTreatment)(nil), "care.CarePlanTreatment")
	proto.RegisterType((*CarePlanInstruction)(nil), "care.CarePlanInstruction")
	proto.RegisterType((*CarePlanRequest)(nil), "care.CarePlanRequest")
	proto.RegisterType((*CarePlanResponse)(nil), "care.CarePlanResponse")
	proto.RegisterType((*CreateCarePlanRequest)(nil), "care.CreateCarePlanRequest")
	proto.RegisterType((*CreateCarePlanResponse)(nil), "care.CreateCarePlanResponse")
	proto.RegisterType((*SubmitCarePlanRequest)(nil), "care.SubmitCarePlanRequest")
	proto.RegisterType((*SubmitCarePlanResponse)(nil), "care.SubmitCarePlanResponse")
	proto.RegisterType((*Medication)(nil), "care.Medication")
	proto.RegisterType((*MedicationStrength)(nil), "care.MedicationStrength")
	proto.RegisterType((*SearchMedicationsRequest)(nil), "care.SearchMedicationsRequest")
	proto.RegisterType((*SearchMedicationsResponse)(nil), "care.SearchMedicationsResponse")
	proto.RegisterEnum("care.CarePlanTreatment_Availability", CarePlanTreatment_Availability_name, CarePlanTreatment_Availability_value)
}
func (x CarePlanTreatment_Availability) String() string {
	s, ok := CarePlanTreatment_Availability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Visit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Visit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.LayoutVersionID != that1.LayoutVersionID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Submitted != that1.Submitted {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *CreateVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LayoutVersionID != that1.LayoutVersionID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *CreateVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *GetVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *GetVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *CreateVisitAnswersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitAnswersRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.AnswersJSON != that1.AnswersJSON {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	return true
}
func (this *CreateVisitAnswersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitAnswersResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAnswersForVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAnswersForVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	return true
}
func (this *GetAnswersForVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAnswersForVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AnswersJSON != that1.AnswersJSON {
		return false
	}
	return true
}
func (this *SubmitVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	return true
}
func (this *SubmitVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CarePlan) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlan)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Treatments) != len(that1.Treatments) {
		return false
	}
	for i := range this.Treatments {
		if !this.Treatments[i].Equal(that1.Treatments[i]) {
			return false
		}
	}
	if len(this.Instructions) != len(that1.Instructions) {
		return false
	}
	for i := range this.Instructions {
		if !this.Instructions[i].Equal(that1.Instructions[i]) {
			return false
		}
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	if this.Submitted != that1.Submitted {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if this.SubmittedTimestamp != that1.SubmittedTimestamp {
		return false
	}
	return true
}
func (this *CarePlanTreatment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanTreatment)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EPrescribe != that1.EPrescribe {
		return false
	}
	if this.Availability != that1.Availability {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Route != that1.Route {
		return false
	}
	if this.Form != that1.Form {
		return false
	}
	if this.MedicationID != that1.MedicationID {
		return false
	}
	if this.Dosage != that1.Dosage {
		return false
	}
	if this.DispenseType != that1.DispenseType {
		return false
	}
	if this.DispenseNumber != that1.DispenseNumber {
		return false
	}
	if this.Refills != that1.Refills {
		return false
	}
	if this.SubstitutionsAllowed != that1.SubstitutionsAllowed {
		return false
	}
	if this.DaysSupply != that1.DaysSupply {
		return false
	}
	if this.Sig != that1.Sig {
		return false
	}
	if this.PharmacyID != that1.PharmacyID {
		return false
	}
	if this.PharmacyInstructions != that1.PharmacyInstructions {
		return false
	}
	return true
}
func (this *CarePlanInstruction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanInstruction)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Steps) != len(that1.Steps) {
		return false
	}
	for i := range this.Steps {
		if this.Steps[i] != that1.Steps[i] {
			return false
		}
	}
	return true
}
func (this *CarePlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *CarePlanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *CreateCarePlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateCarePlanRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Treatments) != len(that1.Treatments) {
		return false
	}
	for i := range this.Treatments {
		if !this.Treatments[i].Equal(that1.Treatments[i]) {
			return false
		}
	}
	if len(this.Instructions) != len(that1.Instructions) {
		return false
	}
	for i := range this.Instructions {
		if !this.Instructions[i].Equal(that1.Instructions[i]) {
			return false
		}
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	return true
}
func (this *CreateCarePlanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateCarePlanResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *SubmitCarePlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitCarePlanRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	return true
}
func (this *SubmitCarePlanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitCarePlanResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *Medication) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Medication)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Route != that1.Route {
		return false
	}
	if this.Form != that1.Form {
		return false
	}
	if len(this.Strengths) != len(that1.Strengths) {
		return false
	}
	for i := range this.Strengths {
		if !this.Strengths[i].Equal(that1.Strengths[i]) {
			return false
		}
	}
	return true
}
func (this *MedicationStrength) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MedicationStrength)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OTC != that1.OTC {
		return false
	}
	if this.Schedule != that1.Schedule {
		return false
	}
	if this.Strength != that1.Strength {
		return false
	}
	if this.DispenseUnit != that1.DispenseUnit {
		return false
	}
	if this.GenericName != that1.GenericName {
		return false
	}
	if this.LexiGenProductID != that1.LexiGenProductID {
		return false
	}
	if this.LexiDrugSynID != that1.LexiDrugSynID {
		return false
	}
	if this.LexiSynonymTypeID != that1.LexiSynonymTypeID {
		return false
	}
	if this.NDC != that1.NDC {
		return false
	}
	return true
}
func (this *SearchMedicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchMedicationsRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClinicID != that1.ClinicID {
		return false
	}
	if this.ClinicianID != that1.ClinicianID {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *SearchMedicationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchMedicationsResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Medications) != len(that1.Medications) {
		return false
	}
	for i := range this.Medications {
		if !this.Medications[i].Equal(that1.Medications[i]) {
			return false
		}
	}
	return true
}
func (this *Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&care.Visit{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "LayoutVersionID: "+fmt.Sprintf("%#v", this.LayoutVersionID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Submitted: "+fmt.Sprintf("%#v", this.Submitted)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&care.CreateVisitRequest{")
	s = append(s, "LayoutVersionID: "+fmt.Sprintf("%#v", this.LayoutVersionID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CreateVisitResponse{")
	if this.Visit != nil {
		s = append(s, "Visit: "+fmt.Sprintf("%#v", this.Visit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetVisitRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetVisitResponse{")
	if this.Visit != nil {
		s = append(s, "Visit: "+fmt.Sprintf("%#v", this.Visit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitAnswersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&care.CreateVisitAnswersRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "AnswersJSON: "+fmt.Sprintf("%#v", this.AnswersJSON)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitAnswersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.CreateVisitAnswersResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAnswersForVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetAnswersForVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAnswersForVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetAnswersForVisitResponse{")
	s = append(s, "AnswersJSON: "+fmt.Sprintf("%#v", this.AnswersJSON)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SubmitVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.SubmitVisitResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&care.CarePlan{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Treatments != nil {
		s = append(s, "Treatments: "+fmt.Sprintf("%#v", this.Treatments)+",\n")
	}
	if this.Instructions != nil {
		s = append(s, "Instructions: "+fmt.Sprintf("%#v", this.Instructions)+",\n")
	}
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	s = append(s, "Submitted: "+fmt.Sprintf("%#v", this.Submitted)+",\n")
	s = append(s, "ParentID: "+fmt.Sprintf("%#v", this.ParentID)+",\n")
	s = append(s, "SubmittedTimestamp: "+fmt.Sprintf("%#v", this.SubmittedTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanTreatment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&care.CarePlanTreatment{")
	s = append(s, "EPrescribe: "+fmt.Sprintf("%#v", this.EPrescribe)+",\n")
	s = append(s, "Availability: "+fmt.Sprintf("%#v", this.Availability)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Route: "+fmt.Sprintf("%#v", this.Route)+",\n")
	s = append(s, "Form: "+fmt.Sprintf("%#v", this.Form)+",\n")
	s = append(s, "MedicationID: "+fmt.Sprintf("%#v", this.MedicationID)+",\n")
	s = append(s, "Dosage: "+fmt.Sprintf("%#v", this.Dosage)+",\n")
	s = append(s, "DispenseType: "+fmt.Sprintf("%#v", this.DispenseType)+",\n")
	s = append(s, "DispenseNumber: "+fmt.Sprintf("%#v", this.DispenseNumber)+",\n")
	s = append(s, "Refills: "+fmt.Sprintf("%#v", this.Refills)+",\n")
	s = append(s, "SubstitutionsAllowed: "+fmt.Sprintf("%#v", this.SubstitutionsAllowed)+",\n")
	s = append(s, "DaysSupply: "+fmt.Sprintf("%#v", this.DaysSupply)+",\n")
	s = append(s, "Sig: "+fmt.Sprintf("%#v", this.Sig)+",\n")
	s = append(s, "PharmacyID: "+fmt.Sprintf("%#v", this.PharmacyID)+",\n")
	s = append(s, "PharmacyInstructions: "+fmt.Sprintf("%#v", this.PharmacyInstructions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanInstruction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.CarePlanInstruction{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Steps: "+fmt.Sprintf("%#v", this.Steps)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CarePlanRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CarePlanResponse{")
	if this.CarePlan != nil {
		s = append(s, "CarePlan: "+fmt.Sprintf("%#v", this.CarePlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCarePlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&care.CreateCarePlanRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Treatments != nil {
		s = append(s, "Treatments: "+fmt.Sprintf("%#v", this.Treatments)+",\n")
	}
	if this.Instructions != nil {
		s = append(s, "Instructions: "+fmt.Sprintf("%#v", this.Instructions)+",\n")
	}
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCarePlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CreateCarePlanResponse{")
	if this.CarePlan != nil {
		s = append(s, "CarePlan: "+fmt.Sprintf("%#v", this.CarePlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitCarePlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.SubmitCarePlanRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ParentID: "+fmt.Sprintf("%#v", this.ParentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitCarePlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SubmitCarePlanResponse{")
	if this.CarePlan != nil {
		s = append(s, "CarePlan: "+fmt.Sprintf("%#v", this.CarePlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Medication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&care.Medication{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Route: "+fmt.Sprintf("%#v", this.Route)+",\n")
	s = append(s, "Form: "+fmt.Sprintf("%#v", this.Form)+",\n")
	if this.Strengths != nil {
		s = append(s, "Strengths: "+fmt.Sprintf("%#v", this.Strengths)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MedicationStrength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&care.MedicationStrength{")
	s = append(s, "OTC: "+fmt.Sprintf("%#v", this.OTC)+",\n")
	s = append(s, "Schedule: "+fmt.Sprintf("%#v", this.Schedule)+",\n")
	s = append(s, "Strength: "+fmt.Sprintf("%#v", this.Strength)+",\n")
	s = append(s, "DispenseUnit: "+fmt.Sprintf("%#v", this.DispenseUnit)+",\n")
	s = append(s, "GenericName: "+fmt.Sprintf("%#v", this.GenericName)+",\n")
	s = append(s, "LexiGenProductID: "+fmt.Sprintf("%#v", this.LexiGenProductID)+",\n")
	s = append(s, "LexiDrugSynID: "+fmt.Sprintf("%#v", this.LexiDrugSynID)+",\n")
	s = append(s, "LexiSynonymTypeID: "+fmt.Sprintf("%#v", this.LexiSynonymTypeID)+",\n")
	s = append(s, "NDC: "+fmt.Sprintf("%#v", this.NDC)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchMedicationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&care.SearchMedicationsRequest{")
	s = append(s, "ClinicID: "+fmt.Sprintf("%#v", this.ClinicID)+",\n")
	s = append(s, "ClinicianID: "+fmt.Sprintf("%#v", this.ClinicianID)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchMedicationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SearchMedicationsResponse{")
	if this.Medications != nil {
		s = append(s, "Medications: "+fmt.Sprintf("%#v", this.Medications)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Care service

type CareClient interface {
	CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitResponse, error)
	GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitResponse, error)
	CreateVisitAnswers(ctx context.Context, in *CreateVisitAnswersRequest, opts ...grpc.CallOption) (*CreateVisitAnswersResponse, error)
	GetAnswersForVisit(ctx context.Context, in *GetAnswersForVisitRequest, opts ...grpc.CallOption) (*GetAnswersForVisitResponse, error)
	SubmitVisit(ctx context.Context, in *SubmitVisitRequest, opts ...grpc.CallOption) (*SubmitVisitResponse, error)
	// CarePlan returns a care plan by its ID
	CarePlan(ctx context.Context, in *CarePlanRequest, opts ...grpc.CallOption) (*CarePlanResponse, error)
	// CreateCarePlan creates a new care plan
	CreateCarePlan(ctx context.Context, in *CreateCarePlanRequest, opts ...grpc.CallOption) (*CreateCarePlanResponse, error)
	// SubmitCarePlan submits a care plan and attaches it to a parent, it can only be called once per care plan.
	// Any Rx attached to the care plan will be submitted at this point.
	SubmitCarePlan(ctx context.Context, in *SubmitCarePlanRequest, opts ...grpc.CallOption) (*SubmitCarePlanResponse, error)
	SearchMedications(ctx context.Context, in *SearchMedicationsRequest, opts ...grpc.CallOption) (*SearchMedicationsResponse, error)
}

type careClient struct {
	cc *grpc.ClientConn
}

func NewCareClient(cc *grpc.ClientConn) CareClient {
	return &careClient{cc}
}

func (c *careClient) CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitResponse, error) {
	out := new(CreateVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitResponse, error) {
	out := new(GetVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/GetVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CreateVisitAnswers(ctx context.Context, in *CreateVisitAnswersRequest, opts ...grpc.CallOption) (*CreateVisitAnswersResponse, error) {
	out := new(CreateVisitAnswersResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateVisitAnswers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) GetAnswersForVisit(ctx context.Context, in *GetAnswersForVisitRequest, opts ...grpc.CallOption) (*GetAnswersForVisitResponse, error) {
	out := new(GetAnswersForVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/GetAnswersForVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SubmitVisit(ctx context.Context, in *SubmitVisitRequest, opts ...grpc.CallOption) (*SubmitVisitResponse, error) {
	out := new(SubmitVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/SubmitVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CarePlan(ctx context.Context, in *CarePlanRequest, opts ...grpc.CallOption) (*CarePlanResponse, error) {
	out := new(CarePlanResponse)
	err := grpc.Invoke(ctx, "/care.Care/CarePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CreateCarePlan(ctx context.Context, in *CreateCarePlanRequest, opts ...grpc.CallOption) (*CreateCarePlanResponse, error) {
	out := new(CreateCarePlanResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateCarePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SubmitCarePlan(ctx context.Context, in *SubmitCarePlanRequest, opts ...grpc.CallOption) (*SubmitCarePlanResponse, error) {
	out := new(SubmitCarePlanResponse)
	err := grpc.Invoke(ctx, "/care.Care/SubmitCarePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SearchMedications(ctx context.Context, in *SearchMedicationsRequest, opts ...grpc.CallOption) (*SearchMedicationsResponse, error) {
	out := new(SearchMedicationsResponse)
	err := grpc.Invoke(ctx, "/care.Care/SearchMedications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Care service

type CareServer interface {
	CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitResponse, error)
	GetVisit(context.Context, *GetVisitRequest) (*GetVisitResponse, error)
	CreateVisitAnswers(context.Context, *CreateVisitAnswersRequest) (*CreateVisitAnswersResponse, error)
	GetAnswersForVisit(context.Context, *GetAnswersForVisitRequest) (*GetAnswersForVisitResponse, error)
	SubmitVisit(context.Context, *SubmitVisitRequest) (*SubmitVisitResponse, error)
	// CarePlan returns a care plan by its ID
	CarePlan(context.Context, *CarePlanRequest) (*CarePlanResponse, error)
	// CreateCarePlan creates a new care plan
	CreateCarePlan(context.Context, *CreateCarePlanRequest) (*CreateCarePlanResponse, error)
	// SubmitCarePlan submits a care plan and attaches it to a parent, it can only be called once per care plan.
	// Any Rx attached to the care plan will be submitted at this point.
	SubmitCarePlan(context.Context, *SubmitCarePlanRequest) (*SubmitCarePlanResponse, error)
	SearchMedications(context.Context, *SearchMedicationsRequest) (*SearchMedicationsResponse, error)
}

func RegisterCareServer(s *grpc.Server, srv CareServer) {
	s.RegisterService(&_Care_serviceDesc, srv)
}

func _Care_CreateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).CreateVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_GetVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).GetVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_CreateVisitAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateVisitAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).CreateVisitAnswers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_GetAnswersForVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAnswersForVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).GetAnswersForVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_SubmitVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubmitVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).SubmitVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_CarePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CarePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).CarePlan(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_CreateCarePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateCarePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).CreateCarePlan(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_SubmitCarePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubmitCarePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).SubmitCarePlan(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_SearchMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SearchMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).SearchMedications(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Care_serviceDesc = grpc.ServiceDesc{
	ServiceName: "care.Care",
	HandlerType: (*CareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVisit",
			Handler:    _Care_CreateVisit_Handler,
		},
		{
			MethodName: "GetVisit",
			Handler:    _Care_GetVisit_Handler,
		},
		{
			MethodName: "CreateVisitAnswers",
			Handler:    _Care_CreateVisitAnswers_Handler,
		},
		{
			MethodName: "GetAnswersForVisit",
			Handler:    _Care_GetAnswersForVisit_Handler,
		},
		{
			MethodName: "SubmitVisit",
			Handler:    _Care_SubmitVisit_Handler,
		},
		{
			MethodName: "CarePlan",
			Handler:    _Care_CarePlan_Handler,
		},
		{
			MethodName: "CreateCarePlan",
			Handler:    _Care_CreateCarePlan_Handler,
		},
		{
			MethodName: "SubmitCarePlan",
			Handler:    _Care_SubmitCarePlan_Handler,
		},
		{
			MethodName: "SearchMedications",
			Handler:    _Care_SearchMedications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Visit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Visit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.LayoutVersionID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LayoutVersionID)))
		i += copy(data[i:], m.LayoutVersionID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Submitted {
		data[i] = 0x28
		i++
		if m.Submitted {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	return i, nil
}

func (m *CreateVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LayoutVersionID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LayoutVersionID)))
		i += copy(data[i:], m.LayoutVersionID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	return i, nil
}

func (m *CreateVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n1, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *GetVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n2, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreateVisitAnswersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitAnswersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	if len(m.AnswersJSON) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AnswersJSON)))
		i += copy(data[i:], m.AnswersJSON)
	}
	if len(m.ActorEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	return i, nil
}

func (m *CreateVisitAnswersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitAnswersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAnswersForVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAnswersForVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	return i, nil
}

func (m *GetAnswersForVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAnswersForVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AnswersJSON) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AnswersJSON)))
		i += copy(data[i:], m.AnswersJSON)
	}
	return i, nil
}

func (m *SubmitVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	return i, nil
}

func (m *SubmitVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CarePlan) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlan) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Treatments) > 0 {
		for _, msg := range m.Treatments {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Instructions) > 0 {
		for _, msg := range m.Instructions {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if len(m.CreatorID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CreatorID)))
		i += copy(data[i:], m.CreatorID)
	}
	if m.Submitted {
		data[i] = 0x38
		i++
		if m.Submitted {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.ParentID) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ParentID)))
		i += copy(data[i:], m.ParentID)
	}
	if m.SubmittedTimestamp != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.SubmittedTimestamp))
	}
	return i, nil
}

func (m *CarePlanTreatment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanTreatment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EPrescribe {
		data[i] = 0x8
		i++
		if m.EPrescribe {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Availability != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Availability))
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Route) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Route)))
		i += copy(data[i:], m.Route)
	}
	if len(m.Form) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Form)))
		i += copy(data[i:], m.Form)
	}
	if len(m.MedicationID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MedicationID)))
		i += copy(data[i:], m.MedicationID)
	}
	if len(m.Dosage) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Dosage)))
		i += copy(data[i:], m.Dosage)
	}
	if len(m.DispenseType) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DispenseType)))
		i += copy(data[i:], m.DispenseType)
	}
	if m.DispenseNumber != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.DispenseNumber))
	}
	if m.Refills != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.Refills))
	}
	if m.SubstitutionsAllowed {
		data[i] = 0x58
		i++
		if m.SubstitutionsAllowed {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.DaysSupply != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintSvc(data, i, uint64(m.DaysSupply))
	}
	if len(m.Sig) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Sig)))
		i += copy(data[i:], m.Sig)
	}
	if len(m.PharmacyID) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PharmacyID)))
		i += copy(data[i:], m.PharmacyID)
	}
	if len(m.PharmacyInstructions) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PharmacyInstructions)))
		i += copy(data[i:], m.PharmacyInstructions)
	}
	return i, nil
}

func (m *CarePlanInstruction) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanInstruction) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Steps) > 0 {
		for _, s := range m.Steps {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CarePlanRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *CarePlanResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarePlan != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n3, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CreateCarePlanRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateCarePlanRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Treatments) > 0 {
		for _, msg := range m.Treatments {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Instructions) > 0 {
		for _, msg := range m.Instructions {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CreatorID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CreatorID)))
		i += copy(data[i:], m.CreatorID)
	}
	return i, nil
}

func (m *CreateCarePlanResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateCarePlanResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarePlan != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n4, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SubmitCarePlanRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitCarePlanRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.ParentID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ParentID)))
		i += copy(data[i:], m.ParentID)
	}
	return i, nil
}

func (m *SubmitCarePlanResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitCarePlanResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarePlan != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n5, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Medication) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Medication) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Route) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Route)))
		i += copy(data[i:], m.Route)
	}
	if len(m.Form) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Form)))
		i += copy(data[i:], m.Form)
	}
	if len(m.Strengths) > 0 {
		for _, msg := range m.Strengths {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MedicationStrength) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MedicationStrength) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OTC {
		data[i] = 0x8
		i++
		if m.OTC {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Schedule != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Schedule))
	}
	if len(m.Strength) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Strength)))
		i += copy(data[i:], m.Strength)
	}
	if len(m.DispenseUnit) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DispenseUnit)))
		i += copy(data[i:], m.DispenseUnit)
	}
	if len(m.GenericName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GenericName)))
		i += copy(data[i:], m.GenericName)
	}
	if m.LexiGenProductID != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.LexiGenProductID))
	}
	if m.LexiDrugSynID != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.LexiDrugSynID))
	}
	if m.LexiSynonymTypeID != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintSvc(data, i, uint64(m.LexiSynonymTypeID))
	}
	if len(m.NDC) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.NDC)))
		i += copy(data[i:], m.NDC)
	}
	return i, nil
}

func (m *SearchMedicationsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchMedicationsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClinicID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.ClinicID))
	}
	if m.ClinicianID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.ClinicianID))
	}
	if len(m.Query) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	return i, nil
}

func (m *SearchMedicationsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchMedicationsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Medications) > 0 {
		for _, msg := range m.Medications {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Visit) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Submitted {
		n += 2
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.LayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitAnswersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AnswersJSON)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitAnswersResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetAnswersForVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetAnswersForVisitResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AnswersJSON)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitVisitResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CarePlan) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Treatments) > 0 {
		for _, e := range m.Treatments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	l = len(m.CreatorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Submitted {
		n += 2
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.SubmittedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.SubmittedTimestamp))
	}
	return n
}

func (m *CarePlanTreatment) Size() (n int) {
	var l int
	_ = l
	if m.EPrescribe {
		n += 2
	}
	if m.Availability != 0 {
		n += 1 + sovSvc(uint64(m.Availability))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Form)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MedicationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Dosage)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DispenseType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DispenseNumber != 0 {
		n += 1 + sovSvc(uint64(m.DispenseNumber))
	}
	if m.Refills != 0 {
		n += 1 + sovSvc(uint64(m.Refills))
	}
	if m.SubstitutionsAllowed {
		n += 2
	}
	if m.DaysSupply != 0 {
		n += 1 + sovSvc(uint64(m.DaysSupply))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PharmacyID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PharmacyInstructions)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CarePlanInstruction) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Steps) > 0 {
		for _, s := range m.Steps {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CarePlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CarePlanResponse) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateCarePlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Treatments) > 0 {
		for _, e := range m.Treatments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.CreatorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateCarePlanResponse) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitCarePlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitCarePlanResponse) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Medication) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Form)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Strengths) > 0 {
		for _, e := range m.Strengths {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *MedicationStrength) Size() (n int) {
	var l int
	_ = l
	if m.OTC {
		n += 2
	}
	if m.Schedule != 0 {
		n += 1 + sovSvc(uint64(m.Schedule))
	}
	l = len(m.Strength)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DispenseUnit)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.GenericName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.LexiGenProductID != 0 {
		n += 1 + sovSvc(uint64(m.LexiGenProductID))
	}
	if m.LexiDrugSynID != 0 {
		n += 1 + sovSvc(uint64(m.LexiDrugSynID))
	}
	if m.LexiSynonymTypeID != 0 {
		n += 1 + sovSvc(uint64(m.LexiSynonymTypeID))
	}
	l = len(m.NDC)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SearchMedicationsRequest) Size() (n int) {
	var l int
	_ = l
	if m.ClinicID != 0 {
		n += 1 + sovSvc(uint64(m.ClinicID))
	}
	if m.ClinicianID != 0 {
		n += 1 + sovSvc(uint64(m.ClinicianID))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SearchMedicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Medications) > 0 {
		for _, e := range m.Medications {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Visit{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`LayoutVersionID:` + fmt.Sprintf("%v", this.LayoutVersionID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Submitted:` + fmt.Sprintf("%v", this.Submitted) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitRequest{`,
		`LayoutVersionID:` + fmt.Sprintf("%v", this.LayoutVersionID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitResponse{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "Visit", "Visit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitResponse{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "Visit", "Visit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitAnswersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitAnswersRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`AnswersJSON:` + fmt.Sprintf("%v", this.AnswersJSON) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitAnswersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitAnswersResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetAnswersForVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAnswersForVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAnswersForVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAnswersForVisitResponse{`,
		`AnswersJSON:` + fmt.Sprintf("%v", this.AnswersJSON) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitVisitResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CarePlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlan{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Treatments:` + strings.Replace(fmt.Sprintf("%v", this.Treatments), "CarePlanTreatment", "CarePlanTreatment", 1) + `,`,
		`Instructions:` + strings.Replace(fmt.Sprintf("%v", this.Instructions), "CarePlanInstruction", "CarePlanInstruction", 1) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`CreatorID:` + fmt.Sprintf("%v", this.CreatorID) + `,`,
		`Submitted:` + fmt.Sprintf("%v", this.Submitted) + `,`,
		`ParentID:` + fmt.Sprintf("%v", this.ParentID) + `,`,
		`SubmittedTimestamp:` + fmt.Sprintf("%v", this.SubmittedTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanTreatment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanTreatment{`,
		`EPrescribe:` + fmt.Sprintf("%v", this.EPrescribe) + `,`,
		`Availability:` + fmt.Sprintf("%v", this.Availability) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Route:` + fmt.Sprintf("%v", this.Route) + `,`,
		`Form:` + fmt.Sprintf("%v", this.Form) + `,`,
		`MedicationID:` + fmt.Sprintf("%v", this.MedicationID) + `,`,
		`Dosage:` + fmt.Sprintf("%v", this.Dosage) + `,`,
		`DispenseType:` + fmt.Sprintf("%v", this.DispenseType) + `,`,
		`DispenseNumber:` + fmt.Sprintf("%v", this.DispenseNumber) + `,`,
		`Refills:` + fmt.Sprintf("%v", this.Refills) + `,`,
		`SubstitutionsAllowed:` + fmt.Sprintf("%v", this.SubstitutionsAllowed) + `,`,
		`DaysSupply:` + fmt.Sprintf("%v", this.DaysSupply) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`PharmacyID:` + fmt.Sprintf("%v", this.PharmacyID) + `,`,
		`PharmacyInstructions:` + fmt.Sprintf("%v", this.PharmacyInstructions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanInstruction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanInstruction{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Steps:` + fmt.Sprintf("%v", this.Steps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanResponse{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlan", "CarePlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCarePlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCarePlanRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Treatments:` + strings.Replace(fmt.Sprintf("%v", this.Treatments), "CarePlanTreatment", "CarePlanTreatment", 1) + `,`,
		`Instructions:` + strings.Replace(fmt.Sprintf("%v", this.Instructions), "CarePlanInstruction", "CarePlanInstruction", 1) + `,`,
		`CreatorID:` + fmt.Sprintf("%v", this.CreatorID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCarePlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCarePlanResponse{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlan", "CarePlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitCarePlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitCarePlanRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ParentID:` + fmt.Sprintf("%v", this.ParentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitCarePlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitCarePlanResponse{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlan", "CarePlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Medication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Medication{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Route:` + fmt.Sprintf("%v", this.Route) + `,`,
		`Form:` + fmt.Sprintf("%v", this.Form) + `,`,
		`Strengths:` + strings.Replace(fmt.Sprintf("%v", this.Strengths), "MedicationStrength", "MedicationStrength", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MedicationStrength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MedicationStrength{`,
		`OTC:` + fmt.Sprintf("%v", this.OTC) + `,`,
		`Schedule:` + fmt.Sprintf("%v", this.Schedule) + `,`,
		`Strength:` + fmt.Sprintf("%v", this.Strength) + `,`,
		`DispenseUnit:` + fmt.Sprintf("%v", this.DispenseUnit) + `,`,
		`GenericName:` + fmt.Sprintf("%v", this.GenericName) + `,`,
		`LexiGenProductID:` + fmt.Sprintf("%v", this.LexiGenProductID) + `,`,
		`LexiDrugSynID:` + fmt.Sprintf("%v", this.LexiDrugSynID) + `,`,
		`LexiSynonymTypeID:` + fmt.Sprintf("%v", this.LexiSynonymTypeID) + `,`,
		`NDC:` + fmt.Sprintf("%v", this.NDC) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchMedicationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchMedicationsRequest{`,
		`ClinicID:` + fmt.Sprintf("%v", this.ClinicID) + `,`,
		`ClinicianID:` + fmt.Sprintf("%v", this.ClinicianID) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchMedicationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchMedicationsResponse{`,
		`Medications:` + strings.Replace(fmt.Sprintf("%v", this.Medications), "Medication", "Medication", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Visit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Submitted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visit == nil {
				m.Visit = &Visit{}
			}
			if err := m.Visit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visit == nil {
				m.Visit = &Visit{}
			}
			if err := m.Visit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitAnswersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitAnswersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitAnswersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersJSON = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitAnswersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitAnswersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitAnswersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAnswersForVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAnswersForVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAnswersForVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAnswersForVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAnswersForVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAnswersForVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersJSON = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlan) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treatments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treatments = append(m.Treatments, &CarePlanTreatment{})
			if err := m.Treatments[len(m.Treatments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &CarePlanInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Submitted = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedTimestamp", wireType)
			}
			m.SubmittedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SubmittedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanTreatment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanTreatment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanTreatment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EPrescribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EPrescribe = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			m.Availability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Availability |= (CarePlanTreatment_Availability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Form = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedicationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedicationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dosage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dosage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispenseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispenseType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispenseNumber", wireType)
			}
			m.DispenseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DispenseNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refills", wireType)
			}
			m.Refills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Refills |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstitutionsAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubstitutionsAllowed = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysSupply", wireType)
			}
			m.DaysSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DaysSupply |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PharmacyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PharmacyID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PharmacyInstructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PharmacyInstructions = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanInstruction) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = append(m.Steps, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarePlan == nil {
				m.CarePlan = &CarePlan{}
			}
			if err := m.CarePlan.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCarePlanRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCarePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCarePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treatments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treatments = append(m.Treatments, &CarePlanTreatment{})
			if err := m.Treatments[len(m.Treatments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &CarePlanInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCarePlanResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCarePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCarePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarePlan == nil {
				m.CarePlan = &CarePlan{}
			}
			if err := m.CarePlan.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitCarePlanRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitCarePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitCarePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitCarePlanResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitCarePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitCarePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarePlan == nil {
				m.CarePlan = &CarePlan{}
			}
			if err := m.CarePlan.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Medication) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Medication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Medication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Form = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strengths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strengths = append(m.Strengths, &MedicationStrength{})
			if err := m.Strengths[len(m.Strengths)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedicationStrength) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedicationStrength: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedicationStrength: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OTC = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			m.Schedule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Schedule |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strength = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispenseUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispenseUnit = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LexiGenProductID", wireType)
			}
			m.LexiGenProductID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LexiGenProductID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LexiDrugSynID", wireType)
			}
			m.LexiDrugSynID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LexiDrugSynID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LexiSynonymTypeID", wireType)
			}
			m.LexiSynonymTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LexiSynonymTypeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NDC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NDC = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMedicationsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMedicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMedicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClinicID", wireType)
			}
			m.ClinicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ClinicID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClinicianID", wireType)
			}
			m.ClinicianID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ClinicianID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMedicationsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMedicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMedicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medications = append(m.Medications, &Medication{})
			if err := m.Medications[len(m.Medications)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)
