// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package care is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		Visit
		Answer
		FreeTextAnswer
		MultipleChoiceAnswer
		SingleSelectAnswer
		SegmentedControlAnswer
		SingleEntryAnswer
		AnswerOption
		AutocompleteAnswerItem
		AutocompleteAnswer
		PhotoSectionAnswer
		CreateVisitRequest
		CreateVisitResponse
		GetVisitRequest
		GetVisitResponse
		CreateVisitAnswersRequest
		CreateVisitAnswersResponse
		GetAnswersForVisitRequest
		GetAnswersForVisitResponse
		SubmitVisitRequest
		SubmitVisitResponse
		TriageVisitRequest
		TriageVisitResponse
		CarePlan
		CarePlanTreatment
		CarePlanInstruction
		CarePlanRequest
		CarePlanResponse
		CreateCarePlanRequest
		CreateCarePlanResponse
		SubmitCarePlanRequest
		SubmitCarePlanResponse
		Medication
		MedicationStrength
		SearchMedicationsRequest
		SearchMedicationsResponse
		SearchSelfReportedMedicationsRequest
		SearchSelfReportedMedicationsResponse
		SearchAllergyMedicationsRequest
		SearchAllergyMedicationsResponse
*/
package care

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type CarePlanTreatment_Availability int32

const (
	CarePlanTreatment_UNKNOWN CarePlanTreatment_Availability = 0
	CarePlanTreatment_OTC     CarePlanTreatment_Availability = 1
	CarePlanTreatment_RX      CarePlanTreatment_Availability = 2
)

var CarePlanTreatment_Availability_name = map[int32]string{
	0: "UNKNOWN",
	1: "OTC",
	2: "RX",
}
var CarePlanTreatment_Availability_value = map[string]int32{
	"UNKNOWN": 0,
	"OTC":     1,
	"RX":      2,
}

func (CarePlanTreatment_Availability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{24, 0}
}

// Visit is a unit of information requested from a patient
// to provide a provider with information to aid in the diagnosis
// of a patient condition.
type Visit struct {
	ID              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LayoutVersionID string            `protobuf:"bytes,3,opt,name=layout_version_id,proto3" json:"layout_version_id,omitempty"`
	EntityID        string            `protobuf:"bytes,4,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Submitted       bool              `protobuf:"varint,5,opt,name=submitted,proto3" json:"submitted,omitempty"`
	OrganizationID  string            `protobuf:"bytes,6,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	CreatorID       string            `protobuf:"bytes,7,opt,name=creator_id,proto3" json:"creator_id,omitempty"`
	Triaged         bool              `protobuf:"varint,8,opt,name=triaged,proto3" json:"triaged,omitempty"`
	Preferences     *Visit_Preference `protobuf:"bytes,9,opt,name=preferences" json:"preferences,omitempty"`
}

func (m *Visit) Reset()                    { *m = Visit{} }
func (*Visit) ProtoMessage()               {}
func (*Visit) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0} }

func (m *Visit) GetPreferences() *Visit_Preference {
	if m != nil {
		return m.Preferences
	}
	return nil
}

type Visit_Preference struct {
	OptionalTriage bool `protobuf:"varint,1,opt,name=optional_triage,proto3" json:"optional_triage,omitempty"`
}

func (m *Visit_Preference) Reset()                    { *m = Visit_Preference{} }
func (*Visit_Preference) ProtoMessage()               {}
func (*Visit_Preference) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{0, 0} }

// Anwer represents a response to a particular question in the visit.
type Answer struct {
	QuestionID string `protobuf:"bytes,1,opt,name=question_id,proto3" json:"question_id,omitempty"`
	// Types that are valid to be assigned to Answer:
	//	*Answer_FreeText
	//	*Answer_MultipleChoice
	//	*Answer_SingleSelect
	//	*Answer_Autocomplete
	//	*Answer_PhotoSection
	//	*Answer_SingleEntry
	//	*Answer_SegmentedControl
	Answer isAnswer_Answer `protobuf_oneof:"answer"`
}

func (m *Answer) Reset()                    { *m = Answer{} }
func (*Answer) ProtoMessage()               {}
func (*Answer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{1} }

type isAnswer_Answer interface {
	isAnswer_Answer()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Answer_FreeText struct {
	FreeText *FreeTextAnswer `protobuf:"bytes,10,opt,name=free_text,oneof"`
}
type Answer_MultipleChoice struct {
	MultipleChoice *MultipleChoiceAnswer `protobuf:"bytes,11,opt,name=multiple_choice,oneof"`
}
type Answer_SingleSelect struct {
	SingleSelect *SingleSelectAnswer `protobuf:"bytes,12,opt,name=single_select,oneof"`
}
type Answer_Autocomplete struct {
	Autocomplete *AutocompleteAnswer `protobuf:"bytes,13,opt,name=autocomplete,oneof"`
}
type Answer_PhotoSection struct {
	PhotoSection *PhotoSectionAnswer `protobuf:"bytes,14,opt,name=photo_section,oneof"`
}
type Answer_SingleEntry struct {
	SingleEntry *SingleEntryAnswer `protobuf:"bytes,15,opt,name=single_entry,oneof"`
}
type Answer_SegmentedControl struct {
	SegmentedControl *SegmentedControlAnswer `protobuf:"bytes,16,opt,name=segmented_control,oneof"`
}

func (*Answer_FreeText) isAnswer_Answer()         {}
func (*Answer_MultipleChoice) isAnswer_Answer()   {}
func (*Answer_SingleSelect) isAnswer_Answer()     {}
func (*Answer_Autocomplete) isAnswer_Answer()     {}
func (*Answer_PhotoSection) isAnswer_Answer()     {}
func (*Answer_SingleEntry) isAnswer_Answer()      {}
func (*Answer_SegmentedControl) isAnswer_Answer() {}

func (m *Answer) GetAnswer() isAnswer_Answer {
	if m != nil {
		return m.Answer
	}
	return nil
}

func (m *Answer) GetFreeText() *FreeTextAnswer {
	if x, ok := m.GetAnswer().(*Answer_FreeText); ok {
		return x.FreeText
	}
	return nil
}

func (m *Answer) GetMultipleChoice() *MultipleChoiceAnswer {
	if x, ok := m.GetAnswer().(*Answer_MultipleChoice); ok {
		return x.MultipleChoice
	}
	return nil
}

func (m *Answer) GetSingleSelect() *SingleSelectAnswer {
	if x, ok := m.GetAnswer().(*Answer_SingleSelect); ok {
		return x.SingleSelect
	}
	return nil
}

func (m *Answer) GetAutocomplete() *AutocompleteAnswer {
	if x, ok := m.GetAnswer().(*Answer_Autocomplete); ok {
		return x.Autocomplete
	}
	return nil
}

func (m *Answer) GetPhotoSection() *PhotoSectionAnswer {
	if x, ok := m.GetAnswer().(*Answer_PhotoSection); ok {
		return x.PhotoSection
	}
	return nil
}

func (m *Answer) GetSingleEntry() *SingleEntryAnswer {
	if x, ok := m.GetAnswer().(*Answer_SingleEntry); ok {
		return x.SingleEntry
	}
	return nil
}

func (m *Answer) GetSegmentedControl() *SegmentedControlAnswer {
	if x, ok := m.GetAnswer().(*Answer_SegmentedControl); ok {
		return x.SegmentedControl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Answer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Answer_OneofMarshaler, _Answer_OneofUnmarshaler, _Answer_OneofSizer, []interface{}{
		(*Answer_FreeText)(nil),
		(*Answer_MultipleChoice)(nil),
		(*Answer_SingleSelect)(nil),
		(*Answer_Autocomplete)(nil),
		(*Answer_PhotoSection)(nil),
		(*Answer_SingleEntry)(nil),
		(*Answer_SegmentedControl)(nil),
	}
}

func _Answer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Answer)
	// answer
	switch x := m.Answer.(type) {
	case *Answer_FreeText:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FreeText); err != nil {
			return err
		}
	case *Answer_MultipleChoice:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultipleChoice); err != nil {
			return err
		}
	case *Answer_SingleSelect:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleSelect); err != nil {
			return err
		}
	case *Answer_Autocomplete:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Autocomplete); err != nil {
			return err
		}
	case *Answer_PhotoSection:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PhotoSection); err != nil {
			return err
		}
	case *Answer_SingleEntry:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleEntry); err != nil {
			return err
		}
	case *Answer_SegmentedControl:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SegmentedControl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Answer.Answer has unexpected type %T", x)
	}
	return nil
}

func _Answer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Answer)
	switch tag {
	case 10: // answer.free_text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FreeTextAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_FreeText{msg}
		return true, err
	case 11: // answer.multiple_choice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultipleChoiceAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_MultipleChoice{msg}
		return true, err
	case 12: // answer.single_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleSelectAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_SingleSelect{msg}
		return true, err
	case 13: // answer.autocomplete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AutocompleteAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_Autocomplete{msg}
		return true, err
	case 14: // answer.photo_section
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PhotoSectionAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_PhotoSection{msg}
		return true, err
	case 15: // answer.single_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleEntryAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_SingleEntry{msg}
		return true, err
	case 16: // answer.segmented_control
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SegmentedControlAnswer)
		err := b.DecodeMessage(msg)
		m.Answer = &Answer_SegmentedControl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Answer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Answer)
	// answer
	switch x := m.Answer.(type) {
	case *Answer_FreeText:
		s := proto.Size(x.FreeText)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Answer_MultipleChoice:
		s := proto.Size(x.MultipleChoice)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Answer_SingleSelect:
		s := proto.Size(x.SingleSelect)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Answer_Autocomplete:
		s := proto.Size(x.Autocomplete)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Answer_PhotoSection:
		s := proto.Size(x.PhotoSection)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Answer_SingleEntry:
		s := proto.Size(x.SingleEntry)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Answer_SegmentedControl:
		s := proto.Size(x.SegmentedControl)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FreeTextAnswer represents a free text response to a question.
type FreeTextAnswer struct {
	FreeText string `protobuf:"bytes,1,opt,name=free_text,proto3" json:"free_text,omitempty"`
}

func (m *FreeTextAnswer) Reset()                    { *m = FreeTextAnswer{} }
func (*FreeTextAnswer) ProtoMessage()               {}
func (*FreeTextAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{2} }

// MultipleChoiceAnswer represents a response that contains multiple options
// selected by the patient from a list of available options in a question.
type MultipleChoiceAnswer struct {
	SelectedAnswers []*AnswerOption `protobuf:"bytes,1,rep,name=selected_answers" json:"selected_answers,omitempty"`
}

func (m *MultipleChoiceAnswer) Reset()                    { *m = MultipleChoiceAnswer{} }
func (*MultipleChoiceAnswer) ProtoMessage()               {}
func (*MultipleChoiceAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{3} }

func (m *MultipleChoiceAnswer) GetSelectedAnswers() []*AnswerOption {
	if m != nil {
		return m.SelectedAnswers
	}
	return nil
}

// SingleSelectAnswer represents a response that contains a single option
// selected from a list of available options.
type SingleSelectAnswer struct {
	SelectedAnswer *AnswerOption `protobuf:"bytes,1,opt,name=selected_answer" json:"selected_answer,omitempty"`
}

func (m *SingleSelectAnswer) Reset()                    { *m = SingleSelectAnswer{} }
func (*SingleSelectAnswer) ProtoMessage()               {}
func (*SingleSelectAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{4} }

func (m *SingleSelectAnswer) GetSelectedAnswer() *AnswerOption {
	if m != nil {
		return m.SelectedAnswer
	}
	return nil
}

// SegmentedControlAnswer represents a single option selected from a list of
// available options.
type SegmentedControlAnswer struct {
	SelectedAnswer *AnswerOption `protobuf:"bytes,1,opt,name=selected_answer" json:"selected_answer,omitempty"`
}

func (m *SegmentedControlAnswer) Reset()                    { *m = SegmentedControlAnswer{} }
func (*SegmentedControlAnswer) ProtoMessage()               {}
func (*SegmentedControlAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{5} }

func (m *SegmentedControlAnswer) GetSelectedAnswer() *AnswerOption {
	if m != nil {
		return m.SelectedAnswer
	}
	return nil
}

// SingleEntryAnswer represents a single free text response to a question.
type SingleEntryAnswer struct {
	FreeText string `protobuf:"bytes,1,opt,name=free_text,proto3" json:"free_text,omitempty"`
}

func (m *SingleEntryAnswer) Reset()                    { *m = SingleEntryAnswer{} }
func (*SingleEntryAnswer) ProtoMessage()               {}
func (*SingleEntryAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{6} }

// AnswerOption represents a single selection that is part of an answer.
type AnswerOption struct {
	ID         string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FreeText   string             `protobuf:"bytes,2,opt,name=free_text,proto3" json:"free_text,omitempty"`
	SubAnswers map[string]*Answer `protobuf:"bytes,3,rep,name=sub_answers" json:"sub_answers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AnswerOption) Reset()                    { *m = AnswerOption{} }
func (*AnswerOption) ProtoMessage()               {}
func (*AnswerOption) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{7} }

func (m *AnswerOption) GetSubAnswers() map[string]*Answer {
	if m != nil {
		return m.SubAnswers
	}
	return nil
}

// AutocompleteAnswerItem represents a single entry that is part of the
// autocomplete answer.
type AutocompleteAnswerItem struct {
	Answer     string             `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	SubAnswers map[string]*Answer `protobuf:"bytes,2,rep,name=sub_answers" json:"sub_answers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AutocompleteAnswerItem) Reset()                    { *m = AutocompleteAnswerItem{} }
func (*AutocompleteAnswerItem) ProtoMessage()               {}
func (*AutocompleteAnswerItem) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{8} }

func (m *AutocompleteAnswerItem) GetSubAnswers() map[string]*Answer {
	if m != nil {
		return m.SubAnswers
	}
	return nil
}

// AutocompleteAnswer represents a response to a question that uses an
// external data source to autocomplete the answer.
type AutocompleteAnswer struct {
	Items []*AutocompleteAnswerItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *AutocompleteAnswer) Reset()                    { *m = AutocompleteAnswer{} }
func (*AutocompleteAnswer) ProtoMessage()               {}
func (*AutocompleteAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{9} }

func (m *AutocompleteAnswer) GetItems() []*AutocompleteAnswerItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// PhotoSectionAnswer represents a series of photos pertaining to a question.
type PhotoSectionAnswer struct {
	Sections []*PhotoSectionAnswer_PhotoSectionItem `protobuf:"bytes,1,rep,name=sections" json:"sections,omitempty"`
}

func (m *PhotoSectionAnswer) Reset()                    { *m = PhotoSectionAnswer{} }
func (*PhotoSectionAnswer) ProtoMessage()               {}
func (*PhotoSectionAnswer) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{10} }

func (m *PhotoSectionAnswer) GetSections() []*PhotoSectionAnswer_PhotoSectionItem {
	if m != nil {
		return m.Sections
	}
	return nil
}

type PhotoSectionAnswer_PhotoSectionItem struct {
	Name  string                                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slots []*PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem `protobuf:"bytes,2,rep,name=slots" json:"slots,omitempty"`
}

func (m *PhotoSectionAnswer_PhotoSectionItem) Reset()      { *m = PhotoSectionAnswer_PhotoSectionItem{} }
func (*PhotoSectionAnswer_PhotoSectionItem) ProtoMessage() {}
func (*PhotoSectionAnswer_PhotoSectionItem) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{10, 0}
}

func (m *PhotoSectionAnswer_PhotoSectionItem) GetSlots() []*PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem {
	if m != nil {
		return m.Slots
	}
	return nil
}

type PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem struct {
	SlotID  string `protobuf:"bytes,1,opt,name=slot_id,proto3" json:"slot_id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MediaID string `protobuf:"bytes,3,opt,name=media_id,proto3" json:"media_id,omitempty"`
	URL     string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) Reset() {
	*m = PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem{}
}
func (*PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) ProtoMessage() {}
func (*PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{10, 0, 0}
}

type CreateVisitRequest struct {
	LayoutVersionID string `protobuf:"bytes,1,opt,name=layout_version_id,proto3" json:"layout_version_id,omitempty"`
	EntityID        string `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationID  string `protobuf:"bytes,4,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
	CreatorID       string `protobuf:"bytes,5,opt,name=creator_id,proto3" json:"creator_id,omitempty"`
}

func (m *CreateVisitRequest) Reset()                    { *m = CreateVisitRequest{} }
func (*CreateVisitRequest) ProtoMessage()               {}
func (*CreateVisitRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{11} }

type CreateVisitResponse struct {
	Visit *Visit `protobuf:"bytes,1,opt,name=visit" json:"visit,omitempty"`
}

func (m *CreateVisitResponse) Reset()                    { *m = CreateVisitResponse{} }
func (*CreateVisitResponse) ProtoMessage()               {}
func (*CreateVisitResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{12} }

func (m *CreateVisitResponse) GetVisit() *Visit {
	if m != nil {
		return m.Visit
	}
	return nil
}

type GetVisitRequest struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetVisitRequest) Reset()                    { *m = GetVisitRequest{} }
func (*GetVisitRequest) ProtoMessage()               {}
func (*GetVisitRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{13} }

type GetVisitResponse struct {
	Visit *Visit `protobuf:"bytes,1,opt,name=visit" json:"visit,omitempty"`
}

func (m *GetVisitResponse) Reset()                    { *m = GetVisitResponse{} }
func (*GetVisitResponse) ProtoMessage()               {}
func (*GetVisitResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{14} }

func (m *GetVisitResponse) GetVisit() *Visit {
	if m != nil {
		return m.Visit
	}
	return nil
}

type CreateVisitAnswersRequest struct {
	VisitID       string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
	AnswersJSON   string `protobuf:"bytes,2,opt,name=answers_json,proto3" json:"answers_json,omitempty"`
	ActorEntityID string `protobuf:"bytes,3,opt,name=actory_entity_id,proto3" json:"actory_entity_id,omitempty"`
}

func (m *CreateVisitAnswersRequest) Reset()                    { *m = CreateVisitAnswersRequest{} }
func (*CreateVisitAnswersRequest) ProtoMessage()               {}
func (*CreateVisitAnswersRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{15} }

type CreateVisitAnswersResponse struct {
}

func (m *CreateVisitAnswersResponse) Reset()                    { *m = CreateVisitAnswersResponse{} }
func (*CreateVisitAnswersResponse) ProtoMessage()               {}
func (*CreateVisitAnswersResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{16} }

type GetAnswersForVisitRequest struct {
	VisitID              string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
	SerializedForPatient bool   `protobuf:"varint,2,opt,name=serialized_for_patient,proto3" json:"serialized_for_patient,omitempty"`
}

func (m *GetAnswersForVisitRequest) Reset()                    { *m = GetAnswersForVisitRequest{} }
func (*GetAnswersForVisitRequest) ProtoMessage()               {}
func (*GetAnswersForVisitRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{17} }

type GetAnswersForVisitResponse struct {
	PatientAnswersJSON string             `protobuf:"bytes,1,opt,name=patient_answers_json,proto3" json:"patient_answers_json,omitempty"`
	Answers            map[string]*Answer `protobuf:"bytes,2,rep,name=answers" json:"answers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetAnswersForVisitResponse) Reset()                    { *m = GetAnswersForVisitResponse{} }
func (*GetAnswersForVisitResponse) ProtoMessage()               {}
func (*GetAnswersForVisitResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{18} }

func (m *GetAnswersForVisitResponse) GetAnswers() map[string]*Answer {
	if m != nil {
		return m.Answers
	}
	return nil
}

type SubmitVisitRequest struct {
	VisitID string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
}

func (m *SubmitVisitRequest) Reset()                    { *m = SubmitVisitRequest{} }
func (*SubmitVisitRequest) ProtoMessage()               {}
func (*SubmitVisitRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{19} }

type SubmitVisitResponse struct {
}

func (m *SubmitVisitResponse) Reset()                    { *m = SubmitVisitResponse{} }
func (*SubmitVisitResponse) ProtoMessage()               {}
func (*SubmitVisitResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{20} }

type TriageVisitRequest struct {
	VisitID string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
}

func (m *TriageVisitRequest) Reset()                    { *m = TriageVisitRequest{} }
func (*TriageVisitRequest) ProtoMessage()               {}
func (*TriageVisitRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{21} }

type TriageVisitResponse struct {
}

func (m *TriageVisitResponse) Reset()                    { *m = TriageVisitResponse{} }
func (*TriageVisitResponse) ProtoMessage()               {}
func (*TriageVisitResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{22} }

type CarePlan struct {
	ID                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Treatments         []*CarePlanTreatment   `protobuf:"bytes,3,rep,name=treatments" json:"treatments,omitempty"`
	Instructions       []*CarePlanInstruction `protobuf:"bytes,4,rep,name=instructions" json:"instructions,omitempty"`
	CreatedTimestamp   uint64                 `protobuf:"varint,5,opt,name=created_timestamp,proto3" json:"created_timestamp,omitempty"`
	CreatorID          string                 `protobuf:"bytes,6,opt,name=creator_id,proto3" json:"creator_id,omitempty"`
	Submitted          bool                   `protobuf:"varint,7,opt,name=submitted,proto3" json:"submitted,omitempty"`
	ParentID           string                 `protobuf:"bytes,8,opt,name=parent_id,proto3" json:"parent_id,omitempty"`
	SubmittedTimestamp uint64                 `protobuf:"varint,9,opt,name=submitted_timestamp,proto3" json:"submitted_timestamp,omitempty"`
}

func (m *CarePlan) Reset()                    { *m = CarePlan{} }
func (*CarePlan) ProtoMessage()               {}
func (*CarePlan) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{23} }

func (m *CarePlan) GetTreatments() []*CarePlanTreatment {
	if m != nil {
		return m.Treatments
	}
	return nil
}

func (m *CarePlan) GetInstructions() []*CarePlanInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type CarePlanTreatment struct {
	EPrescribe           bool                           `protobuf:"varint,1,opt,name=ePrescribe,proto3" json:"ePrescribe,omitempty"`
	Availability         CarePlanTreatment_Availability `protobuf:"varint,2,opt,name=availability,proto3,enum=care.CarePlanTreatment_Availability" json:"availability,omitempty"`
	Name                 string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Route                string                         `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
	Form                 string                         `protobuf:"bytes,5,opt,name=form,proto3" json:"form,omitempty"`
	MedicationID         string                         `protobuf:"bytes,6,opt,name=medication_id,proto3" json:"medication_id,omitempty"`
	Dosage               string                         `protobuf:"bytes,7,opt,name=dosage,proto3" json:"dosage,omitempty"`
	DispenseType         string                         `protobuf:"bytes,8,opt,name=dispense_type,proto3" json:"dispense_type,omitempty"`
	DispenseNumber       uint32                         `protobuf:"varint,9,opt,name=dispense_number,proto3" json:"dispense_number,omitempty"`
	Refills              uint32                         `protobuf:"varint,10,opt,name=refills,proto3" json:"refills,omitempty"`
	SubstitutionsAllowed bool                           `protobuf:"varint,11,opt,name=substitutions_allowed,proto3" json:"substitutions_allowed,omitempty"`
	DaysSupply           uint32                         `protobuf:"varint,12,opt,name=days_supply,proto3" json:"days_supply,omitempty"`
	Sig                  string                         `protobuf:"bytes,13,opt,name=sig,proto3" json:"sig,omitempty"`
	PharmacyID           string                         `protobuf:"bytes,14,opt,name=pharmacy_id,proto3" json:"pharmacy_id,omitempty"`
	PharmacyInstructions string                         `protobuf:"bytes,15,opt,name=pharmacy_instructions,proto3" json:"pharmacy_instructions,omitempty"`
}

func (m *CarePlanTreatment) Reset()                    { *m = CarePlanTreatment{} }
func (*CarePlanTreatment) ProtoMessage()               {}
func (*CarePlanTreatment) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{24} }

type CarePlanInstruction struct {
	Title string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Steps []string `protobuf:"bytes,2,rep,name=steps" json:"steps,omitempty"`
}

func (m *CarePlanInstruction) Reset()                    { *m = CarePlanInstruction{} }
func (*CarePlanInstruction) ProtoMessage()               {}
func (*CarePlanInstruction) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{25} }

type CarePlanRequest struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CarePlanRequest) Reset()                    { *m = CarePlanRequest{} }
func (*CarePlanRequest) ProtoMessage()               {}
func (*CarePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{26} }

type CarePlanResponse struct {
	CarePlan *CarePlan `protobuf:"bytes,1,opt,name=care_plan" json:"care_plan,omitempty"`
}

func (m *CarePlanResponse) Reset()                    { *m = CarePlanResponse{} }
func (*CarePlanResponse) ProtoMessage()               {}
func (*CarePlanResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{27} }

func (m *CarePlanResponse) GetCarePlan() *CarePlan {
	if m != nil {
		return m.CarePlan
	}
	return nil
}

type CreateCarePlanRequest struct {
	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Treatments   []*CarePlanTreatment   `protobuf:"bytes,2,rep,name=treatments" json:"treatments,omitempty"`
	Instructions []*CarePlanInstruction `protobuf:"bytes,3,rep,name=instructions" json:"instructions,omitempty"`
	CreatorID    string                 `protobuf:"bytes,4,opt,name=creator_id,proto3" json:"creator_id,omitempty"`
}

func (m *CreateCarePlanRequest) Reset()                    { *m = CreateCarePlanRequest{} }
func (*CreateCarePlanRequest) ProtoMessage()               {}
func (*CreateCarePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{28} }

func (m *CreateCarePlanRequest) GetTreatments() []*CarePlanTreatment {
	if m != nil {
		return m.Treatments
	}
	return nil
}

func (m *CreateCarePlanRequest) GetInstructions() []*CarePlanInstruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type CreateCarePlanResponse struct {
	CarePlan *CarePlan `protobuf:"bytes,1,opt,name=care_plan" json:"care_plan,omitempty"`
}

func (m *CreateCarePlanResponse) Reset()                    { *m = CreateCarePlanResponse{} }
func (*CreateCarePlanResponse) ProtoMessage()               {}
func (*CreateCarePlanResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{29} }

func (m *CreateCarePlanResponse) GetCarePlan() *CarePlan {
	if m != nil {
		return m.CarePlan
	}
	return nil
}

type SubmitCarePlanRequest struct {
	ID       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID string `protobuf:"bytes,2,opt,name=parent_id,proto3" json:"parent_id,omitempty"`
}

func (m *SubmitCarePlanRequest) Reset()                    { *m = SubmitCarePlanRequest{} }
func (*SubmitCarePlanRequest) ProtoMessage()               {}
func (*SubmitCarePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{30} }

type SubmitCarePlanResponse struct {
	CarePlan *CarePlan `protobuf:"bytes,1,opt,name=care_plan" json:"care_plan,omitempty"`
}

func (m *SubmitCarePlanResponse) Reset()                    { *m = SubmitCarePlanResponse{} }
func (*SubmitCarePlanResponse) ProtoMessage()               {}
func (*SubmitCarePlanResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{31} }

func (m *SubmitCarePlanResponse) GetCarePlan() *CarePlan {
	if m != nil {
		return m.CarePlan
	}
	return nil
}

type Medication struct {
	ID        string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Route     string                `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	Form      string                `protobuf:"bytes,4,opt,name=form,proto3" json:"form,omitempty"`
	Strengths []*MedicationStrength `protobuf:"bytes,5,rep,name=strengths" json:"strengths,omitempty"`
}

func (m *Medication) Reset()                    { *m = Medication{} }
func (*Medication) ProtoMessage()               {}
func (*Medication) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{32} }

func (m *Medication) GetStrengths() []*MedicationStrength {
	if m != nil {
		return m.Strengths
	}
	return nil
}

type MedicationStrength struct {
	OTC               bool   `protobuf:"varint,1,opt,name=otc,proto3" json:"otc,omitempty"`
	Schedule          uint32 `protobuf:"varint,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Strength          string `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	DispenseUnit      string `protobuf:"bytes,4,opt,name=dispense_unit,proto3" json:"dispense_unit,omitempty"`
	GenericName       string `protobuf:"bytes,5,opt,name=generic_name,proto3" json:"generic_name,omitempty"`
	LexiGenProductID  uint64 `protobuf:"varint,6,opt,name=lexi_gen_product_id,proto3" json:"lexi_gen_product_id,omitempty"`
	LexiDrugSynID     uint64 `protobuf:"varint,7,opt,name=lexi_drug_syn_id,proto3" json:"lexi_drug_syn_id,omitempty"`
	LexiSynonymTypeID uint64 `protobuf:"varint,8,opt,name=lexi_synonym_type_id,proto3" json:"lexi_synonym_type_id,omitempty"`
	NDC               string `protobuf:"bytes,9,opt,name=ndc,proto3" json:"ndc,omitempty"`
}

func (m *MedicationStrength) Reset()                    { *m = MedicationStrength{} }
func (*MedicationStrength) ProtoMessage()               {}
func (*MedicationStrength) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{33} }

type SearchMedicationsRequest struct {
	ClinicID    uint64 `protobuf:"varint,1,opt,name=clinic_id,proto3" json:"clinic_id,omitempty"`
	ClinicianID uint64 `protobuf:"varint,2,opt,name=clinician_id,proto3" json:"clinician_id,omitempty"`
	Query       string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchMedicationsRequest) Reset()                    { *m = SearchMedicationsRequest{} }
func (*SearchMedicationsRequest) ProtoMessage()               {}
func (*SearchMedicationsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{34} }

type SearchMedicationsResponse struct {
	Medications []*Medication `protobuf:"bytes,1,rep,name=medications" json:"medications,omitempty"`
}

func (m *SearchMedicationsResponse) Reset()                    { *m = SearchMedicationsResponse{} }
func (*SearchMedicationsResponse) ProtoMessage()               {}
func (*SearchMedicationsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSvc, []int{35} }

func (m *SearchMedicationsResponse) GetMedications() []*Medication {
	if m != nil {
		return m.Medications
	}
	return nil
}

type SearchSelfReportedMedicationsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchSelfReportedMedicationsRequest) Reset()      { *m = SearchSelfReportedMedicationsRequest{} }
func (*SearchSelfReportedMedicationsRequest) ProtoMessage() {}
func (*SearchSelfReportedMedicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{36}
}

type SearchSelfReportedMedicationsResponse struct {
	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchSelfReportedMedicationsResponse) Reset()      { *m = SearchSelfReportedMedicationsResponse{} }
func (*SearchSelfReportedMedicationsResponse) ProtoMessage() {}
func (*SearchSelfReportedMedicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{37}
}

type SearchAllergyMedicationsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchAllergyMedicationsRequest) Reset()      { *m = SearchAllergyMedicationsRequest{} }
func (*SearchAllergyMedicationsRequest) ProtoMessage() {}
func (*SearchAllergyMedicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{38}
}

type SearchAllergyMedicationsResponse struct {
	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchAllergyMedicationsResponse) Reset()      { *m = SearchAllergyMedicationsResponse{} }
func (*SearchAllergyMedicationsResponse) ProtoMessage() {}
func (*SearchAllergyMedicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorSvc, []int{39}
}

func init() {
	proto.RegisterType((*Visit)(nil), "care.Visit")
	proto.RegisterType((*Visit_Preference)(nil), "care.Visit.Preference")
	proto.RegisterType((*Answer)(nil), "care.Answer")
	proto.RegisterType((*FreeTextAnswer)(nil), "care.FreeTextAnswer")
	proto.RegisterType((*MultipleChoiceAnswer)(nil), "care.MultipleChoiceAnswer")
	proto.RegisterType((*SingleSelectAnswer)(nil), "care.SingleSelectAnswer")
	proto.RegisterType((*SegmentedControlAnswer)(nil), "care.SegmentedControlAnswer")
	proto.RegisterType((*SingleEntryAnswer)(nil), "care.SingleEntryAnswer")
	proto.RegisterType((*AnswerOption)(nil), "care.AnswerOption")
	proto.RegisterType((*AutocompleteAnswerItem)(nil), "care.AutocompleteAnswerItem")
	proto.RegisterType((*AutocompleteAnswer)(nil), "care.AutocompleteAnswer")
	proto.RegisterType((*PhotoSectionAnswer)(nil), "care.PhotoSectionAnswer")
	proto.RegisterType((*PhotoSectionAnswer_PhotoSectionItem)(nil), "care.PhotoSectionAnswer.PhotoSectionItem")
	proto.RegisterType((*PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem)(nil), "care.PhotoSectionAnswer.PhotoSectionItem.PhotoSlotItem")
	proto.RegisterType((*CreateVisitRequest)(nil), "care.CreateVisitRequest")
	proto.RegisterType((*CreateVisitResponse)(nil), "care.CreateVisitResponse")
	proto.RegisterType((*GetVisitRequest)(nil), "care.GetVisitRequest")
	proto.RegisterType((*GetVisitResponse)(nil), "care.GetVisitResponse")
	proto.RegisterType((*CreateVisitAnswersRequest)(nil), "care.CreateVisitAnswersRequest")
	proto.RegisterType((*CreateVisitAnswersResponse)(nil), "care.CreateVisitAnswersResponse")
	proto.RegisterType((*GetAnswersForVisitRequest)(nil), "care.GetAnswersForVisitRequest")
	proto.RegisterType((*GetAnswersForVisitResponse)(nil), "care.GetAnswersForVisitResponse")
	proto.RegisterType((*SubmitVisitRequest)(nil), "care.SubmitVisitRequest")
	proto.RegisterType((*SubmitVisitResponse)(nil), "care.SubmitVisitResponse")
	proto.RegisterType((*TriageVisitRequest)(nil), "care.TriageVisitRequest")
	proto.RegisterType((*TriageVisitResponse)(nil), "care.TriageVisitResponse")
	proto.RegisterType((*CarePlan)(nil), "care.CarePlan")
	proto.RegisterType((*CarePlanTreatment)(nil), "care.CarePlanTreatment")
	proto.RegisterType((*CarePlanInstruction)(nil), "care.CarePlanInstruction")
	proto.RegisterType((*CarePlanRequest)(nil), "care.CarePlanRequest")
	proto.RegisterType((*CarePlanResponse)(nil), "care.CarePlanResponse")
	proto.RegisterType((*CreateCarePlanRequest)(nil), "care.CreateCarePlanRequest")
	proto.RegisterType((*CreateCarePlanResponse)(nil), "care.CreateCarePlanResponse")
	proto.RegisterType((*SubmitCarePlanRequest)(nil), "care.SubmitCarePlanRequest")
	proto.RegisterType((*SubmitCarePlanResponse)(nil), "care.SubmitCarePlanResponse")
	proto.RegisterType((*Medication)(nil), "care.Medication")
	proto.RegisterType((*MedicationStrength)(nil), "care.MedicationStrength")
	proto.RegisterType((*SearchMedicationsRequest)(nil), "care.SearchMedicationsRequest")
	proto.RegisterType((*SearchMedicationsResponse)(nil), "care.SearchMedicationsResponse")
	proto.RegisterType((*SearchSelfReportedMedicationsRequest)(nil), "care.SearchSelfReportedMedicationsRequest")
	proto.RegisterType((*SearchSelfReportedMedicationsResponse)(nil), "care.SearchSelfReportedMedicationsResponse")
	proto.RegisterType((*SearchAllergyMedicationsRequest)(nil), "care.SearchAllergyMedicationsRequest")
	proto.RegisterType((*SearchAllergyMedicationsResponse)(nil), "care.SearchAllergyMedicationsResponse")
	proto.RegisterEnum("care.CarePlanTreatment_Availability", CarePlanTreatment_Availability_name, CarePlanTreatment_Availability_value)
}
func (x CarePlanTreatment_Availability) String() string {
	s, ok := CarePlanTreatment_Availability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Visit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Visit)
	if !ok {
		that2, ok := that.(Visit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.LayoutVersionID != that1.LayoutVersionID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Submitted != that1.Submitted {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	if this.Triaged != that1.Triaged {
		return false
	}
	if !this.Preferences.Equal(that1.Preferences) {
		return false
	}
	return true
}
func (this *Visit_Preference) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Visit_Preference)
	if !ok {
		that2, ok := that.(Visit_Preference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OptionalTriage != that1.OptionalTriage {
		return false
	}
	return true
}
func (this *Answer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer)
	if !ok {
		that2, ok := that.(Answer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QuestionID != that1.QuestionID {
		return false
	}
	if that1.Answer == nil {
		if this.Answer != nil {
			return false
		}
	} else if this.Answer == nil {
		return false
	} else if !this.Answer.Equal(that1.Answer) {
		return false
	}
	return true
}
func (this *Answer_FreeText) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_FreeText)
	if !ok {
		that2, ok := that.(Answer_FreeText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FreeText.Equal(that1.FreeText) {
		return false
	}
	return true
}
func (this *Answer_MultipleChoice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_MultipleChoice)
	if !ok {
		that2, ok := that.(Answer_MultipleChoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MultipleChoice.Equal(that1.MultipleChoice) {
		return false
	}
	return true
}
func (this *Answer_SingleSelect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_SingleSelect)
	if !ok {
		that2, ok := that.(Answer_SingleSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SingleSelect.Equal(that1.SingleSelect) {
		return false
	}
	return true
}
func (this *Answer_Autocomplete) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_Autocomplete)
	if !ok {
		that2, ok := that.(Answer_Autocomplete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Autocomplete.Equal(that1.Autocomplete) {
		return false
	}
	return true
}
func (this *Answer_PhotoSection) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_PhotoSection)
	if !ok {
		that2, ok := that.(Answer_PhotoSection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PhotoSection.Equal(that1.PhotoSection) {
		return false
	}
	return true
}
func (this *Answer_SingleEntry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_SingleEntry)
	if !ok {
		that2, ok := that.(Answer_SingleEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SingleEntry.Equal(that1.SingleEntry) {
		return false
	}
	return true
}
func (this *Answer_SegmentedControl) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Answer_SegmentedControl)
	if !ok {
		that2, ok := that.(Answer_SegmentedControl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SegmentedControl.Equal(that1.SegmentedControl) {
		return false
	}
	return true
}
func (this *FreeTextAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FreeTextAnswer)
	if !ok {
		that2, ok := that.(FreeTextAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FreeText != that1.FreeText {
		return false
	}
	return true
}
func (this *MultipleChoiceAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MultipleChoiceAnswer)
	if !ok {
		that2, ok := that.(MultipleChoiceAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SelectedAnswers) != len(that1.SelectedAnswers) {
		return false
	}
	for i := range this.SelectedAnswers {
		if !this.SelectedAnswers[i].Equal(that1.SelectedAnswers[i]) {
			return false
		}
	}
	return true
}
func (this *SingleSelectAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SingleSelectAnswer)
	if !ok {
		that2, ok := that.(SingleSelectAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SelectedAnswer.Equal(that1.SelectedAnswer) {
		return false
	}
	return true
}
func (this *SegmentedControlAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SegmentedControlAnswer)
	if !ok {
		that2, ok := that.(SegmentedControlAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SelectedAnswer.Equal(that1.SelectedAnswer) {
		return false
	}
	return true
}
func (this *SingleEntryAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SingleEntryAnswer)
	if !ok {
		that2, ok := that.(SingleEntryAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FreeText != that1.FreeText {
		return false
	}
	return true
}
func (this *AnswerOption) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AnswerOption)
	if !ok {
		that2, ok := that.(AnswerOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.FreeText != that1.FreeText {
		return false
	}
	if len(this.SubAnswers) != len(that1.SubAnswers) {
		return false
	}
	for i := range this.SubAnswers {
		if !this.SubAnswers[i].Equal(that1.SubAnswers[i]) {
			return false
		}
	}
	return true
}
func (this *AutocompleteAnswerItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AutocompleteAnswerItem)
	if !ok {
		that2, ok := that.(AutocompleteAnswerItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Answer != that1.Answer {
		return false
	}
	if len(this.SubAnswers) != len(that1.SubAnswers) {
		return false
	}
	for i := range this.SubAnswers {
		if !this.SubAnswers[i].Equal(that1.SubAnswers[i]) {
			return false
		}
	}
	return true
}
func (this *AutocompleteAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AutocompleteAnswer)
	if !ok {
		that2, ok := that.(AutocompleteAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *PhotoSectionAnswer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PhotoSectionAnswer)
	if !ok {
		that2, ok := that.(PhotoSectionAnswer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	return true
}
func (this *PhotoSectionAnswer_PhotoSectionItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PhotoSectionAnswer_PhotoSectionItem)
	if !ok {
		that2, ok := that.(PhotoSectionAnswer_PhotoSectionItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Slots) != len(that1.Slots) {
		return false
	}
	for i := range this.Slots {
		if !this.Slots[i].Equal(that1.Slots[i]) {
			return false
		}
	}
	return true
}
func (this *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem)
	if !ok {
		that2, ok := that.(PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SlotID != that1.SlotID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MediaID != that1.MediaID {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *CreateVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitRequest)
	if !ok {
		that2, ok := that.(CreateVisitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LayoutVersionID != that1.LayoutVersionID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	return true
}
func (this *CreateVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitResponse)
	if !ok {
		that2, ok := that.(CreateVisitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *GetVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitRequest)
	if !ok {
		that2, ok := that.(GetVisitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *GetVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitResponse)
	if !ok {
		that2, ok := that.(GetVisitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *CreateVisitAnswersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitAnswersRequest)
	if !ok {
		that2, ok := that.(CreateVisitAnswersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.AnswersJSON != that1.AnswersJSON {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	return true
}
func (this *CreateVisitAnswersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitAnswersResponse)
	if !ok {
		that2, ok := that.(CreateVisitAnswersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAnswersForVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAnswersForVisitRequest)
	if !ok {
		that2, ok := that.(GetAnswersForVisitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.SerializedForPatient != that1.SerializedForPatient {
		return false
	}
	return true
}
func (this *GetAnswersForVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAnswersForVisitResponse)
	if !ok {
		that2, ok := that.(GetAnswersForVisitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PatientAnswersJSON != that1.PatientAnswersJSON {
		return false
	}
	if len(this.Answers) != len(that1.Answers) {
		return false
	}
	for i := range this.Answers {
		if !this.Answers[i].Equal(that1.Answers[i]) {
			return false
		}
	}
	return true
}
func (this *SubmitVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitVisitRequest)
	if !ok {
		that2, ok := that.(SubmitVisitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	return true
}
func (this *SubmitVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitVisitResponse)
	if !ok {
		that2, ok := that.(SubmitVisitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *TriageVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriageVisitRequest)
	if !ok {
		that2, ok := that.(TriageVisitRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	return true
}
func (this *TriageVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TriageVisitResponse)
	if !ok {
		that2, ok := that.(TriageVisitResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CarePlan) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlan)
	if !ok {
		that2, ok := that.(CarePlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Treatments) != len(that1.Treatments) {
		return false
	}
	for i := range this.Treatments {
		if !this.Treatments[i].Equal(that1.Treatments[i]) {
			return false
		}
	}
	if len(this.Instructions) != len(that1.Instructions) {
		return false
	}
	for i := range this.Instructions {
		if !this.Instructions[i].Equal(that1.Instructions[i]) {
			return false
		}
	}
	if this.CreatedTimestamp != that1.CreatedTimestamp {
		return false
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	if this.Submitted != that1.Submitted {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	if this.SubmittedTimestamp != that1.SubmittedTimestamp {
		return false
	}
	return true
}
func (this *CarePlanTreatment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanTreatment)
	if !ok {
		that2, ok := that.(CarePlanTreatment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EPrescribe != that1.EPrescribe {
		return false
	}
	if this.Availability != that1.Availability {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Route != that1.Route {
		return false
	}
	if this.Form != that1.Form {
		return false
	}
	if this.MedicationID != that1.MedicationID {
		return false
	}
	if this.Dosage != that1.Dosage {
		return false
	}
	if this.DispenseType != that1.DispenseType {
		return false
	}
	if this.DispenseNumber != that1.DispenseNumber {
		return false
	}
	if this.Refills != that1.Refills {
		return false
	}
	if this.SubstitutionsAllowed != that1.SubstitutionsAllowed {
		return false
	}
	if this.DaysSupply != that1.DaysSupply {
		return false
	}
	if this.Sig != that1.Sig {
		return false
	}
	if this.PharmacyID != that1.PharmacyID {
		return false
	}
	if this.PharmacyInstructions != that1.PharmacyInstructions {
		return false
	}
	return true
}
func (this *CarePlanInstruction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanInstruction)
	if !ok {
		that2, ok := that.(CarePlanInstruction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Steps) != len(that1.Steps) {
		return false
	}
	for i := range this.Steps {
		if this.Steps[i] != that1.Steps[i] {
			return false
		}
	}
	return true
}
func (this *CarePlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanRequest)
	if !ok {
		that2, ok := that.(CarePlanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *CarePlanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CarePlanResponse)
	if !ok {
		that2, ok := that.(CarePlanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *CreateCarePlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateCarePlanRequest)
	if !ok {
		that2, ok := that.(CreateCarePlanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Treatments) != len(that1.Treatments) {
		return false
	}
	for i := range this.Treatments {
		if !this.Treatments[i].Equal(that1.Treatments[i]) {
			return false
		}
	}
	if len(this.Instructions) != len(that1.Instructions) {
		return false
	}
	for i := range this.Instructions {
		if !this.Instructions[i].Equal(that1.Instructions[i]) {
			return false
		}
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	return true
}
func (this *CreateCarePlanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateCarePlanResponse)
	if !ok {
		that2, ok := that.(CreateCarePlanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *SubmitCarePlanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitCarePlanRequest)
	if !ok {
		that2, ok := that.(SubmitCarePlanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ParentID != that1.ParentID {
		return false
	}
	return true
}
func (this *SubmitCarePlanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitCarePlanResponse)
	if !ok {
		that2, ok := that.(SubmitCarePlanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CarePlan.Equal(that1.CarePlan) {
		return false
	}
	return true
}
func (this *Medication) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Medication)
	if !ok {
		that2, ok := that.(Medication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Route != that1.Route {
		return false
	}
	if this.Form != that1.Form {
		return false
	}
	if len(this.Strengths) != len(that1.Strengths) {
		return false
	}
	for i := range this.Strengths {
		if !this.Strengths[i].Equal(that1.Strengths[i]) {
			return false
		}
	}
	return true
}
func (this *MedicationStrength) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MedicationStrength)
	if !ok {
		that2, ok := that.(MedicationStrength)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OTC != that1.OTC {
		return false
	}
	if this.Schedule != that1.Schedule {
		return false
	}
	if this.Strength != that1.Strength {
		return false
	}
	if this.DispenseUnit != that1.DispenseUnit {
		return false
	}
	if this.GenericName != that1.GenericName {
		return false
	}
	if this.LexiGenProductID != that1.LexiGenProductID {
		return false
	}
	if this.LexiDrugSynID != that1.LexiDrugSynID {
		return false
	}
	if this.LexiSynonymTypeID != that1.LexiSynonymTypeID {
		return false
	}
	if this.NDC != that1.NDC {
		return false
	}
	return true
}
func (this *SearchMedicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchMedicationsRequest)
	if !ok {
		that2, ok := that.(SearchMedicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ClinicID != that1.ClinicID {
		return false
	}
	if this.ClinicianID != that1.ClinicianID {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *SearchMedicationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchMedicationsResponse)
	if !ok {
		that2, ok := that.(SearchMedicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Medications) != len(that1.Medications) {
		return false
	}
	for i := range this.Medications {
		if !this.Medications[i].Equal(that1.Medications[i]) {
			return false
		}
	}
	return true
}
func (this *SearchSelfReportedMedicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchSelfReportedMedicationsRequest)
	if !ok {
		that2, ok := that.(SearchSelfReportedMedicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *SearchSelfReportedMedicationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchSelfReportedMedicationsResponse)
	if !ok {
		that2, ok := that.(SearchSelfReportedMedicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if this.Results[i] != that1.Results[i] {
			return false
		}
	}
	return true
}
func (this *SearchAllergyMedicationsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAllergyMedicationsRequest)
	if !ok {
		that2, ok := that.(SearchAllergyMedicationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *SearchAllergyMedicationsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SearchAllergyMedicationsResponse)
	if !ok {
		that2, ok := that.(SearchAllergyMedicationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if this.Results[i] != that1.Results[i] {
			return false
		}
	}
	return true
}
func (this *Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&care.Visit{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "LayoutVersionID: "+fmt.Sprintf("%#v", this.LayoutVersionID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Submitted: "+fmt.Sprintf("%#v", this.Submitted)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	s = append(s, "Triaged: "+fmt.Sprintf("%#v", this.Triaged)+",\n")
	if this.Preferences != nil {
		s = append(s, "Preferences: "+fmt.Sprintf("%#v", this.Preferences)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Visit_Preference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.Visit_Preference{")
	s = append(s, "OptionalTriage: "+fmt.Sprintf("%#v", this.OptionalTriage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Answer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&care.Answer{")
	s = append(s, "QuestionID: "+fmt.Sprintf("%#v", this.QuestionID)+",\n")
	if this.Answer != nil {
		s = append(s, "Answer: "+fmt.Sprintf("%#v", this.Answer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Answer_FreeText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_FreeText{` +
		`FreeText:` + fmt.Sprintf("%#v", this.FreeText) + `}`}, ", ")
	return s
}
func (this *Answer_MultipleChoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_MultipleChoice{` +
		`MultipleChoice:` + fmt.Sprintf("%#v", this.MultipleChoice) + `}`}, ", ")
	return s
}
func (this *Answer_SingleSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_SingleSelect{` +
		`SingleSelect:` + fmt.Sprintf("%#v", this.SingleSelect) + `}`}, ", ")
	return s
}
func (this *Answer_Autocomplete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_Autocomplete{` +
		`Autocomplete:` + fmt.Sprintf("%#v", this.Autocomplete) + `}`}, ", ")
	return s
}
func (this *Answer_PhotoSection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_PhotoSection{` +
		`PhotoSection:` + fmt.Sprintf("%#v", this.PhotoSection) + `}`}, ", ")
	return s
}
func (this *Answer_SingleEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_SingleEntry{` +
		`SingleEntry:` + fmt.Sprintf("%#v", this.SingleEntry) + `}`}, ", ")
	return s
}
func (this *Answer_SegmentedControl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&care.Answer_SegmentedControl{` +
		`SegmentedControl:` + fmt.Sprintf("%#v", this.SegmentedControl) + `}`}, ", ")
	return s
}
func (this *FreeTextAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.FreeTextAnswer{")
	s = append(s, "FreeText: "+fmt.Sprintf("%#v", this.FreeText)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MultipleChoiceAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.MultipleChoiceAnswer{")
	if this.SelectedAnswers != nil {
		s = append(s, "SelectedAnswers: "+fmt.Sprintf("%#v", this.SelectedAnswers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SingleSelectAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SingleSelectAnswer{")
	if this.SelectedAnswer != nil {
		s = append(s, "SelectedAnswer: "+fmt.Sprintf("%#v", this.SelectedAnswer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentedControlAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SegmentedControlAnswer{")
	if this.SelectedAnswer != nil {
		s = append(s, "SelectedAnswer: "+fmt.Sprintf("%#v", this.SelectedAnswer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SingleEntryAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SingleEntryAnswer{")
	s = append(s, "FreeText: "+fmt.Sprintf("%#v", this.FreeText)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AnswerOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&care.AnswerOption{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "FreeText: "+fmt.Sprintf("%#v", this.FreeText)+",\n")
	keysForSubAnswers := make([]string, 0, len(this.SubAnswers))
	for k, _ := range this.SubAnswers {
		keysForSubAnswers = append(keysForSubAnswers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAnswers)
	mapStringForSubAnswers := "map[string]*Answer{"
	for _, k := range keysForSubAnswers {
		mapStringForSubAnswers += fmt.Sprintf("%#v: %#v,", k, this.SubAnswers[k])
	}
	mapStringForSubAnswers += "}"
	if this.SubAnswers != nil {
		s = append(s, "SubAnswers: "+mapStringForSubAnswers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteAnswerItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.AutocompleteAnswerItem{")
	s = append(s, "Answer: "+fmt.Sprintf("%#v", this.Answer)+",\n")
	keysForSubAnswers := make([]string, 0, len(this.SubAnswers))
	for k, _ := range this.SubAnswers {
		keysForSubAnswers = append(keysForSubAnswers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAnswers)
	mapStringForSubAnswers := "map[string]*Answer{"
	for _, k := range keysForSubAnswers {
		mapStringForSubAnswers += fmt.Sprintf("%#v: %#v,", k, this.SubAnswers[k])
	}
	mapStringForSubAnswers += "}"
	if this.SubAnswers != nil {
		s = append(s, "SubAnswers: "+mapStringForSubAnswers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutocompleteAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.AutocompleteAnswer{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhotoSectionAnswer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.PhotoSectionAnswer{")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhotoSectionAnswer_PhotoSectionItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.PhotoSectionAnswer_PhotoSectionItem{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Slots != nil {
		s = append(s, "Slots: "+fmt.Sprintf("%#v", this.Slots)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&care.PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem{")
	s = append(s, "SlotID: "+fmt.Sprintf("%#v", this.SlotID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MediaID: "+fmt.Sprintf("%#v", this.MediaID)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&care.CreateVisitRequest{")
	s = append(s, "LayoutVersionID: "+fmt.Sprintf("%#v", this.LayoutVersionID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CreateVisitResponse{")
	if this.Visit != nil {
		s = append(s, "Visit: "+fmt.Sprintf("%#v", this.Visit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetVisitRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetVisitResponse{")
	if this.Visit != nil {
		s = append(s, "Visit: "+fmt.Sprintf("%#v", this.Visit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitAnswersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&care.CreateVisitAnswersRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "AnswersJSON: "+fmt.Sprintf("%#v", this.AnswersJSON)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitAnswersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.CreateVisitAnswersResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAnswersForVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.GetAnswersForVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "SerializedForPatient: "+fmt.Sprintf("%#v", this.SerializedForPatient)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAnswersForVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.GetAnswersForVisitResponse{")
	s = append(s, "PatientAnswersJSON: "+fmt.Sprintf("%#v", this.PatientAnswersJSON)+",\n")
	keysForAnswers := make([]string, 0, len(this.Answers))
	for k, _ := range this.Answers {
		keysForAnswers = append(keysForAnswers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnswers)
	mapStringForAnswers := "map[string]*Answer{"
	for _, k := range keysForAnswers {
		mapStringForAnswers += fmt.Sprintf("%#v: %#v,", k, this.Answers[k])
	}
	mapStringForAnswers += "}"
	if this.Answers != nil {
		s = append(s, "Answers: "+mapStringForAnswers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SubmitVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.SubmitVisitResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriageVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.TriageVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriageVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.TriageVisitResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&care.CarePlan{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Treatments != nil {
		s = append(s, "Treatments: "+fmt.Sprintf("%#v", this.Treatments)+",\n")
	}
	if this.Instructions != nil {
		s = append(s, "Instructions: "+fmt.Sprintf("%#v", this.Instructions)+",\n")
	}
	s = append(s, "CreatedTimestamp: "+fmt.Sprintf("%#v", this.CreatedTimestamp)+",\n")
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	s = append(s, "Submitted: "+fmt.Sprintf("%#v", this.Submitted)+",\n")
	s = append(s, "ParentID: "+fmt.Sprintf("%#v", this.ParentID)+",\n")
	s = append(s, "SubmittedTimestamp: "+fmt.Sprintf("%#v", this.SubmittedTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanTreatment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&care.CarePlanTreatment{")
	s = append(s, "EPrescribe: "+fmt.Sprintf("%#v", this.EPrescribe)+",\n")
	s = append(s, "Availability: "+fmt.Sprintf("%#v", this.Availability)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Route: "+fmt.Sprintf("%#v", this.Route)+",\n")
	s = append(s, "Form: "+fmt.Sprintf("%#v", this.Form)+",\n")
	s = append(s, "MedicationID: "+fmt.Sprintf("%#v", this.MedicationID)+",\n")
	s = append(s, "Dosage: "+fmt.Sprintf("%#v", this.Dosage)+",\n")
	s = append(s, "DispenseType: "+fmt.Sprintf("%#v", this.DispenseType)+",\n")
	s = append(s, "DispenseNumber: "+fmt.Sprintf("%#v", this.DispenseNumber)+",\n")
	s = append(s, "Refills: "+fmt.Sprintf("%#v", this.Refills)+",\n")
	s = append(s, "SubstitutionsAllowed: "+fmt.Sprintf("%#v", this.SubstitutionsAllowed)+",\n")
	s = append(s, "DaysSupply: "+fmt.Sprintf("%#v", this.DaysSupply)+",\n")
	s = append(s, "Sig: "+fmt.Sprintf("%#v", this.Sig)+",\n")
	s = append(s, "PharmacyID: "+fmt.Sprintf("%#v", this.PharmacyID)+",\n")
	s = append(s, "PharmacyInstructions: "+fmt.Sprintf("%#v", this.PharmacyInstructions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanInstruction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.CarePlanInstruction{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Steps: "+fmt.Sprintf("%#v", this.Steps)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CarePlanRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CarePlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CarePlanResponse{")
	if this.CarePlan != nil {
		s = append(s, "CarePlan: "+fmt.Sprintf("%#v", this.CarePlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCarePlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&care.CreateCarePlanRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Treatments != nil {
		s = append(s, "Treatments: "+fmt.Sprintf("%#v", this.Treatments)+",\n")
	}
	if this.Instructions != nil {
		s = append(s, "Instructions: "+fmt.Sprintf("%#v", this.Instructions)+",\n")
	}
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCarePlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CreateCarePlanResponse{")
	if this.CarePlan != nil {
		s = append(s, "CarePlan: "+fmt.Sprintf("%#v", this.CarePlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitCarePlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&care.SubmitCarePlanRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ParentID: "+fmt.Sprintf("%#v", this.ParentID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitCarePlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SubmitCarePlanResponse{")
	if this.CarePlan != nil {
		s = append(s, "CarePlan: "+fmt.Sprintf("%#v", this.CarePlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Medication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&care.Medication{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Route: "+fmt.Sprintf("%#v", this.Route)+",\n")
	s = append(s, "Form: "+fmt.Sprintf("%#v", this.Form)+",\n")
	if this.Strengths != nil {
		s = append(s, "Strengths: "+fmt.Sprintf("%#v", this.Strengths)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MedicationStrength) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&care.MedicationStrength{")
	s = append(s, "OTC: "+fmt.Sprintf("%#v", this.OTC)+",\n")
	s = append(s, "Schedule: "+fmt.Sprintf("%#v", this.Schedule)+",\n")
	s = append(s, "Strength: "+fmt.Sprintf("%#v", this.Strength)+",\n")
	s = append(s, "DispenseUnit: "+fmt.Sprintf("%#v", this.DispenseUnit)+",\n")
	s = append(s, "GenericName: "+fmt.Sprintf("%#v", this.GenericName)+",\n")
	s = append(s, "LexiGenProductID: "+fmt.Sprintf("%#v", this.LexiGenProductID)+",\n")
	s = append(s, "LexiDrugSynID: "+fmt.Sprintf("%#v", this.LexiDrugSynID)+",\n")
	s = append(s, "LexiSynonymTypeID: "+fmt.Sprintf("%#v", this.LexiSynonymTypeID)+",\n")
	s = append(s, "NDC: "+fmt.Sprintf("%#v", this.NDC)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchMedicationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&care.SearchMedicationsRequest{")
	s = append(s, "ClinicID: "+fmt.Sprintf("%#v", this.ClinicID)+",\n")
	s = append(s, "ClinicianID: "+fmt.Sprintf("%#v", this.ClinicianID)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchMedicationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SearchMedicationsResponse{")
	if this.Medications != nil {
		s = append(s, "Medications: "+fmt.Sprintf("%#v", this.Medications)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchSelfReportedMedicationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SearchSelfReportedMedicationsRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchSelfReportedMedicationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SearchSelfReportedMedicationsResponse{")
	s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAllergyMedicationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SearchAllergyMedicationsRequest{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAllergyMedicationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SearchAllergyMedicationsResponse{")
	s = append(s, "Results: "+fmt.Sprintf("%#v", this.Results)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Care service

type CareClient interface {
	CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitResponse, error)
	GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitResponse, error)
	CreateVisitAnswers(ctx context.Context, in *CreateVisitAnswersRequest, opts ...grpc.CallOption) (*CreateVisitAnswersResponse, error)
	GetAnswersForVisit(ctx context.Context, in *GetAnswersForVisitRequest, opts ...grpc.CallOption) (*GetAnswersForVisitResponse, error)
	SubmitVisit(ctx context.Context, in *SubmitVisitRequest, opts ...grpc.CallOption) (*SubmitVisitResponse, error)
	TriageVisit(ctx context.Context, in *TriageVisitRequest, opts ...grpc.CallOption) (*TriageVisitResponse, error)
	// CarePlan returns a care plan by its ID
	CarePlan(ctx context.Context, in *CarePlanRequest, opts ...grpc.CallOption) (*CarePlanResponse, error)
	// CreateCarePlan creates a new care plan
	CreateCarePlan(ctx context.Context, in *CreateCarePlanRequest, opts ...grpc.CallOption) (*CreateCarePlanResponse, error)
	// SubmitCarePlan submits a care plan and attaches it to a parent, it can only be called once per care plan.
	// Any Rx attached to the care plan will be submitted at this point.
	SubmitCarePlan(ctx context.Context, in *SubmitCarePlanRequest, opts ...grpc.CallOption) (*SubmitCarePlanResponse, error)
	// SearchMedication
	SearchMedications(ctx context.Context, in *SearchMedicationsRequest, opts ...grpc.CallOption) (*SearchMedicationsResponse, error)
	// SearchSelfReportedMedications does a search for self reported medication names based on specified query.
	SearchSelfReportedMedications(ctx context.Context, in *SearchSelfReportedMedicationsRequest, opts ...grpc.CallOption) (*SearchSelfReportedMedicationsResponse, error)
	// SearchAllergyMedications does a search against the drug database for allergy medications based on the specified query.
	SearchAllergyMedications(ctx context.Context, in *SearchAllergyMedicationsRequest, opts ...grpc.CallOption) (*SearchAllergyMedicationsResponse, error)
}

type careClient struct {
	cc *grpc.ClientConn
}

func NewCareClient(cc *grpc.ClientConn) CareClient {
	return &careClient{cc}
}

func (c *careClient) CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitResponse, error) {
	out := new(CreateVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitResponse, error) {
	out := new(GetVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/GetVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CreateVisitAnswers(ctx context.Context, in *CreateVisitAnswersRequest, opts ...grpc.CallOption) (*CreateVisitAnswersResponse, error) {
	out := new(CreateVisitAnswersResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateVisitAnswers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) GetAnswersForVisit(ctx context.Context, in *GetAnswersForVisitRequest, opts ...grpc.CallOption) (*GetAnswersForVisitResponse, error) {
	out := new(GetAnswersForVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/GetAnswersForVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SubmitVisit(ctx context.Context, in *SubmitVisitRequest, opts ...grpc.CallOption) (*SubmitVisitResponse, error) {
	out := new(SubmitVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/SubmitVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) TriageVisit(ctx context.Context, in *TriageVisitRequest, opts ...grpc.CallOption) (*TriageVisitResponse, error) {
	out := new(TriageVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/TriageVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CarePlan(ctx context.Context, in *CarePlanRequest, opts ...grpc.CallOption) (*CarePlanResponse, error) {
	out := new(CarePlanResponse)
	err := grpc.Invoke(ctx, "/care.Care/CarePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CreateCarePlan(ctx context.Context, in *CreateCarePlanRequest, opts ...grpc.CallOption) (*CreateCarePlanResponse, error) {
	out := new(CreateCarePlanResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateCarePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SubmitCarePlan(ctx context.Context, in *SubmitCarePlanRequest, opts ...grpc.CallOption) (*SubmitCarePlanResponse, error) {
	out := new(SubmitCarePlanResponse)
	err := grpc.Invoke(ctx, "/care.Care/SubmitCarePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SearchMedications(ctx context.Context, in *SearchMedicationsRequest, opts ...grpc.CallOption) (*SearchMedicationsResponse, error) {
	out := new(SearchMedicationsResponse)
	err := grpc.Invoke(ctx, "/care.Care/SearchMedications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SearchSelfReportedMedications(ctx context.Context, in *SearchSelfReportedMedicationsRequest, opts ...grpc.CallOption) (*SearchSelfReportedMedicationsResponse, error) {
	out := new(SearchSelfReportedMedicationsResponse)
	err := grpc.Invoke(ctx, "/care.Care/SearchSelfReportedMedications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SearchAllergyMedications(ctx context.Context, in *SearchAllergyMedicationsRequest, opts ...grpc.CallOption) (*SearchAllergyMedicationsResponse, error) {
	out := new(SearchAllergyMedicationsResponse)
	err := grpc.Invoke(ctx, "/care.Care/SearchAllergyMedications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Care service

type CareServer interface {
	CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitResponse, error)
	GetVisit(context.Context, *GetVisitRequest) (*GetVisitResponse, error)
	CreateVisitAnswers(context.Context, *CreateVisitAnswersRequest) (*CreateVisitAnswersResponse, error)
	GetAnswersForVisit(context.Context, *GetAnswersForVisitRequest) (*GetAnswersForVisitResponse, error)
	SubmitVisit(context.Context, *SubmitVisitRequest) (*SubmitVisitResponse, error)
	TriageVisit(context.Context, *TriageVisitRequest) (*TriageVisitResponse, error)
	// CarePlan returns a care plan by its ID
	CarePlan(context.Context, *CarePlanRequest) (*CarePlanResponse, error)
	// CreateCarePlan creates a new care plan
	CreateCarePlan(context.Context, *CreateCarePlanRequest) (*CreateCarePlanResponse, error)
	// SubmitCarePlan submits a care plan and attaches it to a parent, it can only be called once per care plan.
	// Any Rx attached to the care plan will be submitted at this point.
	SubmitCarePlan(context.Context, *SubmitCarePlanRequest) (*SubmitCarePlanResponse, error)
	// SearchMedication
	SearchMedications(context.Context, *SearchMedicationsRequest) (*SearchMedicationsResponse, error)
	// SearchSelfReportedMedications does a search for self reported medication names based on specified query.
	SearchSelfReportedMedications(context.Context, *SearchSelfReportedMedicationsRequest) (*SearchSelfReportedMedicationsResponse, error)
	// SearchAllergyMedications does a search against the drug database for allergy medications based on the specified query.
	SearchAllergyMedications(context.Context, *SearchAllergyMedicationsRequest) (*SearchAllergyMedicationsResponse, error)
}

func RegisterCareServer(s *grpc.Server, srv CareServer) {
	s.RegisterService(&_Care_serviceDesc, srv)
}

func _Care_CreateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).CreateVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/CreateVisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).CreateVisit(ctx, req.(*CreateVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_GetVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).GetVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/GetVisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).GetVisit(ctx, req.(*GetVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_CreateVisitAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVisitAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).CreateVisitAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/CreateVisitAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).CreateVisitAnswers(ctx, req.(*CreateVisitAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_GetAnswersForVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswersForVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).GetAnswersForVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/GetAnswersForVisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).GetAnswersForVisit(ctx, req.(*GetAnswersForVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_SubmitVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).SubmitVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/SubmitVisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).SubmitVisit(ctx, req.(*SubmitVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_TriageVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriageVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).TriageVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/TriageVisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).TriageVisit(ctx, req.(*TriageVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_CarePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).CarePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/CarePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).CarePlan(ctx, req.(*CarePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_CreateCarePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).CreateCarePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/CreateCarePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).CreateCarePlan(ctx, req.(*CreateCarePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_SubmitCarePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCarePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).SubmitCarePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/SubmitCarePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).SubmitCarePlan(ctx, req.(*SubmitCarePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_SearchMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).SearchMedications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/SearchMedications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).SearchMedications(ctx, req.(*SearchMedicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_SearchSelfReportedMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSelfReportedMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).SearchSelfReportedMedications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/SearchSelfReportedMedications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).SearchSelfReportedMedications(ctx, req.(*SearchSelfReportedMedicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Care_SearchAllergyMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAllergyMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CareServer).SearchAllergyMedications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/care.Care/SearchAllergyMedications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CareServer).SearchAllergyMedications(ctx, req.(*SearchAllergyMedicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Care_serviceDesc = grpc.ServiceDesc{
	ServiceName: "care.Care",
	HandlerType: (*CareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVisit",
			Handler:    _Care_CreateVisit_Handler,
		},
		{
			MethodName: "GetVisit",
			Handler:    _Care_GetVisit_Handler,
		},
		{
			MethodName: "CreateVisitAnswers",
			Handler:    _Care_CreateVisitAnswers_Handler,
		},
		{
			MethodName: "GetAnswersForVisit",
			Handler:    _Care_GetAnswersForVisit_Handler,
		},
		{
			MethodName: "SubmitVisit",
			Handler:    _Care_SubmitVisit_Handler,
		},
		{
			MethodName: "TriageVisit",
			Handler:    _Care_TriageVisit_Handler,
		},
		{
			MethodName: "CarePlan",
			Handler:    _Care_CarePlan_Handler,
		},
		{
			MethodName: "CreateCarePlan",
			Handler:    _Care_CreateCarePlan_Handler,
		},
		{
			MethodName: "SubmitCarePlan",
			Handler:    _Care_SubmitCarePlan_Handler,
		},
		{
			MethodName: "SearchMedications",
			Handler:    _Care_SearchMedications_Handler,
		},
		{
			MethodName: "SearchSelfReportedMedications",
			Handler:    _Care_SearchSelfReportedMedications_Handler,
		},
		{
			MethodName: "SearchAllergyMedications",
			Handler:    _Care_SearchAllergyMedications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Visit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Visit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.LayoutVersionID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LayoutVersionID)))
		i += copy(data[i:], m.LayoutVersionID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Submitted {
		data[i] = 0x28
		i++
		if m.Submitted {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.CreatorID) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CreatorID)))
		i += copy(data[i:], m.CreatorID)
	}
	if m.Triaged {
		data[i] = 0x40
		i++
		if m.Triaged {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Preferences != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Preferences.Size()))
		n1, err := m.Preferences.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Visit_Preference) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Visit_Preference) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OptionalTriage {
		data[i] = 0x8
		i++
		if m.OptionalTriage {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Answer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Answer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QuestionID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.QuestionID)))
		i += copy(data[i:], m.QuestionID)
	}
	if m.Answer != nil {
		nn2, err := m.Answer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Answer_FreeText) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.FreeText != nil {
		data[i] = 0x52
		i++
		i = encodeVarintSvc(data, i, uint64(m.FreeText.Size()))
		n3, err := m.FreeText.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Answer_MultipleChoice) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.MultipleChoice != nil {
		data[i] = 0x5a
		i++
		i = encodeVarintSvc(data, i, uint64(m.MultipleChoice.Size()))
		n4, err := m.MultipleChoice.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Answer_SingleSelect) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SingleSelect != nil {
		data[i] = 0x62
		i++
		i = encodeVarintSvc(data, i, uint64(m.SingleSelect.Size()))
		n5, err := m.SingleSelect.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Answer_Autocomplete) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.Autocomplete != nil {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(m.Autocomplete.Size()))
		n6, err := m.Autocomplete.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Answer_PhotoSection) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.PhotoSection != nil {
		data[i] = 0x72
		i++
		i = encodeVarintSvc(data, i, uint64(m.PhotoSection.Size()))
		n7, err := m.PhotoSection.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Answer_SingleEntry) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SingleEntry != nil {
		data[i] = 0x7a
		i++
		i = encodeVarintSvc(data, i, uint64(m.SingleEntry.Size()))
		n8, err := m.SingleEntry.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Answer_SegmentedControl) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.SegmentedControl != nil {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintSvc(data, i, uint64(m.SegmentedControl.Size()))
		n9, err := m.SegmentedControl.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *FreeTextAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FreeTextAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FreeText) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FreeText)))
		i += copy(data[i:], m.FreeText)
	}
	return i, nil
}

func (m *MultipleChoiceAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MultipleChoiceAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SelectedAnswers) > 0 {
		for _, msg := range m.SelectedAnswers {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SingleSelectAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SingleSelectAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelectedAnswer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.SelectedAnswer.Size()))
		n10, err := m.SelectedAnswer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *SegmentedControlAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SegmentedControlAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelectedAnswer != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.SelectedAnswer.Size()))
		n11, err := m.SelectedAnswer.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *SingleEntryAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SingleEntryAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FreeText) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FreeText)))
		i += copy(data[i:], m.FreeText)
	}
	return i, nil
}

func (m *AnswerOption) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AnswerOption) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.FreeText) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.FreeText)))
		i += copy(data[i:], m.FreeText)
	}
	if len(m.SubAnswers) > 0 {
		for k, _ := range m.SubAnswers {
			data[i] = 0x1a
			i++
			v := m.SubAnswers[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + msgSize + sovSvc(uint64(msgSize))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(v.Size()))
			n12, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n12
		}
	}
	return i, nil
}

func (m *AutocompleteAnswerItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AutocompleteAnswerItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Answer) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Answer)))
		i += copy(data[i:], m.Answer)
	}
	if len(m.SubAnswers) > 0 {
		for k, _ := range m.SubAnswers {
			data[i] = 0x12
			i++
			v := m.SubAnswers[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + msgSize + sovSvc(uint64(msgSize))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(v.Size()))
			n13, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n13
		}
	}
	return i, nil
}

func (m *AutocompleteAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AutocompleteAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PhotoSectionAnswer) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PhotoSectionAnswer) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PhotoSectionAnswer_PhotoSectionItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PhotoSectionAnswer_PhotoSectionItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Slots) > 0 {
		for _, msg := range m.Slots {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SlotID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.SlotID)))
		i += copy(data[i:], m.SlotID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.MediaID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MediaID)))
		i += copy(data[i:], m.MediaID)
	}
	if len(m.URL) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.URL)))
		i += copy(data[i:], m.URL)
	}
	return i, nil
}

func (m *CreateVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LayoutVersionID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LayoutVersionID)))
		i += copy(data[i:], m.LayoutVersionID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	if len(m.CreatorID) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CreatorID)))
		i += copy(data[i:], m.CreatorID)
	}
	return i, nil
}

func (m *CreateVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n14, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *GetVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *GetVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n15, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *CreateVisitAnswersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitAnswersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	if len(m.AnswersJSON) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AnswersJSON)))
		i += copy(data[i:], m.AnswersJSON)
	}
	if len(m.ActorEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	return i, nil
}

func (m *CreateVisitAnswersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitAnswersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAnswersForVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAnswersForVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	if m.SerializedForPatient {
		data[i] = 0x10
		i++
		if m.SerializedForPatient {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetAnswersForVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAnswersForVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PatientAnswersJSON) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PatientAnswersJSON)))
		i += copy(data[i:], m.PatientAnswersJSON)
	}
	if len(m.Answers) > 0 {
		for k, _ := range m.Answers {
			data[i] = 0x12
			i++
			v := m.Answers[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + msgSize + sovSvc(uint64(msgSize))
			i = encodeVarintSvc(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(v.Size()))
			n16, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n16
		}
	}
	return i, nil
}

func (m *SubmitVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	return i, nil
}

func (m *SubmitVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TriageVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TriageVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	return i, nil
}

func (m *TriageVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TriageVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CarePlan) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlan) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Treatments) > 0 {
		for _, msg := range m.Treatments {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Instructions) > 0 {
		for _, msg := range m.Instructions {
			data[i] = 0x22
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CreatedTimestamp != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintSvc(data, i, uint64(m.CreatedTimestamp))
	}
	if len(m.CreatorID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CreatorID)))
		i += copy(data[i:], m.CreatorID)
	}
	if m.Submitted {
		data[i] = 0x38
		i++
		if m.Submitted {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.ParentID) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ParentID)))
		i += copy(data[i:], m.ParentID)
	}
	if m.SubmittedTimestamp != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.SubmittedTimestamp))
	}
	return i, nil
}

func (m *CarePlanTreatment) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanTreatment) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EPrescribe {
		data[i] = 0x8
		i++
		if m.EPrescribe {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Availability != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Availability))
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Route) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Route)))
		i += copy(data[i:], m.Route)
	}
	if len(m.Form) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Form)))
		i += copy(data[i:], m.Form)
	}
	if len(m.MedicationID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.MedicationID)))
		i += copy(data[i:], m.MedicationID)
	}
	if len(m.Dosage) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Dosage)))
		i += copy(data[i:], m.Dosage)
	}
	if len(m.DispenseType) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DispenseType)))
		i += copy(data[i:], m.DispenseType)
	}
	if m.DispenseNumber != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintSvc(data, i, uint64(m.DispenseNumber))
	}
	if m.Refills != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintSvc(data, i, uint64(m.Refills))
	}
	if m.SubstitutionsAllowed {
		data[i] = 0x58
		i++
		if m.SubstitutionsAllowed {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.DaysSupply != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintSvc(data, i, uint64(m.DaysSupply))
	}
	if len(m.Sig) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Sig)))
		i += copy(data[i:], m.Sig)
	}
	if len(m.PharmacyID) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PharmacyID)))
		i += copy(data[i:], m.PharmacyID)
	}
	if len(m.PharmacyInstructions) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.PharmacyInstructions)))
		i += copy(data[i:], m.PharmacyInstructions)
	}
	return i, nil
}

func (m *CarePlanInstruction) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanInstruction) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Steps) > 0 {
		for _, s := range m.Steps {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CarePlanRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *CarePlanResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CarePlanResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarePlan != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n17, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *CreateCarePlanRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateCarePlanRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Treatments) > 0 {
		for _, msg := range m.Treatments {
			data[i] = 0x12
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Instructions) > 0 {
		for _, msg := range m.Instructions {
			data[i] = 0x1a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CreatorID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.CreatorID)))
		i += copy(data[i:], m.CreatorID)
	}
	return i, nil
}

func (m *CreateCarePlanResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateCarePlanResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarePlan != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n18, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *SubmitCarePlanRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitCarePlanRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.ParentID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ParentID)))
		i += copy(data[i:], m.ParentID)
	}
	return i, nil
}

func (m *SubmitCarePlanResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitCarePlanResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CarePlan != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.CarePlan.Size()))
		n19, err := m.CarePlan.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *Medication) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Medication) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Route) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Route)))
		i += copy(data[i:], m.Route)
	}
	if len(m.Form) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Form)))
		i += copy(data[i:], m.Form)
	}
	if len(m.Strengths) > 0 {
		for _, msg := range m.Strengths {
			data[i] = 0x2a
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MedicationStrength) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MedicationStrength) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OTC {
		data[i] = 0x8
		i++
		if m.OTC {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Schedule != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.Schedule))
	}
	if len(m.Strength) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Strength)))
		i += copy(data[i:], m.Strength)
	}
	if len(m.DispenseUnit) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.DispenseUnit)))
		i += copy(data[i:], m.DispenseUnit)
	}
	if len(m.GenericName) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.GenericName)))
		i += copy(data[i:], m.GenericName)
	}
	if m.LexiGenProductID != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintSvc(data, i, uint64(m.LexiGenProductID))
	}
	if m.LexiDrugSynID != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintSvc(data, i, uint64(m.LexiDrugSynID))
	}
	if m.LexiSynonymTypeID != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintSvc(data, i, uint64(m.LexiSynonymTypeID))
	}
	if len(m.NDC) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.NDC)))
		i += copy(data[i:], m.NDC)
	}
	return i, nil
}

func (m *SearchMedicationsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchMedicationsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClinicID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintSvc(data, i, uint64(m.ClinicID))
	}
	if m.ClinicianID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintSvc(data, i, uint64(m.ClinicianID))
	}
	if len(m.Query) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	return i, nil
}

func (m *SearchMedicationsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchMedicationsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Medications) > 0 {
		for _, msg := range m.Medications {
			data[i] = 0xa
			i++
			i = encodeVarintSvc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SearchSelfReportedMedicationsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchSelfReportedMedicationsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	return i, nil
}

func (m *SearchSelfReportedMedicationsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchSelfReportedMedicationsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *SearchAllergyMedicationsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAllergyMedicationsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	return i, nil
}

func (m *SearchAllergyMedicationsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SearchAllergyMedicationsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Visit) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Submitted {
		n += 2
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CreatorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Triaged {
		n += 2
	}
	if m.Preferences != nil {
		l = m.Preferences.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Visit_Preference) Size() (n int) {
	var l int
	_ = l
	if m.OptionalTriage {
		n += 2
	}
	return n
}

func (m *Answer) Size() (n int) {
	var l int
	_ = l
	l = len(m.QuestionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Answer != nil {
		n += m.Answer.Size()
	}
	return n
}

func (m *Answer_FreeText) Size() (n int) {
	var l int
	_ = l
	if m.FreeText != nil {
		l = m.FreeText.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Answer_MultipleChoice) Size() (n int) {
	var l int
	_ = l
	if m.MultipleChoice != nil {
		l = m.MultipleChoice.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Answer_SingleSelect) Size() (n int) {
	var l int
	_ = l
	if m.SingleSelect != nil {
		l = m.SingleSelect.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Answer_Autocomplete) Size() (n int) {
	var l int
	_ = l
	if m.Autocomplete != nil {
		l = m.Autocomplete.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Answer_PhotoSection) Size() (n int) {
	var l int
	_ = l
	if m.PhotoSection != nil {
		l = m.PhotoSection.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Answer_SingleEntry) Size() (n int) {
	var l int
	_ = l
	if m.SingleEntry != nil {
		l = m.SingleEntry.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *Answer_SegmentedControl) Size() (n int) {
	var l int
	_ = l
	if m.SegmentedControl != nil {
		l = m.SegmentedControl.Size()
		n += 2 + l + sovSvc(uint64(l))
	}
	return n
}
func (m *FreeTextAnswer) Size() (n int) {
	var l int
	_ = l
	l = len(m.FreeText)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *MultipleChoiceAnswer) Size() (n int) {
	var l int
	_ = l
	if len(m.SelectedAnswers) > 0 {
		for _, e := range m.SelectedAnswers {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SingleSelectAnswer) Size() (n int) {
	var l int
	_ = l
	if m.SelectedAnswer != nil {
		l = m.SelectedAnswer.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SegmentedControlAnswer) Size() (n int) {
	var l int
	_ = l
	if m.SelectedAnswer != nil {
		l = m.SelectedAnswer.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SingleEntryAnswer) Size() (n int) {
	var l int
	_ = l
	l = len(m.FreeText)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *AnswerOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.FreeText)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.SubAnswers) > 0 {
		for k, v := range m.SubAnswers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + l + sovSvc(uint64(l))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AutocompleteAnswerItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Answer)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.SubAnswers) > 0 {
		for k, v := range m.SubAnswers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + l + sovSvc(uint64(l))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AutocompleteAnswer) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *PhotoSectionAnswer) Size() (n int) {
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *PhotoSectionAnswer_PhotoSectionItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Slots) > 0 {
		for _, e := range m.Slots {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.SlotID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MediaID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.LayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.CreatorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitAnswersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AnswersJSON)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitAnswersResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetAnswersForVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.SerializedForPatient {
		n += 2
	}
	return n
}

func (m *GetAnswersForVisitResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PatientAnswersJSON)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Answers) > 0 {
		for k, v := range m.Answers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovSvc(uint64(len(k))) + 1 + l + sovSvc(uint64(l))
			n += mapEntrySize + 1 + sovSvc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SubmitVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitVisitResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TriageVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TriageVisitResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CarePlan) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Treatments) > 0 {
		for _, e := range m.Treatments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if m.CreatedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.CreatedTimestamp))
	}
	l = len(m.CreatorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Submitted {
		n += 2
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.SubmittedTimestamp != 0 {
		n += 1 + sovSvc(uint64(m.SubmittedTimestamp))
	}
	return n
}

func (m *CarePlanTreatment) Size() (n int) {
	var l int
	_ = l
	if m.EPrescribe {
		n += 2
	}
	if m.Availability != 0 {
		n += 1 + sovSvc(uint64(m.Availability))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Form)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.MedicationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Dosage)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DispenseType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.DispenseNumber != 0 {
		n += 1 + sovSvc(uint64(m.DispenseNumber))
	}
	if m.Refills != 0 {
		n += 1 + sovSvc(uint64(m.Refills))
	}
	if m.SubstitutionsAllowed {
		n += 2
	}
	if m.DaysSupply != 0 {
		n += 1 + sovSvc(uint64(m.DaysSupply))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PharmacyID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PharmacyInstructions)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CarePlanInstruction) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Steps) > 0 {
		for _, s := range m.Steps {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *CarePlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CarePlanResponse) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateCarePlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Treatments) > 0 {
		for _, e := range m.Treatments {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	l = len(m.CreatorID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateCarePlanResponse) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitCarePlanRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitCarePlanResponse) Size() (n int) {
	var l int
	_ = l
	if m.CarePlan != nil {
		l = m.CarePlan.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Medication) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Route)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Form)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Strengths) > 0 {
		for _, e := range m.Strengths {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *MedicationStrength) Size() (n int) {
	var l int
	_ = l
	if m.OTC {
		n += 2
	}
	if m.Schedule != 0 {
		n += 1 + sovSvc(uint64(m.Schedule))
	}
	l = len(m.Strength)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.DispenseUnit)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.GenericName)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.LexiGenProductID != 0 {
		n += 1 + sovSvc(uint64(m.LexiGenProductID))
	}
	if m.LexiDrugSynID != 0 {
		n += 1 + sovSvc(uint64(m.LexiDrugSynID))
	}
	if m.LexiSynonymTypeID != 0 {
		n += 1 + sovSvc(uint64(m.LexiSynonymTypeID))
	}
	l = len(m.NDC)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SearchMedicationsRequest) Size() (n int) {
	var l int
	_ = l
	if m.ClinicID != 0 {
		n += 1 + sovSvc(uint64(m.ClinicID))
	}
	if m.ClinicianID != 0 {
		n += 1 + sovSvc(uint64(m.ClinicianID))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SearchMedicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Medications) > 0 {
		for _, e := range m.Medications {
			l = e.Size()
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SearchSelfReportedMedicationsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SearchSelfReportedMedicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func (m *SearchAllergyMedicationsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SearchAllergyMedicationsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Visit{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`LayoutVersionID:` + fmt.Sprintf("%v", this.LayoutVersionID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Submitted:` + fmt.Sprintf("%v", this.Submitted) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`CreatorID:` + fmt.Sprintf("%v", this.CreatorID) + `,`,
		`Triaged:` + fmt.Sprintf("%v", this.Triaged) + `,`,
		`Preferences:` + strings.Replace(fmt.Sprintf("%v", this.Preferences), "Visit_Preference", "Visit_Preference", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Visit_Preference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Visit_Preference{`,
		`OptionalTriage:` + fmt.Sprintf("%v", this.OptionalTriage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer{`,
		`QuestionID:` + fmt.Sprintf("%v", this.QuestionID) + `,`,
		`Answer:` + fmt.Sprintf("%v", this.Answer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_FreeText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_FreeText{`,
		`FreeText:` + strings.Replace(fmt.Sprintf("%v", this.FreeText), "FreeTextAnswer", "FreeTextAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_MultipleChoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_MultipleChoice{`,
		`MultipleChoice:` + strings.Replace(fmt.Sprintf("%v", this.MultipleChoice), "MultipleChoiceAnswer", "MultipleChoiceAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_SingleSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_SingleSelect{`,
		`SingleSelect:` + strings.Replace(fmt.Sprintf("%v", this.SingleSelect), "SingleSelectAnswer", "SingleSelectAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_Autocomplete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_Autocomplete{`,
		`Autocomplete:` + strings.Replace(fmt.Sprintf("%v", this.Autocomplete), "AutocompleteAnswer", "AutocompleteAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_PhotoSection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_PhotoSection{`,
		`PhotoSection:` + strings.Replace(fmt.Sprintf("%v", this.PhotoSection), "PhotoSectionAnswer", "PhotoSectionAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_SingleEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_SingleEntry{`,
		`SingleEntry:` + strings.Replace(fmt.Sprintf("%v", this.SingleEntry), "SingleEntryAnswer", "SingleEntryAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer_SegmentedControl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer_SegmentedControl{`,
		`SegmentedControl:` + strings.Replace(fmt.Sprintf("%v", this.SegmentedControl), "SegmentedControlAnswer", "SegmentedControlAnswer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FreeTextAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FreeTextAnswer{`,
		`FreeText:` + fmt.Sprintf("%v", this.FreeText) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MultipleChoiceAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultipleChoiceAnswer{`,
		`SelectedAnswers:` + strings.Replace(fmt.Sprintf("%v", this.SelectedAnswers), "AnswerOption", "AnswerOption", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleSelectAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleSelectAnswer{`,
		`SelectedAnswer:` + strings.Replace(fmt.Sprintf("%v", this.SelectedAnswer), "AnswerOption", "AnswerOption", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentedControlAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentedControlAnswer{`,
		`SelectedAnswer:` + strings.Replace(fmt.Sprintf("%v", this.SelectedAnswer), "AnswerOption", "AnswerOption", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SingleEntryAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SingleEntryAnswer{`,
		`FreeText:` + fmt.Sprintf("%v", this.FreeText) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnswerOption) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAnswers := make([]string, 0, len(this.SubAnswers))
	for k, _ := range this.SubAnswers {
		keysForSubAnswers = append(keysForSubAnswers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAnswers)
	mapStringForSubAnswers := "map[string]*Answer{"
	for _, k := range keysForSubAnswers {
		mapStringForSubAnswers += fmt.Sprintf("%v: %v,", k, this.SubAnswers[k])
	}
	mapStringForSubAnswers += "}"
	s := strings.Join([]string{`&AnswerOption{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`FreeText:` + fmt.Sprintf("%v", this.FreeText) + `,`,
		`SubAnswers:` + mapStringForSubAnswers + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteAnswerItem) String() string {
	if this == nil {
		return "nil"
	}
	keysForSubAnswers := make([]string, 0, len(this.SubAnswers))
	for k, _ := range this.SubAnswers {
		keysForSubAnswers = append(keysForSubAnswers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSubAnswers)
	mapStringForSubAnswers := "map[string]*Answer{"
	for _, k := range keysForSubAnswers {
		mapStringForSubAnswers += fmt.Sprintf("%v: %v,", k, this.SubAnswers[k])
	}
	mapStringForSubAnswers += "}"
	s := strings.Join([]string{`&AutocompleteAnswerItem{`,
		`Answer:` + fmt.Sprintf("%v", this.Answer) + `,`,
		`SubAnswers:` + mapStringForSubAnswers + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutocompleteAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutocompleteAnswer{`,
		`Items:` + strings.Replace(fmt.Sprintf("%v", this.Items), "AutocompleteAnswerItem", "AutocompleteAnswerItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhotoSectionAnswer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhotoSectionAnswer{`,
		`Sections:` + strings.Replace(fmt.Sprintf("%v", this.Sections), "PhotoSectionAnswer_PhotoSectionItem", "PhotoSectionAnswer_PhotoSectionItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhotoSectionAnswer_PhotoSectionItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhotoSectionAnswer_PhotoSectionItem{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Slots:` + strings.Replace(fmt.Sprintf("%v", this.Slots), "PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem", "PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem{`,
		`SlotID:` + fmt.Sprintf("%v", this.SlotID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MediaID:` + fmt.Sprintf("%v", this.MediaID) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitRequest{`,
		`LayoutVersionID:` + fmt.Sprintf("%v", this.LayoutVersionID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`CreatorID:` + fmt.Sprintf("%v", this.CreatorID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitResponse{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "Visit", "Visit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitResponse{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "Visit", "Visit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitAnswersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitAnswersRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`AnswersJSON:` + fmt.Sprintf("%v", this.AnswersJSON) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitAnswersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitAnswersResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetAnswersForVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAnswersForVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`SerializedForPatient:` + fmt.Sprintf("%v", this.SerializedForPatient) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAnswersForVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForAnswers := make([]string, 0, len(this.Answers))
	for k, _ := range this.Answers {
		keysForAnswers = append(keysForAnswers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnswers)
	mapStringForAnswers := "map[string]*Answer{"
	for _, k := range keysForAnswers {
		mapStringForAnswers += fmt.Sprintf("%v: %v,", k, this.Answers[k])
	}
	mapStringForAnswers += "}"
	s := strings.Join([]string{`&GetAnswersForVisitResponse{`,
		`PatientAnswersJSON:` + fmt.Sprintf("%v", this.PatientAnswersJSON) + `,`,
		`Answers:` + mapStringForAnswers + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitVisitResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TriageVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriageVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriageVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriageVisitResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CarePlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlan{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Treatments:` + strings.Replace(fmt.Sprintf("%v", this.Treatments), "CarePlanTreatment", "CarePlanTreatment", 1) + `,`,
		`Instructions:` + strings.Replace(fmt.Sprintf("%v", this.Instructions), "CarePlanInstruction", "CarePlanInstruction", 1) + `,`,
		`CreatedTimestamp:` + fmt.Sprintf("%v", this.CreatedTimestamp) + `,`,
		`CreatorID:` + fmt.Sprintf("%v", this.CreatorID) + `,`,
		`Submitted:` + fmt.Sprintf("%v", this.Submitted) + `,`,
		`ParentID:` + fmt.Sprintf("%v", this.ParentID) + `,`,
		`SubmittedTimestamp:` + fmt.Sprintf("%v", this.SubmittedTimestamp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanTreatment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanTreatment{`,
		`EPrescribe:` + fmt.Sprintf("%v", this.EPrescribe) + `,`,
		`Availability:` + fmt.Sprintf("%v", this.Availability) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Route:` + fmt.Sprintf("%v", this.Route) + `,`,
		`Form:` + fmt.Sprintf("%v", this.Form) + `,`,
		`MedicationID:` + fmt.Sprintf("%v", this.MedicationID) + `,`,
		`Dosage:` + fmt.Sprintf("%v", this.Dosage) + `,`,
		`DispenseType:` + fmt.Sprintf("%v", this.DispenseType) + `,`,
		`DispenseNumber:` + fmt.Sprintf("%v", this.DispenseNumber) + `,`,
		`Refills:` + fmt.Sprintf("%v", this.Refills) + `,`,
		`SubstitutionsAllowed:` + fmt.Sprintf("%v", this.SubstitutionsAllowed) + `,`,
		`DaysSupply:` + fmt.Sprintf("%v", this.DaysSupply) + `,`,
		`Sig:` + fmt.Sprintf("%v", this.Sig) + `,`,
		`PharmacyID:` + fmt.Sprintf("%v", this.PharmacyID) + `,`,
		`PharmacyInstructions:` + fmt.Sprintf("%v", this.PharmacyInstructions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanInstruction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanInstruction{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Steps:` + fmt.Sprintf("%v", this.Steps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CarePlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CarePlanResponse{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlan", "CarePlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCarePlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCarePlanRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Treatments:` + strings.Replace(fmt.Sprintf("%v", this.Treatments), "CarePlanTreatment", "CarePlanTreatment", 1) + `,`,
		`Instructions:` + strings.Replace(fmt.Sprintf("%v", this.Instructions), "CarePlanInstruction", "CarePlanInstruction", 1) + `,`,
		`CreatorID:` + fmt.Sprintf("%v", this.CreatorID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCarePlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCarePlanResponse{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlan", "CarePlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitCarePlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitCarePlanRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ParentID:` + fmt.Sprintf("%v", this.ParentID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitCarePlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitCarePlanResponse{`,
		`CarePlan:` + strings.Replace(fmt.Sprintf("%v", this.CarePlan), "CarePlan", "CarePlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Medication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Medication{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Route:` + fmt.Sprintf("%v", this.Route) + `,`,
		`Form:` + fmt.Sprintf("%v", this.Form) + `,`,
		`Strengths:` + strings.Replace(fmt.Sprintf("%v", this.Strengths), "MedicationStrength", "MedicationStrength", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MedicationStrength) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MedicationStrength{`,
		`OTC:` + fmt.Sprintf("%v", this.OTC) + `,`,
		`Schedule:` + fmt.Sprintf("%v", this.Schedule) + `,`,
		`Strength:` + fmt.Sprintf("%v", this.Strength) + `,`,
		`DispenseUnit:` + fmt.Sprintf("%v", this.DispenseUnit) + `,`,
		`GenericName:` + fmt.Sprintf("%v", this.GenericName) + `,`,
		`LexiGenProductID:` + fmt.Sprintf("%v", this.LexiGenProductID) + `,`,
		`LexiDrugSynID:` + fmt.Sprintf("%v", this.LexiDrugSynID) + `,`,
		`LexiSynonymTypeID:` + fmt.Sprintf("%v", this.LexiSynonymTypeID) + `,`,
		`NDC:` + fmt.Sprintf("%v", this.NDC) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchMedicationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchMedicationsRequest{`,
		`ClinicID:` + fmt.Sprintf("%v", this.ClinicID) + `,`,
		`ClinicianID:` + fmt.Sprintf("%v", this.ClinicianID) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchMedicationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchMedicationsResponse{`,
		`Medications:` + strings.Replace(fmt.Sprintf("%v", this.Medications), "Medication", "Medication", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchSelfReportedMedicationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchSelfReportedMedicationsRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchSelfReportedMedicationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchSelfReportedMedicationsResponse{`,
		`Results:` + fmt.Sprintf("%v", this.Results) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAllergyMedicationsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAllergyMedicationsRequest{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAllergyMedicationsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAllergyMedicationsResponse{`,
		`Results:` + fmt.Sprintf("%v", this.Results) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Visit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Submitted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Triaged = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Preferences == nil {
				m.Preferences = &Visit_Preference{}
			}
			if err := m.Preferences.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visit_Preference) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Preference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Preference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalTriage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptionalTriage = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Answer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Answer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Answer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FreeTextAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_FreeText{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultipleChoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultipleChoiceAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_MultipleChoice{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleSelectAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_SingleSelect{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Autocomplete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AutocompleteAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_Autocomplete{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PhotoSectionAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_PhotoSection{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SingleEntryAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_SingleEntry{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentedControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SegmentedControlAnswer{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Answer = &Answer_SegmentedControl{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FreeTextAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FreeTextAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FreeTextAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeText = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultipleChoiceAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultipleChoiceAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultipleChoiceAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedAnswers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedAnswers = append(m.SelectedAnswers, &AnswerOption{})
			if err := m.SelectedAnswers[len(m.SelectedAnswers)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleSelectAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSelectAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSelectAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedAnswer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectedAnswer == nil {
				m.SelectedAnswer = &AnswerOption{}
			}
			if err := m.SelectedAnswer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentedControlAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentedControlAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentedControlAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedAnswer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectedAnswer == nil {
				m.SelectedAnswer = &AnswerOption{}
			}
			if err := m.SelectedAnswer.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleEntryAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleEntryAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleEntryAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeText = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnswerOption) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnswerOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnswerOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeText = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAnswers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &Answer{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.SubAnswers == nil {
				m.SubAnswers = make(map[string]*Answer)
			}
			m.SubAnswers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteAnswerItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteAnswerItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteAnswerItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answer = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubAnswers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &Answer{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.SubAnswers == nil {
				m.SubAnswers = make(map[string]*Answer)
			}
			m.SubAnswers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompleteAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompleteAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompleteAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &AutocompleteAnswerItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotoSectionAnswer) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoSectionAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoSectionAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &PhotoSectionAnswer_PhotoSectionItem{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotoSectionAnswer_PhotoSectionItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoSectionItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoSectionItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, &PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem{})
			if err := m.Slots[len(m.Slots)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhotoSectionAnswer_PhotoSectionItem_PhotoSlotItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhotoSlotItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhotoSlotItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visit == nil {
				m.Visit = &Visit{}
			}
			if err := m.Visit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visit == nil {
				m.Visit = &Visit{}
			}
			if err := m.Visit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitAnswersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitAnswersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitAnswersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersJSON = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitAnswersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitAnswersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitAnswersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAnswersForVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAnswersForVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAnswersForVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedForPatient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SerializedForPatient = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAnswersForVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAnswersForVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAnswersForVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientAnswersJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientAnswersJSON = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSvc
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthSvc
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &Answer{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.Answers == nil {
				m.Answers = make(map[string]*Answer)
			}
			m.Answers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriageVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriageVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriageVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriageVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriageVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriageVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlan) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treatments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treatments = append(m.Treatments, &CarePlanTreatment{})
			if err := m.Treatments[len(m.Treatments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &CarePlanInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Submitted = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmittedTimestamp", wireType)
			}
			m.SubmittedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SubmittedTimestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanTreatment) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanTreatment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanTreatment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EPrescribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EPrescribe = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			m.Availability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Availability |= (CarePlanTreatment_Availability(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Form = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedicationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedicationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dosage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dosage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispenseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispenseType = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispenseNumber", wireType)
			}
			m.DispenseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DispenseNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refills", wireType)
			}
			m.Refills = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Refills |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstitutionsAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubstitutionsAllowed = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysSupply", wireType)
			}
			m.DaysSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DaysSupply |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PharmacyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PharmacyID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PharmacyInstructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PharmacyInstructions = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanInstruction) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = append(m.Steps, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarePlanResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarePlan == nil {
				m.CarePlan = &CarePlan{}
			}
			if err := m.CarePlan.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCarePlanRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCarePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCarePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Treatments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Treatments = append(m.Treatments, &CarePlanTreatment{})
			if err := m.Treatments[len(m.Treatments)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &CarePlanInstruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCarePlanResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCarePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCarePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarePlan == nil {
				m.CarePlan = &CarePlan{}
			}
			if err := m.CarePlan.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitCarePlanRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitCarePlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitCarePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitCarePlanResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitCarePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitCarePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CarePlan == nil {
				m.CarePlan = &CarePlan{}
			}
			if err := m.CarePlan.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Medication) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Medication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Medication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Route = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Form", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Form = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strengths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strengths = append(m.Strengths, &MedicationStrength{})
			if err := m.Strengths[len(m.Strengths)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MedicationStrength) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MedicationStrength: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MedicationStrength: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OTC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OTC = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedule", wireType)
			}
			m.Schedule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Schedule |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strength = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispenseUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DispenseUnit = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LexiGenProductID", wireType)
			}
			m.LexiGenProductID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LexiGenProductID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LexiDrugSynID", wireType)
			}
			m.LexiDrugSynID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LexiDrugSynID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LexiSynonymTypeID", wireType)
			}
			m.LexiSynonymTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LexiSynonymTypeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NDC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NDC = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMedicationsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMedicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMedicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClinicID", wireType)
			}
			m.ClinicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ClinicID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClinicianID", wireType)
			}
			m.ClinicianID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ClinicianID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMedicationsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMedicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMedicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medications = append(m.Medications, &Medication{})
			if err := m.Medications[len(m.Medications)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSelfReportedMedicationsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSelfReportedMedicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSelfReportedMedicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSelfReportedMedicationsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSelfReportedMedicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSelfReportedMedicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAllergyMedicationsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAllergyMedicationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAllergyMedicationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAllergyMedicationsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAllergyMedicationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAllergyMedicationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSvc = []byte{
	// 2027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x77, 0x1b, 0x67,
	0x15, 0x8f, 0x1e, 0xb6, 0xa4, 0xab, 0xf7, 0xe7, 0x47, 0x65, 0x25, 0xb5, 0xd3, 0x69, 0x5d, 0x28,
	0x49, 0x95, 0x36, 0xa1, 0xa7, 0x2f, 0x0e, 0x1c, 0xdb, 0x49, 0x4a, 0x68, 0x62, 0x9b, 0xc8, 0x6d,
	0x39, 0x6c, 0xe6, 0x8c, 0x47, 0x9f, 0xe5, 0x81, 0xd1, 0xcc, 0x74, 0x1e, 0x69, 0xd4, 0x15, 0x7f,
	0x01, 0x87, 0x2d, 0x0b, 0xb6, 0x3d, 0x2c, 0xe0, 0xf0, 0x07, 0xb0, 0x83, 0x0d, 0x3b, 0xb2, 0x84,
	0x0d, 0x87, 0x84, 0x0d, 0x4b, 0xfe, 0x04, 0xee, 0xf7, 0xd2, 0xcc, 0x68, 0x46, 0xb6, 0xc2, 0x61,
	0xa1, 0x93, 0xe8, 0xbe, 0xef, 0xfd, 0xee, 0xe3, 0x27, 0x43, 0x2d, 0x78, 0x62, 0x0e, 0x3c, 0xdf,
	0x0d, 0x5d, 0x52, 0x36, 0x0d, 0x9f, 0xf6, 0xdf, 0x1e, 0x5b, 0xe1, 0x79, 0x74, 0x3a, 0x30, 0xdd,
	0xc9, 0xad, 0xb1, 0x3b, 0x76, 0x6f, 0x71, 0xe6, 0x69, 0x74, 0xc6, 0xbf, 0xf1, 0x2f, 0xfc, 0x7f,
	0x42, 0x49, 0xfb, 0x53, 0x11, 0x56, 0x3e, 0xb7, 0x02, 0x2b, 0x24, 0x04, 0x8a, 0xd6, 0xa8, 0x57,
	0xb8, 0x5e, 0xf8, 0x76, 0x6d, 0x7f, 0xf5, 0xc5, 0x3f, 0x76, 0x8a, 0x0f, 0xee, 0x92, 0x06, 0x94,
	0x1d, 0x63, 0x42, 0x7b, 0x45, 0x46, 0x25, 0x03, 0xe8, 0xda, 0xc6, 0xd4, 0x8d, 0x42, 0xfd, 0x09,
	0xf5, 0x03, 0xcb, 0x75, 0x74, 0x54, 0x28, 0x71, 0x85, 0x35, 0x54, 0x68, 0x3f, 0xe4, 0xcc, 0xcf,
	0x05, 0x0f, 0xb5, 0x77, 0xa0, 0x46, 0x9d, 0xd0, 0x0a, 0xa7, 0x4c, 0xae, 0xcc, 0xe5, 0x1a, 0x28,
	0x57, 0xbd, 0xc7, 0x89, 0x28, 0xd0, 0xc5, 0xf0, 0xa3, 0xd3, 0x89, 0x15, 0x86, 0x74, 0xd4, 0x5b,
	0x41, 0x81, 0x2a, 0xb9, 0x01, 0x6d, 0xd7, 0x1f, 0x1b, 0x8e, 0xf5, 0xb5, 0x11, 0x4a, 0x0f, 0xab,
	0x5c, 0x93, 0xa0, 0x66, 0xeb, 0x28, 0xc1, 0x42, 0xfd, 0xd7, 0x00, 0x4c, 0x9f, 0x1a, 0xa1, 0xeb,
	0x33, 0xb9, 0x0a, 0x97, 0x6b, 0xa2, 0x5c, 0xed, 0x40, 0x50, 0x51, 0xa4, 0x0d, 0x95, 0xd0, 0xb7,
	0x8c, 0x31, 0x3a, 0xa8, 0x4a, 0x07, 0x75, 0xcf, 0xa7, 0x67, 0xd4, 0xa7, 0x8e, 0x49, 0x83, 0x5e,
	0x0d, 0x89, 0xf5, 0xdb, 0x9b, 0x03, 0x56, 0xbb, 0x01, 0x2f, 0xc4, 0xe0, 0x78, 0xc6, 0xee, 0xef,
	0x02, 0xc4, 0xdf, 0xc8, 0x2b, 0x18, 0x9b, 0xc7, 0x5c, 0x1b, 0xb6, 0x2e, 0x8c, 0xf2, 0x72, 0x55,
	0xb5, 0xdf, 0x94, 0x60, 0x75, 0xcf, 0x09, 0xbe, 0xa2, 0x3e, 0x79, 0x1d, 0xea, 0x5f, 0x46, 0x34,
	0x50, 0xb1, 0x8b, 0x72, 0xb6, 0x30, 0x26, 0xf8, 0xb1, 0x24, 0x63, 0x50, 0x6f, 0x41, 0xed, 0xcc,
	0xa7, 0x54, 0x0f, 0xe9, 0xd3, 0xb0, 0x07, 0x3c, 0x82, 0x75, 0x11, 0xc1, 0x7d, 0x24, 0x9f, 0x20,
	0x55, 0x58, 0xfb, 0xe1, 0x15, 0xf2, 0x1e, 0xb4, 0x27, 0x91, 0x1d, 0x5a, 0x9e, 0x4d, 0x75, 0xf3,
	0xdc, 0xb5, 0x4c, 0xda, 0xab, 0x73, 0x85, 0xbe, 0x50, 0x78, 0x24, 0x99, 0x07, 0x9c, 0x37, 0x53,
	0x7b, 0x17, 0x9a, 0x81, 0xe5, 0x8c, 0x51, 0x29, 0xa0, 0x36, 0x35, 0xc3, 0x5e, 0x83, 0x2b, 0xf5,
	0x84, 0xd2, 0x90, 0xb3, 0x86, 0x9c, 0x33, 0x53, 0x79, 0x07, 0x1a, 0x46, 0x14, 0xba, 0xd8, 0x37,
	0x68, 0x2e, 0xa4, 0xbd, 0x66, 0x52, 0x63, 0x2f, 0xc1, 0x49, 0x3a, 0xf1, 0xce, 0xb1, 0x89, 0xd0,
	0x87, 0xc9, 0x32, 0xeb, 0xb5, 0x92, 0x2a, 0xc7, 0x8c, 0x35, 0x14, 0x9c, 0x99, 0xca, 0x2d, 0x68,
	0xc8, 0xb8, 0xb0, 0x33, 0xfc, 0x69, 0xaf, 0xcd, 0x35, 0x5e, 0x49, 0x86, 0x75, 0x8f, 0x31, 0x66,
	0x0a, 0x1f, 0x42, 0x37, 0xa0, 0xe3, 0x09, 0x4a, 0xd3, 0x91, 0x6e, 0xba, 0xc8, 0x73, 0xed, 0x5e,
	0x87, 0x6b, 0x5d, 0x93, 0x5a, 0x8a, 0x7d, 0x20, 0xb8, 0x4a, 0x75, 0xbf, 0x0a, 0xab, 0x06, 0xff,
	0xbf, 0xf6, 0x3a, 0xb4, 0xd2, 0x85, 0x65, 0x9d, 0x17, 0xbf, 0x00, 0x7f, 0x24, 0xed, 0x2e, 0xac,
	0xe7, 0x15, 0x93, 0xdc, 0x84, 0x8e, 0xa8, 0x21, 0x06, 0x20, 0xec, 0x05, 0xa8, 0x51, 0xc2, 0x00,
	0x88, 0xac, 0x0d, 0x27, 0x1e, 0xf1, 0xce, 0xd0, 0xf6, 0x80, 0x64, 0xab, 0xcb, 0xba, 0x7a, 0xce,
	0x06, 0x77, 0x9a, 0x6f, 0xe2, 0x1e, 0x6c, 0xe6, 0xe7, 0xf4, 0x72, 0x66, 0xde, 0x84, 0x6e, 0xa6,
	0xa0, 0x79, 0x79, 0xff, 0xa1, 0x00, 0x8d, 0xa4, 0x62, 0xee, 0x22, 0x48, 0xe9, 0x89, 0x6d, 0xf0,
	0x3e, 0xd4, 0x71, 0x78, 0x67, 0x25, 0x29, 0xf1, 0x92, 0x68, 0xd9, 0x40, 0x06, 0xc3, 0xe8, 0x54,
	0x7c, 0x0f, 0x78, 0x24, 0xfd, 0x1f, 0x40, 0x7b, 0x8e, 0x44, 0xea, 0x50, 0xfa, 0x39, 0x9d, 0x0a,
	0x9f, 0xe4, 0x2a, 0xac, 0x3c, 0x31, 0xec, 0x48, 0x6c, 0x9d, 0xfa, 0xed, 0x46, 0xd2, 0xe4, 0x47,
	0xc5, 0x0f, 0x0a, 0xda, 0xef, 0x0a, 0xb0, 0x99, 0x6d, 0xc8, 0x07, 0x21, 0x9d, 0x90, 0x96, 0x7a,
	0x73, 0x69, 0x6b, 0x2f, 0x1d, 0x64, 0x91, 0x07, 0x79, 0x73, 0x51, 0x4f, 0x33, 0x13, 0xff, 0xff,
	0x70, 0xb1, 0x25, 0xb2, 0xae, 0xf0, 0x2d, 0x57, 0x2c, 0x74, 0xa7, 0x7a, 0xe9, 0xda, 0x45, 0x31,
	0x69, 0xbf, 0x2f, 0x02, 0xc9, 0xce, 0x13, 0xf9, 0x18, 0xaa, 0x72, 0xf4, 0x94, 0x99, 0xb7, 0x16,
	0xcd, 0x5e, 0x8a, 0xc4, 0x6c, 0xf6, 0xff, 0x5e, 0x80, 0xce, 0x3c, 0x71, 0xb6, 0xf0, 0x45, 0x6a,
	0xf7, 0x61, 0x25, 0xb0, 0xdd, 0x50, 0xd5, 0xed, 0xfd, 0xa5, 0x8d, 0x4b, 0x02, 0xea, 0x72, 0x57,
	0x2e, 0x34, 0x53, 0x04, 0xac, 0x59, 0x85, 0x19, 0x8e, 0x37, 0x24, 0x60, 0x9f, 0xad, 0x72, 0xf6,
	0xfc, 0xd1, 0x79, 0x15, 0xaa, 0x13, 0x3a, 0xb2, 0x8c, 0xf8, 0xd6, 0xd4, 0x51, 0xb6, 0xf2, 0x88,
	0xd1, 0x50, 0x78, 0x1d, 0x4a, 0x91, 0x6f, 0xcb, 0xeb, 0x52, 0x41, 0x4e, 0xe9, 0xb3, 0xc7, 0x0f,
	0xb5, 0x3f, 0x17, 0x80, 0xf0, 0x1b, 0x40, 0xf9, 0x4a, 0x7f, 0x4c, 0xf9, 0x4e, 0xce, 0x3f, 0x60,
	0x85, 0x25, 0x0f, 0x58, 0x31, 0xe7, 0x80, 0xa9, 0x50, 0x79, 0x60, 0x79, 0xb7, 0xab, 0xbc, 0xe4,
	0xed, 0x5a, 0xc9, 0xb9, 0x5d, 0xda, 0xbb, 0xb0, 0x96, 0x4a, 0x22, 0xf0, 0xf0, 0xa1, 0x29, 0xe9,
	0x63, 0xc3, 0x31, 0x82, 0x9c, 0xfd, 0x7a, 0xe2, 0x76, 0x69, 0xbb, 0xd0, 0xfe, 0x84, 0x86, 0xa9,
	0xa4, 0x73, 0xc6, 0x59, 0x1b, 0x40, 0x27, 0x16, 0x5b, 0xc2, 0xec, 0x2f, 0x0b, 0xb0, 0x95, 0x08,
	0x45, 0x0e, 0x83, 0xf2, 0x80, 0x4f, 0xc4, 0x35, 0xe3, 0x6a, 0xf2, 0x27, 0xe2, 0xa2, 0x98, 0xe9,
	0x2e, 0x1e, 0x16, 0xa1, 0xa0, 0xff, 0x2c, 0xc0, 0x2b, 0x21, 0x0a, 0xd9, 0x46, 0x91, 0xba, 0x34,
	0xf4, 0xa3, 0xe1, 0xd1, 0x21, 0x56, 0xaf, 0x63, 0x98, 0x98, 0xf8, 0x54, 0x8f, 0x6b, 0x2e, 0x1e,
	0xbc, 0x8b, 0xa2, 0xcd, 0x3d, 0xc6, 0x53, 0x85, 0xd7, 0xae, 0x41, 0x3f, 0x2f, 0x1e, 0x91, 0x8a,
	0xf6, 0x53, 0xd8, 0xc2, 0xf4, 0x24, 0xf5, 0xbe, 0xeb, 0xa7, 0xea, 0x71, 0x49, 0xb4, 0xdb, 0xb0,
	0x19, 0x50, 0x3c, 0xee, 0xb6, 0xf5, 0x35, 0x6e, 0xd9, 0x33, 0x7c, 0x1e, 0x0f, 0x9f, 0x0c, 0x43,
	0xe2, 0x71, 0x57, 0xb5, 0x67, 0x05, 0xe8, 0xe7, 0x19, 0x97, 0x55, 0xfc, 0x2e, 0xac, 0x4b, 0x79,
	0x3d, 0x95, 0xb4, 0xf0, 0xb4, 0x89, 0x9e, 0xc8, 0xb1, 0xe0, 0x27, 0x73, 0xff, 0x3e, 0x54, 0xd2,
	0x2b, 0xea, 0x6d, 0x51, 0xfd, 0xc5, 0x8e, 0x06, 0xa9, 0x1d, 0xf5, 0x3d, 0xb5, 0xc2, 0xff, 0xa7,
	0x05, 0x75, 0x07, 0x6f, 0x16, 0x87, 0x61, 0x2f, 0x51, 0x27, 0x6d, 0x03, 0xd6, 0x52, 0x4a, 0xb2,
	0xf4, 0x68, 0xeb, 0x84, 0x43, 0xa3, 0x97, 0xb4, 0x95, 0x52, 0x92, 0xb6, 0x7e, 0x5d, 0x84, 0xea,
	0x01, 0xc6, 0x7a, 0x6c, 0x1b, 0xce, 0x12, 0xf0, 0xf4, 0x06, 0x40, 0xc8, 0x7a, 0x82, 0x5d, 0x4e,
	0x75, 0x8f, 0x24, 0xb2, 0x50, 0x56, 0x4e, 0x14, 0x9f, 0x01, 0x11, 0xcb, 0x09, 0x42, 0x3f, 0x92,
	0xeb, 0xb3, 0xcc, 0xc5, 0xb7, 0xd2, 0xe2, 0x0f, 0x62, 0x09, 0xb2, 0x05, 0x5d, 0x3e, 0xaf, 0xd8,
	0x14, 0xa1, 0x35, 0xc1, 0xa4, 0x8c, 0x89, 0xc7, 0xc7, 0xb6, 0x3c, 0x37, 0xca, 0xab, 0x79, 0x30,
	0x34, 0x85, 0x74, 0x2b, 0x1c, 0x88, 0xe2, 0x72, 0xf1, 0xd0, 0x8f, 0xc3, 0x8b, 0x52, 0x8d, 0x97,
	0xcb, 0x31, 0x27, 0xa2, 0xce, 0x55, 0x58, 0x9b, 0xe9, 0x24, 0x7c, 0x32, 0xc4, 0x5a, 0xd6, 0xfe,
	0x58, 0x82, 0x6e, 0x36, 0x2b, 0x02, 0x40, 0x11, 0xb0, 0x06, 0xa6, 0x6f, 0x9d, 0x4a, 0x70, 0x4a,
	0x3e, 0xc2, 0xf1, 0x7b, 0x62, 0x58, 0xb6, 0x71, 0x6a, 0xd9, 0x38, 0x3c, 0xbc, 0x58, 0xad, 0xdb,
	0x6f, 0x2c, 0x28, 0xcc, 0x60, 0x2f, 0x21, 0x3b, 0xb7, 0xdf, 0x9a, 0xb0, 0xe2, 0xe3, 0x7e, 0xa4,
	0x62, 0xab, 0x31, 0x26, 0x8e, 0xc7, 0x44, 0xec, 0x2e, 0xf2, 0x2d, 0x68, 0xb2, 0x3d, 0x6d, 0xce,
	0xc1, 0xf6, 0x0e, 0xa6, 0xd4, 0x78, 0x34, 0x63, 0x60, 0x5a, 0x78, 0xa2, 0x47, 0x6e, 0xc0, 0xc0,
	0x33, 0x07, 0xec, 0x64, 0x03, 0x9a, 0x23, 0x2b, 0xf0, 0x28, 0xbe, 0xb8, 0x1e, 0x4e, 0x3d, 0x2a,
	0x6a, 0xc1, 0xc0, 0xf6, 0x8c, 0xec, 0x44, 0x93, 0x53, 0x3c, 0xe9, 0x2c, 0xf3, 0x26, 0x43, 0xf4,
	0x08, 0xc9, 0x2d, 0xdb, 0x0e, 0x38, 0x74, 0x6e, 0x62, 0x73, 0x6d, 0x60, 0x9d, 0x10, 0x5b, 0x87,
	0x11, 0x7f, 0x4b, 0xdd, 0xb0, 0x6d, 0xf7, 0x2b, 0xac, 0x73, 0x9d, 0xe7, 0xbf, 0x06, 0xf5, 0x91,
	0x31, 0x0d, 0xf4, 0x20, 0xf2, 0x3c, 0x7b, 0xca, 0x81, 0x70, 0x93, 0x0d, 0x48, 0x60, 0x8d, 0x39,
	0xc6, 0xad, 0x31, 0xcc, 0xee, 0x9d, 0x1b, 0xfe, 0xc4, 0x30, 0xf9, 0xd2, 0x69, 0xc5, 0x98, 0xfd,
	0x58, 0x92, 0x31, 0x6c, 0xf4, 0x12, 0x0b, 0x25, 0x3b, 0xa7, 0xcd, 0x51, 0xd4, 0x4d, 0x9c, 0xc0,
	0x64, 0xe5, 0xea, 0x50, 0xf9, 0xec, 0xf0, 0xd3, 0xc3, 0xa3, 0x2f, 0x0e, 0x3b, 0x57, 0x48, 0x05,
	0x4a, 0x47, 0x27, 0x07, 0x9d, 0x02, 0x59, 0x85, 0xe2, 0xe3, 0x9f, 0x74, 0x8a, 0x38, 0x25, 0x6b,
	0x79, 0x3d, 0x86, 0x05, 0xc6, 0x2c, 0x6c, 0x75, 0x7e, 0xf1, 0x6b, 0x10, 0x52, 0x4f, 0xec, 0x84,
	0x1a, 0xdb, 0xed, 0x4a, 0xe9, 0xa2, 0xdd, 0xfe, 0x1e, 0x74, 0x62, 0x31, 0xb9, 0x95, 0x5e, 0x83,
	0x1a, 0x7b, 0x6e, 0xdd, 0x43, 0xa2, 0xdc, 0xef, 0xad, 0x74, 0x03, 0x68, 0xdf, 0x14, 0x60, 0x43,
	0xac, 0xd4, 0x79, 0x27, 0x69, 0x4c, 0x90, 0x9e, 0xb2, 0xe2, 0xcb, 0x4d, 0x59, 0xe9, 0xb2, 0x29,
	0x4b, 0x8f, 0x52, 0x39, 0xef, 0x2a, 0x7e, 0x0c, 0x9b, 0xf3, 0x71, 0x2e, 0x9f, 0xe5, 0x43, 0xd8,
	0x10, 0x5b, 0x6b, 0x89, 0x4a, 0xa6, 0x27, 0xb4, 0x98, 0x9d, 0x50, 0x16, 0xca, 0xbc, 0xb5, 0xe5,
	0x43, 0x79, 0x0a, 0x10, 0xcf, 0xc5, 0x12, 0xeb, 0x6d, 0x36, 0x7d, 0xa5, 0xd4, 0xf4, 0x95, 0xe5,
	0xab, 0xd4, 0xb0, 0x88, 0xd4, 0x19, 0x87, 0xe7, 0x01, 0x0e, 0x64, 0x29, 0xfe, 0x19, 0x16, 0xfb,
	0x18, 0x4a, 0x01, 0xed, 0x1b, 0x44, 0x93, 0x59, 0x32, 0x83, 0x52, 0x6e, 0x68, 0x8a, 0xad, 0x21,
	0xa0, 0x14, 0x36, 0x2d, 0xe9, 0x20, 0xc6, 0x34, 0xcf, 0xe9, 0x28, 0xb2, 0x45, 0x20, 0x4d, 0x4e,
	0x91, 0x3a, 0x32, 0x96, 0xe4, 0x08, 0x47, 0x0e, 0x42, 0x08, 0x11, 0xd4, 0x3a, 0x34, 0xc6, 0xd4,
	0xc1, 0x63, 0x6a, 0xea, 0x3c, 0x0f, 0xb1, 0x28, 0x10, 0xd5, 0xd8, 0xf4, 0xa9, 0xa5, 0x23, 0x4b,
	0xf7, 0x7c, 0x77, 0x84, 0x2f, 0xaf, 0xd6, 0x45, 0x79, 0x7f, 0x1d, 0xdd, 0x76, 0x1e, 0x22, 0xfb,
	0x13, 0xea, 0x1c, 0x0b, 0x26, 0x16, 0x02, 0xa1, 0x01, 0x57, 0x19, 0xf9, 0xd1, 0x58, 0x0f, 0xa6,
	0x8e, 0xfa, 0xb5, 0x5f, 0x16, 0xd0, 0x80, 0xc9, 0xdf, 0x45, 0xd6, 0x70, 0xca, 0xf6, 0xcb, 0x1d,
	0x58, 0xe7, 0xc2, 0x28, 0xe7, 0x3a, 0xd3, 0x09, 0xdf, 0x29, 0x6a, 0xc5, 0x96, 0xf7, 0x37, 0x50,
	0xa1, 0xcb, 0x14, 0x86, 0x82, 0x7d, 0x82, 0x5c, 0x01, 0x23, 0x9d, 0x91, 0xc9, 0x37, 0x8c, 0x84,
	0x91, 0x87, 0x77, 0x0f, 0xb4, 0x2f, 0xa1, 0x37, 0xa4, 0x86, 0x6f, 0x9e, 0xc7, 0xd5, 0x9a, 0x81,
	0x1e, 0x6c, 0x0e, 0xd3, 0xb6, 0x1c, 0xcc, 0x4d, 0xbe, 0x5b, 0x59, 0x34, 0xc7, 0x01, 0x27, 0x0a,
	0xd8, 0x23, 0x04, 0x2c, 0xc3, 0x51, 0x0d, 0x54, 0x16, 0xb0, 0xe7, 0x40, 0xd1, 0x51, 0x0c, 0x9f,
	0x15, 0x0d, 0xe2, 0x4f, 0x61, 0x5e, 0x4a, 0x6d, 0x1f, 0xb6, 0x72, 0x5c, 0xca, 0xae, 0xda, 0x85,
	0x7a, 0xbc, 0x63, 0x15, 0xe4, 0xef, 0xcc, 0xbf, 0x33, 0x6e, 0x80, 0x37, 0x84, 0x0d, 0xfc, 0x0d,
	0x7a, 0xf6, 0x98, 0x7a, 0xae, 0x8f, 0x17, 0x24, 0x27, 0x85, 0x99, 0x6b, 0xf1, 0x43, 0xf0, 0x03,
	0xd8, 0xbd, 0x44, 0x4d, 0x86, 0xc1, 0x37, 0x70, 0x80, 0xbf, 0x95, 0x45, 0x08, 0x35, 0xed, 0x1d,
	0xd8, 0x11, 0x9a, 0x7b, 0xb6, 0x4d, 0xfd, 0xf1, 0xf4, 0x72, 0x5f, 0x77, 0xe0, 0xfa, 0x62, 0x8d,
	0x05, 0x6e, 0x6e, 0xff, 0xb5, 0x02, 0x65, 0x36, 0x3e, 0x64, 0x1f, 0xea, 0x09, 0xf4, 0x47, 0x64,
	0xa7, 0x67, 0x01, 0x7f, 0x7f, 0x2b, 0x87, 0x23, 0xad, 0x7f, 0x08, 0x55, 0x05, 0x81, 0xc9, 0xc6,
	0x0c, 0x6d, 0xa5, 0xb4, 0x37, 0xe7, 0xc9, 0x52, 0xf5, 0x8b, 0xd4, 0x8f, 0x0b, 0x09, 0xbc, 0xc8,
	0x4e, 0xc6, 0x57, 0x1a, 0x26, 0xf7, 0xaf, 0x2f, 0x16, 0x88, 0x0d, 0x67, 0x11, 0x9f, 0x32, 0xbc,
	0x10, 0xd1, 0x2a, 0xc3, 0x17, 0xa0, 0x52, 0x2c, 0x58, 0x02, 0xac, 0xa9, 0x82, 0x65, 0x41, 0x9f,
	0x2a, 0x58, 0x0e, 0xb2, 0x63, 0x36, 0x12, 0x20, 0x4d, 0xd9, 0xc8, 0x82, 0x3d, 0x65, 0x23, 0x07,
	0xd1, 0xb1, 0xa2, 0xcf, 0x00, 0xdd, 0x46, 0x7a, 0x1f, 0xce, 0x15, 0x3d, 0xb3, 0x51, 0x3f, 0x85,
	0x56, 0x7a, 0xed, 0x93, 0xab, 0xc9, 0x7a, 0xce, 0x9b, 0xb9, 0x96, 0xcf, 0x8c, 0x8d, 0xa5, 0x17,
	0xb7, 0x32, 0x96, 0x7b, 0x1c, 0x94, 0xb1, 0x05, 0xbb, 0xfe, 0x04, 0xba, 0x99, 0x91, 0x25, 0xdb,
	0xea, 0x8f, 0x53, 0xf9, 0xeb, 0xa3, 0xbf, 0xb3, 0x90, 0x2f, 0xad, 0x3e, 0x85, 0x57, 0x2f, 0x9c,
	0x46, 0xf2, 0x9d, 0xa4, 0x85, 0x8b, 0x27, 0xbd, 0x7f, 0x63, 0x29, 0x59, 0xe9, 0xd9, 0x52, 0x5b,
	0x2f, 0x3b, 0x9b, 0x64, 0x37, 0x69, 0x68, 0xe1, 0xb4, 0xf7, 0xdf, 0xbc, 0x4c, 0x4c, 0xb8, 0xda,
	0xbf, 0xf9, 0xec, 0xf9, 0x76, 0xe1, 0x6f, 0xcf, 0xb7, 0xaf, 0xfc, 0x07, 0xff, 0xfd, 0xc5, 0x8b,
	0xed, 0xc2, 0x6f, 0xf1, 0xf3, 0x17, 0xfc, 0x3c, 0xc3, 0xcf, 0x3f, 0xf1, 0xf3, 0xef, 0x17, 0xc8,
	0xc3, 0x7f, 0x7f, 0xf5, 0xaf, 0xed, 0x2b, 0xa7, 0xab, 0xfc, 0x4f, 0xd6, 0x77, 0xfe, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0xbb, 0x4b, 0x70, 0xd7, 0xf4, 0x16, 0x00, 0x00,
}
