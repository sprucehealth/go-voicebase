// Code generated by protoc-gen-gogo.
// source: svc.proto
// DO NOT EDIT!

/*
	Package care is a generated protocol buffer package.

	It is generated from these files:
		svc.proto

	It has these top-level messages:
		Visit
		CreateVisitRequest
		CreateVisitResponse
		GetVisitRequest
		GetVisitResponse
		CreateVisitAnswersRequest
		CreateVisitAnswersResponse
		GetAnswersForVisitRequest
		GetAnswersForVisitResponse
		SubmitVisitRequest
		SubmitVisitResponse
*/
package care

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Visit struct {
	ID              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LayoutVersionID string `protobuf:"bytes,3,opt,name=layout_version_id,proto3" json:"layout_version_id,omitempty"`
	EntityID        string `protobuf:"bytes,4,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Submitted       bool   `protobuf:"varint,5,opt,name=submitted,proto3" json:"submitted,omitempty"`
	OrganizationID  string `protobuf:"bytes,6,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
}

func (m *Visit) Reset()      { *m = Visit{} }
func (*Visit) ProtoMessage() {}

type CreateVisitRequest struct {
	LayoutVersionID string `protobuf:"bytes,1,opt,name=layout_version_id,proto3" json:"layout_version_id,omitempty"`
	EntityID        string `protobuf:"bytes,2,opt,name=entity_id,proto3" json:"entity_id,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationID  string `protobuf:"bytes,4,opt,name=organization_id,proto3" json:"organization_id,omitempty"`
}

func (m *CreateVisitRequest) Reset()      { *m = CreateVisitRequest{} }
func (*CreateVisitRequest) ProtoMessage() {}

type CreateVisitResponse struct {
	Visit *Visit `protobuf:"bytes,1,opt,name=visit" json:"visit,omitempty"`
}

func (m *CreateVisitResponse) Reset()      { *m = CreateVisitResponse{} }
func (*CreateVisitResponse) ProtoMessage() {}

func (m *CreateVisitResponse) GetVisit() *Visit {
	if m != nil {
		return m.Visit
	}
	return nil
}

type GetVisitRequest struct {
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetVisitRequest) Reset()      { *m = GetVisitRequest{} }
func (*GetVisitRequest) ProtoMessage() {}

type GetVisitResponse struct {
	Visit *Visit `protobuf:"bytes,1,opt,name=visit" json:"visit,omitempty"`
}

func (m *GetVisitResponse) Reset()      { *m = GetVisitResponse{} }
func (*GetVisitResponse) ProtoMessage() {}

func (m *GetVisitResponse) GetVisit() *Visit {
	if m != nil {
		return m.Visit
	}
	return nil
}

type CreateVisitAnswersRequest struct {
	VisitID       string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
	AnswersJSON   string `protobuf:"bytes,2,opt,name=answers_json,proto3" json:"answers_json,omitempty"`
	ActorEntityID string `protobuf:"bytes,3,opt,name=actory_entity_id,proto3" json:"actory_entity_id,omitempty"`
}

func (m *CreateVisitAnswersRequest) Reset()      { *m = CreateVisitAnswersRequest{} }
func (*CreateVisitAnswersRequest) ProtoMessage() {}

type CreateVisitAnswersResponse struct {
}

func (m *CreateVisitAnswersResponse) Reset()      { *m = CreateVisitAnswersResponse{} }
func (*CreateVisitAnswersResponse) ProtoMessage() {}

type GetAnswersForVisitRequest struct {
	VisitID string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
}

func (m *GetAnswersForVisitRequest) Reset()      { *m = GetAnswersForVisitRequest{} }
func (*GetAnswersForVisitRequest) ProtoMessage() {}

type GetAnswersForVisitResponse struct {
	AnswersJSON string `protobuf:"bytes,1,opt,name=answers_json,proto3" json:"answers_json,omitempty"`
}

func (m *GetAnswersForVisitResponse) Reset()      { *m = GetAnswersForVisitResponse{} }
func (*GetAnswersForVisitResponse) ProtoMessage() {}

type SubmitVisitRequest struct {
	VisitID string `protobuf:"bytes,1,opt,name=visit_id,proto3" json:"visit_id,omitempty"`
}

func (m *SubmitVisitRequest) Reset()      { *m = SubmitVisitRequest{} }
func (*SubmitVisitRequest) ProtoMessage() {}

type SubmitVisitResponse struct {
}

func (m *SubmitVisitResponse) Reset()      { *m = SubmitVisitResponse{} }
func (*SubmitVisitResponse) ProtoMessage() {}

func init() {
	proto.RegisterType((*Visit)(nil), "care.Visit")
	proto.RegisterType((*CreateVisitRequest)(nil), "care.CreateVisitRequest")
	proto.RegisterType((*CreateVisitResponse)(nil), "care.CreateVisitResponse")
	proto.RegisterType((*GetVisitRequest)(nil), "care.GetVisitRequest")
	proto.RegisterType((*GetVisitResponse)(nil), "care.GetVisitResponse")
	proto.RegisterType((*CreateVisitAnswersRequest)(nil), "care.CreateVisitAnswersRequest")
	proto.RegisterType((*CreateVisitAnswersResponse)(nil), "care.CreateVisitAnswersResponse")
	proto.RegisterType((*GetAnswersForVisitRequest)(nil), "care.GetAnswersForVisitRequest")
	proto.RegisterType((*GetAnswersForVisitResponse)(nil), "care.GetAnswersForVisitResponse")
	proto.RegisterType((*SubmitVisitRequest)(nil), "care.SubmitVisitRequest")
	proto.RegisterType((*SubmitVisitResponse)(nil), "care.SubmitVisitResponse")
}
func (this *Visit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Visit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.LayoutVersionID != that1.LayoutVersionID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Submitted != that1.Submitted {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *CreateVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.LayoutVersionID != that1.LayoutVersionID {
		return false
	}
	if this.EntityID != that1.EntityID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OrganizationID != that1.OrganizationID {
		return false
	}
	return true
}
func (this *CreateVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *GetVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *GetVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Visit.Equal(that1.Visit) {
		return false
	}
	return true
}
func (this *CreateVisitAnswersRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitAnswersRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	if this.AnswersJSON != that1.AnswersJSON {
		return false
	}
	if this.ActorEntityID != that1.ActorEntityID {
		return false
	}
	return true
}
func (this *CreateVisitAnswersResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateVisitAnswersResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAnswersForVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAnswersForVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	return true
}
func (this *GetAnswersForVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetAnswersForVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AnswersJSON != that1.AnswersJSON {
		return false
	}
	return true
}
func (this *SubmitVisitRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitVisitRequest)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.VisitID != that1.VisitID {
		return false
	}
	return true
}
func (this *SubmitVisitResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SubmitVisitResponse)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Visit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&care.Visit{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "LayoutVersionID: "+fmt.Sprintf("%#v", this.LayoutVersionID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Submitted: "+fmt.Sprintf("%#v", this.Submitted)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&care.CreateVisitRequest{")
	s = append(s, "LayoutVersionID: "+fmt.Sprintf("%#v", this.LayoutVersionID)+",\n")
	s = append(s, "EntityID: "+fmt.Sprintf("%#v", this.EntityID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "OrganizationID: "+fmt.Sprintf("%#v", this.OrganizationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.CreateVisitResponse{")
	if this.Visit != nil {
		s = append(s, "Visit: "+fmt.Sprintf("%#v", this.Visit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetVisitRequest{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetVisitResponse{")
	if this.Visit != nil {
		s = append(s, "Visit: "+fmt.Sprintf("%#v", this.Visit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitAnswersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&care.CreateVisitAnswersRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "AnswersJSON: "+fmt.Sprintf("%#v", this.AnswersJSON)+",\n")
	s = append(s, "ActorEntityID: "+fmt.Sprintf("%#v", this.ActorEntityID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateVisitAnswersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.CreateVisitAnswersResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAnswersForVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetAnswersForVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAnswersForVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.GetAnswersForVisitResponse{")
	s = append(s, "AnswersJSON: "+fmt.Sprintf("%#v", this.AnswersJSON)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitVisitRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&care.SubmitVisitRequest{")
	s = append(s, "VisitID: "+fmt.Sprintf("%#v", this.VisitID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitVisitResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&care.SubmitVisitResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSvc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSvc(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Care service

type CareClient interface {
	CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitResponse, error)
	GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitResponse, error)
	CreateVisitAnswers(ctx context.Context, in *CreateVisitAnswersRequest, opts ...grpc.CallOption) (*CreateVisitAnswersResponse, error)
	GetAnswersForVisit(ctx context.Context, in *GetAnswersForVisitRequest, opts ...grpc.CallOption) (*GetAnswersForVisitResponse, error)
	SubmitVisit(ctx context.Context, in *SubmitVisitRequest, opts ...grpc.CallOption) (*SubmitVisitResponse, error)
}

type careClient struct {
	cc *grpc.ClientConn
}

func NewCareClient(cc *grpc.ClientConn) CareClient {
	return &careClient{cc}
}

func (c *careClient) CreateVisit(ctx context.Context, in *CreateVisitRequest, opts ...grpc.CallOption) (*CreateVisitResponse, error) {
	out := new(CreateVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) GetVisit(ctx context.Context, in *GetVisitRequest, opts ...grpc.CallOption) (*GetVisitResponse, error) {
	out := new(GetVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/GetVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) CreateVisitAnswers(ctx context.Context, in *CreateVisitAnswersRequest, opts ...grpc.CallOption) (*CreateVisitAnswersResponse, error) {
	out := new(CreateVisitAnswersResponse)
	err := grpc.Invoke(ctx, "/care.Care/CreateVisitAnswers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) GetAnswersForVisit(ctx context.Context, in *GetAnswersForVisitRequest, opts ...grpc.CallOption) (*GetAnswersForVisitResponse, error) {
	out := new(GetAnswersForVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/GetAnswersForVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *careClient) SubmitVisit(ctx context.Context, in *SubmitVisitRequest, opts ...grpc.CallOption) (*SubmitVisitResponse, error) {
	out := new(SubmitVisitResponse)
	err := grpc.Invoke(ctx, "/care.Care/SubmitVisit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Care service

type CareServer interface {
	CreateVisit(context.Context, *CreateVisitRequest) (*CreateVisitResponse, error)
	GetVisit(context.Context, *GetVisitRequest) (*GetVisitResponse, error)
	CreateVisitAnswers(context.Context, *CreateVisitAnswersRequest) (*CreateVisitAnswersResponse, error)
	GetAnswersForVisit(context.Context, *GetAnswersForVisitRequest) (*GetAnswersForVisitResponse, error)
	SubmitVisit(context.Context, *SubmitVisitRequest) (*SubmitVisitResponse, error)
}

func RegisterCareServer(s *grpc.Server, srv CareServer) {
	s.RegisterService(&_Care_serviceDesc, srv)
}

func _Care_CreateVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).CreateVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_GetVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).GetVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_CreateVisitAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateVisitAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).CreateVisitAnswers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_GetAnswersForVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAnswersForVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).GetAnswersForVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Care_SubmitVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SubmitVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CareServer).SubmitVisit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Care_serviceDesc = grpc.ServiceDesc{
	ServiceName: "care.Care",
	HandlerType: (*CareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVisit",
			Handler:    _Care_CreateVisit_Handler,
		},
		{
			MethodName: "GetVisit",
			Handler:    _Care_GetVisit_Handler,
		},
		{
			MethodName: "CreateVisitAnswers",
			Handler:    _Care_CreateVisitAnswers_Handler,
		},
		{
			MethodName: "GetAnswersForVisit",
			Handler:    _Care_GetAnswersForVisit_Handler,
		},
		{
			MethodName: "SubmitVisit",
			Handler:    _Care_SubmitVisit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Visit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Visit) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.LayoutVersionID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LayoutVersionID)))
		i += copy(data[i:], m.LayoutVersionID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if m.Submitted {
		data[i] = 0x28
		i++
		if m.Submitted {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	return i, nil
}

func (m *CreateVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LayoutVersionID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.LayoutVersionID)))
		i += copy(data[i:], m.LayoutVersionID)
	}
	if len(m.EntityID) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.EntityID)))
		i += copy(data[i:], m.EntityID)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.OrganizationID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.OrganizationID)))
		i += copy(data[i:], m.OrganizationID)
	}
	return i, nil
}

func (m *CreateVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n1, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ID)))
		i += copy(data[i:], m.ID)
	}
	return i, nil
}

func (m *GetVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visit != nil {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(m.Visit.Size()))
		n2, err := m.Visit.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreateVisitAnswersRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitAnswersRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	if len(m.AnswersJSON) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AnswersJSON)))
		i += copy(data[i:], m.AnswersJSON)
	}
	if len(m.ActorEntityID) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.ActorEntityID)))
		i += copy(data[i:], m.ActorEntityID)
	}
	return i, nil
}

func (m *CreateVisitAnswersResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CreateVisitAnswersResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAnswersForVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAnswersForVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	return i, nil
}

func (m *GetAnswersForVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GetAnswersForVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AnswersJSON) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.AnswersJSON)))
		i += copy(data[i:], m.AnswersJSON)
	}
	return i, nil
}

func (m *SubmitVisitRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitVisitRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VisitID) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintSvc(data, i, uint64(len(m.VisitID)))
		i += copy(data[i:], m.VisitID)
	}
	return i, nil
}

func (m *SubmitVisitResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubmitVisitResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Svc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Svc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSvc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Visit) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.LayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Submitted {
		n += 2
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.LayoutVersionID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.EntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.OrganizationID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetVisitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Visit != nil {
		l = m.Visit.Size()
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitAnswersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AnswersJSON)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ActorEntityID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *CreateVisitAnswersResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetAnswersForVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *GetAnswersForVisitResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.AnswersJSON)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitVisitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.VisitID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *SubmitVisitResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Visit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Visit{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`LayoutVersionID:` + fmt.Sprintf("%v", this.LayoutVersionID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Submitted:` + fmt.Sprintf("%v", this.Submitted) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitRequest{`,
		`LayoutVersionID:` + fmt.Sprintf("%v", this.LayoutVersionID) + `,`,
		`EntityID:` + fmt.Sprintf("%v", this.EntityID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OrganizationID:` + fmt.Sprintf("%v", this.OrganizationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitResponse{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "Visit", "Visit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitRequest{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetVisitResponse{`,
		`Visit:` + strings.Replace(fmt.Sprintf("%v", this.Visit), "Visit", "Visit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitAnswersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitAnswersRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`AnswersJSON:` + fmt.Sprintf("%v", this.AnswersJSON) + `,`,
		`ActorEntityID:` + fmt.Sprintf("%v", this.ActorEntityID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateVisitAnswersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateVisitAnswersResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetAnswersForVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAnswersForVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAnswersForVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAnswersForVisitResponse{`,
		`AnswersJSON:` + fmt.Sprintf("%v", this.AnswersJSON) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitVisitRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitVisitRequest{`,
		`VisitID:` + fmt.Sprintf("%v", this.VisitID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitVisitResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitVisitResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringSvc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Visit) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Submitted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutVersionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LayoutVersionID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visit == nil {
				m.Visit = &Visit{}
			}
			if err := m.Visit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visit == nil {
				m.Visit = &Visit{}
			}
			if err := m.Visit.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitAnswersRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitAnswersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitAnswersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersJSON = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorEntityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorEntityID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateVisitAnswersResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateVisitAnswersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateVisitAnswersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAnswersForVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAnswersForVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAnswersForVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAnswersForVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAnswersForVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAnswersForVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersJSON", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersJSON = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitVisitRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitVisitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitVisitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisitID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisitID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitVisitResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitVisitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitVisitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)
