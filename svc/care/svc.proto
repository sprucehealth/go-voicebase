syntax = "proto3";

package care;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// Visit is a unit of information requested from a patient
// to provide a provider with information to aid in the diagnosis
// of a patient condition.
message Visit {
	string id = 1 [(gogoproto.customname) = "ID"];
	string name = 2;
	string layout_version_id = 3 [(gogoproto.customname) = "LayoutVersionID"];
	string entity_id = 4 [(gogoproto.customname) = "EntityID"];
	bool submitted = 5;
	string organization_id = 6 [(gogoproto.customname)="OrganizationID"];
	string creator_id = 7 [(gogoproto.customname)="CreatorID"];
	bool triaged = 8;
	message Preference {
		bool optional_triage = 1;
	}
	Preference preferences = 9;
}



// Anwer represents a response to a particular question in the visit.
message Answer {
  string question_id = 1 [(gogoproto.customname) = "QuestionID"];
  oneof answer {
    FreeTextAnswer free_text = 10;
    MultipleChoiceAnswer multiple_choice = 11;
    SingleSelectAnswer single_select = 12;
    AutocompleteAnswer autocomplete = 13;
    PhotoSectionAnswer photo_section = 14;
    SingleEntryAnswer single_entry = 15;
    SegmentedControlAnswer segmented_control = 16;
  }
}

// FreeTextAnswer represents a free text response to a question.
message FreeTextAnswer {
  string free_text = 1;
}

// MultipleChoiceAnswer represents a response that contains multiple options
// selected by the patient from a list of available options in a question.
message MultipleChoiceAnswer {
  repeated AnswerOption selected_answers = 1;
}

// SingleSelectAnswer represents a response that contains a single option
// selected from a list of available options.
message SingleSelectAnswer {
  AnswerOption selected_answer = 1;
}

// SegmentedControlAnswer represents a single option selected from a list of
// available options.
message SegmentedControlAnswer {
  AnswerOption selected_answer = 1;
}

// SingleEntryAnswer represents a single free text response to a question.
message SingleEntryAnswer {
  string free_text = 1;
}

// AnswerOption represents a single selection that is part of an answer.
message AnswerOption {
  string id = 1 [(gogoproto.customname) = "ID"];
  string free_text = 2;
  map<string,Answer> sub_answers = 3;
}

// AutocompleteAnswerItem represents a single entry that is part of the
// autocomplete answer.
message AutocompleteAnswerItem {
  string answer = 1;
  map<string,Answer> sub_answers = 2;
}

// AutocompleteAnswer represents a response to a question that uses an
// external data source to autocomplete the answer.
message AutocompleteAnswer {
  repeated AutocompleteAnswerItem items = 1;
}

// PhotoSectionAnswer represents a series of photos pertaining to a question.
message PhotoSectionAnswer {
  message PhotoSectionItem {
    message PhotoSlotItem {
        string slot_id = 1 [(gogoproto.customname) = "SlotID"];
        string name = 2;
        string media_id = 3 [(gogoproto.customname) = "MediaID"];
				string url = 4 [(gogoproto.customname) = "URL"];
    }

    string name = 1;
    repeated PhotoSlotItem slots = 2;
  }

  repeated PhotoSectionItem sections = 1;
}

message CreateVisitRequest {
	string layout_version_id = 1 [(gogoproto.customname) = "LayoutVersionID"];
	string entity_id = 2 [(gogoproto.customname) = "EntityID"];
	string name = 3;
	string organization_id = 4 [(gogoproto.customname) = "OrganizationID"];
	string creator_id = 5 [(gogoproto.customname) = "CreatorID"];
}

message CreateVisitResponse {
	Visit visit = 1;
}

message GetVisitRequest {
	string id = 1 [(gogoproto.customname) = "ID"];
}

message GetVisitResponse {
	Visit visit = 1;
}

message CreateVisitAnswersRequest {
	string visit_id = 1 [(gogoproto.customname) = "VisitID"];
	string answers_json = 2 [(gogoproto.customname) = "AnswersJSON"];
	string actory_entity_id = 3 [(gogoproto.customname) = "ActorEntityID"];
}

message CreateVisitAnswersResponse {
}

message GetAnswersForVisitRequest {
	string visit_id = 1 [(gogoproto.customname) = "VisitID"];
	bool serialized_for_patient = 2;
}

message GetAnswersForVisitResponse {
	string patient_answers_json = 1 [(gogoproto.customname) = "PatientAnswersJSON"];
	map<string,Answer> answers = 2;
}

message SubmitVisitRequest {
	string visit_id = 1 [(gogoproto.customname)="VisitID"];
}

message SubmitVisitResponse {}

message TriageVisitRequest {
	string visit_id = 1 [(gogoproto.customname)="VisitID"];
}

message TriageVisitResponse {}

message CarePlan {
	string id = 1 [(gogoproto.customname) = "ID"];
	string name = 2;
	repeated CarePlanTreatment treatments = 3;
	repeated CarePlanInstruction instructions = 4;
	uint64 created_timestamp = 5;
	string creator_id = 6 [(gogoproto.customname) = "CreatorID"];
	bool submitted = 7;
	string parent_id = 8 [(gogoproto.customname) = "ParentID"];
	uint64 submitted_timestamp = 9;
}

message CarePlanTreatment {
	enum Availability {
		UNKNOWN = 0;
		OTC = 1;
		RX = 2;
	}
	bool ePrescribe = 1;
	Availability availability = 2;
	string name = 3;
	string route = 4;
	string form = 5;
	string medication_id = 6 [(gogoproto.customname) = "MedicationID"];
	string dosage = 7;
	string dispense_type = 8;
	uint32 dispense_number = 9;
	uint32 refills = 10;
	bool substitutions_allowed = 11;
	uint32 days_supply = 12;
	string sig = 13;
	string pharmacy_id = 14 [(gogoproto.customname) = "PharmacyID"];
	string pharmacy_instructions = 15;
}

message CarePlanInstruction {
	string title = 1;
	repeated string steps = 2;
}

message CarePlanRequest {
	string id = 1 [(gogoproto.customname) = "ID"];
}

message CarePlanResponse {
	CarePlan care_plan = 1;
}

message CreateCarePlanRequest {
	string name = 1;
	repeated CarePlanTreatment treatments = 2;
	repeated CarePlanInstruction instructions = 3;
	string creator_id = 4 [(gogoproto.customname) = "CreatorID"];
}

message CreateCarePlanResponse {
	CarePlan care_plan = 1;
}

message SubmitCarePlanRequest {
	string id = 1 [(gogoproto.customname) = "ID"];
	string parent_id = 2 [(gogoproto.customname) = "ParentID"];
}

message SubmitCarePlanResponse {
	CarePlan care_plan = 1;
}

message Medication {
	string id = 1 [(gogoproto.customname) = "ID"];
	string name = 2;
	string route = 3;
	string form = 4;
	repeated MedicationStrength strengths = 5;
}

message MedicationStrength {
	bool otc = 1 [(gogoproto.customname) = "OTC"];
	uint32 schedule = 2;
	string strength = 3;
	string dispense_unit = 4;
	string generic_name = 5;
	uint64 lexi_gen_product_id = 6 [(gogoproto.customname) = "LexiGenProductID"];
	uint64 lexi_drug_syn_id = 7 [(gogoproto.customname) = "LexiDrugSynID"];
	uint64 lexi_synonym_type_id = 8 [(gogoproto.customname) = "LexiSynonymTypeID"];
	string ndc = 9 [(gogoproto.customname) = "NDC"];
}

message SearchMedicationsRequest {
	uint64 clinic_id = 1 [(gogoproto.customname) = "ClinicID"];
	uint64 clinician_id = 2 [(gogoproto.customname) = "ClinicianID"];
	string query = 3;
}

message SearchMedicationsResponse {
	repeated Medication medications = 1;
}

message SearchSelfReportedMedicationsRequest {
	string query = 1;
}

message SearchSelfReportedMedicationsResponse {
	repeated string results = 1;
}

message SearchAllergyMedicationsRequest {
	string query = 1;
}

message SearchAllergyMedicationsResponse {
	repeated string results = 1;
}

service Care {
	rpc CreateVisit(CreateVisitRequest) returns (CreateVisitResponse);
	rpc GetVisit(GetVisitRequest) returns (GetVisitResponse);
	rpc CreateVisitAnswers(CreateVisitAnswersRequest) returns (CreateVisitAnswersResponse);
	rpc GetAnswersForVisit(GetAnswersForVisitRequest) returns (GetAnswersForVisitResponse);
	rpc SubmitVisit(SubmitVisitRequest) returns (SubmitVisitResponse);
	rpc TriageVisit(TriageVisitRequest) returns (TriageVisitResponse);

	// Care plans

	// CarePlan returns a care plan by its ID
	rpc CarePlan(CarePlanRequest) returns (CarePlanResponse);
	// CreateCarePlan creates a new care plan
	rpc CreateCarePlan(CreateCarePlanRequest) returns (CreateCarePlanResponse);
	// SubmitCarePlan submits a care plan and attaches it to a parent, it can only be called once per care plan.
	// Any Rx attached to the care plan will be submitted at this point.
	rpc SubmitCarePlan(SubmitCarePlanRequest) returns (SubmitCarePlanResponse);

	// Medication and Rx

	// SearchMedication
	rpc SearchMedications(SearchMedicationsRequest) returns (SearchMedicationsResponse);

	// SearchSelfReportedMedications does a search for self reported medication names based on specified query.
	rpc SearchSelfReportedMedications(SearchSelfReportedMedicationsRequest) returns (SearchSelfReportedMedicationsResponse);

	// SearchAllergyMedications does a search against the drug database for allergy medications based on the specified query.
	rpc SearchAllergyMedications(SearchAllergyMedicationsRequest) returns (SearchAllergyMedicationsResponse);
}
