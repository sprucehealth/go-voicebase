// This file is automatically generated. Do not modify.

package thriftapi

import (
	"fmt"
)

var _ = fmt.Printf

type AuthResponse struct {
	Token     string `thrift:"1,required" json:"token"`
	AccountId int64  `thrift:"2,required" json:"account_id"`
}

type TokenValidationResponse struct {
	IsValid   bool   `thrift:"1,required" json:"is_valid"`
	AccountId *int64 `thrift:"2" json:"account_id,omitempty"`
}

type LoginAlreadyExists struct {
	AccountId int64 `thrift:"1,required" json:"account_id"`
}

func (e *LoginAlreadyExists) Error() string {
	return fmt.Sprintf("LoginAlreadyExists{AccountId: %+v}", e.AccountId)
}

type NoSuchLogin struct {
}

func (e *NoSuchLogin) Error() string {
	return "NoSuchLogin{}"
}

type Auth interface {
	Login(login string, password string) (*AuthResponse, error)
	Logout(token string) error
	Signup(login string, password string) (*AuthResponse, error)
	ValidateToken(token string) (*TokenValidationResponse, error)
}

type AuthServer struct {
	Implementation Auth
}

func (s *AuthServer) Login(req *AuthLoginRequest, res *AuthLoginResponse) error {
	val, err := s.Implementation.Login(req.Login, req.Password)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	case *NoSuchLogin:
		res.NoSuchLogin = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *AuthServer) Logout(req *AuthLogoutRequest, res *AuthLogoutResponse) error {
	err := s.Implementation.Logout(req.Token)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	}
	return err
}

func (s *AuthServer) Signup(req *AuthSignupRequest, res *AuthSignupResponse) error {
	val, err := s.Implementation.Signup(req.Login, req.Password)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	case *LoginAlreadyExists:
		res.AlreadyExists = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *AuthServer) ValidateToken(req *AuthValidateTokenRequest, res *AuthValidateTokenResponse) error {
	val, err := s.Implementation.ValidateToken(req.Token)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	}
	res.Value = val
	return err
}

type AuthLoginRequest struct {
	Login    string `thrift:"1,required" json:"login"`
	Password string `thrift:"2,required" json:"password"`
}

type AuthLoginResponse struct {
	Value        *AuthResponse        `thrift:"0" json:"value,omitempty"`
	Error        *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
	NoSuchLogin  *NoSuchLogin         `thrift:"4" json:"no_such_login,omitempty"`
}

type AuthLogoutRequest struct {
	Token string `thrift:"1,required" json:"token"`
}

type AuthLogoutResponse struct {
	Error        *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
}

type AuthSignupRequest struct {
	Login    string `thrift:"1,required" json:"login"`
	Password string `thrift:"2,required" json:"password"`
}

type AuthSignupResponse struct {
	Value         *AuthResponse        `thrift:"0" json:"value,omitempty"`
	Error         *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied  *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity  *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
	AlreadyExists *LoginAlreadyExists  `thrift:"4" json:"already_exists,omitempty"`
}

type AuthValidateTokenRequest struct {
	Token string `thrift:"1,required" json:"token"`
}

type AuthValidateTokenResponse struct {
	Value        *TokenValidationResponse `thrift:"0" json:"value,omitempty"`
	Error        *InternalServerError     `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied            `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity            `thrift:"3" json:"over_capacity,omitempty"`
}

type AuthClient struct {
	Client RPCClient
}

func (s *AuthClient) Login(login string, password string) (ret *AuthResponse, err error) {
	req := &AuthLoginRequest{
		Login:    login,
		Password: password,
	}
	res := &AuthLoginResponse{}
	err = s.Client.Call("login", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		case res.NoSuchLogin != nil:
			err = res.NoSuchLogin
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}

func (s *AuthClient) Logout(token string) (err error) {
	req := &AuthLogoutRequest{
		Token: token,
	}
	res := &AuthLogoutResponse{}
	err = s.Client.Call("logout", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		}
	}
	return
}

func (s *AuthClient) Signup(login string, password string) (ret *AuthResponse, err error) {
	req := &AuthSignupRequest{
		Login:    login,
		Password: password,
	}
	res := &AuthSignupResponse{}
	err = s.Client.Call("signup", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		case res.AlreadyExists != nil:
			err = res.AlreadyExists
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}

func (s *AuthClient) ValidateToken(token string) (ret *TokenValidationResponse, err error) {
	req := &AuthValidateTokenRequest{
		Token: token,
	}
	res := &AuthValidateTokenResponse{}
	err = s.Client.Call("validate_token", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}
