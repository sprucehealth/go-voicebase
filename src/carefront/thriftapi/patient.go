// This file is automatically generated. Do not modify.

package thriftapi

import (
	"fmt"
)

var _ = fmt.Printf

type Patient struct {
	PatientId int64   `thrift:"1,required" json:"patient_id"`
	AccountId int64   `thrift:"2,required" json:"account_id"`
	FirstName *string `thrift:"3" json:"first_name,omitempty"`
	LastName  *string `thrift:"4" json:"last_name,omitempty"`
	Dob       *int64  `thrift:"5" json:"dob,omitempty"`
	Gender    *string `thrift:"6" json:"gender,omitempty"`
	Zipcode   *string `thrift:"7" json:"zipcode,omitempty"`
}

type DoesNotExist struct {
}

func (e *DoesNotExist) Error() string {
	return "DoesNotExist{}"
}

type PatientAPI interface {
	CreateNewPatientVisit(patientId int64, healthConditionId int64, layoutVersionId int64) (int64, error)
	GetPatientFromId(patientId int64) (*Patient, error)
	GetPatientsForAccount(accountId int64) ([]*Patient, error)
	RegisterPatient(patient *Patient) (int64, error)
}

type PatientAPIServer struct {
	Implementation PatientAPI
}

func (s *PatientAPIServer) CreateNewPatientVisit(req *PatientAPICreateNewPatientVisitRequest, res *PatientAPICreateNewPatientVisitResponse) error {
	val, err := s.Implementation.CreateNewPatientVisit(req.PatientId, req.HealthConditionId, req.LayoutVersionId)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	}
	res.Value = &val
	return err
}

func (s *PatientAPIServer) GetPatientFromId(req *PatientAPIGetPatientFromIdRequest, res *PatientAPIGetPatientFromIdResponse) error {
	val, err := s.Implementation.GetPatientFromId(req.PatientId)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	case *DoesNotExist:
		res.DoesNotExist = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *PatientAPIServer) GetPatientsForAccount(req *PatientAPIGetPatientsForAccountRequest, res *PatientAPIGetPatientsForAccountResponse) error {
	val, err := s.Implementation.GetPatientsForAccount(req.AccountId)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *PatientAPIServer) RegisterPatient(req *PatientAPIRegisterPatientRequest, res *PatientAPIRegisterPatientResponse) error {
	val, err := s.Implementation.RegisterPatient(req.Patient)
	switch e := err.(type) {
	case *InternalServerError:
		res.Error = e
		err = nil
	case *AccessDenied:
		res.AccessDenied = e
		err = nil
	case *OverCapacity:
		res.OverCapacity = e
		err = nil
	}
	res.Value = &val
	return err
}

type PatientAPICreateNewPatientVisitRequest struct {
	PatientId         int64 `thrift:"1,required" json:"patient_id"`
	HealthConditionId int64 `thrift:"2,required" json:"health_condition_id"`
	LayoutVersionId   int64 `thrift:"3,required" json:"layout_version_id"`
}

type PatientAPICreateNewPatientVisitResponse struct {
	Value        *int64               `thrift:"0" json:"value,omitempty"`
	Error        *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
}

type PatientAPIGetPatientFromIdRequest struct {
	PatientId int64 `thrift:"1,required" json:"patient_id"`
}

type PatientAPIGetPatientFromIdResponse struct {
	Value        *Patient             `thrift:"0" json:"value,omitempty"`
	Error        *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
	DoesNotExist *DoesNotExist        `thrift:"4" json:"does_not_exist,omitempty"`
}

type PatientAPIGetPatientsForAccountRequest struct {
	AccountId int64 `thrift:"1,required" json:"account_id"`
}

type PatientAPIGetPatientsForAccountResponse struct {
	Value        []*Patient           `thrift:"0" json:"value,omitempty"`
	Error        *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
}

type PatientAPIRegisterPatientRequest struct {
	Patient *Patient `thrift:"1,required" json:"patient"`
}

type PatientAPIRegisterPatientResponse struct {
	Value        *int64               `thrift:"0" json:"value,omitempty"`
	Error        *InternalServerError `thrift:"1" json:"error,omitempty"`
	AccessDenied *AccessDenied        `thrift:"2" json:"access_denied,omitempty"`
	OverCapacity *OverCapacity        `thrift:"3" json:"over_capacity,omitempty"`
}

type PatientAPIClient struct {
	Client RPCClient
}

func (s *PatientAPIClient) CreateNewPatientVisit(patientId int64, healthConditionId int64, layoutVersionId int64) (ret int64, err error) {
	req := &PatientAPICreateNewPatientVisitRequest{
		PatientId:         patientId,
		HealthConditionId: healthConditionId,
		LayoutVersionId:   layoutVersionId,
	}
	res := &PatientAPICreateNewPatientVisitResponse{}
	err = s.Client.Call("create_new_patient_visit", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		}
	}
	if err == nil && res.Value != nil {
		ret = *res.Value
	}
	return
}

func (s *PatientAPIClient) GetPatientFromId(patientId int64) (ret *Patient, err error) {
	req := &PatientAPIGetPatientFromIdRequest{
		PatientId: patientId,
	}
	res := &PatientAPIGetPatientFromIdResponse{}
	err = s.Client.Call("get_patient_from_id", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		case res.DoesNotExist != nil:
			err = res.DoesNotExist
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}

func (s *PatientAPIClient) GetPatientsForAccount(accountId int64) (ret []*Patient, err error) {
	req := &PatientAPIGetPatientsForAccountRequest{
		AccountId: accountId,
	}
	res := &PatientAPIGetPatientsForAccountResponse{}
	err = s.Client.Call("get_patients_for_account", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		}
	}
	if err == nil {
		ret = res.Value
	}
	return
}

func (s *PatientAPIClient) RegisterPatient(patient *Patient) (ret int64, err error) {
	req := &PatientAPIRegisterPatientRequest{
		Patient: patient,
	}
	res := &PatientAPIRegisterPatientResponse{}
	err = s.Client.Call("register_patient", req, res)
	if err == nil {
		switch {
		case res.Error != nil:
			err = res.Error
		case res.AccessDenied != nil:
			err = res.AccessDenied
		case res.OverCapacity != nil:
			err = res.OverCapacity
		}
	}
	if err == nil && res.Value != nil {
		ret = *res.Value
	}
	return
}
