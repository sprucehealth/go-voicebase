package doctor_queue

import (
	"errors"
	"fmt"

	"github.com/sprucehealth/backend/app_url"

	"github.com/sprucehealth/backend/Godeps/_workspace/src/github.com/samuel/go-metrics/metrics"
	"github.com/sprucehealth/backend/analytics"
	"github.com/sprucehealth/backend/api"
	"github.com/sprucehealth/backend/app_event"
	"github.com/sprucehealth/backend/app_worker"
	"github.com/sprucehealth/backend/common"
	"github.com/sprucehealth/backend/cost"
	"github.com/sprucehealth/backend/doctor"
	"github.com/sprucehealth/backend/doctor_treatment_plan"
	"github.com/sprucehealth/backend/libs/dispatch"
	"github.com/sprucehealth/backend/libs/golog"
	"github.com/sprucehealth/backend/messages"
	"github.com/sprucehealth/backend/notify"
	"github.com/sprucehealth/backend/patient_visit"
)

const (
	caseAssignmentMessage = "A Spruce patient case has been assigned to you."
)

func InitListeners(dataAPI api.DataAPI, analyticsLogger analytics.Logger, dispatcher *dispatch.Dispatcher,
	notificationManager *notify.NotificationManager, statsRegistry metrics.Registry, jbcqMinutesThreshold int, customerSupportEmail string) {
	initJumpBallCaseQueueListeners(dataAPI, analyticsLogger, dispatcher, statsRegistry, jbcqMinutesThreshold)

	routeSuccess := metrics.NewCounter()
	routeFailure := metrics.NewCounter()
	statsRegistry.Add("route/success", routeSuccess)
	statsRegistry.Add("route/failure", routeFailure)

	dispatcher.Subscribe(func(ev *cost.VisitChargedEvent) error {
		// route the incoming visit to a doctor queue
		if err := routeIncomingPatientVisit(ev, dataAPI, notificationManager); err != nil {
			routeFailure.Inc(1)
			golog.Errorf("Unable to route incoming patient visit: %s", err)
			return err
		}
		routeSuccess.Inc(1)
		return nil
	})

	dispatcher.Subscribe(func(ev *doctor_treatment_plan.TreatmentPlanSubmittedEvent) error {
		assignments, err := dataAPI.GetActiveMembersOfCareTeamForCase(ev.TreatmentPlan.PatientCaseID.Int64(), false)
		if err != nil {
			golog.Errorf("Unable to get care team of patient case: %s", err)
			return err
		}

		var maID int64
		var doctorID int64
		for _, assignment := range assignments {
			switch assignment.ProviderRole {
			case api.MA_ROLE:
				maID = assignment.ProviderID
			case api.DOCTOR_ROLE:
				doctorID = assignment.ProviderID
			}
		}

		doctor, err := dataAPI.GetDoctorFromID(doctorID)
		if err != nil {
			golog.Errorf("Doctor lookup failed: %s", err.Error())
		}

		patient, err := dataAPI.Patient(ev.TreatmentPlan.PatientID, true)
		if err != nil {
			golog.Errorf("Patient lookup failed: %s", err.Error())
		}

		if doctor != nil {
			if err := dataAPI.UpdatePatientCaseFeedItem(&common.PatientCaseFeedItem{
				DoctorID:  doctor.DoctorID.Int64(),
				PatientID: ev.TreatmentPlan.PatientID,
				CaseID:    ev.TreatmentPlan.PatientCaseID.Int64(),
				LastEvent: "Treatment plan completed by " + doctor.LongDisplayName,
				ActionURL: *app_url.ViewCaseAction(ev.TreatmentPlan.PatientCaseID.Int64()),
			}); err != nil {
				golog.Errorf("Failed to update case feed item: %s", err.Error())
			}

			if patient != nil {
				err := dataAPI.CompleteVisitOnTreatmentPlanGeneration(
					ev.TreatmentPlan.DoctorID.Int64(),
					ev.VisitID,
					ev.TreatmentPlan.ID.Int64(),
					api.DQItemStatusOngoing, &api.DoctorQueueItem{
						DoctorID:         ev.TreatmentPlan.DoctorID.Int64(),
						PatientID:        ev.TreatmentPlan.PatientID,
						ItemID:           ev.TreatmentPlan.ID.Int64(),
						EventType:        api.DQEventTypeTreatmentPlan,
						Status:           api.DQItemStatusTreated,
						Description:      fmt.Sprintf("%s completed treatment plan for %s %s", doctor.ShortDisplayName, patient.FirstName, patient.LastName),
						ShortDescription: fmt.Sprintf("Treatment plan by %s", doctor.ShortDisplayName),
						ActionURL:        app_url.ViewCompletedTreatmentPlanAction(ev.TreatmentPlan.PatientID, ev.TreatmentPlan.ID.Int64(), ev.TreatmentPlan.PatientCaseID.Int64()),
					})
				if err != nil {
					golog.Errorf("Unable to update the status of the patient visit in the doctor queue: " + err.Error())
				}
			}
		}

		// also notify the MA if part of the care team that a treatment plan was generated by the doctor

		if maID > 0 {
			ma, err := dataAPI.GetDoctorFromID(maID)
			if err != nil {
				golog.Errorf("Unable to get ma for patient case: %s", err)
				return err
			}

			if err := notificationManager.NotifyDoctor(
				api.MA_ROLE,
				ma.DoctorID.Int64(),
				ma.AccountID.Int64(), &notify.Message{
					ShortMessage: "A treatment plan was created for a patient.",
				}); err != nil {
				golog.Errorf("Unable to notify the ma of the treatment plan generation: %s", err)
			}

		}

		return nil
	})

	dispatcher.Subscribe(func(ev *patient_visit.PatientVisitMarkedUnsuitableEvent) error {

		patient, err := dataAPI.Patient(ev.PatientID, true)
		if err != nil {
			golog.Errorf("Unable to get patient info: %s", err.Error())
			return err
		}

		doctor, err := dataAPI.GetDoctorFromID(ev.DoctorID)
		if err != nil {
			golog.Errorf("Unable to get doctor from id: %s", err)
			routeFailure.Inc(1)
			return err
		}

		// mark the visit as complete once the doctor submits a diagnosis to indicate that the
		// patient was unsuitable for spruce
		if err := dataAPI.ReplaceItemInDoctorQueue(api.DoctorQueueItem{
			DoctorID:  ev.DoctorID,
			PatientID: ev.PatientID,
			ItemID:    ev.PatientVisitID,
			EventType: api.DQEventTypePatientVisit,
			Status:    api.DQItemStatusTriaged,
			Description: fmt.Sprintf("%s completed and triaged visit for %s %s",
				doctor.ShortDisplayName, patient.FirstName, patient.LastName),
			ShortDescription: fmt.Sprintf("Visit triaged by %s", doctor.ShortDisplayName),
			ActionURL:        app_url.ViewPatientVisitInfoAction(ev.PatientID, ev.PatientVisitID, ev.CaseID),
		}, api.DQItemStatusOngoing); err != nil {
			golog.Errorf("Unable to insert transmission error resolved into doctor queue: %s", err)
			routeFailure.Inc(1)
			return err
		}

		// assign the case to the MA
		assignments, err := dataAPI.GetActiveMembersOfCareTeamForCase(ev.CaseID, false)
		if err != nil {
			routeFailure.Inc(1)
			golog.Errorf("Unable to get active members of care team for case: %s", err)
			return err
		}

		var maID int64
		for _, assignment := range assignments {
			if assignment.ProviderRole == api.MA_ROLE {
				maID = assignment.ProviderID
				break
			}
		}

		ma, err := dataAPI.GetDoctorFromID(maID)
		if err != nil {
			golog.Errorf("Unable to get MA from id: %s", err)
			routeFailure.Inc(1)
			return err
		}

		message := &common.CaseMessage{
			CaseID:    ev.CaseID,
			PersonID:  doctor.PersonID,
			Body:      fmt.Sprintf(`Case was marked as unsuitable for spruce with following explanation from the doctor: "%s"`, ev.InternalReason),
			IsPrivate: true,
			EventText: fmt.Sprintf("assigned to %s", ma.LongDisplayName),
		}

		if _, err := dataAPI.CreateCaseMessage(message); err != nil {
			golog.Errorf("Unable to create private message to assign case to MA: %s", err)
			routeFailure.Inc(1)
			return err
		}

		// insert a pending item into the MA's queue
		if err := dataAPI.InsertItemIntoDoctorQueue(api.DoctorQueueItem{
			DoctorID:         ma.DoctorID.Int64(),
			PatientID:        ev.PatientID,
			ItemID:           ev.CaseID,
			EventType:        api.DQEventTypeCaseAssignment,
			Status:           api.DQItemStatusPending,
			Description:      fmt.Sprintf("%s %s's case assigned to %s", patient.FirstName, patient.LastName, ma.ShortDisplayName),
			ShortDescription: fmt.Sprintf("Reassigned by %s", doctor.ShortDisplayName),
			ActionURL:        app_url.ViewPatientMessagesAction(ev.PatientID, ev.CaseID),
		}); err != nil {
			golog.Errorf("Unable to insert case assignment item into doctor queue: %s", err)
			routeFailure.Inc(1)
			return err
		}

		// notify the ma of the case assignment
		if err := notificationManager.NotifyDoctor(
			api.MA_ROLE,
			ma.DoctorID.Int64(),
			ma.AccountID.Int64(), &notify.Message{
				ShortMessage: caseAssignmentMessage,
			}); err != nil {
			golog.Errorf("Unable to notify assigned provider of event %T: %s", ev, err)
			routeFailure.Inc(1)
			return err
		}

		routeSuccess.Inc(1)
		return nil
	})

	dispatcher.Subscribe(func(ev *app_worker.RxTransmissionErrorEvent) error {

		// Insert item into appropriate doctor queue to make them ever of an erx
		// that had issues being routed to pharmacy
		var eventTypeString string
		var actionURL *app_url.SpruceAction
		switch ev.EventType {
		case common.RefillRxType:
			eventTypeString = api.DQEventTypeRefillTransmissionError
			actionURL = app_url.ViewRefillRequestAction(ev.Patient.PatientID.Int64(), ev.ItemID)
		case common.UnlinkedDNTFTreatmentType:
			eventTypeString = api.DQEventTypeUnlinkedDNTFTransmissionError
			actionURL = app_url.ViewDNTFTransmissionErrorAction(ev.Patient.PatientID.Int64(), ev.ItemID)
		case common.ERxType:
			eventTypeString = api.DQEventTypeTransmissionError
			actionURL = app_url.ViewTransmissionErrorAction(ev.Patient.PatientID.Int64(), ev.ItemID)
		}

		if err := dataAPI.InsertItemIntoDoctorQueue(api.DoctorQueueItem{
			DoctorID:         ev.DoctorID,
			PatientID:        ev.Patient.PatientID.Int64(),
			ItemID:           ev.ItemID,
			Status:           api.STATUS_PENDING,
			EventType:        eventTypeString,
			Description:      fmt.Sprintf("Error sending prescription for %s %s", ev.Patient.FirstName, ev.Patient.LastName),
			ShortDescription: "Prescription error",
			ActionURL:        actionURL,
		}); err != nil {
			routeFailure.Inc(1)
			golog.Errorf("Unable to insert transmission error event into doctor queue: %s", err)
			return err
		}
		routeSuccess.Inc(1)

		doctor, err := dataAPI.GetDoctorFromID(ev.DoctorID)
		if err != nil {
			golog.Errorf("Unable to get doctor from id: %s", err)
			return err
		}

		if err := notificationManager.NotifyDoctor(
			api.DOCTOR_ROLE,
			doctor.DoctorID.Int64(),
			doctor.AccountID.Int64(),
			&notify.Message{
				ShortMessage: "There was an error routing prescriptions to a pharmacy on Spruce.",
			}); err != nil {
			golog.Errorf("Unable to notify doctor: %s", err)
			return err
		}

		return nil
	})

	dispatcher.Subscribe(func(ev *doctor.RxTransmissionErrorResolvedEvent) error {
		// Insert item into appropriate doctor queue to indicate resolution of transmission error
		var eventType string
		var actionURL *app_url.SpruceAction
		var description, shortDescription string
		switch ev.EventType {
		case common.ERxType:
			eventType = api.DQEventTypeTransmissionError
			description = fmt.Sprintf("%s resolved error for %s %s", ev.Doctor.ShortDisplayName, ev.Patient.FirstName, ev.Patient.LastName)
			shortDescription = fmt.Sprintf("Prescription error resolved by %s", ev.Doctor.ShortDisplayName)
			actionURL = app_url.ViewTransmissionErrorAction(ev.Patient.PatientID.Int64(), ev.ItemID)
		case common.RefillRxType:
			eventType = api.DQEventTypeRefillTransmissionError
			description = fmt.Sprintf("%s resolved refill request error for %s %s", ev.Doctor.ShortDisplayName, ev.Patient.FirstName, ev.Patient.LastName)
			shortDescription = fmt.Sprintf("Refill request error resolved by %s", ev.Doctor.ShortDisplayName)
			actionURL = app_url.ViewRefillRequestAction(ev.Patient.PatientID.Int64(), ev.ItemID)
		case common.UnlinkedDNTFTreatmentType:
			eventType = api.DQEventTypeUnlinkedDNTFTransmissionError
			description = fmt.Sprintf("%s resolved error for %s %s", ev.Doctor.ShortDisplayName, ev.Patient.FirstName, ev.Patient.LastName)
			shortDescription = fmt.Sprintf("Prescription error resolved by %s", ev.Doctor.ShortDisplayName)
			actionURL = app_url.ViewDNTFTransmissionErrorAction(ev.Patient.PatientID.Int64(), ev.ItemID)
		}

		if err := dataAPI.ReplaceItemInDoctorQueue(api.DoctorQueueItem{
			DoctorID:         ev.Doctor.DoctorID.Int64(),
			PatientID:        ev.Patient.PatientID.Int64(),
			ItemID:           ev.ItemID,
			EventType:        eventType,
			Status:           api.DQItemStatusTreated,
			Description:      description,
			ShortDescription: shortDescription,
			ActionURL:        actionURL,
		}, api.DQItemStatusPending); err != nil {
			golog.Errorf("Unable to insert transmission error resolved into doctor queue: %s", err)
			return err
		}
		return nil
	})

	dispatcher.Subscribe(func(ev *app_worker.RefillRequestCreatedEvent) error {
		// insert refill item into doctor queue as a refill request
		if err := dataAPI.InsertItemIntoDoctorQueue(api.DoctorQueueItem{
			DoctorID:         ev.DoctorID,
			PatientID:        ev.Patient.PatientID.Int64(),
			ItemID:           ev.RefillRequestID,
			EventType:        api.DQEventTypeRefillRequest,
			Status:           api.STATUS_PENDING,
			Description:      fmt.Sprintf("Refill request for %s %s", ev.Patient.FirstName, ev.Patient.LastName),
			ShortDescription: "Refill request",
			ActionURL:        app_url.ViewRefillRequestAction(ev.Patient.PatientID.Int64(), ev.RefillRequestID),
		}); err != nil {
			routeFailure.Inc(1)
			golog.Errorf("Unable to insert refill request item into doctor queue: %s", err)
			return err
		}
		routeSuccess.Inc(1)

		doctor, err := dataAPI.GetDoctorFromID(ev.DoctorID)
		if err != nil {
			golog.Errorf("Unable to get doctor from id: %s", err)
			return err
		}

		if err := notificationManager.NotifyDoctor(
			api.DOCTOR_ROLE,
			doctor.DoctorID.Int64(),
			doctor.AccountID.Int64(),
			&notify.Message{
				ShortMessage: "You have a new refill request from a Spruce patient.",
			}); err != nil {
			golog.Errorf("Unable to notify doctor: %s", err)
			return err
		}

		return nil
	})

	dispatcher.Subscribe(func(ev *doctor.RefillRequestResolvedEvent) error {

		var description, shortDescription string

		switch ev.Status {
		case api.DQItemStatusRefillApproved:
			description = fmt.Sprintf("%s approved refill request for %s %s",
				ev.Doctor.ShortDisplayName, ev.Patient.FirstName, ev.Patient.LastName)
			shortDescription = fmt.Sprintf("Refill request approved by %s", ev.Doctor.ShortDisplayName)
		case api.DQItemStatusRefillDenied:
			description = fmt.Sprintf("%s denied refill request for %s %s",
				ev.Doctor.ShortDisplayName, ev.Patient.FirstName, ev.Patient.LastName)
			shortDescription = fmt.Sprintf("Refill request denied by %s", ev.Doctor.ShortDisplayName)
		}

		// Move the queue item for the doctor from the ongoing to the completed state
		if err := dataAPI.ReplaceItemInDoctorQueue(api.DoctorQueueItem{
			DoctorID:         ev.Doctor.DoctorID.Int64(),
			PatientID:        ev.Patient.PatientID.Int64(),
			ItemID:           ev.RefillRequestID,
			EventType:        api.DQEventTypeRefillRequest,
			Status:           ev.Status,
			Description:      description,
			ShortDescription: shortDescription,
			ActionURL:        app_url.ViewRefillRequestAction(ev.Patient.PatientID.Int64(), ev.RefillRequestID),
		}, api.DQItemStatusPending); err != nil {
			golog.Errorf("Unable to insert refill request resolved error into doctor queue: %s", err)
			return err
		}
		return nil
	})

	dispatcher.Subscribe(func(ev *messages.PostEvent) error {
		assignments, err := dataAPI.GetActiveMembersOfCareTeamForCase(ev.Case.ID.Int64(), false)
		if err != nil {
			golog.Errorf("Unable to get doctors assignend to case: %s", err)
			return nil
		}

		var doctorID, maID int64
		for _, assignment := range assignments {
			switch assignment.Status {
			case api.STATUS_ACTIVE:
				if assignment.ProviderRole == api.DOCTOR_ROLE {
					doctorID = assignment.ProviderID
				} else if assignment.ProviderRole == api.MA_ROLE {
					maID = assignment.ProviderID
				}
			}
		}

		doctor, err := dataAPI.GetDoctorFromID(doctorID)
		if err != nil {
			golog.Errorf("Doctor lookup failed: %s", err.Error())
			return nil
		}

		patient, err := dataAPI.GetPatientFromID(ev.Case.PatientID.Int64())
		if err != nil {
			golog.Errorf("Patient lookup failed: %s", err.Error())
			return nil
		}

		var senderName string
		switch ev.Person.RoleType {
		case api.DOCTOR_ROLE, api.MA_ROLE:
			// If the person that sent the message is the primary doctor
			// then use the already fetched doctor. Otherwise, it's
			// likely the MA sent the message so we need to lookup them up.
			if ev.Person.RoleID == doctor.DoctorID.Int64() {
				senderName = doctor.LongDisplayName
			} else {
				dr, err := dataAPI.GetDoctorFromID(ev.Person.RoleID)
				if err != nil {
					golog.Errorf("Doctor lookup failed: %s", err.Error())
					return nil
				}
				senderName = dr.LongDisplayName
			}
		case api.PATIENT_ROLE:
			senderName = patient.FirstName + " " + patient.LastName
		}
		if err := dataAPI.UpdatePatientCaseFeedItem(&common.PatientCaseFeedItem{
			DoctorID:          doctor.DoctorID.Int64(),
			PatientID:         ev.Case.PatientID.Int64(),
			PatientFirstName:  patient.FirstName,
			PatientLastName:   patient.LastName,
			CaseID:            ev.Case.ID.Int64(),
			HealthConditionID: ev.Case.HealthConditionID.Int64(),
			LastEvent:         "Message by " + senderName,
			ActionURL:         *app_url.ViewCaseMessageAction(ev.Message.ID, ev.Case.ID.Int64()),
		}); err != nil {
			golog.Errorf("Failed to update case feed item: %s", err.Error())
		}

		// clear the item from the doctor's queue once they respond to a message
		if ev.Person.RoleType == api.DOCTOR_ROLE {
			if err := dataAPI.ReplaceItemInDoctorQueue(api.DoctorQueueItem{
				DoctorID:         ev.Person.RoleID,
				PatientID:        ev.Case.PatientID.Int64(),
				ItemID:           ev.Case.ID.Int64(),
				EventType:        api.DQEventTypeCaseMessage,
				Status:           api.DQItemStatusReplied,
				Description:      fmt.Sprintf("%s replied to %s %s", doctor.ShortDisplayName, patient.FirstName, patient.LastName),
				ShortDescription: fmt.Sprintf("Messaged by %s", doctor.ShortDisplayName),
				ActionURL:        app_url.ViewPatientMessagesAction(patient.PatientID.Int64(), ev.Case.ID.Int64()),
			}, api.DQItemStatusPending); err != nil {
				golog.Errorf("Unable to replace item in doctor queue with a replied item: %s", err)
				return err
			}

			return nil
		}

		// only act on event if the message goes from patient->doctor
		if ev.Person.RoleType != api.PATIENT_ROLE {
			return nil
		}

		// send the patient message to the MA, or to the doctor if the MA doesn't exist
		var providerToAssignToID int64
		var providerToAssignToRole string
		if doctorID == 0 && maID == 0 {
			// No doctor or ma assigned to patient
			return errors.New("No doctor or ma assigned to patient case")
		} else if maID > 0 {
			providerToAssignToID = maID
			providerToAssignToRole = api.MA_ROLE
		} else {
			providerToAssignToID = doctorID
			providerToAssignToRole = api.DOCTOR_ROLE
		}

		if err := dataAPI.InsertItemIntoDoctorQueue(api.DoctorQueueItem{
			DoctorID:         providerToAssignToID,
			PatientID:        ev.Case.PatientID.Int64(),
			ItemID:           ev.Message.CaseID,
			EventType:        api.DQEventTypeCaseMessage,
			Status:           api.DQItemStatusPending,
			Description:      fmt.Sprintf("Message from %s %s", patient.FirstName, patient.LastName),
			ShortDescription: "New message",
			ActionURL:        app_url.ViewPatientMessagesAction(patient.PatientID.Int64(), ev.Case.ID.Int64()),
		}); err != nil {
			routeFailure.Inc(1)
			golog.Errorf("Unable to insert conversation item into doctor queue: %s", err)
			return err
		}
		routeSuccess.Inc(1)

		// If we're sending to the doctor then we already fetched their info
		// otherwise it's the MA so lookup them up.
		if providerToAssignToID != doctor.DoctorID.Int64() {
			doctor, err = dataAPI.GetDoctorFromID(providerToAssignToID)
			if err != nil {
				return err
			}
		}

		if err := notificationManager.NotifyDoctor(
			providerToAssignToRole,
			doctor.DoctorID.Int64(),
			doctor.AccountID.Int64(),
			&notify.Message{
				ShortMessage: "You have a new message on Spruce.",
			}); err != nil {
			golog.Errorf("Unable to notify doctor: %s", err)
			return err
		}

		return nil
	})

	dispatcher.Subscribe(func(ev *messages.CaseAssignEvent) error {

		// identify the provider the case is being assigned to
		var assignedProvider *common.Doctor
		var assigneeProvider *common.Doctor
		var assignedProviderRole string
		if ev.Person.RoleType == api.DOCTOR_ROLE {
			assignedProvider = ev.MA
			assigneeProvider = ev.Doctor
			assignedProviderRole = api.MA_ROLE
		} else {
			assignedProvider = ev.Doctor
			assigneeProvider = ev.MA
			assignedProviderRole = api.DOCTOR_ROLE
		}

		patient, err := dataAPI.Patient(ev.Case.PatientID.Int64(), true)
		if err != nil {
			golog.Errorf("Unable to get patient info: %s", err.Error())
			return err
		}

		// create an item in the history tab for the provider assigning the case
		if err := dataAPI.ReplaceItemInDoctorQueue(api.DoctorQueueItem{
			DoctorID:  ev.Person.RoleID,
			PatientID: ev.Case.PatientID.Int64(),
			ItemID:    ev.Case.ID.Int64(),
			EventType: api.DQEventTypeCaseAssignment,
			Status:    api.DQItemStatusReplied,
			Description: fmt.Sprintf("%s assigned %s %s's case to %s", assigneeProvider.ShortDisplayName,
				patient.FirstName, patient.LastName, assignedProvider.ShortDisplayName),
			ShortDescription: fmt.Sprintf("Assigned to %s", assignedProvider.ShortDisplayName),
			ActionURL:        app_url.ViewPatientMessagesAction(patient.PatientID.Int64(), ev.Case.ID.Int64()),
		}, api.DQItemStatusPending); err != nil {
			golog.Errorf("Unable to insert case assignment item into doctor queue: %s", err)
			routeFailure.Inc(1)
			return err
		}

		if err := dataAPI.UpdatePatientCaseFeedItem(&common.PatientCaseFeedItem{
			DoctorID:  ev.Doctor.DoctorID.Int64(),
			PatientID: ev.Case.PatientID.Int64(),
			CaseID:    ev.Case.ID.Int64(),
			LastEvent: "Assigned to " + assignedProvider.LongDisplayName,
			ActionURL: *app_url.ViewCaseAction(ev.Case.ID.Int64()),
		}); err != nil {
			golog.Errorf("Failed to update case feed item: %s", err.Error())
		}

		// insert a pending item into the queue of the assigned provider
		if err := dataAPI.InsertItemIntoDoctorQueue(api.DoctorQueueItem{
			DoctorID:  assignedProvider.DoctorID.Int64(),
			PatientID: ev.Case.PatientID.Int64(),
			ItemID:    ev.Case.ID.Int64(),
			EventType: api.DQEventTypeCaseAssignment,
			Status:    api.DQItemStatusPending,
			Description: fmt.Sprintf("%s %s's case assigned to %s", patient.FirstName, patient.LastName,
				assignedProvider.ShortDisplayName),
			ShortDescription: fmt.Sprintf("Reassigned by %s", assigneeProvider.ShortDisplayName),
			ActionURL:        app_url.ViewPatientMessagesAction(patient.PatientID.Int64(), ev.Case.ID.Int64()),
		}); err != nil {
			golog.Errorf("Unable to insert case assignment item into doctor queue: %s", err)
			routeFailure.Inc(1)
			return err
		}

		// notify the assigned provider
		if err := notificationManager.NotifyDoctor(
			assignedProviderRole,
			assignedProvider.DoctorID.Int64(),
			assignedProvider.AccountID.Int64(),
			&notify.Message{
				ShortMessage: caseAssignmentMessage,
			}); err != nil {
			golog.Errorf("Unable to notify assigned provider of event %T: %s", ev, err)
			routeFailure.Inc(1)
			return err
		}

		routeSuccess.Inc(1)
		return nil
	})

	dispatcher.Subscribe(func(ev *app_event.AppEvent) error {
		// delete the item from the queue when the doctor marks the conversation
		// as being read
		if ev.Resource == "all_case_messages" && ev.Action == app_event.ViewedAction {
			switch ev.Role {
			case api.DOCTOR_ROLE, api.MA_ROLE:
			default:
				return nil
			}

			doctorID, err := dataAPI.GetDoctorIDFromAccountID(ev.AccountID)
			if err != nil {
				golog.Errorf("Unable to get doctor id from account id: %s", err)
				return err
			}

			if err := dataAPI.DeleteItemFromDoctorQueue(api.DoctorQueueItem{
				DoctorID:  doctorID,
				ItemID:    ev.ResourceID,
				EventType: api.DQEventTypeCaseMessage,
				Status:    api.DQItemStatusPending,
			}); err != nil {
				golog.Errorf("Unable to delete pending message item in doctor queue :%s", err)
			}

			if err := dataAPI.DeleteItemFromDoctorQueue(api.DoctorQueueItem{
				DoctorID:  doctorID,
				ItemID:    ev.ResourceID,
				EventType: api.DQEventTypeCaseAssignment,
				Status:    api.DQItemStatusPending,
			}); err != nil {
				golog.Errorf("Unable to delete pending assignment item in doctor queue :%s", err)
			}
		}

		return nil
	})
}
